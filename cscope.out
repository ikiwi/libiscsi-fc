cscope 15 $HOME/libiscsi-master               0001782325
	@aros/aros_compat.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<√tdb.h
>

25 
	~"¨os_com∑t.h
"

26 
	~<î∫o.h
>

27 
	~<bsdsockë/sockëba£ègs.h
>

29 #unde‡
pﬁl


31 
	$¨os_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

32 *
ho°
, 
size_t
 
ho°Àn
,

33 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
)

35 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

37 i‡(
ho°
) {

38 
	`¢¥ötf
(
ho°
, 
ho°Àn
, 
	`I√t_NtoA
(
sö
->
sö_addr
.
s_addr
));

42 
	}
}

44 
	$¨os_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

45 c⁄° 
addröfo
 *
höts
,

46 
addröfo
 **
ªs
)

48 
sockaddr_ö
 *
sö
;

50 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

51 
sö
->
sö_Àn
 = (
sockaddr_ö
);

52 
sö
->
sö_Ámûy
=
AF_INET
;

55 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

57 
sö
->
sö_p‹t
=0;

58 i‡(
£rvi˚
) {

59 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

62 *
ªs
 = 
	`mÆloc
((
addröfo
));

64 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

65 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

66 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

69 
	}
}

71 
	$¨os_‰ìaddröfo
(
addröfo
 *
ªs
)

73 
	`‰ì
(
ªs
->
ai_addr
);

74 
	`‰ì
(
ªs
);

75 
	}
}

77 
	$¨os_öë_±⁄
(
af
, *
§c
, *
d°
)

79 
sockaddr_ö
 
sö
;

81 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
§c
);

82 
	`mem˝y
(
d°
, &
sö
.
sö_addr
.
s_addr
, (sin.sin_addr.s_addr));

84 
	}
}

86 
Libøry
 * 
	gSockëBa£
 = 
NULL
;

88 
î∫o
;

89 
	gh_î∫o
 = 0;

92 
	$¨os_öô_sockë
()

94 i‡(!(
SockëBa£
 = 
	`O≥nLibøry
("bsdsocket.library", 4))) {

95 
	`¥ötf
("NoTCP/IP Stackávailable");

96 
	`exô
(10);

98 i‡(
	`SockëBa£Tags
(
	`SBTM_SETVAL
(
	`SBTC_ERRNOPTR
((
î∫o
))),

99 (
IPTR
)&
î∫o
,

100 
	`SBTM_SETVAL
(
SBTC_HERRNOLONGPTR
),

101 (
IPTR
)&
h_î∫o
, 
TAG_DONE
)) {

102 
	`¥ötf
("FailedÅo set ERRNO");

103 
	`exô
(10);

105 
	}
}

107 
	$¨os_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

109 
timevÆ
 
timeout
, *
t›å
;

110 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

111 
i
, 
maxfd
 = 0;

112 
rc
;

115 
	`FD_ZERO
(&
ifds
);

116 
	`FD_ZERO
(&
ofds
);

117 
	`FD_ZERO
(&
efds
);

118 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

120 
fds
[
i
].
ªvíts
 = 0;

121 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

123 
ù
 = &
ifds
;

124 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

126 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

128 
›
 = &
ofds
;

129 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

131 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

132 i‡(
fds
[
i
].
fd
 > 
maxfd
) {

133 
maxfd
 = 
fds
[
i
].
fd
;

138 if(
timo
 < 0)

140 
t›å
 = 0;

144 
t›å
 = &
timeout
;

145 
timeout
.
tv_£c
 = 
timo
 / 1000;

146 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

149 
rc
 = 
	`WaôSñe˘
(
maxfd
 + 1, 
ù
, 
›
, &
efds
, 
t›å
, 
NULL
);

151 if(
rc
 <= 0)

152  
rc
;

154 if(
rc
 > 0)

156 
i
 = 0; i < 
nfds
; ++i)

158 
fd
 = 
fds
[
i
].fd;

159 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

160 
fds
[
i
].
ªvíts
 |
POLLIN
;

161 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

162 
fds
[
i
].
ªvíts
 |
POLLOUT
;

163 if(
	`FD_ISSET
(
fd
, &
efds
))

164 
fds
[
i
].
ªvíts
 |
POLLHUP
;

167  
rc
;

168 
	}
}

170 
ssize_t
 
	$¨os_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

172  
	`ªad
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

173 
	}
}

175 
ssize_t
 
	$¨os_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

177  
	`wrôe
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

178 
	}
}

	@aros/iscsi-ls.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 #ifde‡
AROS


30 
	~"¨os/¨os_com∑t.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°döt.h
>

36 
	~<°rög.h
>

37 
	~"iscsi.h
"

38 
	~"scsi-lowÀvñ.h
"

40 #i‚de‡
disˇrd_c⁄°


41 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

44 
	gshowluns
;

45 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

47 
	s˛õ¡_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 
	mlun
;

51 
	mty≥
;

52 c⁄° *
	mu£∫ame
;

53 c⁄° *
	m∑ssw‹d
;

57 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

59 
pﬁlfd
 
pfd
;

61 
°©e
->
föished
 == 0) {

62 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

63 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

65 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

66 
	`Ârötf
(
°dîr
, "Poll failed");

67 
	`exô
(10);

69 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

70 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
	`exô
(10);

74 
	}
}

76 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

78 
scsi_èsk
 *
èsk
;

79 
scsi_öquúy_°™d¨d
 *
öq
;

80 
ty≥
, 
no_medü
;

81 
size
 = 0;

82 
size_pf
 = 0;

83 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

86 
tur_åy_agaö
:

87 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

88 
	`Ârötf
(
°dîr
, "testunitready failed\n");

89 
	`exô
(10);

91 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

92 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
tur_åy_agaö
;

98 
no_medü
 = 0;

99 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


100 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


101 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

103 
no_medü
 = 1;

104 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
	`exô
(10);

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

114 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

115 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
	`exô
(10);

118 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

119 i‡(
öq
 =
NULL
) {

120 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

121 
	`exô
(10);

123 
ty≥
 = 
öq
->
devi˚_ty≥
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

129 
scsi_ªadˇ∑côy10
 *
rc10
;

131 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

132 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

134 
	`exô
(10);

137 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

138 i‡(
rc10
 =
NULL
) {

139 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

140 
	`exô
(10);

143 
size
 = 
rc10
->
block_size
;

144 
size
 *
rc10
->
lba
;

146 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

147 
size
 /= 1024;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

155 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

156 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

158 i‡(
no_medü
) {

159 
	`¥ötf
(" (No mediaÜoaded)");

161 
	`¥ötf
("\n");

162 
	}
}

164 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

166 
iscsi_c⁄ãxt
 *
iscsi
;

167 
scsi_èsk
 *
èsk
;

168 
scsi_ªp‹éuns_li°
 *
li°
;

169 
fuŒ_ªp‹t_size
;

170 
i
;

172 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

173 i‡(
iscsi
 =
NULL
) {

174 
	`¥ötf
("FailedÅo create context\n");

175 
	`exô
(10);

177 i‡(
˛¡
->
u£∫ame
 !
NULL
) {

178 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
) != 0) {

179 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

180 
	`exô
(10);

183 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

184 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

185 
	`exô
(10);

187 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

188 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

189 i‡(
	`iscsi_c⁄√˘_sync
(
iscsi
, 
p‹èl
) != 0) {

190 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

191 
	`exô
(10);

194 i‡(
	`iscsi_logö_sync
(
iscsi
) != 0) {

195 
	`Ârötf
(
°dîr
, "logö faûed :%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
	`exô
(10);

203 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

204 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

205 
	`exô
(10);

207 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

208 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

212 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

213 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

214 
	`exô
(10);

218 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

219 i‡(
li°
 =
NULL
) {

220 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

221 
	`exô
(10);

223 
i
=0; i < ()
li°
->
num
; i++) {

224 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

227 
	`scsi_‰ì_scsi_èsk
(
èsk
);

228 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

229 
	}
}

234 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

236 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

238 i‡(
°©us
 != 0) {

239 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

240 
	`exô
(10);

243 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

244 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

245 
	`exô
(10);

248 
°©e
->
föished
 = 1;

249 
	}
}

251 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

253 
iscsi_discovîy_addªss
 *
addr
;

255 i‡(
°©us
 != 0) {

256 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

257 
	`exô
(10);

260 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

261 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

262 i‡(
showluns
 != 0) {

263 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

267 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

268 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

269 
	`exô
(10);

271 
	}
}

274 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

276 i‡(
°©us
 != 0) {

277 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

278 
	`exô
(10);

281 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

282 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

283 
	`exô
(10);

285 
	}
}

287 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

289 i‡(
°©us
 != 0) {

290 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

291 
	`exô
(10);

294 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

295 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

296 
	`exô
(10);

298 
	}
}

300 
	$¥öt_ußge
()

302 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

304 
	}
}

306 
	$¥öt_hñp
()

308 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

309 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

310 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

311 
	`Ârötf
(
°dîr
, "\n");

312 
	`Ârötf
(
°dîr
, "Help options:\n");

313 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

314 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

315 
	`Ârötf
(
°dîr
, "\n");

316 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

317 
	`Ârötf
(
°dîr
, "\n");

318 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

319 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

320 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

321 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

322 
	}
}

324 
	$maö
(
¨gc
, *
¨gv
[])

326 
iscsi_c⁄ãxt
 *
iscsi
;

327 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

328 
˛õ¡_°©e
 
°©e
;

329 c⁄° *
uæ
 = 
NULL
;

330 
c
;

331 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

333 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?udi:s")) != -1) {

334 
c
) {

337 
show_hñp
 = 1;

340 
show_ußge
 = 1;

343 
debug
 = 1;

346 
öôüt‹
 = 
›èrg
;

349 
showluns
 = 1;

352 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

353 
	`¥öt_hñp
();

354 
	`exô
(0);

358 i‡(
show_hñp
 != 0) {

359 
	`¥öt_hñp
();

360 
	`exô
(0);

363 i‡(
show_ußge
 != 0) {

364 
	`¥öt_ußge
();

365 
	`exô
(0);

368 i‡(
›töd
 !
¨gc
 -1) {

369 
	`¥öt_ußge
();

370 
	`exô
(0);

373 
	`mem£t
(&
°©e
, 0, (state));

375 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

376 i‡(
uæ
 =
NULL
) {

377 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

378 
	`¥öt_ußge
();

379 
	`exô
(10);

382 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

383 i‡(
iscsi
 =
NULL
) {

384 
	`¥ötf
("FailedÅo create context\n");

385 
	`exô
(10);

388 i‡(
debug
 > 0) {

389 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

390 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

393 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

395 i‡(
uæ
) {

396 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

399 i‡(
iscsi_uæ
 =
NULL
) {

400 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

401 
	`iscsi_gë_îr‹
(
iscsi
));

402 
	`exô
(10);

405 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

407 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

408 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

409 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

410 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

411 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

412 
	`exô
(10);

415 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

416 
	`Ârötf
(
°dîr
, "iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

417 
	`exô
(10);

420 
	`evít_lo›
(
iscsi
, &
°©e
);

422 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

423 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

425 
	}
}

	@config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_INTTYPES_H
 1

	)

26 
	#HAVE_MEMORY_H
 1

	)

29 
	#HAVE_POLL_H
 1

	)

32 
	#HAVE_SOCKADDR_IN6
 1

	)

35 
	#HAVE_SOCK_SIN_LEN
 1

	)

38 
	#HAVE_STDINT_H
 1

	)

41 
	#HAVE_STDLIB_H
 1

	)

44 
	#HAVE_STRINGS_H
 1

	)

47 
	#HAVE_STRING_H
 1

	)

50 
	#HAVE_SYS_STAT_H
 1

	)

53 
	#HAVE_SYS_TYPES_H
 1

	)

56 
	#HAVE_UNISTD_H
 1

	)

60 
	#LT_OBJDIR
 ".libs/"

	)

63 
	#NEED_SYS_FILIO_H
 1

	)

66 
	#PACKAGE
 "libiscsi"

	)

69 
	#PACKAGE_BUGREPORT
 ""

	)

72 
	#PACKAGE_NAME
 "libiscsi"

	)

75 
	#PACKAGE_STRING
 "libiscsò1.10.0"

	)

78 
	#PACKAGE_TARNAME
 "libiscsi"

	)

81 
	#PACKAGE_URL
 ""

	)

84 
	#PACKAGE_VERSION
 "1.10.0"

	)

87 
	#STDC_HEADERS
 1

	)

90 
	#VERSION
 "1.10.0"

	)

	@examples/iscsi-dd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°döt.h
>

21 
	~<°rög.h
>

22 
	~<pﬁl.h
>

23 
	~<gë›t.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

27 c⁄° *
	göôüt‹
 = "iqn.2010-11.ronnie:iscsi-inq";

28 
	gmax_ö_Êight
 = 50;

29 
	gblocks_≥r_io
 = 200;

31 
	s˛õ¡
 {

32 
	mföished
;

33 
	mö_Êight
;

35 
iscsi_c⁄ãxt
 *
	m§c_iscsi
;

36 
	m§c_lun
;

37 
	m§c_blocksize
;

38 
uöt64_t
 
	m§c_num_blocks
;

39 
uöt64_t
 
	mpos
;

41 
iscsi_c⁄ãxt
 *
	md°_iscsi
;

42 
	md°_lun
;

43 
	md°_blocksize
;

44 
uöt64_t
 
	md°_num_blocks
;

48 
fûl_ªad_queue
(
˛õ¡
 *client);

50 
	swrôe_èsk
 {

51 
scsi_èsk
 *
	mπ
;

52 
˛õ¡
 *
	m˛õ¡
;

55 
	$wrôe10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

57 
wrôe_èsk
 *
wt
 = (wrôe_èsk *)
¥iv©e_d©a
;

58 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

59 
˛õ¡
 *˛õ¡ = 
wt
->client;

61 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

62 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`exô
(10);

66 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
	`exô
(10);

72 
˛õ¡
->
ö_Êight
--;

73 
	`fûl_ªad_queue
(
˛õ¡
);

75 i‡((
˛õ¡
->
ö_Êight
 =0Ë&& (˛õ¡->
pos
 =˛õ¡->
§c_num_blocks
)) {

76 
˛õ¡
->
föished
 = 1;

78 
	`scsi_‰ì_scsi_èsk
(
wt
->
π
);

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
	`‰ì
(
wt
);

81 
	}
}

83 
	$ªad10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

85 
˛õ¡
 *˛õ¡ = (˛õ¡ *)
¥iv©e_d©a
;

86 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

87 
wrôe_èsk
 *
wt
;

88 
scsi_ªad10_cdb
 *
ªad10_cdb
;

90 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

91 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

92 
	`exô
(10);

95 
wt
 = 
	`mÆloc
((
wrôe_èsk
));

96 
wt
->
π
 = 
èsk
;

97 
wt
->
˛õ¡
 = client;

99 
ªad10_cdb
 = 
	`scsi_cdb_unm¨shÆl
(
èsk
, 
SCSI_OPCODE_READ10
);

100 i‡(
ªad10_cdb
 =
NULL
) {

101 
	`¥ötf
("FailedÅo unmarshall READ10 CDB.\n");

102 
	`exô
(10);

104 i‡(
	`iscsi_wrôe10_èsk
(
˛õ¡
->
d°_iscsi
,

105 
˛õ¡
->
d°_lun
,

106 
ªad10_cdb
->
lba
,

107 
èsk
->
d©aö
.
d©a
,

108 
èsk
->
d©aö
.
size
,

109 
˛õ¡
->
d°_blocksize
,

111 
wrôe10_cb
, 
wt
Ë=
NULL
) {

112 
	`¥ötf
("failedÅo sendÑead10 command\n");

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`exô
(10);

116 
	}
}

119 
	$fûl_ªad_queue
(
˛õ¡
 *client)

121 
num_blocks
;

123 
˛õ¡
->
ö_Êight
 < 
max_ö_Êight
 && clõ¡->
pos
 < clõ¡->
§c_num_blocks
) {

124 
˛õ¡
->
ö_Êight
++;

126 
num_blocks
 = 
˛õ¡
->
§c_num_blocks
 - clõ¡->
pos
;

127 i‡(
num_blocks
 > 
blocks_≥r_io
) {

128 
num_blocks
 = 
blocks_≥r_io
;

131 i‡(
	`iscsi_ªad10_èsk
(
˛õ¡
->
§c_iscsi
,

132 
˛õ¡
->
§c_lun
, clõ¡->
pos
,

133 
num_blocks
 * 
˛õ¡
->
§c_blocksize
,

134 
˛õ¡
->
§c_blocksize
, 0, 0, 0, 0, 0,

135 
ªad10_cb
, 
˛õ¡
Ë=
NULL
) {

136 
	`¥ötf
("failedÅo sendÑead10 command\n");

137 
	`exô
(10);

139 
˛õ¡
->
pos
 +
num_blocks
;

141 
	}
}

143 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

145 *
§c_uæ
 = 
NULL
;

146 *
d°_uæ
 = 
NULL
;

147 
iscsi_uæ
 *iscsi_url;

148 
scsi_èsk
 *
èsk
;

149 
scsi_ªadˇ∑côy10
 *
rc10
;

150 
c
;

151 
pﬁlfd
 
pfd
[2];

152 
˛õ¡
 client;

154 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

155 {"d°", 
ªquúed_¨gumít
, 
NULL
, 'd'},

156 {"§c", 
ªquúed_¨gumít
, 
NULL
, 's'},

157 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

160 
›ti⁄_ödex
;

162 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:s:i:", 
l⁄g_›ti⁄s
,

163 &
›ti⁄_ödex
)) != -1) {

164 
c
) {

166 
d°
 = 
›èrg
;

169 
§c
 = 
›èrg
;

172 
öôüt‹
 = 
›èrg
;

175 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

176 
	`¥öt_hñp
();

177 
	`exô
(0);

182 i‡(
§c_uæ
 =
NULL
) {

183 
	`Ârötf
(
°dîr
, "You must specify source url\n");

184 
	`Ârötf
(
°dîr
, " --src iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

185 
	`exô
(10);

187 i‡(
d°_uæ
 =
NULL
) {

188 
	`Ârötf
(
°dîr
, "You must specify destination url\n");

189 
	`Ârötf
(
°dîr
, " --dst iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

190 
	`exô
(10);

194 
	`mem£t
(&
˛õ¡
, 0, (client));

197 
˛õ¡
.
§c_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

198 i‡(
˛õ¡
.
§c_iscsi
 =
NULL
) {

199 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

200 
	`exô
(10);

202 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
§c_iscsi
, 
§c_uæ
);

203 i‡(
iscsi_uæ
 =
NULL
) {

204 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

205 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

206 
	`exô
(10);

208 
	`iscsi_£t_èrgë«me
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
èrgë
);

209 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
§c_iscsi
, 
ISCSI_SESSION_NORMAL
);

210 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
§c_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

211 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

212 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

213 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

214 
	`exô
(10);

217 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

218 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

219 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

220 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

221 
	`exô
(10);

223 
˛õ¡
.
§c_lun
 = 
iscsi_uæ
->
lun
;

224 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

226 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
˛õ¡
.
§c_iscsi
, clõ¡.
§c_lun
, 0, 0);

227 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

228 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

229 
	`exô
(10);

231 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

232 i‡(
rc10
 =
NULL
) {

233 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

234 
	`exô
(10);

236 
˛õ¡
.
§c_blocksize
 = 
rc10
->
block_size
;

237 
˛õ¡
.
§c_num_blocks
 = 
rc10
->
lba
;

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

244 
˛õ¡
.
d°_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

245 i‡(
˛õ¡
.
d°_iscsi
 =
NULL
) {

246 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

247 
	`exô
(10);

249 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
d°_iscsi
, 
d°_uæ
);

250 i‡(
iscsi_uæ
 =
NULL
) {

251 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

252 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

253 
	`exô
(10);

255 
	`iscsi_£t_èrgë«me
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
èrgë
);

256 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
d°_iscsi
, 
ISCSI_SESSION_NORMAL
);

257 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
d°_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

258 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

259 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

260 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

261 
	`exô
(10);

264 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

265 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

266 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

267 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

268 
	`exô
(10);

270 
˛õ¡
.
d°_lun
 = 
iscsi_uæ
->
lun
;

271 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

273 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
˛õ¡
.
d°_iscsi
, clõ¡.
d°_lun
, 0, 0);

274 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

275 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

276 
	`exô
(10);

278 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

279 i‡(
rc10
 =
NULL
) {

280 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

281 
	`exô
(10);

283 
˛õ¡
.
d°_blocksize
 = 
rc10
->
block_size
;

284 
˛õ¡
.
d°_num_blocks
 = 
rc10
->
lba
;

285 
	`scsi_‰ì_scsi_èsk
(
èsk
);

287 
	`fûl_ªad_queue
(&
˛õ¡
);

289 
˛õ¡
.
föished
 == 0) {

290 
pfd
[0].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
§c_iscsi
);

291 
pfd
[0].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
§c_iscsi
);

292 
pfd
[1].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
d°_iscsi
);

293 
pfd
[1].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
d°_iscsi
);

295 i‡(
	`pﬁl
(&
pfd
[0], 2, -1) < 0) {

296 
	`¥ötf
("Poll failed");

297 
	`exô
(10);

299 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
§c_iscsi
, 
pfd
[0].
ªvíts
) < 0) {

300 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

303 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
d°_iscsi
, 
pfd
[1].
ªvíts
) < 0) {

304 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

309 
	`iscsi_logout_sync
(
˛õ¡
.
§c_iscsi
);

310 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

311 
	`iscsi_logout_sync
(
˛õ¡
.
d°_iscsi
);

312 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

315 
	}
}

	@examples/iscsiclient.c

35 
	#TARGET
 "127.0.0.1:3260"

	)

37 #i‡
deföed
(
WIN32
)

38 
	~<wösock2.h
>

39 
	~"wö32/wö32_com∑t.h
"

40 #¥agm®
commít
(
lib
, "ws2_32.lib")

41 
WSADATA
 
	gwßD©a
;

43 
	~<pﬁl.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°döt.h
>

49 
	~<°rög.h
>

50 
	~"iscsi.h
"

51 
	~"scsi-lowÀvñ.h
"

53 
	s˛õ¡_°©e
 {

54 
	mföished
;

55 c⁄° *
	mmesßge
;

56 
	mhas_discovîed_èrgë
;

57 *
	mèrgë_«me
;

58 *
	mèrgë_addªss
;

59 
	mlun
;

60 
	mblock_size
;

63 
	gsmÆl_buf„r
[512];

65 
	$tm_©_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
)

67 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

69 
	`¥ötf
("tmát cb !\n");

70 
	`¥ötf
("ª•⁄£ : %d\n", *((
uöt32_t
 *)
comm™d_d©a
));

72 
˛¡
->
föished
 = 1;

73 
	}
}

76 
	$syncˇche10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
 _U_)

78 
	`¥ötf
("SYNCCACHE10 sètus:%d\n", 
°©us
);

79 
	}
}

81 
	$n›_out_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

83 
iscsi_d©a
 *
d©a
 = 
comm™d_d©a
;

84 
scsi_èsk
 *
èsk
;

86 
	`¥ötf
("NOP-IN sètus:%d\n", 
°©us
);

87 i‡(
d©a
->
size
 > 0) {

88 
	`¥ötf
("NOP-IN d©a:%s\n", 
d©a
->data);

90 
	`¥ötf
("Send SYNCHRONIZECACHE10\n");

91 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 2, 0, 0, 0, 0, 
syncˇche10_cb
, 
¥iv©e_d©a
);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("failedÅo send sync cache10\n");

94 
	`exô
(10);

96 
	`¥ötf
("sendÅask managementÅoÅryÅoábortÅhe sync10Åask\n");

97 i‡(
	`iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi
, 
èsk
, 
tm_©_cb
, 
¥iv©e_d©a
) != 0) {

98 
	`¥ötf
("failedÅo sendÅask managementÅoábortÅhe sync10Åask\n");

99 
	`exô
(10);

101 
	}
}

104 
	$wrôe10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

106 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

108 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

109 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
	`exô
(10);

113 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`exô
(10);

119 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
	`exô
(10);

122 
	}
}

124 
	$wrôe10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

126 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

127 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

128 
i
;

129 
wb
[512];

130 
scsi_iovec
 
iov
[3];

132 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

133 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`exô
(10);

137 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
	`exô
(10);

143 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

146 
	`¥ötf
("writeÅhe block usingán iovector\n");

147 
i
 = 0;i < 512; i++) {

148 
wb
[
i
] = (511 - i) & 0xff;

150 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
NULL
, 512, 512,

152 
wrôe10_1_cb
, 
¥iv©e_d©a
);

153 i‡(
èsk
 =
NULL
) {

154 
	`¥ötf
("failedÅo send write10 command\n");

155 
	`exô
(10);

159 
iov
[0].
iov_ba£
 = &
wb
[0];

160 
iov
[0].
iov_Àn
 = 4;

161 
iov
[1].
iov_ba£
 = &
wb
[4];

162 
iov
[1].
iov_Àn
 = 11;

163 
iov
[2].
iov_ba£
 = &
wb
[15];

164 
iov
[2].
iov_Àn
 = 512 - 15;

165 
	`scsi_èsk_£t_iov_out
(
èsk
, &
iov
[0], 3);

166 
	}
}

168 
	$ªad10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

170 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

171 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

172 
i
;

173 
wb
[512];

175 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

176 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`exô
(10);

181 
	`¥ötf
("READ10 using scsi_task_set_iov_in() successful. Block content:\n");

182 
i
=0;i<512;i++) {

183 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

184 i‡(
i
%16==15)

185 
	`¥ötf
("\n");

186 i‡(
i
==69)

189 
	`¥ötf
("...\n");

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
	`¥ötf
("Finished, wontÅryÅo write data sinceÅhat willÜikely destroy your LUN :-(\n");

194 
	`¥ötf
("Send NOP-OUT\n");

195 i‡(
	`iscsi_n›_out_async
(
iscsi
, 
n›_out_cb
, (*)"Pög!", 6, 
¥iv©e_d©a
) != 0) {

196 
	`¥ötf
("failedÅo sendÇop-out\n");

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
	`exô
(10);

201 
	`¥ötf
("writeÅhe blockÇormally\n");

202 
i
 = 0;i < 512; i++) {

203 
wb
[
i
] = i & 0xff;

205 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
wb
, 512, 512,

207 
wrôe10_cb
, 
¥iv©e_d©a
);

208 i‡(
èsk
 =
NULL
) {

209 
	`¥ötf
("failedÅo send write10 command\n");

210 
	`exô
(10);

213 
	}
}

215 
	$ªad10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

217 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

218 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

219 
i
;

220 
scsi_iovec
 
iov
[3];

222 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

223 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
	`exô
(10);

228 
	`¥ötf
("READ10 using scsi_task_add_data_in_buffer() successful. Block content:\n");

229 
i
=0;i<512;i++) {

230 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

231 i‡(
i
%16==15)

232 
	`¥ötf
("\n");

233 i‡(
i
==69)

236 
	`¥ötf
("...\n");

237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
	`mem£t
(&
smÆl_buf„r
[0], 0, 512);

241 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_1_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

242 
	`¥ötf
("failedÅo sendÑead10 command\n");

243 
	`exô
(10);

247 
iov
[0].
iov_ba£
 = &
smÆl_buf„r
[0];

248 
iov
[0].
iov_Àn
 = 7;

249 
iov
[1].
iov_ba£
 = &
smÆl_buf„r
[7];

250 
iov
[1].
iov_Àn
 = 8;

251 
iov
[2].
iov_ba£
 = &
smÆl_buf„r
[15];

252 
iov
[2].
iov_Àn
 = 512 - 15;

253 
	`scsi_èsk_£t_iov_ö
(
èsk
, &
iov
[0], 3);

254 
	}
}

256 
	$ªad6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

258 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

259 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

260 
i
;

262 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

263 
	`¥ötf
("Ród6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

264 
	`scsi_‰ì_scsi_èsk
(
èsk
);

265 
	`exô
(10);

268 
	`¥ötf
("READ6 successful. Block content:\n");

269 
i
=0;i<
èsk
->
d©aö
.
size
;i++) {

270 
	`¥ötf
("%02x ", 
èsk
->
d©aö
.
d©a
[
i
]);

271 i‡(
i
%16==15)

272 
	`¥ötf
("\n");

273 i‡(
i
==69)

276 
	`¥ötf
("...\n");

278 
	`scsi_‰ì_scsi_èsk
(
èsk
);

280 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

281 
	`¥ötf
("failedÅo sendÑead10 command\n");

282 
	`exô
(10);

289 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 7, &
smÆl_buf„r
[0]);

290 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 8, &
smÆl_buf„r
[7]);

291 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 512-15, &
smÆl_buf„r
[15]);

292 
	}
}

294 
	$ªadˇ∑côy10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

296 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

297 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

298 
scsi_ªadˇ∑côy10
 *
rc10
;

299 
fuŒ_size
;

301 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

302 
	`¥ötf
("Ródˇ∑côy10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

303 
	`scsi_‰ì_scsi_èsk
(
èsk
);

304 
	`exô
(10);

307 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

308 i‡(
fuŒ_size
 < 
èsk
->
d©aö
.
size
) {

309 
	`¥ötf
("notÉnough data for full sizeÑeadcapacity10\n");

310 
	`scsi_‰ì_scsi_èsk
(
èsk
);

311 
	`exô
(10);

314 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

315 i‡(
rc10
 =
NULL
) {

316 
	`¥ötf
("failedÅo unmarshallÑeadcapacity10 data\n");

317 
	`scsi_‰ì_scsi_èsk
(
èsk
);

318 
	`exô
(10);

320 
˛¡
->
block_size
 = 
rc10
->block_size;

321 
	`¥ötf
("READCAPACITY10 suc˚ssful. Size:%d block† blocksize:%d. Ród fú° block\n", 
rc10
->
lba
,Ñc10->
block_size
);

323 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 
ªad6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

324 
	`¥ötf
("failedÅo sendÑead6 command\n");

325 
	`scsi_‰ì_scsi_èsk
(
èsk
);

326 
	`exô
(10);

328 
	`scsi_‰ì_scsi_èsk
(
èsk
);

329 
	}
}

331 
	$mode£n£6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

333 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

334 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

335 
scsi_mode_£n£
 *
ms
;

336 
fuŒ_size
;

338 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

339 
	`¥ötf
("Mode£n£6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

340 
	`exô
(10);

342 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

343 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

344 
	`¥ötf
("didÇot getÉnough data for mode sense, sening modesenseágainásking for bigger buffer\n");

345 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 
fuŒ_size
, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

346 
	`¥ötf
("failedÅo send modesense6 command\n");

347 
	`scsi_‰ì_scsi_èsk
(
èsk
);

348 
	`exô
(10);

350 
	`scsi_‰ì_scsi_èsk
(
èsk
);

355 
	`¥ötf
("MODESENSE6 successful.\n");

356 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

357 i‡(
ms
 =
NULL
) {

358 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

359 
	`scsi_‰ì_scsi_èsk
(
èsk
);

360 
	`exô
(10);

363 
	`¥ötf
("Send READCAPACITY10\n");

364 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 
ªadˇ∑côy10_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

365 
	`¥ötf
("failedÅo sendÑeadcapacity command\n");

366 
	`scsi_‰ì_scsi_èsk
(
èsk
);

367 
	`exô
(10);

369 
	`scsi_‰ì_scsi_èsk
(
èsk
);

370 
	}
}

372 
	$öquúy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

374 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

375 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

376 
scsi_öquúy_°™d¨d
 *
öq
;

378 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

379 
	`¥ötf
("Inquúy faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

380 
	`scsi_‰ì_scsi_èsk
(
èsk
);

381 
	`exô
(10);

384 
	`¥ötf
("INQUIRY successful for standard data.\n");

385 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

386 i‡(
öq
 =
NULL
) {

387 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

388 
	`scsi_‰ì_scsi_èsk
(
èsk
);

389 
	`exô
(10);

392 
	`¥ötf
("Devi˚ Ty≥ i†%d. Víd‹Id:%†Produ˘Id:%s\n", 
öq
->
devi˚_ty≥
, inq->
víd‹_idítifiˇti⁄
, inq->
¥odu˘_idítifiˇti⁄
);

393 
	`¥ötf
("Send MODESENSE6\n");

394 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 4, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

395 
	`¥ötf
("failedÅo send modesense6 command\n");

396 
	`scsi_‰ì_scsi_èsk
(
èsk
);

397 
	`exô
(10);

399 
	`scsi_‰ì_scsi_èsk
(
èsk
);

400 
	}
}

402 
	$ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

404 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

405 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

407 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

408 
	`¥ötf
("Fú°Åe°unôªady faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

409 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

410 
	`¥ötf
("target device just came online,Åryágain\n");

412 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

413 
	`¥ötf
("failedÅo sendÅestunitready command\n");

414 
	`scsi_‰ì_scsi_èsk
(
èsk
);

415 
	`exô
(10);

418 
	`scsi_‰ì_scsi_èsk
(
èsk
);

422 
	`¥ötf
("TESTUNITREADY suc˚ssful, dÿ™ inquúy o¿lun:%d\n", 
˛¡
->
lun
);

423 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 64, 
öquúy_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

424 
	`¥ötf
("ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

425 
	`scsi_‰ì_scsi_èsk
(
èsk
);

426 
	`exô
(10);

428 
	`scsi_‰ì_scsi_èsk
(
èsk
);

429 
	}
}

432 
	$ªp‹éuns_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

434 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

435 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

436 
scsi_ªp‹éuns_li°
 *
li°
;

437 
fuŒ_ªp‹t_size
;

438 
i
;

440 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

441 
	`¥ötf
("Rï‹éun†Áûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

442 
	`scsi_‰ì_scsi_èsk
(
èsk
);

446 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

448 
	`¥ötf
("REPORTLUNS sètus:%d d©®size:%d, fuŒÑï‹t†lun†d©®size:%d\n", 
°©us
, 
èsk
->
d©aö
.
size
, 
fuŒ_ªp‹t_size
);

449 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

450 
	`¥ötf
("We didÇot getállÅhe data weÇeed inÑeportluns,áskágain\n");

451 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 
fuŒ_ªp‹t_size
, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

452 
	`¥ötf
("failedÅo sendÑeportluns command\n");

453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`exô
(10);

456 
	`scsi_‰ì_scsi_èsk
(
èsk
);

461 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

462 i‡(
li°
 =
NULL
) {

463 
	`¥ötf
("failedÅo unmarshallÑeportluns datain blob\n");

464 
	`scsi_‰ì_scsi_èsk
(
èsk
);

465 
	`exô
(10);

467 
i
=0; i < ()
li°
->
num
; i++) {

468 
	`¥ötf
("LUN:%d found\n", 
li°
->
luns
[
i
]);

469 
˛¡
->
lun
 = 
li°
->
luns
[
i
];

472 
	`¥ötf
("Wû»u£ LUN:%d\n", 
˛¡
->
lun
);

473 
	`¥ötf
("SídÅe°unôªadyÅÿlu¿%d\n", 
˛¡
->
lun
);

474 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

475 
	`¥ötf
("ÁûedÅÿ£ndÅe°unôªady comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

477 
	`exô
(10);

479 
	`scsi_‰ì_scsi_èsk
(
èsk
);

480 
	}
}

483 
	$n‹mÆlogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

485 i‡(
°©us
 != 0) {

486 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

487 
	`exô
(10);

490 
	`¥ötf
("Logged inÇormal session, sendÑeportluns\n");

491 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 16, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

492 
	`¥ötf
("ÁûedÅÿ£ndÑï‹éun†comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

493 
	`exô
(10);

495 
	}
}

498 
	$n‹mÆc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

500 
	`¥ötf
("ConnectedÅo iscsi socket\n");

502 i‡(
°©us
 != 0) {

503 
	`¥ötf
("n‹mÆc⁄√˘_cb: c⁄√˘i⁄ faûed sètus:%d\n", 
°©us
);

504 
	`exô
(10);

507 
	`¥ötf
("connected, sendÜogin command\n");

508 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

509 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_CRC32C_NONE
);

510 i‡(
	`iscsi_logö_async
(
iscsi
, 
n‹mÆlogö_cb
, 
¥iv©e_d©a
) != 0) {

511 
	`¥ötf
("iscsi_login_async failed\n");

512 
	`exô
(10);

514 
	}
}

518 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

520 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

522 
	`¥ötf
("discovîy sessi⁄Üogged out, Mesßgê‰om maö(Ëwas:[%s]\n", 
˛¡
->
mesßge
);

524 i‡(
°©us
 != 0) {

525 
	`¥ötf
("FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

526 
	`exô
(10);

529 
	`¥ötf
("disconnect socket\n");

530 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

531 
	`¥ötf
("FailedÅo disconnect old socket\n");

532 
	`exô
(10);

535 
	`¥ötf
("ªc⁄√˘ wôhÇ‹mÆÜogöÅÿ[%s]\n", 
˛¡
->
èrgë_addªss
);

536 
	`¥ötf
("U£Å¨gë«mê[%s] whí c⁄√˘ög\n", 
˛¡
->
èrgë_«me
);

537 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
˛¡
->
èrgë_«me
)) {

538 
	`¥ötf
("FailedÅo setÅargetÇame\n");

539 
	`exô
(10);

541 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

542 
	`¥ötf
("FailedÅoáddálias\n");

543 
	`exô
(10);

545 i‡(
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
) != 0) {

546 
	`¥ötf
("FailedÅo set settionÅypeÅoÇormal\n");

547 
	`exô
(10);

550 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
˛¡
->
èrgë_addªss
, 
n‹mÆc⁄√˘_cb
, clnt) != 0) {

551 
	`¥ötf
("iscsi_c⁄√˘ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

552 
	`exô
(10);

554 
	}
}

556 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

558 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

559 
iscsi_discovîy_addªss
 *
addr
;

561 
	`¥ötf
("discovîy cÆlback sètus:%04x\n", 
°©us
);

563 i‡(
°©us
 != 0) {

564 
	`¥ötf
("FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

565 
	`exô
(10);

568 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

569 
	`¥ötf
("T¨gë:%†Addªss:%s\n", 
addr
->
èrgë_«me
,áddr->
p‹èls
->
p‹èl
);

572 
addr
=
comm™d_d©a
;

573 
˛¡
->
has_discovîed_èrgë
 = 1;

574 
˛¡
->
èrgë_«me
 = 
	`°rdup
(
addr
->target_name);

575 
˛¡
->
èrgë_addªss
 = 
	`°rdup
(
addr
->
p‹èls
->
p‹èl
);

578 
	`¥ötf
("discovery complete, sendÜogout command\n");

580 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

581 
	`¥ötf
("iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

582 
	`exô
(10);

584 
	}
}

587 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

589 i‡(
°©us
 != 0) {

590 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

591 
	`exô
(10);

594 
	`¥ötf
("Logged inÅoÅarget, send discovery command\n");

595 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

596 
	`¥ötf
("ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

597 
	`exô
(10);

600 
	}
}

602 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

604 
	`¥ötf
("C⁄√˘edÅÿiscsòsockë sètus:0x%08x\n", 
°©us
);

606 i‡(
°©us
 != 0) {

607 
	`¥ötf
("discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

608 
	`exô
(10);

611 
	`¥ötf
("connected, sendÜogin command\n");

612 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

613 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

614 
	`¥ötf
("iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

615 
	`exô
(10);

617 
	}
}

620 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

622 
iscsi_c⁄ãxt
 *
iscsi
;

623 
pﬁlfd
 
pfd
;

624 
˛õ¡_°©e
 
˛¡
;

626 
	`¥ötf
("iscsi client\n");

627 #i‡
	`deföed
(
WIN32
)

628 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

629 
	`¥ötf
("FailedÅo start Winsock2\n");

630 
	`exô
(10);

635 
	`mem£t
(&
˛¡
, 0, (clnt));

637 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
("iqn.2002-10.com.ronnie:client");

638 i‡(
iscsi
 =
NULL
) {

639 
	`¥ötf
("FailedÅo create context\n");

640 
	`exô
(10);

643 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

644 
	`¥ötf
("FailedÅoáddálias\n");

645 
	`exô
(10);

648 
˛¡
.
mesßge
 = "Hello iSCSI";

649 
˛¡
.
has_discovîed_èrgë
 = 0;

650 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
TARGET
, 
discovîyc⁄√˘_cb
, &
˛¡
) != 0) {

651 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

652 
	`exô
(10);

655 
˛¡
.
föished
 == 0) {

656 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

657 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

659 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

660 
	`¥ötf
("Poll failed");

661 
	`exô
(10);

663 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

664 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

670 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

672 i‡(
˛¡
.
èrgë_«me
 !
NULL
) {

673 
	`‰ì
(
˛¡
.
èrgë_«me
);

675 i‡(
˛¡
.
èrgë_addªss
 !
NULL
) {

676 
	`‰ì
(
˛¡
.
èrgë_addªss
);

679 
	`¥ötf
("ok\n");

681 
	}
}

	@lib/connect.c

17 #i‡
deföed
(
WIN32
)

18 
	~"wö32/wö32_com∑t.h
"

20 
	~<uni°d.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<î∫o.h
>

27 
	~<time.h
>

28 
	~"¶i°.h
"

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

33 
	sc⁄√˘_èsk
 {

34 
iscsi_comm™d_cb
 
	mcb
;

35 *
	m¥iv©e_d©a
;

36 
	mlun
;

40 
iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

41 *
¥iv©e_d©a
);

44 
	$iscsi_ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

45 *
comm™d_d©a
, *
¥iv©e_d©a
)

47 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

48 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

50 i‡(
°©us
 != 0) {

51 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


52 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
 ||

53 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_POWER_ON_OCCURED
 ||

54 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_NEXUS_LOSS
)) {

59 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˘
->
lun
,

60 
iscsi_ã°unôªady_cb
,

61 
˘
Ë=
NULL
) {

62 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready "

64 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

65 
˘
->
¥iv©e_d©a
);

66 
	`iscsi_‰ì
(
iscsi
, 
˘
);

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 i‡(
°©us
 != 0

75 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


76 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


77 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED


78 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
)) {

79 
°©us
 = 0;

83 i‡(
°©us
 =
SCSI_STATUS_RESERVATION_CONFLICT
) {

84 
°©us
 = 0;

88 i‡(
°©us
 != 0

89 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


90 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

91 
°©us
 = 0;

94 
˘
->
	`cb
(
iscsi
, 
°©us
?
SCSI_STATUS_ERROR
:
SCSI_STATUS_GOOD
, 
NULL
,

95 
˘
->
¥iv©e_d©a
);

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`iscsi_‰ì
(
iscsi
, 
˘
);

98 
	}
}

101 
	$iscsi_logö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

102 *
¥iv©e_d©a
)

104 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

106 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

107 
	`iscsi_disc⁄√˘
(
iscsi
);

108 i‡(
iscsi
->
böd_öãrÁ˚s
[0]Ë
	`iscsi_de¸emít_iÁ˚_º
();

109 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, iscsi->
èrgë_addªss
, 
iscsi_c⁄√˘_cb
, iscsi->
c⁄√˘_d©a
) != 0) {

110 
	`iscsi_‰ì
(
iscsi
, 
˘
);

116 i‡(
°©us
 != 0) {

117 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

118 
	`iscsi_‰ì
(
iscsi
, 
˘
);

122 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˘
->
lun
,

123 
iscsi_ã°unôªady_cb
, 
˘
Ë=
NULL
) {

124 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready_async failed.");

125 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

127 
	}
}

130 
	$iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

131 *
¥iv©e_d©a
)

133 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

135 i‡(
°©us
 != 0) {

136 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo connectÅo iSCSI socket. "

137 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

138 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

139 
	`iscsi_‰ì
(
iscsi
, 
˘
);

143 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_logö_cb
, 
˘
) != 0) {

144 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_login_async failed.");

145 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

146 
	`iscsi_‰ì
(
iscsi
, 
˘
);

148 
	}
}

152 
	$iscsi_fuŒ_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

153 
lun
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

155 
c⁄√˘_èsk
 *
˘
;

157 
iscsi
->
lun
 =Üun;

158 i‡(
iscsi
->
p‹èl
 !=Öortal)

159 
	`°∫˝y
(
iscsi
->
p‹èl
,p‹èl,
MAX_STRING_SIZE
);

161 
˘
 = 
	`iscsi_mÆloc
(
iscsi
, (
c⁄√˘_èsk
));

162 i‡(
˘
 =
NULL
) {

163 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory. FailedÅoállocate "

165  -
ENOMEM
;

167 
˘
->
cb
 = cb;

168 
˘
->
lun
 =Üun;

169 
˘
->
¥iv©e_d©a
 =Örivate_data;

170 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
iscsi_c⁄√˘_cb
, 
˘
) != 0) {

171 
	`iscsi_‰ì
(
iscsi
, 
˘
);

172  -
ENOMEM
;

175 
	}
}

180 
	$iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
)

182 
iscsi
->
no_auto_ªc⁄√˘
 = 
°©e
;

187 i‡(!
°©e
 && 
iscsi
->
ªc⁄√˘_de„ºed
) {

188 
iscsi
->
ªc⁄√˘_de„ºed
 = 0;

189 
	`iscsi_ªc⁄√˘
(
iscsi
);

191 
	}
}

193 
	$iscsi_£t_ªc⁄√˘_max_ªåõs
(
iscsi_c⁄ãxt
 *
iscsi
, 
cou¡
)

195 
iscsi
->
ªc⁄√˘_max_ªåõs
 = 
cou¡
;

196 
	}
}

198 
	$iscsi_de„r_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

200 
iscsi_pdu
 *
pdu
;

202 
iscsi
->
ªc⁄√˘_de„ºed
 = 1;

204 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect deferred, cancellingállÅasks");

206 (
pdu
 = 
iscsi
->
outqueue
)) {

207 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

208 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

212 i‡(
iscsi
->
is_loggedö
) {

213 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

214 
NULL
, 
pdu
->
¥iv©e_d©a
);

217 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

219 (
pdu
 = 
iscsi
->
waôpdu
)) {

220 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

224 i‡(
iscsi
->
is_loggedö
) {

225 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

226 
NULL
, 
pdu
->
¥iv©e_d©a
);

228 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

230 
	}
}

232 
	$iscsi_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
ﬁd_iscsi
)

234 
iscsi_c⁄ãxt
 *
iscsi
;

235 
ªåy
 = 0;

238 i‡(
ﬁd_iscsi
->
ªc⁄√˘_de„ºed
) {

239 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect initiated, butÑeconnect isálready deferred");

243 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect initiated");

249 i‡(
ﬁd_iscsi
->
no_auto_ªc⁄√˘
) {

250 
	`iscsi_de„r_ªc⁄√˘
(
ﬁd_iscsi
);

254 i‡(
ﬁd_iscsi
->
œ°_ªc⁄√˘
) {

255 i‡(
	`time
(
NULL
Ë- 
ﬁd_iscsi
->
œ°_ªc⁄√˘
 < 5Ë
	`¶ìp
(5);

258 
åy_agaö
:

260 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
ﬁd_iscsi
->
öôüt‹_«me
);

261 i‡(
iscsi
 =
NULL
) {

262 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "failedÅo createÇew context forÑeconnection");

266 
iscsi
->
is_ªc⁄√˘ög
 = 1;

268 
	`iscsi_£t_èrgë«me
(
iscsi
, 
ﬁd_iscsi
->
èrgë_«me
);

270 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ﬁd_iscsi
->
w™t_hódî_dige°
);

272 i‡(
ﬁd_iscsi
->
u£r
[0]) {

273 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
ﬁd_iscsi
->
u£r
, old_iscsi->
∑sswd
);

276 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

278 
iscsi
->
lun
 = 
ﬁd_iscsi
->lun;

280 
	`°∫˝y
(
iscsi
->
p‹èl
,
ﬁd_iscsi
->p‹èl,
MAX_STRING_SIZE
);

282 
	`°∫˝y
(
iscsi
->
böd_öãrÁ˚s
,
ﬁd_iscsi
->böd_öãrÁ˚s,
MAX_STRING_SIZE
);

283 
iscsi
->
böd_öãrÁ˚s_˙t
 = 
ﬁd_iscsi
->bind_interfaces_cnt;

285 
iscsi
->
log_Àvñ
 = 
ﬁd_iscsi
->log_level;

286 
iscsi
->
log_‚
 = 
ﬁd_iscsi
->log_fn;

287 
iscsi
->
t˝_u£r_timeout
 = 
ﬁd_iscsi
->tcp_user_timeout;

288 
iscsi
->
t˝_kìpidÀ
 = 
ﬁd_iscsi
->tcp_keepidle;

289 
iscsi
->
t˝_kìp˙t
 = 
ﬁd_iscsi
->tcp_keepcnt;

290 
iscsi
->
t˝_kìpötvl
 = 
ﬁd_iscsi
->tcp_keepintvl;

291 
iscsi
->
t˝_syn˙t
 = 
ﬁd_iscsi
->tcp_syncnt;

293 
iscsi
->
ªc⁄√˘_max_ªåõs
 = 
ﬁd_iscsi
->reconnect_max_retries;

295 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, iscsi->
p‹èl
, iscsi->
lun
) != 0) {

296 
backoff
 = 
ªåy
;

298 i‡(
iscsi
->
ªc⁄√˘_max_ªåõs
 !-1 && 
ªåy
 >= iscsi->reconnect_max_retries) {

299 
	`iscsi_de„r_ªc⁄√˘
(
ﬁd_iscsi
);

300 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

303 i‡(
backoff
 > 10) {

304 
backoff
 +
	`ønd
() % 10;

305 
backoff
 -= 5;

307 i‡(
backoff
 > 30) {

308 
backoff
 = 30;

310 
	`ISCSI_LOG
(
ﬁd_iscsi
, 1, "ªc⁄√˘Åry %d faûed, waôög %d sec⁄ds", 
ªåy
, 
backoff
);

311 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

312 
	`¶ìp
(
backoff
);

313 
ªåy
++;

314 
åy_agaö
;

317 
ﬁd_iscsi
->
outqueue
) {

318 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
outqueue
;

319 
	`SLIST_REMOVE
(&
ﬁd_iscsi
->
outqueue
, 
pdu
);

320 
	`SLIST_ADD_END
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

323 
ﬁd_iscsi
->
waôpdu
) {

324 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
waôpdu
;

326 
	`SLIST_REMOVE
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

327 i‡(
pdu
->
ôt
 == 0xffffffff) {

331 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DROP_ON_RECONNECT
) {

337 
	`iscsi_‰ì_pdu
(
ﬁd_iscsi
, 
pdu
);

341 
pdu
->
ôt
 = 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
);

342 
	`iscsi_pdu_£t_ôt
(
pdu
,Ödu->
ôt
);

346 
pdu
->
cmd¢
 = (pdu->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
)?
iscsi
->cmdsn:iscsi->cmdsn++;

347 
	`iscsi_pdu_£t_cmd¢
(
pdu
,Ödu->
cmd¢
);

349 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
);

350 
iscsi
->
°©¢
++;

352 
pdu
->
outd©a_wrôãn
 = 0;

353 
pdu
->
∑ylﬂd_wrôãn
 = 0;

354 
	`iscsi_queue_pdu
(
iscsi
, 
pdu
);

357 i‡(
	`dup2
(
iscsi
->
fd
, 
ﬁd_iscsi
->fd) == -1) {

358 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

359 
åy_agaö
;

362 i‡(
ﬁd_iscsi
->
öcomög
 !
NULL
) {

363 
	`iscsi_‰ì_iscsi_ö_pdu
(
ﬁd_iscsi
, old_iscsi->
öcomög
);

365 i‡(
ﬁd_iscsi
->
öqueue
 !
NULL
) {

366 
	`iscsi_‰ì_iscsi_öqueue
(
ﬁd_iscsi
, old_iscsi->
öqueue
);

369 i‡(
ﬁd_iscsi
->
outqueue_cuºít
 !
NULL
 && old_iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

370 
	`iscsi_‰ì_pdu
(
ﬁd_iscsi
, old_iscsi->
outqueue_cuºít
);

373 
	`˛o£
(
iscsi
->
fd
);

374 
iscsi
->
fd
 = 
ﬁd_iscsi
->fd;

375 
iscsi
->
mÆlocs
+=
ﬁd_iscsi
->mallocs;

376 
iscsi
->
‰ìs
+=
ﬁd_iscsi
->frees;

378 
	`mem˝y
(
ﬁd_iscsi
, 
iscsi
, (
iscsi_c⁄ãxt
));

379 
	`‰ì
(
iscsi
);

381 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect was successful");

383 
ﬁd_iscsi
->
is_ªc⁄√˘ög
 = 0;

384 
ﬁd_iscsi
->
œ°_ªc⁄√˘
 = 
	`time
(
NULL
);

387 
	}
}

	@lib/crc32c.c

17 #i‡
deföed
(
WIN32
)

19 
	~<uni°d.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

45 
	g¸˘abÀ
[256] = {

112 
	$¸c32c
(*
buf
, 
Àn
)

114 
¸c
 = 0xffffffff;

115 
Àn
-- > 0) {

116 
¸c
 = (¸c>>8Ë^ 
¸˘abÀ
[(¸¯^ (*
buf
++)) & 0xFF];

118  
¸c
^0xffffffff;

119 
	}
}

	@lib/discovery.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~"iscsi.h
"

33 
	~"iscsi-¥iv©e.h
"

36 
	$iscsi_discovîy_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

37 *
¥iv©e_d©a
)

39 
iscsi_pdu
 *
pdu
;

40 *
°r
;

42 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_DISCOVERY
) {

43 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo do discovery on "

48 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_TEXT_REQUEST
,

49 
ISCSI_PDU_TEXT_RESPONSE
);

50 i‡(
pdu
 =
NULL
) {

51 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

57 
	`iscsi_pdu_£t_immedüã
(
pdu
);

60 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
ISCSI_PDU_TEXT_FINAL
);

63 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

66 
°r
 = (*)"SendTargets=All";

67 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

69 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

70 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

74 
pdu
->
ˇŒback
 = 
cb
;

75 
pdu
->
¥iv©e_d©a
 =Örivate_data;

77 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

78 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

80 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

85 
	}
}

88 
	$iscsi_‰ì_discovîy_addªs£s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_discovîy_addªss
 *
addªs£s
)

90 
addªs£s
 !
NULL
) {

91 
iscsi_discovîy_addªss
 *
√xt
 = 
addªs£s
->next;

93 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
èrgë_«me
));

94 
addªs£s
->
èrgë_«me
 = 
NULL
;

96 
addªs£s
->
p‹èls
 !
NULL
) {

97 
iscsi_èrgë_p‹èl
 *
√xt_p‹èl
 = 
addªs£s
->
p‹èls
->
√xt
;

99 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
->
p‹èl
));

100 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
));

102 
addªs£s
->
p‹èls
 = 
√xt_p‹èl
;

104 
addªs£s
->
p‹èls
 = 
NULL
;

106 
addªs£s
->
√xt
 = 
NULL
;

107 
	`iscsi_‰ì
(
iscsi
, 
addªs£s
);

108 
addªs£s
 = 
√xt
;

110 
	}
}

113 
	$iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

114 
iscsi_ö_pdu
 *
ö
)

116 
iscsi_discovîy_addªss
 *
èrgës
 = 
NULL
;

117 *
±r
 = 
ö
->
d©a
;

118 
size
 = 
ö
->
d©a_pos
;

121 i‡(
ö
->
hdr
[1] !
ISCSI_PDU_TEXT_FINAL
) {

122 
	`iscsi_£t_îr‹
(
iscsi
, "unsupported flags inÅext "

123 "ª∂y %02x", 
ö
->
hdr
[1]);

124 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

125 
pdu
->
¥iv©e_d©a
);

129 
size
 > 0) {

130 *
íd
;

131 
Àn
;

133 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

134 i‡(
íd
 =
NULL
) {

135 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

137 
±r
 - 
ö
->
d©a
);

138 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

139 
pdu
->
¥iv©e_d©a
);

140 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

144 
Àn
 = 
íd
 - 
±r
;

145 i‡(
Àn
 == 0) {

150 i‡(!
	`°∫cmp
((*)
±r
, "TargetName=", 11)) {

151 
iscsi_discovîy_addªss
 *
èrgë
;

153 
èrgë
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_discovîy_addªss
));

154 i‡(
èrgë
 =
NULL
) {

155 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

158 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

159 
pdu
->
¥iv©e_d©a
);

160 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

163 
èrgë
->
èrgë_«me
 = 
	`iscsi_°rdup
(
iscsi
,(*)
±r
+11);

164 i‡(
èrgë
->
èrgë_«me
 =
NULL
) {

165 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

168 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

169 
pdu
->
¥iv©e_d©a
);

170 
	`iscsi_‰ì
(
iscsi
, 
èrgë
);

171 
èrgë
 = 
NULL
;

172 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

175 
èrgë
->
√xt
 = 
èrgës
;

176 
èrgës
 = 
èrgë
;

177 } i‡(!
	`°∫cmp
((*)
±r
, "TargetAddress=", 14)) {

178 
iscsi_èrgë_p‹èl
 *
p‹èl
;

180 i‡(
èrgës
 =
NULL
) {

181 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid discovery "

183 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

184 
pdu
->
¥iv©e_d©a
);

185 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

188 
p‹èl
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_èrgë_p‹èl
));

189 i‡(
p‹èl
 =
NULL
) {

190 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo malloc "

192 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

193 
pdu
->
¥iv©e_d©a
);

194 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

198 
p‹èl
->
√xt
 = 
èrgës
->
p‹èls
;

199 
èrgës
->
p‹èls
 = 
p‹èl
;

201 
p‹èl
->p‹è»
	`iscsi_°rdup
(
iscsi
, (*)
±r
+14);

202 i‡(
p‹èl
->p‹è»=
NULL
) {

203 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

206 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

207 
pdu
->
¥iv©e_d©a
);

208 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

212 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

213 "discovîy såög : %s", 
±r
);

214 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

215 
pdu
->
¥iv©e_d©a
);

216 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

220 
±r
 +
Àn
 + 1;

221 
size
 -
Àn
 + 1;

224 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èrgës
,Ödu->
¥iv©e_d©a
);

225 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

228 
	}
}

	@lib/init.c

17 
	#_GNU_SOURCE


	)

19 #i‡
deföed
(
WIN32
)

21 
	~<°rögs.h
>

22 
	~<uni°d.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 
	~<°d¨g.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<time.h
>

32 
	~"iscsi.h
"

33 
	~"iscsi-¥iv©e.h
"

34 
	~"¶i°.h
"

36 * 
	$iscsi_mÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

37 * 
±r
 = 
	`mÆloc
(
size
);

38 i‡(
±r
 !
NULL
Ë
iscsi
->
mÆlocs
++;

39  
±r
;

40 
	}
}

42 * 
	$iscsi_zmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

43 * 
±r
 = 
	`mÆloc
(
size
);

44 i‡(
±r
 !
NULL
) {

45 
	`mem£t
(
±r
,0x00,
size
);

46 
iscsi
->
mÆlocs
++;

48  
±r
;

49 
	}
}

51 * 
	$iscsi_ªÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
, 
size_t
 
size
) {

52 * 
_±r
 = 
	`ªÆloc
(
±r
, 
size
);

53 i‡(
_±r
 !
NULL
) {

54 
iscsi
->
ªÆlocs
++;

56  
_±r
;

57 
	}
}

59 
	$iscsi_‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

60 i‡(
±r
 =
NULL
) ;

61 
	`‰ì
(
±r
);

62 
iscsi
->
‰ìs
++;

63 
	}
}

65 * 
	$iscsi_°rdup
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° * 
°r
) {

66 *
°r2
 = 
	`°rdup
(
°r
);

67 i‡(
°r2
 !
NULL
Ë
iscsi
->
mÆlocs
++;

68  
°r2
;

69 
	}
}

71 * 
	$iscsi_szmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

72 *
±r
;

73 i‡(
size
 > 
iscsi
->
smÆloc_size
Ë 
NULL
;

74 i‡(
iscsi
->
smÆloc_‰ì
 > 0) {

75 
±r
 = 
iscsi
->
smÆloc_±rs
[--iscsi->
smÆloc_‰ì
];

76 
	`mem£t
(
±r
, 0, 
iscsi
->
smÆloc_size
);

77 
iscsi
->
smÆlocs
++;

79 
±r
 = 
	`iscsi_zmÆloc
(
iscsi
, iscsi->
smÆloc_size
);

81  
±r
;

82 
	}
}

84 
	$iscsi_s‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

85 i‡(
±r
 =
NULL
) {

88 i‡(
iscsi
->
smÆloc_‰ì
 =
SMALL_ALLOC_MAX_FREE
) {

89 
i
;

91 
	`ISCSI_LOG
(
iscsi
, 6, "smalloc free == SMALLOC_MAX_FREE");

94 
iscsi
->
smÆloc_‰ì
 >>= 1;

95 
i
 = 0; i < 
iscsi
->
smÆloc_‰ì
; i++) {

96 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

97 
iscsi
->
smÆloc_±rs
[
i
] = iscsi->smÆloc_±rs[ò+ iscsi->
smÆloc_‰ì
];

100 
iscsi
->
smÆloc_±rs
[iscsi->
smÆloc_‰ì
++] = 
±r
;

101 
	}
}

103 
iscsi_c⁄ãxt
 *

104 
	$iscsi_¸óã_c⁄ãxt
(c⁄° *
öôüt‹_«me
)

106 
iscsi_c⁄ãxt
 *
iscsi
;

107 
size_t
 
ªquúed
 = 
ISCSI_RAW_HEADER_SIZE
 + 
ISCSI_DIGEST_SIZE
;

109 i‡(!
öôüt‹_«me
[0]) {

110  
NULL
;

113 
iscsi
 = 
	`mÆloc
((
iscsi_c⁄ãxt
));

114 i‡(
iscsi
 =
NULL
) {

115  
NULL
;

118 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

120 
	`°∫˝y
(
iscsi
->
öôüt‹_«me
,öôüt‹_«me,
MAX_STRING_SIZE
);

122 
iscsi
->
fd
 = -1;

124 
	`§™d
(
	`time
(
NULL
Ë^ 
	`gëpid
(Ë^ (
uöt32_t
Ë((
uöçå_t
Ë
iscsi
));

127 
	`iscsi_£t_isid_øndom
(
iscsi
, 
	`ønd
(), 0);

130 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_SECNEG
;

131 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

132 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
;

134 
iscsi
->
max_bur°_Àngth
 = 262144;

135 
iscsi
->
fú°_bur°_Àngth
 = 262144;

136 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
 = 262144;

137 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 8192;

138 
iscsi
->
w™t_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

139 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

140 
iscsi
->
w™t_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

141 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

142 
iscsi
->
w™t_hódî_dige°
 = 
ISCSI_HEADER_DIGEST_NONE_CRC32C
;

144 
iscsi
->
t˝_kìp˙t
=3;

145 
iscsi
->
t˝_kìpötvl
=30;

146 
iscsi
->
t˝_kìpidÀ
=30;

148 
iscsi
->
ªc⁄√˘_max_ªåõs
 = -1;

150 i‡(
	`gëív
("LIBISCSI_DEBUG"Ë!
NULL
) {

151 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
	`©oi
(
	`gëív
("LIBISCSI_DEBUG")));

152 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

155 i‡(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT"Ë!
NULL
) {

156 
	`iscsi_£t_t˝_u£r_timeout
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT")));

159 i‡(
	`gëív
("LIBISCSI_TCP_KEEPCNT"Ë!
NULL
) {

160 
	`iscsi_£t_t˝_kìp˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPCNT")));

163 i‡(
	`gëív
("LIBISCSI_TCP_KEEPINTVL"Ë!
NULL
) {

164 
	`iscsi_£t_t˝_kìpötvl
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPINTVL")));

167 i‡(
	`gëív
("LIBISCSI_TCP_KEEPIDLE"Ë!
NULL
) {

168 
	`iscsi_£t_t˝_kìpidÀ
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPIDLE")));

171 i‡(
	`gëív
("LIBISCSI_TCP_SYNCNT"Ë!
NULL
) {

172 
	`iscsi_£t_t˝_syn˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_SYNCNT")));

175 i‡(
	`gëív
("LIBISCSI_BIND_INTERFACES"Ë!
NULL
) {

176 
	`iscsi_£t_böd_öãrÁ˚s
(
iscsi
,
	`gëív
("LIBISCSI_BIND_INTERFACES"));

182 
iscsi
->
smÆloc_size
 = 1;

183 i‡((
iscsi_pdu
Ë> 
ªquúed
) {

184 
ªquúed
 = (
iscsi_pdu
);

186 i‡((
iscsi_ö_pdu
Ë> 
ªquúed
) {

187 
ªquúed
 = (
iscsi_ö_pdu
);

189 
iscsi
->
smÆloc_size
 < 
ªquúed
) {

190 
iscsi
->
smÆloc_size
 <<= 1;

192 
	`ISCSI_LOG
(
iscsi
,5,"smÆ»Æloˇti⁄ sizêi†%d byã", iscsi->
smÆloc_size
);

194  
iscsi
;

195 
	}
}

198 
	$iscsi_£t_isid_oui
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
oui
, uöt32_à
quÆifõr
)

200 
iscsi
->
isid
[0] = (
oui
 >> 16) & 0x3f;

201 
iscsi
->
isid
[1] = (
oui
 >> 8) & 0xff;

202 
iscsi
->
isid
[2] = (
oui
 ) & 0xff;

204 
iscsi
->
isid
[3] = (
quÆifõr
 >> 16) & 0xff;

205 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

206 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

209 
	}
}

212 
	$iscsi_£t_isid_í
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
í
, uöt32_à
quÆifõr
)

214 
iscsi
->
isid
[0] = 0x40;

216 
iscsi
->
isid
[1] = (
í
 >> 16) & 0xff;

217 
iscsi
->
isid
[2] = (
í
 >> 8) & 0xff;

218 
iscsi
->
isid
[3] = (
í
 ) & 0xff;

220 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

221 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

224 
	}
}

227 
	$iscsi_£t_isid_øndom
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
∫d
, uöt32_à
quÆifõr
)

229 
iscsi
->
isid
[0] = 0x80;

231 
iscsi
->
isid
[1] = (
∫d
 >> 16) & 0xff;

232 
iscsi
->
isid
[2] = (
∫d
 >> 8) & 0xff;

233 
iscsi
->
isid
[3] = (
∫d
 ) & 0xff;

235 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

236 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

239 
	}
}

243 
	$iscsi_£t_isid_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
)

245 
iscsi
->
isid
[0] = 0xc0;

247 
iscsi
->
isid
[1] = 0x00;

248 
iscsi
->
isid
[2] = 0x00;

249 
iscsi
->
isid
[3] = 0x00;

250 
iscsi
->
isid
[4] = 0x00;

251 
iscsi
->
isid
[5] = 0x00;

254 
	}
}

257 
	$iscsi_£t_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
Æüs
)

259 i‡(
iscsi
->
is_loggedö
 != 0) {

260 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenáddingálias");

264 
	`°∫˝y
(
iscsi
->
Æüs
,Æüs,
MAX_STRING_SIZE
);

266 
	}
}

269 
	$iscsi_£t_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
èrgë_«me
)

271 i‡(
iscsi
->
is_loggedö
 != 0) {

272 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenádding "

277 
	`°∫˝y
(
iscsi
->
èrgë_«me
,èrgë_«me,
MAX_STRING_SIZE
);

280 
	}
}

283 
	$iscsi_de°roy_c⁄ãxt
(
iscsi_c⁄ãxt
 *
iscsi
)

285 
iscsi_pdu
 *
pdu
;

286 
i
;

288 i‡(
iscsi
 =
NULL
) {

292 i‡(
iscsi
->
fd
 != -1) {

293 
	`iscsi_disc⁄√˘
(
iscsi
);

296 (
pdu
 = 
iscsi
->
outqueue
)) {

297 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

298 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

302 i‡(
iscsi
->
is_loggedö
) {

303 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

304 
pdu
->
¥iv©e_d©a
);

307 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

309 (
pdu
 = 
iscsi
->
waôpdu
)) {

310 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

314 i‡(
iscsi
->
is_loggedö
) {

315 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

316 
pdu
->
¥iv©e_d©a
);

318 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

321 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 && iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

322 
	`iscsi_‰ì_pdu
(
iscsi
, iscsi->
outqueue_cuºít
);

325 i‡(
iscsi
->
öcomög
 !
NULL
) {

326 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, iscsi->
öcomög
);

328 i‡(
iscsi
->
öqueue
 !
NULL
) {

329 
	`iscsi_‰ì_iscsi_öqueue
(
iscsi
, iscsi->
öqueue
);

332 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

334 
i
=0;i<
iscsi
->
smÆloc_‰ì
;i++) {

335 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

338 i‡(
iscsi
->
mÆlocs
 !iscsi->
‰ìs
) {

339 
	`ISCSI_LOG
(
iscsi
,1,"%d mem‹y block†lo°áàiscsi_de°roy_c⁄ãxt(Ëa·î %d mÆloc(s), %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
-iscsi->
‰ìs
,iscsi->mÆlocs,iscsi->
ªÆlocs
,iscsi->‰ìs,iscsi->
smÆlocs
);

341 
	`ISCSI_LOG
(
iscsi
,5,"mem‹y i†˛ó¿© iscsi_de°roy_c⁄ãxt(Ëa·î %d mÆlocs, %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
,iscsi->
ªÆlocs
,iscsi->
‰ìs
,iscsi->
smÆlocs
);

344 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

345 
	`‰ì
(
iscsi
);

348 
	}
}

351 
	$iscsi_£t_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
îr‹_°rög
, ...)

353 
va_li°
 
≠
;

354 
îr°r
[
MAX_STRING_SIZE
 + 1] = {0};

356 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

357 i‡(
	`v¢¥ötf
(
îr°r
, 
MAX_STRING_SIZE
, 
îr‹_°rög
, 
≠
) < 0) {

358 
	`°∫˝y
(
îr°r
, "couldÇŸ f‹m©Éº‹ såög!", 
MAX_STRING_SIZE
);

360 
	`va_íd
(
≠
);

362 i‡(
iscsi
 !
NULL
) {

363 
	`°∫˝y
(
iscsi
->
îr‹_°rög
, 
îr°r
,
MAX_STRING_SIZE
);

364 
	`ISCSI_LOG
(
iscsi
, 1, "%s",iscsi->
îr‹_°rög
);

366 
	}
}

369 
	$iscsi_£t_log_Àvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
)

371 
iscsi
->
log_Àvñ
 = 
Àvñ
;

372 
	`ISCSI_LOG
(
iscsi
, 2, "£àlogÜevñÅÿ%d", 
Àvñ
);

373 
	}
}

376 
	$iscsi_gë_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
)

378  
iscsi
 ? iscsi->
îr‹_°rög
 : "";

379 
	}
}

382 
	$iscsi_gë_èrgë_addªss
(
iscsi_c⁄ãxt
 *
iscsi
)

384  
iscsi
->
èrgë_addªss
;

385 
	}
}

389 
	$iscsi_£t_hódî_dige°
(
iscsi_c⁄ãxt
 *
iscsi
,

390 
iscsi_hódî_dige°
 
hódî_dige°
)

392 i‡(
iscsi
->
is_loggedö
) {

393 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo set header digest while "

397 i‡(()
hódî_dige°
 > 
ISCSI_HEADER_DIGEST_LAST
) {

398 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

402 
iscsi
->
w™t_hódî_dige°
 = 
hódî_dige°
;

405 
	}
}

408 
	$iscsi_is_logged_ö
(
iscsi_c⁄ãxt
 *
iscsi
)

410  
iscsi
->
is_loggedö
;

411 
	}
}

414 
	$h2i
(
h
)

416 i‡(
h
 >= 'a' && h <= 'f') {

417  
h
 - 'a' + 10;

419 i‡(
h
 >= 'A' && h <= 'F') {

420  
h
 - 'A' + 10;

422  
h
 - '0';

423 
	}
}

426 
	$iscsi_decode_uæ_°rög
(*
°r
)

428 *
°r
) {

429 *
tmp
 = 
°r
;

430 
c
;

432 i‡(*
°r
++ != '%') {

436 i‡(*
°r
 == 0) {

439 
c
 = 
	`h2i
(*
°r
++) << 4;

441 i‡(*
°r
 == 0) {

444 
c
 |
	`h2i
(*
°r
++);

446 *
tmp
++ = 
c
;

447 
	`memmove
(
tmp
, 
°r
, 
	`°æí
(str));

448 
tmp
[
	`°æí
(
°r
)] = 0;

450 
	}
}

452 
iscsi_uæ
 *

453 
	$iscsi_∑r£_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
, 
fuŒ
)

455 
iscsi_uæ
 *iscsi_url;

456 
°r
[
MAX_STRING_SIZE
+1];

457 *
p‹èl
;

458 *
u£r
 = 
NULL
;

459 *
∑sswd
 = 
NULL
;

460 *
èrgë
 = 
NULL
;

461 *
lun
;

462 *
tmp
;

463 
l
 = 0;

465 i‡(
	`°∫cmp
(
uæ
, "iscsi://", 8)) {

466 i‡(
fuŒ
) {

467 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI URL must "

469 
uæ
, 
ISCSI_URL_SYNTAX
);

471 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI Portal "

473 
uæ
, 
ISCSI_PORTAL_URL_SYNTAX
);

475  
NULL
;

478 
	`°∫˝y
(
°r
,
uæ
 + 8, 
MAX_STRING_SIZE
);

479 
p‹èl
 = 
°r
;

481 
u£r
 = 
	`gëív
("LIBISCSI_CHAP_USERNAME");

482 
∑sswd
 = 
	`gëív
("LIBISCSI_CHAP_PASSWORD");

484 
tmp
 = 
	`°rchr
(
p‹èl
, '@');

485 i‡(
tmp
 !
NULL
) {

486 
u£r
 = 
p‹èl
;

487 *
tmp
++ = 0;

488 
p‹èl
 = 
tmp
;

490 
tmp
 = 
	`°rchr
(
u£r
, '%');

491 i‡(
tmp
 =
NULL
) {

492 
tmp
 = 
	`°rchr
(
u£r
, ':');

494 i‡(
tmp
 !
NULL
) {

495 *
tmp
++ = 0;

496 
∑sswd
 = 
tmp
;

500 i‡(
fuŒ
) {

501 
èrgë
 = 
	`°rchr
(
p‹èl
, '/');

502 i‡(
èrgë
 =
NULL
) {

503 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

506 
uæ
, 
ISCSI_URL_SYNTAX
);

507  
NULL
;

509 *
èrgë
++ = 0;

511 i‡(*
èrgë
 == 0) {

512 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

515 
uæ
, 
ISCSI_URL_SYNTAX
);

516  
NULL
;

519 
lun
 = 
	`°rchr
(
èrgë
, '/');

520 i‡(
lun
 =
NULL
) {

521 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

524 
uæ
, 
ISCSI_URL_SYNTAX
);

525  
NULL
;

527 *
lun
++ = 0;

529 
l
 = 
	`°πﬁ
(
lun
, &
tmp
, 10);

530 i‡(*
lun
 =0 || *
tmp
 != 0) {

531 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

534 
uæ
, 
ISCSI_URL_SYNTAX
);

535  
NULL
;

538 
tmp
=
	`°rchr
(
p‹èl
,'/');

539 i‡(
tmp
) {

540 *
tmp
=0;

544 i‡(
iscsi
 !
NULL
) {

545 
iscsi_uæ
 = 
	`iscsi_mÆloc
(
iscsi
, (iscsi_url));

547 
iscsi_uæ
 = 
	`mÆloc
((iscsi_url));

550 i‡(
iscsi_uæ
 =
NULL
) {

551 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

553  
NULL
;

555 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

556 
iscsi_uæ
->
iscsi
= iscsi;

558 
	`°∫˝y
(
iscsi_uæ
->
p‹èl
,p‹èl,
MAX_STRING_SIZE
);

560 i‡(
u£r
 !
NULL
 && 
∑sswd
 != NULL) {

561 
	`°∫˝y
(
iscsi_uæ
->
u£r
, u£r, 
MAX_STRING_SIZE
);

562 
	`°∫˝y
(
iscsi_uæ
->
∑sswd
,Öasswd, 
MAX_STRING_SIZE
);

565 i‡(
fuŒ
) {

566 
	`°∫˝y
(
iscsi_uæ
->
èrgë
,Å¨gë, 
MAX_STRING_SIZE
);

567 
iscsi_uæ
->
lun
 = 
l
;

570 
	`iscsi_decode_uæ_°rög
(&
iscsi_uæ
->
èrgë
[0]);

572  
iscsi_uæ
;

573 
	}
}

575 
iscsi_uæ
 *

576 
	$iscsi_∑r£_fuŒ_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

578  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,1);

579 
	}
}

581 
iscsi_uæ
 *

582 
	$iscsi_∑r£_p‹èl_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

584  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,0);

585 
	}
}

588 
	$iscsi_de°roy_uæ
(
iscsi_uæ
 *iscsi_url)

590 
iscsi_c⁄ãxt
 *
iscsi
 = 
iscsi_uæ
->iscsi;

591 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

592 i‡(
iscsi
 !
NULL
)

593 
	`iscsi_‰ì
(
iscsi
, 
iscsi_uæ
);

595 
	`‰ì
(
iscsi_uæ
);

596 
	}
}

600 
	$iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

601 c⁄° *
u£r
, c⁄° *
∑sswd
)

603 
	`°∫˝y
(
iscsi
->
u£r
,u£r,
MAX_STRING_SIZE
);

604 
	`°∫˝y
(
iscsi
->
∑sswd
,∑sswd,
MAX_STRING_SIZE
);

606 
	}
}

609 
	$iscsi_£t_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_immedüã_d©a
 
immedüã_d©a
)

611 i‡(
iscsi
->
is_loggedö
 != 0) {

612 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set immediate_data");

616 
iscsi
->
w™t_immedüã_d©a
 = 
immedüã_d©a
;

617 
iscsi
->
u£_immedüã_d©a
 = 
immedüã_d©a
;

619 
	}
}

622 
	$iscsi_£t_öôül_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_öôül_r2t
 
öôül_r2t
)

624 i‡(
iscsi
->
is_loggedö
 != 0) {

625 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set initial_r2t");

629 
iscsi
->
w™t_öôül_r2t
 = 
öôül_r2t
;

631 
	}
}

634 
	$iscsi_£t_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
timeout
)

636 
iscsi
->
scsi_timeout
 = 
timeout
;

638 
	}
}

	@lib/iscsi-command.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~"iscsi.h
"

37 
	~"iscsi-¥iv©e.h
"

38 
	~"scsi-lowÀvñ.h
"

39 
	~"¶i°.h
"

43 
	$iscsi_scsi_ª•⁄£_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

44 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

46 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 =

47 (
iscsi_scsi_cbd©a
 *)
¥iv©e_d©a
;

49 
°©us
) {

50 
SCSI_STATUS_RESERVATION_CONFLICT
:

51 
SCSI_STATUS_CHECK_CONDITION
:

52 
SCSI_STATUS_GOOD
:

53 
SCSI_STATUS_BUSY
:

54 
SCSI_STATUS_CONDITION_MET
:

55 
SCSI_STATUS_TASK_SET_FULL
:

56 
SCSI_STATUS_ACA_ACTIVE
:

57 
SCSI_STATUS_TASK_ABORTED
:

58 
SCSI_STATUS_ERROR
:

59 
SCSI_STATUS_CANCELLED
:

60 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
°©us
, scsi_cbd©a->
èsk
,

61 
scsi_cbd©a
->
¥iv©e_d©a
);

64 
	`iscsi_£t_îr‹
(
iscsi
, "Cant handle scsi status %d yet.",

65 
°©us
);

66 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, scsi_cbd©a->
èsk
,

67 
scsi_cbd©a
->
¥iv©e_d©a
);

69 
	}
}

73 
	$iscsi_£nd_d©a_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
cmd_pdu
,

74 
uöt32_t
 
ât
, uöt32_à
off£t
, uöt32_à
tŸ_Àn
)

76 
tŸ_Àn
 > 0) {

77 
uöt32_t
 
Àn
 = 
tŸ_Àn
;

78 
iscsi_pdu
 *
pdu
;

79 
Êags
;

81 i‡(
Àn
 > 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
) {

82 
Àn
 = 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
;

85 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_DATA_OUT
,

86 
ISCSI_PDU_NO_PDU
,

87 
cmd_pdu
->
ôt
,

88 
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

89 i‡(
pdu
 =
NULL
) {

90 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

92 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
cmd_pdu
);

93 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
cmd_pdu
);

94 
cmd_pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

95 
cmd_pdu
->
¥iv©e_d©a
);

96 
	`iscsi_‰ì_pdu
(
iscsi
, 
cmd_pdu
);

100 
pdu
->
scsi_cbd©a
.
èsk
 = 
cmd_pdu
->scsi_cbdata.task;

104 
pdu
->
cmd¢
 = 
cmd_pdu
->cmdsn;

106 i‡(
tŸ_Àn
 =
Àn
) {

107 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
;

109 
Êags
 = 0;

113 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

116 
	`iscsi_pdu_£t_lun
(
pdu
, 
cmd_pdu
->
lun
);

119 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

122 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

125 
	`iscsi_pdu_£t_d©a¢
(
pdu
, 
cmd_pdu
->
d©a¢
++);

128 
	`iscsi_pdu_£t_buf„roff£t
(
pdu
, 
off£t
);

130 
pdu
->
∑ylﬂd_off£t
 = 
off£t
;

131 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

134 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

136 
pdu
->
ˇŒback
 = 
cmd_pdu
->callback;

137 
pdu
->
¥iv©e_d©a
 = 
cmd_pdu
->private_data;

139 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

140 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

142 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
cmd_pdu
);

143 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
cmd_pdu
);

144 
cmd_pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

145 
cmd_pdu
->
¥iv©e_d©a
);

146 
	`iscsi_‰ì_pdu
(
iscsi
, 
cmd_pdu
);

147 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

151 
tŸ_Àn
 -
Àn
;

152 
off£t
 +
Àn
;

155 
	}
}

158 
	$iscsi_timeout_sˇn
(
iscsi_c⁄ãxt
 *
iscsi
)

160 
iscsi_pdu
 *
pdu
;

161 
iscsi_pdu
 *
√xt_pdu
;

162 
time_t
 
t
 = 
	`time
(
NULL
);

164 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu = 
√xt_pdu
) {

165 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
;

166 
scsi_èsk
 *
èsk
;

168 
√xt_pdu
 = 
pdu
->
√xt
;

170 i‡(
pdu
->
scsi_timeout
 == 0) {

174 i‡(
t
 < 
pdu
->
scsi_timeout
) {

178 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_SCSI_REQUEST
) {

182 
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

183 
èsk
 = 
scsi_cbd©a
->task;

185 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

186 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TIMEOUT
,

187 
èsk
, 
pdu
->
¥iv©e_d©a
);

188 
	`iscsi_£t_îr‹
(
iscsi
, "SCSI commandÅimed out");

191 
èsk
->
°©us
 = 
SCSI_STATUS_TIMEOUT
;

193 
	}
}

200 
	$iscsi_scsi_comm™d_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

201 
scsi_èsk
 *
èsk
, 
iscsi_comm™d_cb
 
cb
,

202 
iscsi_d©a
 *
d
, *
¥iv©e_d©a
)

204 i‡(
iscsi
 && 
lun
 && 
èsk
 && 
cb
 && 
d
 && 
¥iv©e_d©a
)

208 
iscsi_pdu
 *
pdu
;

209 
Êags
;

211 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_NORMAL
) {

212 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command on "

217 i‡(
iscsi
->
is_loggedö
 == 0) {

218 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command while "

226 i‡(
d
 !
NULL
 && d->
d©a
 != NULL) {

227 
scsi_iovec
 *
iov
;

229 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

230 i‡(
iov
 =
NULL
) {

233 
iov
->
iov_ba£
 = 
d
->
d©a
;

234 
iov
->
iov_Àn
 = 
d
->
size
;

235 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

238 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_SCSI_REQUEST
,

239 
ISCSI_PDU_SCSI_RESPONSE
);

240 i‡(
pdu
 =
NULL
) {

241 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

246 
pdu
->
scsi_cbd©a
.
èsk
 =Åask;

247 
pdu
->
scsi_cbd©a
.
ˇŒback
 = 
cb
;

248 
pdu
->
scsi_cbd©a
.
¥iv©e_d©a
 =Örivate_data;

250 
pdu
->
∑ylﬂd_off£t
 = 0;

251 
pdu
->
∑ylﬂd_Àn
 = 0;

253 
	`scsi_£t_èsk_¥iv©e_±r
(
èsk
, &
pdu
->
scsi_cbd©a
);

256 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
|
ISCSI_PDU_SCSI_ATTR_SIMPLE
;

257 
èsk
->
x„r_dú
) {

258 
SCSI_XFER_NONE
:

260 
SCSI_XFER_READ
:

261 
Êags
 |
ISCSI_PDU_SCSI_READ
;

263 
SCSI_XFER_WRITE
:

264 
Êags
 |
ISCSI_PDU_SCSI_WRITE
;

267 i‡(
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_YES
) {

268 
uöt32_t
 
Àn
 = 
èsk
->
expx„æí
;

270 i‡(
Àn
 > 
iscsi
->
fú°_bur°_Àngth
) {

271 
Àn
 = 
iscsi
->
fú°_bur°_Àngth
;

274 i‡(
Àn
 > 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
) {

275 
Àn
 = 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
;

278 
pdu
->
∑ylﬂd_off£t
 = 0;

279 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

282 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

289 i‡(
iscsi
->
u£_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO


290 && 
pdu
->
∑ylﬂd_Àn
 < (
uöt32_t
)
èsk
->
expx„æí


291 && 
pdu
->
∑ylﬂd_Àn
 < 
iscsi
->
fú°_bur°_Àngth
) {

295 
Êags
 &~
ISCSI_PDU_SCSI_FINAL
;

299 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

302 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

303 
pdu
->
lun
 =Üun;

306 
	`iscsi_pdu_£t_expx„æí
(
pdu
, 
èsk
->
expx„æí
);

309 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

310 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

311 
iscsi
->
cmd¢
++;

314 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

317 
	`iscsi_pdu_£t_cdb
(
pdu
, 
èsk
);

319 
pdu
->
ˇŒback
 = 
iscsi_scsi_ª•⁄£_cb
;

320 
pdu
->
¥iv©e_d©a
 = &pdu->
scsi_cbd©a
;

322 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

323 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

325 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

334 i‡(!(
Êags
 & 
ISCSI_PDU_SCSI_FINAL
)) {

335 
uöt32_t
 
Àn
 = 
èsk
->
expx„æí
;

337 i‡(
Àn
 + 
pdu
->
∑ylﬂd_Àn
 > 
iscsi
->
fú°_bur°_Àngth
) {

338 
Àn
 = 
iscsi
->
fú°_bur°_Àngth
 - 
pdu
->
∑ylﬂd_Àn
;

340 
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 0xffffffff,

341 
pdu
->
∑ylﬂd_Àn
, 
Àn
);

345 
èsk
->
cmd¢
 = 
pdu
->cmdsn;

346 
èsk
->
ôt
 = 
pdu
->itt;

347 
èsk
->
lun
 =Üun;

350 
	}
}

353 
	$iscsi_¥o˚ss_scsi_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

354 
iscsi_ö_pdu
 *
ö
)

356 i‡(
iscsi
 && 
pdu
 && 
ö
)

359 
uöt32_t
 
°©¢
, 
maxcmd¢
, 
expcmd¢
, 
Êags
, 
°©us
;

360 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

361 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

363 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

364 i‡(
°©¢
 > 
iscsi
->statsn) {

365 
iscsi
->
°©¢
 = statsn;

368 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

369 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

370 
iscsi
->
maxcmd¢
 = maxcmdsn;

372 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

373 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

374 
iscsi
->
expcmd¢
 =Éxpcmdsn;

377 
Êags
 = 
ö
->
hdr
[1];

378 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

379 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseÖdu but Final bit is "

380 "nŸ së: 0x%02x.", 
Êags
);

381 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

382 
pdu
->
¥iv©e_d©a
);

385 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

386 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

387 "0x%02x.", 
Êags
);

388 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

389 
pdu
->
¥iv©e_d©a
);

393 
°©us
 = 
ö
->
hdr
[3];

395 
°©us
) {

396 
SCSI_STATUS_GOOD
:

397 
SCSI_STATUS_CONDITION_MET
:

398 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

399 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

401 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

402 
èsk
->
ªsiduÆ
 = 0;

407 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

408 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

409 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

410 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

412 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

420 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

422 
pdu
->
öd©a
.
d©a
 = 
NULL
;

423 
pdu
->
öd©a
.
size
 = 0;

425 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èsk
,

426 
pdu
->
¥iv©e_d©a
);

428 
SCSI_STATUS_CHECK_CONDITION
:

429 
èsk
->
d©aö
.
size
 = 
ö
->
d©a_pos
;

430 
èsk
->
d©aö
.
d©a
 = 
	`mÆloc
—ask->d©aö.
size
);

431 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

432 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate blob for "

436 
	`mem˝y
(
èsk
->
d©aö
.
d©a
, 
ö
->d©a,Åask->d©aö.
size
);

438 
èsk
->
£n£
.
îr‹_ty≥
 =Åask->
d©aö
.
d©a
[2] & 0x7f;

439 
èsk
->
£n£
.
îr‹_ty≥
) {

442 
èsk
->
£n£
.
key
 =Åask->
d©aö
.
d©a
[4] & 0x0f;

443 
èsk
->
£n£
.
ascq
 = 
	`scsi_gë_uöt16
(

444 &(
èsk
->
d©aö
.
d©a
[14]));

448 
èsk
->
£n£
.
key
 =Åask->
d©aö
.
d©a
[3] & 0x0f;

449 
èsk
->
£n£
.
ascq
 = 
	`scsi_gë_uöt16
(

450 &(
èsk
->
d©aö
.
d©a
[4]));

453 
	`iscsi_£t_îr‹
(
iscsi
, "SENSE KEY:%s(%d) ASCQ:%s(0x%04x)",

454 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),

455 
èsk
->
£n£
.
key
,

456 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),

457 
èsk
->
£n£
.
ascq
);

458 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CHECK_CONDITION
, 
èsk
,

459 
pdu
->
¥iv©e_d©a
);

461 
SCSI_STATUS_RESERVATION_CONFLICT
:

462 
	`iscsi_£t_îr‹
(
iscsi
, "RESERVATION CONFLICT");

463 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_RESERVATION_CONFLICT
,

464 
èsk
, 
pdu
->
¥iv©e_d©a
);

466 
SCSI_STATUS_TASK_SET_FULL
:

467 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_SET_FULL");

468 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_SET_FULL
,

469 
èsk
, 
pdu
->
¥iv©e_d©a
);

471 
SCSI_STATUS_ACA_ACTIVE
:

472 
	`iscsi_£t_îr‹
(
iscsi
, "ACA_ACTIVE");

473 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ACA_ACTIVE
,

474 
èsk
, 
pdu
->
¥iv©e_d©a
);

476 
SCSI_STATUS_TASK_ABORTED
:

477 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_ABORTED");

478 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_ABORTED
,

479 
èsk
, 
pdu
->
¥iv©e_d©a
);

481 
SCSI_STATUS_BUSY
:

482 
	`iscsi_£t_îr‹
(
iscsi
, "BUSY");

483 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_BUSY
,

484 
èsk
, 
pdu
->
¥iv©e_d©a
);

487 
	`iscsi_£t_îr‹
(
iscsi
, "Unknow¿SCSI sètu†:%d.", 
°©us
);

489 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

490 
pdu
->
¥iv©e_d©a
);

495 
	}
}

498 
	$iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

499 
iscsi_ö_pdu
 *
ö
, *
is_föished
)

501 
uöt32_t
 
°©¢
, 
maxcmd¢
, 
expcmd¢
, 
Êags
, 
°©us
;

502 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

503 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

504 
d¶
;

506 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

507 i‡(
°©¢
 > 
iscsi
->statsn) {

508 
iscsi
->
°©¢
 = statsn;

511 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

512 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

513 
iscsi
->
maxcmd¢
 = maxcmdsn;

515 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

516 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

517 
iscsi
->
expcmd¢
 =Éxpcmdsn;

520 
Êags
 = 
ö
->
hdr
[1];

521 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

522 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

523 "0x%02x.", 
Êags
);

524 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

525 
pdu
->
¥iv©e_d©a
);

528 
d¶
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[4]) & 0x00ffffff;

531 i‡(
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

532 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
öd©a
, 
ö
->
d©a
, 
d¶
, 0) != 0) {

533 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅoádd data "

539 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

540 *
is_föished
 = 0;

542 i‡((
Êags
&
ISCSI_PDU_DATA_CONTAINS_STATUS
) == 0) {

543 *
is_föished
 = 0;

546 i‡(*
is_föished
 == 0) {

550 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

551 
èsk
->
ªsiduÆ
 = 0;

556 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

557 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

558 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

559 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

561 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

569 
°©us
 = 
ö
->
hdr
[3];

570 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

571 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

577 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

579 
pdu
->
öd©a
.
d©a
 = 
NULL
;

580 
pdu
->
öd©a
.
size
 = 0;

582 
pdu
->
	`ˇŒback
(
iscsi
, 
°©us
, 
èsk
,Ödu->
¥iv©e_d©a
);

585 
	}
}

588 
	$iscsi_¥o˚ss_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

589 
iscsi_ö_pdu
 *
ö
)

591 
uöt32_t
 
ât
, 
off£t
, 
Àn
, 
maxcmd¢
, 
expcmd¢
;

593 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

594 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

595 
Àn
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

597 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

598 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

599 
iscsi
->
maxcmd¢
 = maxcmdsn;

601 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

602 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

603 
iscsi
->
expcmd¢
 =Éxpcmdsn;

606 
pdu
->
d©a¢
 = 0;

607 
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 
ât
, 
off£t
, 
Àn
);

609 
	}
}

615 
scsi_èsk
 *

616 
	$iscsi_ã°unôªady_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

617 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

619 
scsi_èsk
 *
èsk
;

621 
èsk
 = 
	`scsi_cdb_ã°unôªady
();

622 i‡(
èsk
 =
NULL
) {

623 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

625  
NULL
;

627 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

628 
NULL
, 
¥iv©e_d©a
) != 0) {

629 
	`scsi_‰ì_scsi_èsk
(
èsk
);

630  
NULL
;

633  
èsk
;

634 
	}
}

636 
scsi_èsk
 *

637 
	$iscsi_ªp‹éuns_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

638 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

640 
scsi_èsk
 *
èsk
;

642 i‡(
Æloc_Àn
 < 16) {

643 
	`iscsi_£t_îr‹
(
iscsi
, "MinimumállowedállocÜen for "

645 
Æloc_Àn
);

646  
NULL
;

649 
èsk
 = 
	`scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
);

650 i‡(
èsk
 =
NULL
) {

651 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

653  
NULL
;

656 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 0, 
èsk
, 
cb
,

657 
NULL
, 
¥iv©e_d©a
) != 0) {

658 
	`scsi_‰ì_scsi_èsk
(
èsk
);

659  
NULL
;

662  
èsk
;

663 
	}
}

665 
scsi_èsk
 *

666 
	$iscsi_öquúy_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

667 
∑ge_code
, 
maxsize
,

668 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

670 
scsi_èsk
 *
èsk
;

672 
èsk
 = 
	`scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
maxsize
);

673 i‡(
èsk
 =
NULL
) {

674 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

676  
NULL
;

678 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

679 
NULL
, 
¥iv©e_d©a
) != 0) {

680 
	`scsi_‰ì_scsi_èsk
(
èsk
);

681  
NULL
;

684  
èsk
;

685 
	}
}

687 
scsi_èsk
 *

688 
	$iscsi_ªadˇ∑côy10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

689 
pmi
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

691 
scsi_èsk
 *
èsk
;

693 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
);

694 i‡(
èsk
 =
NULL
) {

695 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

697  
NULL
;

699 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

700 
NULL
, 
¥iv©e_d©a
) != 0) {

701 
	`scsi_‰ì_scsi_èsk
(
èsk
);

702  
NULL
;

705  
èsk
;

706 
	}
}

708 
scsi_èsk
 *

709 
	$iscsi_ªadˇ∑côy16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

710 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

712 
scsi_èsk
 *
èsk
;

714 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy16
();

715 i‡(
èsk
 =
NULL
) {

716 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

718  
NULL
;

720 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

721 
NULL
, 
¥iv©e_d©a
) != 0) {

722 
	`scsi_‰ì_scsi_èsk
(
èsk
);

723  
NULL
;

726  
èsk
;

727 
	}
}

729 
scsi_èsk
 *

730 
	$iscsi_gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

731 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
,

732 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

734 
scsi_èsk
 *
èsk
;

736 
èsk
 = 
	`scsi_cdb_gë_lba_°©us
(
°¨tög_lba
, 
Æloc_Àn
);

737 i‡(
èsk
 =
NULL
) {

738 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

740  
NULL
;

742 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

743 
NULL
, 
¥iv©e_d©a
) != 0) {

744 
	`scsi_‰ì_scsi_èsk
(
èsk
);

745  
NULL
;

748  
èsk
;

749 
	}
}

751 
scsi_èsk
 *

752 
	$iscsi_ªad6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

753 
uöt32_t
 
d©Æí
, 
blocksize
,

754 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

756 
scsi_èsk
 *
èsk
;

758 i‡(
d©Æí
 % 
blocksize
 != 0) {

759 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

760 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

761  
NULL
;

764 
èsk
 = 
	`scsi_cdb_ªad6
(
lba
, 
d©Æí
, 
blocksize
);

765 i‡(
èsk
 =
NULL
) {

766 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

768  
NULL
;

770 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

771 
NULL
, 
¥iv©e_d©a
) != 0) {

772 
	`scsi_‰ì_scsi_èsk
(
èsk
);

773  
NULL
;

776  
èsk
;

777 
	}
}

779 
scsi_èsk
 *

780 
	$iscsi_ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

781 
uöt32_t
 
d©Æí
, 
blocksize
,

782 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

783 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

785 
scsi_èsk
 *
èsk
;

787 i‡(
d©Æí
 % 
blocksize
 != 0) {

788 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

789 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

790  
NULL
;

793 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

794 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

795 i‡(
èsk
 =
NULL
) {

796 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

798  
NULL
;

800 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

801 
NULL
, 
¥iv©e_d©a
) != 0) {

802 
	`scsi_‰ì_scsi_èsk
(
èsk
);

803  
NULL
;

806  
èsk
;

807 
	}
}

809 
scsi_èsk
 *

810 
	$iscsi_ªad12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

811 
uöt32_t
 
d©Æí
, 
blocksize
,

812 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

813 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

815 
scsi_èsk
 *
èsk
;

817 i‡(
d©Æí
 % 
blocksize
 != 0) {

818 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

819 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

820  
NULL
;

823 
èsk
 = 
	`scsi_cdb_ªad12
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

824 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

825 i‡(
èsk
 =
NULL
) {

826 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

828  
NULL
;

830 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

831 
NULL
, 
¥iv©e_d©a
) != 0) {

832 
	`scsi_‰ì_scsi_èsk
(
èsk
);

833  
NULL
;

836  
èsk
;

837 
	}
}

839 
scsi_èsk
 *

840 
	$iscsi_ªad16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

841 
uöt32_t
 
d©Æí
, 
blocksize
,

842 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

843 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

845 
scsi_èsk
 *
èsk
;

847 i‡(
d©Æí
 % 
blocksize
 != 0) {

848 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

849 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

850  
NULL
;

853 
èsk
 = 
	`scsi_cdb_ªad16
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

854 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

855 i‡(
èsk
 =
NULL
) {

856 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

858  
NULL
;

860 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

861 
NULL
, 
¥iv©e_d©a
) != 0) {

862 
	`scsi_‰ì_scsi_èsk
(
èsk
);

863  
NULL
;

866  
èsk
;

867 
	}
}

869 
scsi_èsk
 *

870 
	$iscsi_wrôe10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

871 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

872 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

873 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

875 
scsi_èsk
 *
èsk
;

876 
iscsi_d©a
 
d
;

878 i‡(
d©Æí
 % 
blocksize
 != 0) {

879 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

880 "blocksize:%d.", 
d©Æí
, 
blocksize
);

881  
NULL
;

884 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

885 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

886 i‡(
èsk
 =
NULL
) {

887 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

889  
NULL
;

891 
d
.
d©a
 = data;

892 
d
.
size
 = 
d©Æí
;

894 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

895 &
d
, 
¥iv©e_d©a
) != 0) {

896 
	`scsi_‰ì_scsi_èsk
(
èsk
);

897  
NULL
;

900  
èsk
;

901 
	}
}

903 
scsi_èsk
 *

904 
	$iscsi_wrôe12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

905 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

906 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

907 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

909 
scsi_èsk
 *
èsk
;

910 
iscsi_d©a
 
d
;

912 i‡(
d©Æí
 % 
blocksize
 != 0) {

913 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

914 "blocksize:%d.", 
d©Æí
, 
blocksize
);

915  
NULL
;

918 
èsk
 = 
	`scsi_cdb_wrôe12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

919 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

920 i‡(
èsk
 =
NULL
) {

921 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

923  
NULL
;

925 
d
.
d©a
 = data;

926 
d
.
size
 = 
d©Æí
;

928 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

929 &
d
, 
¥iv©e_d©a
) != 0) {

930 
	`scsi_‰ì_scsi_èsk
(
èsk
);

931  
NULL
;

934  
èsk
;

935 
	}
}

937 
scsi_èsk
 *

938 
	$iscsi_wrôe16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

939 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

940 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

941 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

943 
scsi_èsk
 *
èsk
;

944 
iscsi_d©a
 
d
;

946 i‡(
d©Æí
 % 
blocksize
 != 0) {

947 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

948 "blocksize:%d.", 
d©Æí
, 
blocksize
);

949  
NULL
;

952 
èsk
 = 
	`scsi_cdb_wrôe16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

953 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

954 i‡(
èsk
 =
NULL
) {

955 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

957  
NULL
;

959 
d
.
d©a
 = data;

960 
d
.
size
 = 
d©Æí
;

962 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

963 &
d
, 
¥iv©e_d©a
) != 0) {

964 
	`scsi_‰ì_scsi_èsk
(
èsk
);

965  
NULL
;

968  
èsk
;

969 
	}
}

971 
scsi_èsk
 *

972 
	$iscsi_‹wrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

973 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

974 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

975 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

977 
scsi_èsk
 *
èsk
;

978 
iscsi_d©a
 
d
;

980 i‡(
d©Æí
 % 
blocksize
 != 0) {

981 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

982 "blocksize:%d.", 
d©Æí
, 
blocksize
);

983  
NULL
;

986 
èsk
 = 
	`scsi_cdb_‹wrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

987 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

988 i‡(
èsk
 =
NULL
) {

989 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

991  
NULL
;

993 
d
.
d©a
 = data;

994 
d
.
size
 = 
d©Æí
;

996 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

997 &
d
, 
¥iv©e_d©a
) != 0) {

998 
	`scsi_‰ì_scsi_èsk
(
èsk
);

999  
NULL
;

1002  
èsk
;

1003 
	}
}

1005 
scsi_èsk
 *

1006 
	$iscsi_com∑ª™dwrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1007 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1008 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1009 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1011 
scsi_èsk
 *
èsk
;

1012 
iscsi_d©a
 
d
;

1014 i‡(
d©Æí
 % (
blocksize
 * 2) != 0) {

1015 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1016 "blocksizê* 2:%d.", 
d©Æí
, 
blocksize
 * 2);

1017  
NULL
;

1020 
èsk
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1021 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1022 i‡(
èsk
 =
NULL
) {

1023 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1025  
NULL
;

1027 
d
.
d©a
 = data;

1028 
d
.
size
 = 
d©Æí
;

1030 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1031 &
d
, 
¥iv©e_d©a
) != 0) {

1032 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1033  
NULL
;

1036  
èsk
;

1037 
	}
}

1039 
scsi_èsk
 *

1040 
	$iscsi_wrôevîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1041 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1042 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1043 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1045 
scsi_èsk
 *
èsk
;

1046 
iscsi_d©a
 
d
;

1048 i‡(
d©Æí
 % 
blocksize
 != 0) {

1049 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1050 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1051  
NULL
;

1054 
èsk
 = 
	`scsi_cdb_wrôevîify10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1055 
dpo
, 
bytchk
, 
group_numbî
);

1056 i‡(
èsk
 =
NULL
) {

1057 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1059  
NULL
;

1061 
d
.
d©a
 = data;

1062 
d
.
size
 = 
d©Æí
;

1064 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1065 &
d
, 
¥iv©e_d©a
) != 0) {

1066 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1067  
NULL
;

1070  
èsk
;

1071 
	}
}

1073 
scsi_èsk
 *

1074 
	$iscsi_wrôevîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1075 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1076 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1077 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1079 
scsi_èsk
 *
èsk
;

1080 
iscsi_d©a
 
d
;

1082 i‡(
d©Æí
 % 
blocksize
 != 0) {

1083 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1084 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1085  
NULL
;

1088 
èsk
 = 
	`scsi_cdb_wrôevîify12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1089 
dpo
, 
bytchk
, 
group_numbî
);

1090 i‡(
èsk
 =
NULL
) {

1091 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1093  
NULL
;

1095 
d
.
d©a
 = data;

1096 
d
.
size
 = 
d©Æí
;

1098 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1099 &
d
, 
¥iv©e_d©a
) != 0) {

1100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1101  
NULL
;

1104  
èsk
;

1105 
	}
}

1107 
scsi_èsk
 *

1108 
	$iscsi_wrôevîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1109 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1110 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1111 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1113 
scsi_èsk
 *
èsk
;

1114 
iscsi_d©a
 
d
;

1116 i‡(
d©Æí
 % 
blocksize
 != 0) {

1117 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1118 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1119  
NULL
;

1122 
èsk
 = 
	`scsi_cdb_wrôevîify16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1123 
dpo
, 
bytchk
, 
group_numbî
);

1124 i‡(
èsk
 =
NULL
) {

1125 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1127  
NULL
;

1129 
d
.
d©a
 = data;

1130 
d
.
size
 = 
d©Æí
;

1132 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1133 &
d
, 
¥iv©e_d©a
) != 0) {

1134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1135  
NULL
;

1138  
èsk
;

1139 
	}
}

1141 
scsi_èsk
 *

1142 
	$iscsi_vîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1143 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1144 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1146 
scsi_èsk
 *
èsk
;

1147 
iscsi_d©a
 
d
;

1149 i‡(
d©Æí
 % 
blocksize
 != 0) {

1150 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1151 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1152  
NULL
;

1155 
èsk
 = 
	`scsi_cdb_vîify10
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1156 i‡(
èsk
 =
NULL
) {

1157 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1159  
NULL
;

1161 
d
.
d©a
 = data;

1162 
d
.
size
 = 
d©Æí
;

1164 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1165 &
d
, 
¥iv©e_d©a
) != 0) {

1166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1167  
NULL
;

1170  
èsk
;

1171 
	}
}

1173 
scsi_èsk
 *

1174 
	$iscsi_vîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1175 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1176 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1178 
scsi_èsk
 *
èsk
;

1179 
iscsi_d©a
 
d
;

1181 i‡(
d©Æí
 % 
blocksize
 != 0) {

1182 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1183 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1184  
NULL
;

1187 
èsk
 = 
	`scsi_cdb_vîify12
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1188 i‡(
èsk
 =
NULL
) {

1189 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1191  
NULL
;

1193 
d
.
d©a
 = data;

1194 
d
.
size
 = 
d©Æí
;

1196 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1197 &
d
, 
¥iv©e_d©a
) != 0) {

1198 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1199  
NULL
;

1202  
èsk
;

1203 
	}
}

1205 
scsi_èsk
 *

1206 
	$iscsi_vîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1207 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1208 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1210 
scsi_èsk
 *
èsk
;

1211 
iscsi_d©a
 
d
;

1213 i‡(
d©Æí
 % 
blocksize
 != 0) {

1214 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1215 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1216  
NULL
;

1219 
èsk
 = 
	`scsi_cdb_vîify16
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1220 i‡(
èsk
 =
NULL
) {

1221 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1223  
NULL
;

1225 
d
.
d©a
 = data;

1226 
d
.
size
 = 
d©Æí
;

1228 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1229 &
d
, 
¥iv©e_d©a
) != 0) {

1230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1231  
NULL
;

1234  
èsk
;

1235 
	}
}

1237 
scsi_èsk
 *

1238 
	$iscsi_mode£À˘6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1239 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1240 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1242 
scsi_èsk
 *
èsk
;

1243 
scsi_d©a
 *
d©a
;

1244 
iscsi_d©a
 
d
;

1246 
èsk
 = 
	`scsi_cdb_mode£À˘6
(
pf
, 
•
, 255);

1247 i‡(
èsk
 =
NULL
) {

1248 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1250  
NULL
;

1252 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 1);

1253 i‡(
d©a
 =
NULL
) {

1254 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1256 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1257  
NULL
;

1260 
d
.
d©a
 = data->data;

1261 
d
.
size
 = 
d©a
->size;

1262 
èsk
->
cdb
[4] = 
d©a
->
size
;

1263 
èsk
->
expx„æí
 = 
d©a
->
size
;

1265 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1266 &
d
, 
¥iv©e_d©a
) != 0) {

1267 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1268  
NULL
;

1271  
èsk
;

1272 
	}
}

1274 
scsi_èsk
 *

1275 
	$iscsi_mode£À˘10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1276 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1277 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1279 
scsi_èsk
 *
èsk
;

1280 
scsi_d©a
 *
d©a
;

1281 
iscsi_d©a
 
d
;

1283 
èsk
 = 
	`scsi_cdb_mode£À˘10
(
pf
, 
•
, 255);

1284 i‡(
èsk
 =
NULL
) {

1285 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1287  
NULL
;

1289 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 0);

1290 i‡(
d©a
 =
NULL
) {

1291 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1293 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1294  
NULL
;

1297 
d
.
d©a
 = data->data;

1298 
d
.
size
 = 
d©a
->size;

1299 
èsk
->
cdb
[7] = 
d©a
->
size
 >> 8;

1300 
èsk
->
cdb
[8] = 
d©a
->
size
 & 0xff;

1302 
èsk
->
expx„æí
 = 
d©a
->
size
;

1304 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1305 &
d
, 
¥iv©e_d©a
) != 0) {

1306 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1307  
NULL
;

1310  
èsk
;

1311 
	}
}

1313 
scsi_èsk
 *

1314 
	$iscsi_mode£n£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
, 
pc
,

1315 
∑ge_code
, 
sub_∑ge_code
,

1316 
Æloc_Àn
,

1317 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1319 
scsi_èsk
 *
èsk
;

1321 
èsk
 = 
	`scsi_cdb_mode£n£6
(
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1322 
Æloc_Àn
);

1323 i‡(
èsk
 =
NULL
) {

1324 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1326  
NULL
;

1328 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1329 
NULL
, 
¥iv©e_d©a
) != 0) {

1330 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1331  
NULL
;

1334  
èsk
;

1335 
	}
}

1337 
scsi_èsk
 *

1338 
	$iscsi_mode£n£10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1339 
ŒbØ
, 
dbd
, 
pc
,

1340 
∑ge_code
, 
sub_∑ge_code
,

1341 
Æloc_Àn
,

1342 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1344 
scsi_èsk
 *
èsk
;

1346 
èsk
 = 
	`scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1347 
Æloc_Àn
);

1348 i‡(
èsk
 =
NULL
) {

1349 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1351  
NULL
;

1353 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1354 
NULL
, 
¥iv©e_d©a
) != 0) {

1355 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1356  
NULL
;

1359  
èsk
;

1360 
	}
}

1362 
scsi_èsk
 *

1363 
	$iscsi_°¨t°›unô_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1364 
immed
, 
pcm
, 
pc
,

1365 
no_Êush
, 
l€j
, 
°¨t
,

1366 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1368 
scsi_èsk
 *
èsk
;

1370 
èsk
 = 
	`scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
,

1371 
l€j
, 
°¨t
);

1372 i‡(
èsk
 =
NULL
) {

1373 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1375  
NULL
;

1377 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1378 
NULL
, 
¥iv©e_d©a
) != 0) {

1379 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1380  
NULL
;

1383  
èsk
;

1384 
	}
}

1386 
scsi_èsk
 *

1387 
	$iscsi_¥evíèŒow_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1388 
¥evít
,

1389 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1391 
scsi_èsk
 *
èsk
;

1393 
èsk
 = 
	`scsi_cdb_¥evíèŒow
(
¥evít
);

1394 i‡(
èsk
 =
NULL
) {

1395 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1397  
NULL
;

1399 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1400 
NULL
, 
¥iv©e_d©a
) != 0) {

1401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1402  
NULL
;

1405  
èsk
;

1406 
	}
}

1408 
scsi_èsk
 *

1409 
	$iscsi_synchr⁄izeˇche10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

1410 
num_blocks
, 
syn˙v
, 
immed
,

1411 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1413 
scsi_èsk
 *
èsk
;

1415 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
,

1416 
immed
);

1417 i‡(
èsk
 =
NULL
) {

1418 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1420  
NULL
;

1422 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1423 
NULL
, 
¥iv©e_d©a
) != 0) {

1424 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1425  
NULL
;

1428  
èsk
;

1429 
	}
}

1431 
scsi_èsk
 *

1432 
	$iscsi_synchr⁄izeˇche16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1433 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
,

1434 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1436 
scsi_èsk
 *
èsk
;

1438 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche16
(
lba
, 
num_blocks
, 
syn˙v
,

1439 
immed
);

1440 i‡(
èsk
 =
NULL
) {

1441 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1443  
NULL
;

1445 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1446 
NULL
, 
¥iv©e_d©a
) != 0) {

1447 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1448  
NULL
;

1451  
èsk
;

1452 
	}
}

1454 
scsi_èsk
 *

1455 
	$iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1456 
ß
, 
uöt16_t
 
x„æí
,

1457 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1459 
scsi_èsk
 *
èsk
;

1461 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
ß
, 
x„æí
);

1462 i‡(
èsk
 =
NULL
) {

1463 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1465  
NULL
;

1467 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1468 
NULL
, 
¥iv©e_d©a
) != 0) {

1469 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1470  
NULL
;

1473  
èsk
;

1474 
	}
}

1476 
scsi_èsk
 *

1477 
	$iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1478 
ß
, 
sc›e
, 
ty≥
, *
∑øm
,

1479 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1481 
scsi_èsk
 *
èsk
;

1483 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(
ß
, 
sc›e
, 
ty≥
, 
∑øm
);

1484 i‡(
èsk
 =
NULL
) {

1485 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1487  
NULL
;

1489 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1490 
NULL
, 
¥iv©e_d©a
) != 0) {

1491 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1492  
NULL
;

1495  
èsk
;

1496 
	}
}

1498 
scsi_èsk
 *

1499 
	$iscsi_¥e„tch10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1500 
num_blocks
, 
immed
, 
group
,

1501 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1503 
scsi_èsk
 *
èsk
;

1505 
èsk
 = 
	`scsi_cdb_¥e„tch10
(
lba
, 
num_blocks
, 
immed
, 
group
);

1506 i‡(
èsk
 =
NULL
) {

1507 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1509  
NULL
;

1511 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1512 
NULL
, 
¥iv©e_d©a
) != 0) {

1513 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1514  
NULL
;

1517  
èsk
;

1518 
	}
}

1520 
scsi_èsk
 *

1521 
	$iscsi_¥e„tch16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1522 
num_blocks
, 
immed
, 
group
,

1523 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1525 
scsi_èsk
 *
èsk
;

1527 
èsk
 = 
	`scsi_cdb_¥e„tch16
(
lba
, 
num_blocks
, 
immed
, 
group
);

1528 i‡(
èsk
 =
NULL
) {

1529 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1531  
NULL
;

1533 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1534 
NULL
, 
¥iv©e_d©a
) != 0) {

1535 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1536  
NULL
;

1539  
èsk
;

1540 
	}
}

1542 
scsi_èsk
 *

1543 
	$iscsi_wrôeßme10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1544 *
d©a
, 
uöt32_t
 
d©Æí
,

1545 
uöt16_t
 
num_blocks
,

1546 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1547 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1549 
scsi_èsk
 *
èsk
;

1550 
iscsi_d©a
 
d
;

1552 
èsk
 = 
	`scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
, 
num_blocks
);

1553 i‡(
èsk
 =
NULL
) {

1554 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1556  
NULL
;

1558 
d
.
d©a
 = data;

1559 
d
.
size
 = 
d©Æí
;

1561 i‡(
d©a
 !
NULL
) {

1562 
èsk
->
expx„æí
 = 
d©Æí
;

1564 
èsk
->
expx„æí
 = 0;

1565 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1567 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1568 &
d
, 
¥iv©e_d©a
) != 0) {

1569 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1570  
NULL
;

1572  
èsk
;

1573 
	}
}

1575 
scsi_èsk
 *

1576 
	$iscsi_wrôeßme16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1577 *
d©a
, 
uöt32_t
 
d©Æí
,

1578 
uöt32_t
 
num_blocks
,

1579 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1580 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1582 
scsi_èsk
 *
èsk
;

1583 
iscsi_d©a
 
d
;

1585 
èsk
 = 
	`scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
, 
num_blocks
);

1586 i‡(
èsk
 =
NULL
) {

1587 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1589  
NULL
;

1591 
d
.
d©a
 = data;

1592 
d
.
size
 = 
d©Æí
;

1594 i‡(
d©a
 !
NULL
) {

1595 
èsk
->
expx„æí
 = 
d©Æí
;

1597 
èsk
->
expx„æí
 = 0;

1598 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1601 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1602 &
d
, 
¥iv©e_d©a
) != 0) {

1603 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1604  
NULL
;

1607  
èsk
;

1608 
	}
}

1610 
scsi_èsk
 *

1611 
	$iscsi_unm≠_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1612 
unm≠_li°
 *
li°
, 
li°_Àn
,

1613 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1615 
scsi_èsk
 *
èsk
;

1616 
scsi_iovec
 *
iov
;

1617 *
d©a
;

1618 
x„æí
;

1619 
i
;

1621 
x„æí
 = 8 + 
li°_Àn
 * 16;

1623 
èsk
 = 
	`scsi_cdb_unm≠
(
™ch‹
, 
group
, 
x„æí
);

1624 i‡(
èsk
 =
NULL
) {

1625 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1627  
NULL
;

1630 
d©a
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

1631 i‡(
d©a
 =
NULL
) {

1632 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1634 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1635  
NULL
;

1637 
	`scsi_£t_uöt16
(&
d©a
[0], 
x„æí
 - 2);

1638 
	`scsi_£t_uöt16
(&
d©a
[2], 
x„æí
 - 8);

1639 
i
 = 0; i < 
li°_Àn
; i++) {

1640 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
], 
li°
[i].
lba
 >> 32);

1641 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 4], 
li°
[i].
lba
 & 0xffffffff);

1642 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 8], 
li°
[i].
num
);

1645 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

1646 i‡(
iov
 =
NULL
) {

1647 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1648  
NULL
;

1650 
iov
->
iov_ba£
 = 
d©a
;

1651 
iov
->
iov_Àn
 = 
x„æí
;

1652 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

1654 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1655 
NULL
, 
¥iv©e_d©a
) != 0) {

1656 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1657  
NULL
;

1660  
èsk
;

1661 
	}
}

1663 
scsi_iove˘‹
 *

1664 
	$iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

1666 
iscsi_pdu
 *
pdu
;

1667 
uöt32_t
 
ôt
;

1669 i‡((
ö
->
hdr
[0] & 0x3fË!
ISCSI_PDU_DATA_IN
) {

1670  
NULL
;

1673 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

1674 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

1675 i‡(
pdu
->
ôt
 == itt) {

1680 i‡(
pdu
 =
NULL
) {

1681  
NULL
;

1684 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

1685  
NULL
;

1688  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
;

1689 
	}
}

1691 
scsi_iove˘‹
 *

1692 
	$iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

1694 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
.
iov
 =
NULL
) {

1695  
NULL
;

1698  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
;

1699 
	}
}

1701 
scsi_èsk
 *

1702 
	$iscsi_ªadtoc_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
,

1703 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
,

1704 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1706 
scsi_èsk
 *
èsk
;

1708 
èsk
 = 
	`scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
);

1709 i‡(
èsk
 =
NULL
) {

1710 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1712  
NULL
;

1714 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1715 
NULL
, 
¥iv©e_d©a
) != 0) {

1716 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1717  
NULL
;

1720  
èsk
;

1721 
	}
}

1723 
scsi_èsk
 *

1724 
	$iscsi_ª£rve6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1725 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1727 
scsi_èsk
 *
èsk
;

1729 
èsk
 = 
	`scsi_cdb_ª£rve6
();

1730 i‡(
èsk
 =
NULL
) {

1731 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1733  
NULL
;

1735 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1736 
NULL
, 
¥iv©e_d©a
) != 0) {

1737 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1738  
NULL
;

1741  
èsk
;

1742 
	}
}

1744 
scsi_èsk
 *

1745 
	$iscsi_ªÀa£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1746 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1748 
scsi_èsk
 *
èsk
;

1750 
èsk
 = 
	`scsi_cdb_ªÀa£6
();

1751 i‡(
èsk
 =
NULL
) {

1752 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1754  
NULL
;

1756 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1757 
NULL
, 
¥iv©e_d©a
) != 0) {

1758 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1759  
NULL
;

1762  
èsk
;

1763 
	}
}

1766 
scsi_èsk
 *

1767 
	$iscsi_ßnôize_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1768 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1769 
iscsi_d©a
 *
d©a
,

1770 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1772 
scsi_èsk
 *
èsk
;

1774 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1775 i‡(
èsk
 =
NULL
) {

1776 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1778  
NULL
;

1780 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1781 
d©a
, 
¥iv©e_d©a
) != 0) {

1782 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1783  
NULL
;

1786  
èsk
;

1787 
	}
}

1789 
scsi_èsk
 *

1790 
	$iscsi_ßnôize_block_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1791 
immed
, 
au£
,

1792 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1794 
scsi_èsk
 *
èsk
;

1796 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_BLOCK_ERASE
, 0);

1797 i‡(
èsk
 =
NULL
) {

1798 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1800  
NULL
;

1802 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1803 
NULL
, 
¥iv©e_d©a
) != 0) {

1804 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1805  
NULL
;

1808  
èsk
;

1809 
	}
}

1811 
scsi_èsk
 *

1812 
	$iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1813 
immed
, 
au£
,

1814 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1816 
scsi_èsk
 *
èsk
;

1818 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0);

1819 i‡(
èsk
 =
NULL
) {

1820 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1822  
NULL
;

1824 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1825 
NULL
, 
¥iv©e_d©a
) != 0) {

1826 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1827  
NULL
;

1830  
èsk
;

1831 
	}
}

1833 
scsi_èsk
 *

1834 
	$iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1835 
immed
, 
au£
,

1836 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1838 
scsi_èsk
 *
èsk
;

1840 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
,

1841 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 0);

1842 i‡(
èsk
 =
NULL
) {

1843 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1845  
NULL
;

1847 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1848 
NULL
, 
¥iv©e_d©a
) != 0) {

1849 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1850  
NULL
;

1853  
èsk
;

1854 
	}
}

1856 
scsi_èsk
 *

1857 
	$iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1858 
r˘d
, 
›ti⁄s
,

1859 
›code
, 
ß
,

1860 
uöt32_t
 
Æloc_Àn
,

1861 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1863 
scsi_èsk
 *
èsk
;

1865 
èsk
 = 
	`scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
›code
, 
ß
,

1866 
Æloc_Àn
);

1867 i‡(
èsk
 =
NULL
) {

1868 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1870  
NULL
;

1872 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1873 
NULL
, 
¥iv©e_d©a
) != 0) {

1874 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1875  
NULL
;

1878  
èsk
;

1879 
	}
}

1881 
scsi_èsk
 *

1882 
	$iscsi_scsi_gë_èsk_‰om_pdu
(
iscsi_pdu
 *
pdu
)

1884  
pdu
->
scsi_cbd©a
.
èsk
;

1885 
	}
}

1888 
	$iscsi_scsi_ˇn˚l_èsk
(
iscsi_c⁄ãxt
 *
iscsi
,

1889 
scsi_èsk
 *
èsk
)

1891 
iscsi_pdu
 *
pdu
;

1893 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

1894 i‡(
pdu
->
ôt
 =
èsk
->itt) {

1895 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

1896 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1897 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1898 
pdu
->
¥iv©e_d©a
);

1900 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1904 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

1905 i‡(
pdu
->
ôt
 =
èsk
->itt) {

1906 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

1907 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1908 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1909 
pdu
->
¥iv©e_d©a
);

1911 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1916 
	}
}

1919 
	$iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi_c⁄ãxt
 *
iscsi
)

1921 
iscsi_pdu
 *
pdu
;

1923 (
pdu
 = 
iscsi
->
waôpdu
)) {

1924 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

1925 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1926 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1927 
pdu
->
¥iv©e_d©a
);

1929 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1931 (
pdu
 = 
iscsi
->
outqueue
)) {

1932 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

1933 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1934 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1935 
pdu
->
¥iv©e_d©a
);

1937 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1939 
	}
}

	@lib/logging.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 #i‡
deföed
(
WIN32
)

34 
	~"wö32/wö32_com∑t.h
"

37 
	~<°dio.h
>

38 
	~<°d¨g.h
>

39 
	~"iscsi.h
"

40 
	~"iscsi-¥iv©e.h
"

41 
	~"scsi-lowÀvñ.h
"

44 
	$iscsi_log_to_°dîr
(
Àvñ
, c⁄° *
mesßge
)

46 
	`Ârötf
(
°dîr
, "libiscsi:%d %s\n", 
Àvñ
, 
mesßge
);

47 
	}
}

50 
	$iscsi_£t_log_‚
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_log_‚
 
‚
)

52 
iscsi
->
log_‚
 = 
‚
;

53 
	}
}

56 
	$iscsi_log_mesßge
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
, c⁄° *
f‹m©
, ...)

58 
va_li°
 
≠
;

59 
mesßge
[1024];

60 
ªt
;

62 i‡(
iscsi
->
log_‚
 =
NULL
) {

66 
	`va_°¨t
(
≠
, 
f‹m©
);

67 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

68 
	`va_íd
(
≠
);

70 i‡(
ªt
 < 0) {

74 i‡(
iscsi
->
èrgë_«me
[0]) {

75 
mesßge2
[1024];

77 
	`¢¥ötf
(
mesßge2
, 1024, "%†[%s]", 
mesßge
, 
iscsi
->
èrgë_«me
);

78 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge2
);

81 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge
);

82 
	}
}

	@lib/login.c

18 #i‚de‡
_GNU_SOURCE


19 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 #ifde‡
HAVE_ARPA_INET_H


31 
	~<¨∑/öë.h
>

34 #i‡
deföed
(
WIN32
)

35 
	~<wösock2.h
>

36 
	~"wö32/wö32_com∑t.h
"

39 
	~<°dio.h
>

40 
	~<as£π.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~"iscsi.h
"

44 
	~"iscsi-¥iv©e.h
"

45 
	~"scsi-lowÀvñ.h
"

46 
	~"md5.h
"

47 #ifde‡
HAVE_LIBGCRYPT


48 
	~<g¸y±.h
>

52 
	$iscsi_logö_add_öôüt‹«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

54 
°r
[
MAX_STRING_SIZE
+1];

57 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


58 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

62 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Name=%s", 
iscsi
->
öôüt‹_«me
) == -1) {

63 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

66 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

68 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

72 
	}
}

75 
	$iscsi_logö_add_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

77 
°r
[
MAX_STRING_SIZE
+1];

80 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


81 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

85 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Alüs=%s", 
iscsi
->
Æüs
) == -1) {

86 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

90 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

92 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

96 
	}
}

99 
	$iscsi_logö_add_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

101 
°r
[
MAX_STRING_SIZE
+1];

104 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


105 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

109 i‡(!
iscsi
->
èrgë_«me
[0]) {

110 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÇormal connect but "

115 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "T¨gëName=%s", 
iscsi
->
èrgë_«me
) == -1) {

116 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

120 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

122 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

126 
	}
}

129 
	$iscsi_logö_add_£ssi⁄ty≥
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

131 
°r
[
MAX_STRING_SIZE
+1];

134 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


135 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

139 
iscsi
->
£ssi⁄_ty≥
) {

140 
ISCSI_SESSION_DISCOVERY
:

141 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=Discovîy",
MAX_STRING_SIZE
);

143 
ISCSI_SESSION_NORMAL
:

144 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=N‹mÆ",
MAX_STRING_SIZE
);

147 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot handle sessions %d yet.",

148 
iscsi
->
£ssi⁄_ty≥
);

151 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

153 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

158 
	}
}

161 
	$iscsi_logö_add_hódîdige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

163 
°r
[
MAX_STRING_SIZE
+1];

166 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

170 
iscsi
->
w™t_hódî_dige°
) {

171 
ISCSI_HEADER_DIGEST_NONE
:

172 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e",
MAX_STRING_SIZE
);

174 
ISCSI_HEADER_DIGEST_NONE_CRC32C
:

175 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e,CRC32C",
MAX_STRING_SIZE
);

177 
ISCSI_HEADER_DIGEST_CRC32C_NONE
:

178 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C,N⁄e",
MAX_STRING_SIZE
);

180 
ISCSI_HEADER_DIGEST_CRC32C
:

181 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C",
MAX_STRING_SIZE
);

184 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

188 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

190 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

195 
	}
}

198 
	$iscsi_logö_add_d©adige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

200 
°r
[
MAX_STRING_SIZE
+1];

203 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

207 
	`°∫˝y
(
°r
,"D©aDige°=N⁄e",
MAX_STRING_SIZE
);

208 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

210 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

215 
	}
}

218 
	$iscsi_logö_add_öôüÃ2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

220 
°r
[
MAX_STRING_SIZE
+1];

223 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

227 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "InôülR2T=%s", 
iscsi
->
w™t_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO
 ?

229 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

233 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

235 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

240 
	}
}

243 
	$iscsi_logö_add_immedüãd©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

245 
°r
[
MAX_STRING_SIZE
+1];

248 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

252 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "ImmedüãD©a=%s", 
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
 ?

254 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

258 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

260 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

265 
	}
}

268 
	$iscsi_logö_add_maxbur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

270 
°r
[
MAX_STRING_SIZE
+1];

273 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

277 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxBur°Lígth=%d", 
iscsi
->
max_bur°_Àngth
) == -1) {

278 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

282 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

284 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

288 
	}
}

291 
	$iscsi_logö_add_fú°bur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

293 
°r
[
MAX_STRING_SIZE
+1];

296 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

300 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Fú°Bur°Lígth=%d", 
iscsi
->
fú°_bur°_Àngth
) == -1) {

301 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

305 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

307 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

311 
	}
}

314 
	$iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

316 
°r
[
MAX_STRING_SIZE
+1];

319 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

323 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxRecvD©aSegmítLígth=%d", 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) == -1) {

324 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

328 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

330 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

334 
	}
}

337 
	$iscsi_logö_add_d©≠duö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

339 
°r
[
MAX_STRING_SIZE
+1];

342 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

346 
	`°∫˝y
(
°r
,"D©aPDUInOrdî=Yes",
MAX_STRING_SIZE
);

347 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

349 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

354 
	}
}

357 
	$iscsi_logö_add_deÁu…time2waô
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

359 
°r
[
MAX_STRING_SIZE
+1];

362 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

366 
	`°∫˝y
(
°r
,"DeÁu…Time2Waô=2",
MAX_STRING_SIZE
);

367 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

369 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

374 
	}
}

377 
	$iscsi_logö_add_deÁu…time2ªèö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

379 
°r
[
MAX_STRING_SIZE
+1];

382 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

386 
	`°∫˝y
(
°r
,"DeÁu…Time2Rëaö=0",
MAX_STRING_SIZE
);

387 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

389 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

394 
	}
}

397 
	$iscsi_logö_add_ifm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

399 
°r
[
MAX_STRING_SIZE
+1];

402 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

406 
	`°∫˝y
(
°r
,"IFM¨kî=No",
MAX_STRING_SIZE
);

407 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

409 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

414 
	}
}

417 
	$iscsi_logö_add_ofm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

419 
°r
[
MAX_STRING_SIZE
+1];

422 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

426 
	`°∫˝y
(
°r
,"OFM¨kî=No",
MAX_STRING_SIZE
);

427 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

429 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

434 
	}
}

437 
	$iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

439 
°r
[
MAX_STRING_SIZE
+1];

442 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

446 
	`°∫˝y
(
°r
,"MaxC⁄√˘i⁄s=1",
MAX_STRING_SIZE
);

447 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

449 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

454 
	}
}

457 
	$iscsi_logö_add_maxout°™dögr2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

459 
°r
[
MAX_STRING_SIZE
+1];

462 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

466 
	`°∫˝y
(
°r
,"MaxOut°™dögR2T=1",
MAX_STRING_SIZE
);

467 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

469 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

474 
	}
}

477 
	$iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

479 
°r
[
MAX_STRING_SIZE
+1];

482 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

486 
	`°∫˝y
(
°r
,"Eº‹RecovîyLevñ=0",
MAX_STRING_SIZE
);

487 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

489 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

494 
	}
}

497 
	$iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

499 
°r
[
MAX_STRING_SIZE
+1];

502 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

506 
	`°∫˝y
(
°r
,"D©aSequí˚InOrdî=Yes",
MAX_STRING_SIZE
);

507 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

509 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

514 
	}
}

517 
	$iscsi_logö_add_authmëhod
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

519 
°r
[
MAX_STRING_SIZE
+1];

521 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


522 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

526 
	`°∫˝y
(
°r
,"AuthMëhod=CHAP,N⁄e",
MAX_STRING_SIZE
);

527 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

529 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

534 
	}
}

537 
	$iscsi_logö_add_authÆg‹ôhm
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

539 
°r
[
MAX_STRING_SIZE
+1];

541 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


542 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
) {

546 
	`°∫˝y
(
°r
,"CHAP_A=5",
MAX_STRING_SIZE
);

547 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

549 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

554 
	}
}

557 
	$iscsi_logö_add_ch≠_u£∫ame
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

559 
°r
[
MAX_STRING_SIZE
+1];

561 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


562 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

566 
	`°∫˝y
(
°r
,"CHAP_N=",
MAX_STRING_SIZE
);

567 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

569 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

572 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
,

573 (*)
iscsi
->
u£r
,

574 
	`°æí
(
iscsi
->
u£r
) +1) != 0) {

575 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

581 
	}
}

584 
	$h2i
(
h
)

586 i‡(
h
 >= 'a' && h <= 'f') {

587  
h
 - 'a' + 10;

589 i‡(
h
 >= 'A' && h <= 'F') {

590  
h
 - 'A' + 10;

592  
h
 - '0';

593 
	}
}

596 
	$i2h
(
i
)

598 i‡(
i
 >= 10) {

599  
i
 - 10 + 'A';

602  
i
 + '0';

603 
	}
}

605 #i‚de‡
HAVE_LIBGCRYPT


606 
MD5C⁄ãxt
 *
	tg¸y_md_hd_t
;

607 
	#g¸y_md_wrôe
 
MD5Upd©e


	)

608 
	#GCRY_MD_MD5
 1

	)

610 
	$g¸y_md_›í
(
g¸y_md_hd_t
 *
hd
, 
Ægo
, 
Êags
)

612 
	`as£π
(
Ægo
 =
GCRY_MD_MD5
 && 
Êags
 == 0);

613 *
hd
 = 
	`mÆloc
((
MD5C⁄ãxt
));

614 i‡(*
hd
) {

615 
	`MD5Inô
(*
hd
);

617 
	}
}

619 
	$g¸y_md_putc
(
g¸y_md_hd_t
 
h
, 
c
)

621 
	`MD5Upd©e
(
h
, &
c
, 1);

622 
	}
}

624 *
	$g¸y_md_ªad
(
g¸y_md_hd_t
 
h
, 
Ægo
)

626 
dige°
[16];

627 
	`as£π
(
Ægo
 =0 ||álgÿ=
GCRY_MD_MD5
);

629 
	`MD5FöÆ
(
dige°
, 
h
);

630  
	`mem˝y
(
h
->
buf
, 
dige°
, (digest));

631 
	}
}

633 
	$g¸y_md_˛o£
(
g¸y_md_hd_t
 
h
)

635 
	`mem£t
(
h
, 0, (*h));

636 
	`‰ì
(
h
);

637 
	}
}

641 
	$iscsi_logö_add_ch≠_ª•⁄£
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

643 
°r
[
MAX_STRING_SIZE
+1];

644 * 
°Ω
;

645 
c
, 
cc
[2];

646 
dige°
[16];

647 
g¸y_md_hd_t
 
˘x
;

648 
i
;

650 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


651 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

655 
	`g¸y_md_›í
(&
˘x
, 
GCRY_MD_MD5
, 0);

656 i‡(!
˘x
) {

657 
	`iscsi_£t_îr‹
(
iscsi
, "Cannot create MD5álgorithm");

661 i‡(!
iscsi
->
ch≠_c
[0]) {

662 
	`iscsi_£t_îr‹
(
iscsi
, "No CHAP challenge found");

665 
	`g¸y_md_putc
(
˘x
, 
iscsi
->
ch≠_i
);

666 
	`g¸y_md_wrôe
(
˘x
, (*)
iscsi
->
∑sswd
, 
	`°æí
(iscsi->passwd));

668 
°Ω
 = 
iscsi
->
ch≠_c
;

669 *
°Ω
 != 0) {

670 
c
 = (
	`h2i
(
°Ω
[0]) << 4) | h2i(strp[1]);

671 
°Ω
 += 2;

672 
	`g¸y_md_putc
(
˘x
, 
c
);

674 
	`mem˝y
(
dige°
, 
	`g¸y_md_ªad
(
˘x
, 0), (digest));

675 
	`g¸y_md_˛o£
(
˘x
);

677 
	`°∫˝y
(
°r
,"CHAP_R=0x",
MAX_STRING_SIZE
);

678 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

680 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

684 
i
=0; i<16; i++) {

685 
c
 = 
dige°
[
i
];

686 
cc
[0] = 
	`i2h
((
c
 >> 4)&0x0f);

687 
cc
[1] = 
	`i2h
((
c
 )&0x0f);

688 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
cc
[0], 2) != 0) {

689 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

694 
c
 = 0;

695 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
c
, 1) != 0) {

696 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

702 
	}
}

705 
	$iscsi_logö_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

706 *
¥iv©e_d©a
)

708 
iscsi_pdu
 *
pdu
;

709 
å™sô
;

711 i‡(
iscsi
->
logö_©ãm±s
++ > 10) {

712 
	`iscsi_£t_îr‹
(
iscsi
, "loginÅookÅoo manyÅries."

717 i‡(
iscsi
->
is_loggedö
 != 0) {

718 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogin whileálreadyÜogged "

723 
iscsi
->
£ssi⁄_ty≥
) {

724 
ISCSI_SESSION_DISCOVERY
:

725 
ISCSI_SESSION_NORMAL
:

728 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoÜogin without setting "

733 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
,

734 
ISCSI_PDU_LOGIN_REQUEST
,

735 
ISCSI_PDU_LOGIN_RESPONSE
,

736 
iscsi
->
ôt
, 0);

737 i‡(
pdu
 =
NULL
) {

738 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

744 
	`iscsi_pdu_£t_immedüã
(
pdu
);

746 i‡(!
iscsi
->
u£r
[0]) {

747 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_OPNEG
;

750 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

751 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

753 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

754 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_FF
;

757 
å™sô
 = 0;

758 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

759 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

761 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

762 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

763 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

765 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

766 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

771 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
å™sô


772 | 
iscsi
->
cuºít_pha£


773 | 
iscsi
->
√xt_pha£
);

777 i‡(
	`iscsi_logö_add_öôüt‹«me
(
iscsi
, 
pdu
) != 0) {

778 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

783 i‡(
iscsi
->
Æüs
[0]) {

784 i‡(
	`iscsi_logö_add_Æüs
(
iscsi
, 
pdu
) != 0) {

785 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

791 i‡(
iscsi
->
£ssi⁄_ty≥
 =
ISCSI_SESSION_NORMAL
) {

792 i‡(
	`iscsi_logö_add_èrgë«me
(
iscsi
, 
pdu
) != 0) {

793 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

799 i‡(
	`iscsi_logö_add_£ssi⁄ty≥
(
iscsi
, 
pdu
) != 0) {

800 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

805 i‡(
	`iscsi_logö_add_hódîdige°
(
iscsi
, 
pdu
) != 0) {

806 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

811 i‡(
	`iscsi_logö_add_authmëhod
(
iscsi
, 
pdu
) != 0) {

812 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

817 i‡(
	`iscsi_logö_add_authÆg‹ôhm
(
iscsi
, 
pdu
) != 0) {

818 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

823 i‡(
	`iscsi_logö_add_ch≠_u£∫ame
(
iscsi
, 
pdu
) != 0) {

824 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

829 i‡(
	`iscsi_logö_add_ch≠_ª•⁄£
(
iscsi
, 
pdu
) != 0) {

830 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

835 i‡(
	`iscsi_logö_add_d©adige°
(
iscsi
, 
pdu
) != 0) {

836 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

841 i‡(
	`iscsi_logö_add_öôüÃ2t
(
iscsi
, 
pdu
) != 0) {

842 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

847 i‡(
	`iscsi_logö_add_immedüãd©a
(
iscsi
, 
pdu
) != 0) {

848 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

853 i‡(
	`iscsi_logö_add_maxbur°Àngth
(
iscsi
, 
pdu
) != 0) {

854 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

859 i‡(
	`iscsi_logö_add_fú°bur°Àngth
(
iscsi
, 
pdu
) != 0) {

860 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

865 i‡(
	`iscsi_logö_add_deÁu…time2waô
(
iscsi
, 
pdu
) != 0) {

866 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

871 i‡(
	`iscsi_logö_add_deÁu…time2ªèö
(
iscsi
, 
pdu
) != 0) {

872 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

877 i‡(
	`iscsi_logö_add_maxout°™dögr2t
(
iscsi
, 
pdu
) != 0) {

878 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

883 i‡(
	`iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi
, 
pdu
) != 0) {

884 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

889 i‡(
	`iscsi_logö_add_ifm¨kî
(
iscsi
, 
pdu
) != 0) {

890 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

895 i‡(
	`iscsi_logö_add_ofm¨kî
(
iscsi
, 
pdu
) != 0) {

896 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

901 i‡(
	`iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi
, 
pdu
) != 0) {

902 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

907 i‡(
	`iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi
, 
pdu
) != 0) {

908 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

913 i‡(
	`iscsi_logö_add_d©≠duö‹dî
(
iscsi
, 
pdu
) != 0) {

914 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

919 i‡(
	`iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi
, 
pdu
) != 0) {

920 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

925 
pdu
->
ˇŒback
 = 
cb
;

926 
pdu
->
¥iv©e_d©a
 =Örivate_data;

928 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

929 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

931 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

936 
	}
}

938 c⁄° *
	$logö_îr‹_°r
(
°©us
)

940 
°©us
) {

961 
	}
}

965 
	$iscsi_¥o˚ss_logö_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

966 
iscsi_ö_pdu
 *
ö
)

968 
uöt32_t
 
°©us
, 
maxcmd¢
, 
expcmd¢
;

969 *
±r
 = (*)
ö
->
d©a
;

970 
size
 = 
ö
->
d©a_pos
;

972 
°©us
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[36]);

974 
iscsi
->
°©¢
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[24]);

976 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

977 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

978 
iscsi
->
maxcmd¢
 = maxcmdsn;

980 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

981 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

982 
iscsi
->
expcmd¢
 =Éxpcmdsn;

991 
size
 > 0) {

992 *
íd
;

993 
Àn
;

995 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

996 i‡(
íd
 =
NULL
) {

997 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

999 (*)
±r
 - 
ö
->
d©a
);

1000 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1001 
pdu
->
¥iv©e_d©a
);

1005 
Àn
 = 
íd
 - 
±r
;

1006 i‡(
Àn
 == 0) {

1011 i‡(!
	`°∫cmp
(
±r
, "TargetAddress=", 14)) {

1012 
	`°∫˝y
(
iscsi
->
èrgë_addªss
,
±r
+14,
MAX_STRING_SIZE
);

1015 i‡(!
	`°∫cmp
(
±r
, "HeaderDigest=", 13)) {

1016 i‡(!
	`°rcmp
(
±r
 + 13, "CRC32C")) {

1017 
iscsi
->
w™t_hódî_dige°


1018 
ISCSI_HEADER_DIGEST_CRC32C
;

1020 
iscsi
->
w™t_hódî_dige°


1021 
ISCSI_HEADER_DIGEST_NONE
;

1025 i‡(!
	`°∫cmp
(
±r
, "FirstBurstLength=", 17)) {

1026 
iscsi
->
fú°_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 17, 
NULL
, 10);

1029 i‡(!
	`°∫cmp
(
±r
, "InitialR2T=", 11)) {

1030 i‡(!
	`°rcmp
(
±r
 + 11, "No")) {

1031 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

1033 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

1037 i‡(!
	`°∫cmp
(
±r
, "ImmediateData=", 14)) {

1038 i‡(!
	`°rcmp
(
±r
 + 14, "No")) {

1039 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1040 } i‡(
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
) {

1044 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1047 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

1051 i‡(!
	`°∫cmp
(
±r
, "MaxBurstLength=", 15)) {

1052 
iscsi
->
max_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 15, 
NULL
, 10);

1055 i‡(!
	`°∫cmp
(
±r
, "MaxRecvDataSegmentLength=", 25)) {

1056 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
	`°πﬁ
(
±r
 + 25, 
NULL
, 10);

1059 i‡(!
	`°∫cmp
(
±r
, "AuthMethod=", 11)) {

1060 i‡(!
	`°rcmp
(
±r
 + 11, "CHAP")) {

1061 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
;

1065 i‡(!
	`°∫cmp
(
±r
, "CHAP_A=", 7)) {

1066 
iscsi
->
ch≠_a
 = 
	`©oi
(
±r
+7);

1067 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1070 i‡(!
	`°∫cmp
(
±r
, "CHAP_I=", 7)) {

1071 
iscsi
->
ch≠_i
 = 
	`©oi
(
±r
+7);

1072 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1075 i‡(!
	`°∫cmp
(
±r
, "CHAP_C=0x", 9)) {

1076 
	`°∫˝y
(
iscsi
->
ch≠_c
,
±r
+9,
MAX_STRING_SIZE
);

1077 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1080 
±r
 +
Àn
 + 1;

1081 
size
 -
Àn
 + 1;

1084 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

1085 
	`ISCSI_LOG
(
iscsi
, 2, "èrgëÑeque°†ªdúe˘Åÿ%s",iscsi->
èrgë_addªss
);

1086 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_REDIRECT
, 
NULL
,

1087 
pdu
->
¥iv©e_d©a
);

1091 i‡(
°©us
 != 0) {

1092 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅoÅarget. Status: %s(%d)",

1093 
	`logö_îr‹_°r
(
°©us
), status);

1094 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1095 
pdu
->
¥iv©e_d©a
);

1099 i‡(
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
) {

1100 
iscsi
->
cuºít_pha£
 = (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) << 2;

1103 i‡((
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
)

1104 && (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) == ISCSI_PDU_LOGIN_NSG_FF) {

1105 
iscsi
->
is_loggedö
 = 1;

1106 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
);

1107 
iscsi
->
hódî_dige°
 = iscsi->
w™t_hódî_dige°
;

1108 
	`ISCSI_LOG
(
iscsi
, 2, "login successful");

1109 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1111 i‡(
	`iscsi_logö_async
(
iscsi
, 
pdu
->
ˇŒback
,Ödu->
¥iv©e_d©a
) != 0) {

1112 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send continuationÜoginÖdu");

1113 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,Ödu->
¥iv©e_d©a
);

1118 
	}
}

1122 
	$iscsi_logout_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

1123 *
¥iv©e_d©a
)

1125 
iscsi_pdu
 *
pdu
;

1127 
iscsi
->
logö_©ãm±s
 = 0;

1129 i‡(
iscsi
->
is_loggedö
 == 0) {

1130 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogout whileÇotÜogged in.");

1134 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_LOGOUT_REQUEST
,

1135 
ISCSI_PDU_LOGOUT_RESPONSE
);

1136 i‡(
pdu
 =
NULL
) {

1137 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

1143 
	`iscsi_pdu_£t_immedüã
(
pdu
);

1146 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

1149 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

1150 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

1153 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

1155 
pdu
->
ˇŒback
 = 
cb
;

1156 
pdu
->
¥iv©e_d©a
 =Örivate_data;

1158 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

1159 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

1161 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1166 
	}
}

1169 
	$iscsi_¥o˚ss_logout_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

1170 
iscsi_ö_pdu
 *
ö
)

1172 
uöt32_t
 
maxcmd¢
, 
expcmd¢
;

1174 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

1175 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

1176 
iscsi
->
maxcmd¢
 = maxcmdsn;

1178 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

1179 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

1180 
iscsi
->
expcmd¢
 =Éxpcmdsn;

1183 
iscsi
->
is_loggedö
 = 0;

1184 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1187 
	}
}

1190 
	$iscsi_£t_£ssi⁄_ty≥
(
iscsi_c⁄ãxt
 *
iscsi
,

1191 
iscsi_£ssi⁄_ty≥
 
£ssi⁄_ty≥
)

1193 i‡(
iscsi
->
is_loggedö
) {

1194 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo set sessionÅype while "

1199 
iscsi
->
£ssi⁄_ty≥
 = session_type;

1202 
	}
}

	@lib/md5.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 
	~"md5.h
"

32 #ifde‡
WORDS_BIGENDIAN


34 
	$byãSw≠
(
UWORD32
 *
buf
, 
w‹ds
)

36 
md5byã
 *
p
 = (md5byã *)
buf
;

39 *
buf
++ = (
UWORD32
)(()
p
[3] << 8 |Ö[2]) << 16 |

40 (()
p
[1] << 8 |Ö[0]);

41 
p
 += 4;

42 } --
w‹ds
);

43 
	}
}

45 
	#byãSw≠
(
buf
,
w‹ds
)

	)

53 
	$MD5Inô
(
MD5C⁄ãxt
 *
˘x
)

55 
˘x
->
buf
[0] = 0x67452301;

56 
˘x
->
buf
[1] = 0xefcdab89;

57 
˘x
->
buf
[2] = 0x98badcfe;

58 
˘x
->
buf
[3] = 0x10325476;

60 
˘x
->
byãs
[0] = 0;

61 
˘x
->
byãs
[1] = 0;

62 
	}
}

69 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
˘x
, 
md5byã
 c⁄° *
buf
, 
Àn
)

71 
UWORD32
 
t
;

75 
t
 = 
˘x
->
byãs
[0];

76 i‡((
˘x
->
byãs
[0] = 
t
 + 
Àn
) <Å)

77 
˘x
->
byãs
[1]++;

79 
t
 = 64 - (t & 0x3f);

80 i‡(
t
 > 
Àn
) {

81 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
, 
Àn
);

85 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
,Å);

86 
	`byãSw≠
(
˘x
->
ö
, 16);

87 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

88 
buf
 +
t
;

89 
Àn
 -
t
;

92 
Àn
 >= 64) {

93 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

94 
	`byãSw≠
(
˘x
->
ö
, 16);

95 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

96 
buf
 += 64;

97 
Àn
 -= 64;

101 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

102 
	}
}

109 
	$MD5FöÆ
(
md5byã
 
dige°
[16], 
MD5C⁄ãxt
 *
˘x
)

111 
cou¡
 = 
˘x
->
byãs
[0] & 0x3f;

112 
md5byã
 *
p
 = (md5byã *)
˘x
->
ö
 + 
cou¡
;

115 *
p
++ = 0x80;

118 
cou¡
 = 56 - 1 - count;

120 i‡(
cou¡
 < 0) {

121 
	`mem£t
(
p
, 0, 
cou¡
 + 8);

122 
	`byãSw≠
(
˘x
->
ö
, 16);

123 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

124 
p
 = (
md5byã
 *)
˘x
->
ö
;

125 
cou¡
 = 56;

127 
	`mem£t
(
p
, 0, 
cou¡
);

128 
	`byãSw≠
(
˘x
->
ö
, 14);

131 
˘x
->
ö
[14] = ctx->
byãs
[0] << 3;

132 
˘x
->
ö
[15] = ctx->
byãs
[1] << 3 | ctx->bytes[0] >> 29;

133 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

135 
	`byãSw≠
(
˘x
->
buf
, 4);

136 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

137 
	`mem£t
(
˘x
, 0, (*ctx));

138 
	}
}

140 #i‚de‡
ASM_MD5


145 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

146 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

147 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

148 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

151 
	#MD5STEP
(
f
,
w
,
x
,
y
,
z
,
ö
,
s
) \

152 (
w
 +
	`f
(
x
,
y
,
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

160 
	$MD5Tønsf‹m
(
UWORD32
 
buf
[4], UWORD32 c⁄° 
ö
[16])

162 
UWORD32
 
a
, 
b
, 
c
, 
d
;

164 
a
 = 
buf
[0];

165 
b
 = 
buf
[1];

166 
c
 = 
buf
[2];

167 
d
 = 
buf
[3];

169 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

170 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

171 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

172 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

173 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

174 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

175 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

176 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

177 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

178 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

179 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

180 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

181 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

182 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

183 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

184 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

186 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

187 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

188 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

189 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

190 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

191 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

192 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

193 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

194 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

195 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

196 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

197 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

198 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

199 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

200 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

201 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

203 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

204 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

205 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

206 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

207 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

208 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

209 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

210 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

211 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

212 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

213 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

214 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

215 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

216 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

217 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

218 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

220 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

221 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

222 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

223 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

224 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

225 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

226 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

227 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

228 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

229 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

230 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

231 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

232 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

233 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

234 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

235 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

237 
buf
[0] +
a
;

238 
buf
[1] +
b
;

239 
buf
[2] +
c
;

240 
buf
[3] +
d
;

241 
	}
}

	@lib/nop.c

18 #i‡
deföed
(
WIN32
)

20 
	~<uni°d.h
>

23 
	~<°dio.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

28 
	$iscsi_n›_out_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

29 *
d©a
, 
Àn
, *
¥iv©e_d©a
)

31 
iscsi_pdu
 *
pdu
;

33 i‡(
iscsi
->
is_loggedö
 == 0) {

34 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÇop-out whileÇot "

39 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_NOP_OUT
, 
ISCSI_PDU_NOP_IN
);

40 i‡(
pdu
 =
NULL
) {

41 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

46 
pdu
->
Êags
 |
ISCSI_PDU_DROP_ON_RECONNECT
;

49 
	`iscsi_pdu_£t_immedüã
(
pdu
);

52 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

55 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

58 
	`iscsi_pdu_£t_lun
(
pdu
, 0);

61 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

62 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

65 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

67 
pdu
->
ˇŒback
 = 
cb
;

68 
pdu
->
¥iv©e_d©a
 =Örivate_data;

70 i‡(
d©a
 !
NULL
 && 
Àn
 > 0) {

71 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, 
d©a
, 
Àn
) != 0) {

72 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoádd outdataÅoÇop-out");

73 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

78 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

79 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

80 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

84 
iscsi
->
n›s_ö_Êight
++;

87 
	}
}

90 
	$iscsi_£nd_èrgë_n›_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
ât
)

92 
iscsi_pdu
 *
pdu
;

94 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_NOP_OUT
, 
ISCSI_PDU_NO_PDU
,

95 0xffffffff,
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

96 i‡(
pdu
 =
NULL
) {

97 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

102 
	`iscsi_pdu_£t_immedüã
(
pdu
);

105 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

108 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

111 
	`iscsi_pdu_£t_lun
(
pdu
, 0);

114 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

115 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

118 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

120 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

121 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

122 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

127 
	}
}

130 
	$iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

131 
iscsi_ö_pdu
 *
ö
)

133 
iscsi_d©a
 
d©a
;

135 
iscsi
->
n›s_ö_Êight
 = 0;

137 i‡(
pdu
->
ˇŒback
 =
NULL
) {

141 
d©a
.d©®
NULL
;

142 
d©a
.
size
 = 0;

144 i‡(
ö
->
d©a_pos
 > 
ISCSI_HEADER_SIZE
) {

145 
d©a
.d©®
ö
->data;

146 
d©a
.
size
 = 
ö
->
d©a_pos
;

149 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
d©a
,Ödu->
¥iv©e_d©a
);

152 
	}
}

154 
	$iscsi_gë_n›s_ö_Êight
(
iscsi_c⁄ãxt
 *
iscsi
)

156  
iscsi
->
n›s_ö_Êight
;

157 
	}
}

	@lib/pdu.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

32 
	~<°rögs.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

41 
	~"¶i°.h
"

51 
	$iscsi_£rül32_com∑ª
(
uöt32_t
 
s1
, uöt32_à
s2
) {

52 i‡(
s1
 =
s2
)  0;

53 i‡(
s1
 < 
s2
 && s2-s1 < (
uöt32_t
)1<<31)  -1;

54 i‡(
s1
 > 
s2
 && s1-s2 < (
uöt32_t
)1<<31)  1;

55 i‡(
s1
 > 
s2
 && s1-s2 > (
uöt32_t
)1<<31)  -1;

56 i‡(
s1
 < 
s2
 && s2-s1 > (
uöt32_t
)1<<31)  1;

59 
	}
}

61 
uöt32_t


62 
	$iscsi_ôt_po°_ö¸emít
(
iscsi_c⁄ãxt
 *
iscsi
) {

63 
uöt32_t
 
ﬁd_ôt
 = 
iscsi
->
ôt
;

64 
iscsi
->
ôt
++;

66 i‡(
iscsi
->
ôt
 == 0xffffffff) {

67 
iscsi
->
ôt
 = 0;

69  
ﬁd_ôt
;

70 
	}
}

72 
	$iscsi_dump_pdu_hódî
(
iscsi_c⁄ãxt
 *
iscsi
, *
d©a
) {

73 
dump
[
ISCSI_RAW_HEADER_SIZE
*3+1]={0};

74 
i
;

75 
i
=0;i<
ISCSI_RAW_HEADER_SIZE
;i++) {

76 
	`¢¥ötf
(&
dump
[
i
 * 3], 4, " %02x", 
d©a
[i]);

78 
	`ISCSI_LOG
(
iscsi
, 0, "PDU hódî:%s",
dump
);

79 
	}
}

81 
iscsi_pdu
 *

82 
	$iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

83 
iscsi_›code
 
ª•⁄£_›code
, 
uöt32_t
 
ôt
, uöt32_à
Êags
)

85 
iscsi_pdu
 *
pdu
;

87 
pdu
 = 
	`iscsi_szmÆloc
(
iscsi
, (
iscsi_pdu
));

88 i‡(
pdu
 =
NULL
) {

89 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu");

90  
NULL
;

93 
pdu
->
outd©a
.
size
 = 
ISCSI_HEADER_SIZE
;

94 
pdu
->
outd©a
.
d©a
 = 
	`iscsi_szmÆloc
(
iscsi
,Ödu->outd©a.
size
);

96 i‡(
pdu
->
outd©a
.
d©a
 =
NULL
) {

97 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu header");

98 
	`iscsi_‰ì
(
iscsi
, 
pdu
);

99  
NULL
;

103 
pdu
->
outd©a
.
d©a
[0] = 
›code
;

104 
pdu
->
ª•⁄£_›code
 =Ñesponse_opcode;

107 i‡(
›code
 =
ISCSI_PDU_LOGIN_REQUEST
) {

108 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[8], &
iscsi
->
isid
[0], 6);

112 
	`iscsi_pdu_£t_ôt
(
pdu
, 
ôt
);

113 
pdu
->
ôt
 = itt;

116 
pdu
->
Êags
 = flags;

118  
pdu
;

119 
	}
}

121 
iscsi_pdu
 *

122 
	$iscsi_Æloˇã_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

123 
iscsi_›code
 
ª•⁄£_›code
)

125  
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
›code
, 
ª•⁄£_›code
, 
	`iscsi_ôt_po°_ö¸emít
(iscsi), 0);

126 
	}
}

129 
	$iscsi_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

131 i‡(
pdu
 =
NULL
) {

132 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo free NULLÖdu");

136 i‡(
pdu
->
outd©a
.
size
 <
iscsi
->
smÆloc_size
) {

137 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

139 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

141 
pdu
->
outd©a
.
d©a
 = 
NULL
;

143 i‡(
pdu
->
öd©a
.
size
 <
iscsi
->
smÆloc_size
) {

144 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

146 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

148 
pdu
->
öd©a
.
d©a
 = 
NULL
;

150 
	`iscsi_s‰ì
(
iscsi
, 
pdu
);

151 
	}
}

155 
	$iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_d©a
 *
d©a
,

156 *
d±r
, 
dsize
, 
pduÆignmít
)

158 
size_t
 
Àn
, 
Æig√d
;

160 i‡(
dsize
 == 0) {

161 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

166 
Àn
 = 
d©a
->
size
 + 
dsize
;

168 
Æig√d
 = 
Àn
;

169 i‡(
pduÆignmít
) {

170 
Æig√d
 = (aligned+3)&0xfffffffc;

173 i‡(
d©a
->
size
 == 0) {

174 i‡(
Æig√d
 <
iscsi
->
smÆloc_size
) {

175 
d©a
->d©®
	`iscsi_szmÆloc
(
iscsi
, 
Æig√d
);

177 
d©a
->d©®
	`iscsi_mÆloc
(
iscsi
, 
Æig√d
);

180 i‡(
Æig√d
 > 
iscsi
->
smÆloc_size
) {

181 
d©a
->d©®
	`iscsi_ªÆloc
(
iscsi
, d©a->d©a, 
Æig√d
);

184 i‡(
d©a
->d©®=
NULL
) {

185 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate buffer for %d "

186 "byãs", (Ë
Àn
);

190 
	`mem˝y
(
d©a
->d©®+ d©a->
size
, 
d±r
, 
dsize
);

191 
d©a
->
size
 +
dsize
;

193 i‡(
Àn
 !
Æig√d
) {

195 
	`mem£t
(
d©a
->d©®+ 
Àn
, 0, 
Æig√d
 -Üen);

199 
	}
}

202 
	$iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

203 *
d±r
, 
dsize
)

205 i‡(
pdu
 =
NULL
) {

206 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoádd dataÅo NULLÖdu");

209 i‡(
dsize
 == 0) {

210 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

215 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
outd©a
, 
d±r
, 
dsize
, 1) != 0) {

216 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoádd dataÅoÖdu buffer");

221 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->outd©a.
size


222 - 
ISCSI_HEADER_SIZE
);

225 
	}
}

228 
	$iscsi_gë_pdu_d©a_size
(c⁄° *
hdr
)

230 
size
;

232 
size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

234  
size
;

235 
	}
}

239 
	$iscsi_gë_pdu_∑ddög_size
(c⁄° *
hdr
)

241 
d©a_size
, 
∑dded_size
;

243 
d©a_size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

244 
∑dded_size
 = (
d©a_size
+3) & 0xfffffffc;

246  
∑dded_size
 - 
d©a_size
;

247 
	}
}

249 
	eiscsi_ªje˘_ªas⁄
 {

250 
	mISCSI_REJECT_RESERVED
 = 0x01,

251 
	mISCSI_REJECT_DATA_DIGEST_ERROR
 = 0x02,

252 
	mISCSI_REJECT_SNACK_REJECT
 = 0x03,

253 
	mISCSI_REJECT_PROTOCOL_ERROR
 = 0x04,

254 
	mISCSI_REJECT_COMMAND_NOT_SUPPORTED
 = 0x05,

255 
	mISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
 = 0x06,

256 
	mISCSI_REJECT_TASK_IN_PROCESS
 = 0x07,

257 
	mISCSI_REJECT_INVALID_DATA_ACK
 = 0x08,

258 
	mISCSI_REJECT_INVALID_PDU_FIELD
 = 0x09,

259 
	mISCSI_REJECT_LONG_OPERATION_REJECT
 = 0x0a,

260 
	mISCSI_REJECT_NEGOTIATION_RESET
 = 0x0b,

261 
	mISCSI_REJECT_WAITING_FOR_LOGOUT
 = 0x0c

264 c⁄° *
	$iscsi_ªje˘_ªas⁄_°r
(
iscsi_ªje˘_ªas⁄
 
ªas⁄
)

266 
ªas⁄
) {

267 
ISCSI_REJECT_RESERVED
:

269 
ISCSI_REJECT_DATA_DIGEST_ERROR
:

271 
ISCSI_REJECT_SNACK_REJECT
:

273 
ISCSI_REJECT_PROTOCOL_ERROR
:

275 
ISCSI_REJECT_COMMAND_NOT_SUPPORTED
:

277 
ISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
:

279 
ISCSI_REJECT_TASK_IN_PROCESS
:

281 
ISCSI_REJECT_INVALID_DATA_ACK
:

283 
ISCSI_REJECT_INVALID_PDU_FIELD
:

285 
ISCSI_REJECT_LONG_OPERATION_REJECT
:

287 
ISCSI_REJECT_NEGOTIATION_RESET
:

289 
ISCSI_REJECT_WAITING_FOR_LOGOUT
:

294 
	}
}

296 
	$iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi_c⁄ãxt
 *
iscsi
,

297 
iscsi_ö_pdu
 *
ö
)

299 
uöt32_t
 
ât
;

300 
uöt32_t
 
°©¢
;

302 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

304 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

305 i‡(
°©¢
 > 
iscsi
->statsn) {

306 
iscsi
->
°©¢
 = statsn;

310 i‡(
ât
 == 0xffffffff) {

314 
	`iscsi_£nd_èrgë_n›_out
(
iscsi
, 
ât
);

317 
	}
}

320 
	$iscsi_¥o˚ss_ªje˘
(
iscsi_c⁄ãxt
 *
iscsi
,

321 
iscsi_ö_pdu
 *
ö
)

323 
size
 = 
ö
->
d©a_pos
;

324 
uöt32_t
 
ôt
;

325 
iscsi_pdu
 *
pdu
;

327 i‡(
size
 < 
ISCSI_RAW_HEADER_SIZE
) {

328 
	`iscsi_£t_îr‹
(
iscsi
, "size of REJECTÖayload isÅoo small."

330 
ISCSI_RAW_HEADER_SIZE
, ()
size
);

334 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
d©a
[16]);

336 i‡(
iscsi
->
log_Àvñ
 > 1) {

337 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
ö
->
d©a
);

340 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

341 i‡(
pdu
->
ôt
 == itt) {

346 i‡(
pdu
 =
NULL
) {

347 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot match REJECT with"

349 
ôt
);

353 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

354 
pdu
->
¥iv©e_d©a
);

356 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

357 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

359 
	}
}

363 
	$iscsi_¥o˚ss_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

365 
uöt32_t
 
ôt
;

366 
iscsi_›code
 
›code
;

367 
iscsi_pdu
 *
pdu
;

368 
uöt8_t
 
ah¶í
;

370 
›code
 = 
ö
->
hdr
[0] & 0x3f;

371 
ah¶í
 = 
ö
->
hdr
[4];

372 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

374 i‡(
ah¶í
 != 0) {

375 
	`iscsi_£t_îr‹
(
iscsi
, "cant handleÉxpanded headers yet");

379 i‡(
›code
 =
ISCSI_PDU_REJECT
) {

380 
	`iscsi_£t_îr‹
(
iscsi
, "Reque° wa†ªje˘ed wôhÑós⁄: 0x%02x (%s)", 
ö
->
hdr
[2], 
	`iscsi_ªje˘_ªas⁄_°r
(in->hdr[2]));

382 i‡(
	`iscsi_¥o˚ss_ªje˘
(
iscsi
, 
ö
) != 0) {

388 i‡(
›code
 =
ISCSI_PDU_NOP_IN
 && 
ôt
 == 0xffffffff) {

389 i‡(
	`iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi
, 
ö
) != 0) {

395 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

396 
iscsi_›code
 
ex≥˘ed_ª•⁄£
 = 
pdu
->
ª•⁄£_›code
;

397 
is_föished
 = 1;

399 i‡(
pdu
->
ôt
 != itt) {

407 i‡(
›code
 =
ISCSI_PDU_DATA_IN


408 && 
ex≥˘ed_ª•⁄£
 =
ISCSI_PDU_SCSI_RESPONSE
) {

409 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_DATA_IN
;

416 i‡(
›code
 =
ISCSI_PDU_R2T
) {

417 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_R2T
;

420 i‡(
›code
 !
ex≥˘ed_ª•⁄£
) {

421 
	`iscsi_£t_îr‹
(
iscsi
, "Got wrong opcode back for "

423 
ôt
, 
›code
, 
pdu
->
ª•⁄£_›code
);

426 
›code
) {

427 
ISCSI_PDU_LOGIN_RESPONSE
:

428 i‡(
	`iscsi_¥o˚ss_logö_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

429 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

430 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

431 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜoginÑeply "

436 
ISCSI_PDU_TEXT_RESPONSE
:

437 i‡(
	`iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

438 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

439 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

440 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅextÑeply "

445 
ISCSI_PDU_LOGOUT_RESPONSE
:

446 i‡(
	`iscsi_¥o˚ss_logout_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

447 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

448 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

449 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜogoutÑeply "

454 
ISCSI_PDU_SCSI_RESPONSE
:

455 i‡(
	`iscsi_¥o˚ss_scsi_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

456 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

457 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

458 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑesponseÑeply "

463 
ISCSI_PDU_DATA_IN
:

464 i‡(
	`iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi
, 
pdu
, 
ö
,

465 &
is_föished
) != 0) {

466 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

467 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

468 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi data in "

473 
ISCSI_PDU_NOP_IN
:

474 i‡(
	`iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

475 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

476 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

477 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÇop-in failed");

481 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
:

482 i‡(
	`iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi
, 
pdu
,

483 
ö
) != 0) {

484 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

485 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

486 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅask-mgmt failed");

490 
ISCSI_PDU_R2T
:

491 i‡(
	`iscsi_¥o˚ss_r2t
(
iscsi
, 
pdu
, 
ö
) != 0) {

492 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

493 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

494 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑ2t "

498 
is_föished
 = 0;

501 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

502 "›codê0x%02x", 
›code
);

506 i‡(
is_föished
) {

507 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

508 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

514 
	}
}

517 
	$iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
)

519 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[16], 
ôt
);

520 
	}
}

523 
	$iscsi_pdu_£t_rôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rôt
)

525 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
rôt
);

526 
	}
}

529 
	$iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
)

531 
pdu
->
outd©a
.
d©a
[1] = 
Êags
;

532 
	}
}

535 
	$iscsi_pdu_£t_immedüã
(
iscsi_pdu
 *
pdu
)

537 
pdu
->
outd©a
.
d©a
[0] |
ISCSI_PDU_IMMEDIATE
;

538 
	}
}

541 
	$iscsi_pdu_£t_ât
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ât
)

543 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
ât
);

544 
	}
}

547 
	$iscsi_pdu_£t_cmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
cmd¢
)

549 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
cmd¢
);

550 
	}
}

553 
	$iscsi_pdu_£t_rcmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rcmd¢
)

555 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[32], 
rcmd¢
);

556 
	}
}

559 
	$iscsi_pdu_£t_d©a¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
d©a¢
)

561 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 
d©a¢
);

562 
	}
}

565 
	$iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
)

567 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[28], 
exp°©¢¢
);

568 
	}
}

571 
	$iscsi_pdu_£t_buf„roff£t
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
buf„roff£t
)

573 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„roff£t
);

574 
	}
}

577 
	$iscsi_pdu_£t_cdb
(
iscsi_pdu
 *
pdu
, 
scsi_èsk
 *
èsk
)

579 
	`mem£t
(&
pdu
->
outd©a
.
d©a
[32], 0, 16);

580 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[32], 
èsk
->
cdb
,Åask->
cdb_size
);

581 
	}
}

584 
	$iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
)

586 
pdu
->
outd©a
.
d©a
[8] = 
lun
 >> 8;

587 
pdu
->
outd©a
.
d©a
[9] = 
lun
 & 0xff;

588 
	}
}

591 
	$iscsi_pdu_£t_expx„æí
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
expx„æí
)

593 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
expx„æí
);

594 
	}
}

	@lib/scsi-lowlevel.c

24 #ifde‡
HAVE_CONFIG_H


25 
	~"c⁄fig.h
"

28 #ifde‡
HAVE_SYS_TYPES_H


29 
	~<sys/ty≥s.h
>

32 #ifde‡
HAVE_ARPA_INET_H


33 
	~<¨∑/öë.h
>

36 #ifde‡
AROS


37 
	~"¨os/¨os_com∑t.h
"

40 #i‡
deföed
(
WIN32
)

41 
	~<wösock2.h
>

42 
	~"wö32/wö32_com∑t.h
"

44 
	~<°rögs.h
>

47 
	~<sys/sockë.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°ddef.h
>

51 
	~<°rög.h
>

52 
	~<°döt.h
>

53 
	~<î∫o.h
>

54 
	~"¶i°.h
"

55 
	~"scsi-lowÀvñ.h
"

57 
scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
);

59 
	sscsi_Æloˇãd_mem‹y
 {

60 
scsi_Æloˇãd_mem‹y
 *
	m√xt
;

61 
	mbuf
[0];

65 
	$scsi_‰ì_scsi_èsk
(
scsi_èsk
 *
èsk
)

67 
scsi_Æloˇãd_mem‹y
 *
mem
;

69 i‡(!
èsk
)

72 (
mem
 = 
èsk
->mem)) {

73 
	`SLIST_REMOVE
(&
èsk
->
mem
, mem);

74 
	`‰ì
(
mem
);

77 
	`‰ì
(
èsk
->
d©aö
.
d©a
);

78 
	`‰ì
(
èsk
);

79 
	}
}

81 
scsi_èsk
 *

82 
	$scsi_¸óã_èsk
(
cdb_size
, *
cdb
, 
x„r_dú
, 
expx„æí
)

84 
scsi_èsk
 *
èsk
;

86 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

87 i‡(
èsk
 =
NULL
) {

88  
NULL
;

91 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

93 
	`mem˝y
(&
èsk
->
cdb
[0], cdb, 
cdb_size
);

94 
èsk
->
x„r_dú
 = xfer_dir;

95 
èsk
->
expx„æí
 =Éxpxferlen;

97  
èsk
;

98 
	}
}

102 
	$scsi_mÆloc
(
scsi_èsk
 *
èsk
, 
size_t
 
size
)

104 
scsi_Æloˇãd_mem‹y
 *
mem
;

106 
mem
 = 
	`mÆloc
((
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

107 i‡(
mem
 =
NULL
) {

108  
NULL
;

110 
	`mem£t
(
mem
, 0, (
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

111 
	`SLIST_ADD
(&
èsk
->
mem
, mem);

112  &
mem
->
buf
[0];

113 
	}
}

115 
	svÆue_°rög
 {

116 
	mvÆue
;

117 c⁄° *
	m°rög
;

121 
	$vÆue_°rög_föd
(
vÆue_°rög
 *
vÆues
, 
vÆue
)

123 ; 
vÆues
->
°rög
; values++) {

124 i‡(
vÆue
 =
vÆues
->value) {

125  
vÆues
->
°rög
;

128  
NULL
;

129 
	}
}

132 
	$scsi_£n£_key_°r
(
key
)

134 
vÆue_°rög
 
keys
[] = {

135 {
SCSI_SENSE_NO_SENSE
,

137 {
SCSI_SENSE_RECOVERED_ERROR
,

139 {
SCSI_SENSE_NOT_READY
,

141 {
SCSI_SENSE_HARDWARE_ERROR
,

143 {
SCSI_SENSE_ILLEGAL_REQUEST
,

145 {
SCSI_SENSE_UNIT_ATTENTION
,

147 {
SCSI_SENSE_DATA_PROTECTION
,

149 {
SCSI_SENSE_BLANK_CHECK
,

151 {
SCSI_SENSE_VENDOR_SPECIFIC
,

153 {
SCSI_SENSE_COPY_ABORTED
,

155 {
SCSI_SENSE_COMMAND_ABORTED
,

157 {
SCSI_SENSE_OBSOLETE_ERROR_CODE
,

159 {
SCSI_SENSE_OVERFLOW_COMMAND
,

161 {
SCSI_SENSE_MISCOMPARE
,

163 {0, 
NULL
}

166  
	`vÆue_°rög_föd
(
keys
, 
key
);

167 
	}
}

170 
	$scsi_£n£_ascq_°r
(
ascq
)

172 
vÆue_°rög
 
ascqs
[] = {

173 {
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
,

175 {
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
,

177 {
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
,

179 {
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
,

181 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
,

183 {
SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED
,

185 {
SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR
,

187 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
,

189 {
SCSI_SENSE_ASCQ_WRITE_PROTECTED
,

191 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
,

193 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
,

195 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
,

197 {
SCSI_SENSE_ASCQ_BUS_RESET
,

199 {
SCSI_SENSE_ASCQ_POWER_ON_OCCURED
,

201 {
SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED
,

203 {
SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED
,

205 {
SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET
,

207 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED
,

209 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD
,

211 {
SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED
,

213 {
SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED
,

215 {
SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED
,

217 {
SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED
,

219 {
SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE
,

221 {
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
,

223 {
SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA
,

225 { 
SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED
,

227 {
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
,

229 {0, 
NULL
}

232  
	`vÆue_°rög_föd
(
ascqs
, 
ascq
);

233 
	}
}

236 
	$scsi_¥_ty≥_°r
(
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

238 
vÆue_°rög
 
¥_ty≥_°rögs
[] = {

239 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

241 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

243 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

245 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

247 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

249 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

251 {0, 
NULL
}

254  
	`vÆue_°rög_föd
(
¥_ty≥_°rögs
, 
¥_ty≥
);

255 
	}
}

257 
uöt64_t


258 
	$scsi_gë_uöt64
(c⁄° *
c
)

260 
uöt64_t
 
vÆ
;

262 
vÆ
 = 
	`scsi_gë_uöt32
(
c
);

263 
vÆ
 <<= 32;

264 
c
 += 4;

265 
vÆ
 |
	`scsi_gë_uöt32
(
c
);

267  
vÆ
;

268 
	}
}

270 
uöt32_t


271 
	$scsi_gë_uöt32
(c⁄° *
c
)

273 
uöt32_t
 
vÆ
;

274 
vÆ
 = 
c
[0];

275 
vÆ
 = (vÆ << 8Ë| 
c
[1];

276 
vÆ
 = (vÆ << 8Ë| 
c
[2];

277 
vÆ
 = (vÆ << 8Ë| 
c
[3];

278  
vÆ
;

279 
	}
}

281 
uöt16_t


282 
	$scsi_gë_uöt16
(c⁄° *
c
)

284 
uöt16_t
 
vÆ
;

285 
vÆ
 = 
c
[0];

286 
vÆ
 = (vÆ << 8Ë| 
c
[1];

287  
vÆ
;

288 
	}
}

290 
ölöe
 
uöt64_t


291 
	$èsk_gë_uöt64
(
scsi_èsk
 *
èsk
, 
off£t
)

293 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 8) {

294 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

296  
	`scsi_gë_uöt64
(
c
);

300 
	}
}

302 
ölöe
 
uöt32_t


303 
	$èsk_gë_uöt32
(
scsi_èsk
 *
èsk
, 
off£t
)

305 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 4) {

306 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

308  
	`scsi_gë_uöt32
(
c
);

312 
	}
}

314 
ölöe
 
uöt16_t


315 
	$èsk_gë_uöt16
(
scsi_èsk
 *
èsk
, 
off£t
)

317 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 2) {

318 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

320  
	`scsi_gë_uöt16
(
c
);

324 
	}
}

326 
ölöe
 
uöt8_t


327 
	$èsk_gë_uöt8
(
scsi_èsk
 *
èsk
, 
off£t
)

329 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 1) {

330  
èsk
->
d©aö
.
d©a
[
off£t
];

334 
	}
}

337 
	$scsi_£t_uöt64
(*
c
, 
uöt64_t
 
v
)

339 
uöt32_t
 
vÆ
;

341 
vÆ
 = (
v
 >> 32) & 0xffffffff;

342 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

344 
c
 += 4;

345 
vÆ
 = 
v
 & 0xffffffff;

346 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

347 
	}
}

350 
	$scsi_£t_uöt32
(*
c
, 
uöt32_t
 
vÆ
)

352 
c
[0] = 
vÆ
 >> 24;

353 
c
[1] = 
vÆ
 >> 16;

354 
c
[2] = 
vÆ
 >> 8;

355 
c
[3] = 
vÆ
;

356 
	}
}

359 
	$scsi_£t_uöt16
(*
c
, 
uöt16_t
 
vÆ
)

361 
c
[0] = 
vÆ
 >> 8;

362 
c
[1] = 
vÆ
;

363 
	}
}

368 
scsi_èsk
 *

369 
	$scsi_cdb_ã°unôªady
()

371 
scsi_èsk
 *
èsk
;

373 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

374 i‡(
èsk
 =
NULL
) {

375  
NULL
;

378 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

379 
èsk
->
cdb
[0] = 
SCSI_OPCODE_TESTUNITREADY
;

381 
èsk
->
cdb_size
 = 6;

382 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

383 
èsk
->
expx„æí
 = 0;

385  
èsk
;

386 
	}
}

391 
scsi_èsk
 *

392 
	$scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
)

394 
scsi_èsk
 *
èsk
;

396 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

397 i‡(
èsk
 =
NULL
) {

398  
NULL
;

401 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

402 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SANITIZE
;

404 
èsk
->
cdb
[1] = 
ß
 & 0x1f;

405 i‡(
immed
) {

406 
èsk
->
cdb
[1] |= 0x80;

408 i‡(
au£
) {

409 
èsk
->
cdb
[1] |= 0x20;

412 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

414 
èsk
->
cdb_size
 = 10;

415 i‡(
∑øm_Àn
 != 0) {

416 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

418 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

420 
èsk
->
expx„æí
 = (
∑øm_Àn
 + 3) & 0xfffc;

422  
èsk
;

423 
	}
}

428 
scsi_èsk
 *

429 
	$scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
)

431 
scsi_èsk
 *
èsk
;

433 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

434 i‡(
èsk
 =
NULL
) {

435  
NULL
;

438 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

439 
èsk
->
cdb
[0] = 
SCSI_OPCODE_REPORTLUNS
;

440 
èsk
->
cdb
[2] = 
ªp‹t_ty≥
;

441 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

443 
èsk
->
cdb_size
 = 12;

444 i‡(
Æloc_Àn
 != 0) {

445 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

447 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

449 
èsk
->
expx„æí
 = 
Æloc_Àn
;

451  
èsk
;

452 
	}
}

459 
	$scsi_ªp‹éuns_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

461 
uöt32_t
 
li°_size
;

463 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

465  
li°_size
;

466 
	}
}

471 
scsi_ªp‹éuns_li°
 *

472 
	$scsi_ªp‹éuns_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

474 
scsi_ªp‹éuns_li°
 *
li°
;

475 
li°_size
;

476 
i
, 
num_luns
;

478 i‡(
èsk
->
d©aö
.
size
 < 4) {

479  
NULL
;

482 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

483 i‡(
li°_size
 < 
èsk
->
d©aö
.
size
) {

484  
NULL
;

487 
num_luns
 = 
li°_size
 / 8 - 1;

488 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªp‹éuns_li°
, 
luns
)

489 + (
uöt16_t
Ë* 
num_luns
);

490 i‡(
li°
 =
NULL
) {

491  
NULL
;

494 
li°
->
num
 = 
num_luns
;

495 
i
 = 0; i < 
num_luns
; i++) {

496 
li°
->
luns
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, i * 8 + 8);

499  
li°
;

500 
	}
}

505 
scsi_èsk
 *

506 
	$scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
)

508 
scsi_èsk
 *
èsk
;

510 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

511 i‡(
èsk
 =
NULL
) {

512  
NULL
;

515 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

516 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READCAPACITY10
;

518 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

520 i‡(
pmi
) {

521 
èsk
->
cdb
[8] |= 0x01;

524 
èsk
->
cdb_size
 = 10;

525 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

526 
èsk
->
expx„æí
 = 8;

528  
èsk
;

529 
	}
}

534 
scsi_èsk
 *

535 
	$scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
uöt16_t
 
Æloc_Àn
)

537 
scsi_èsk
 *
èsk
;

539 i‡(
f‹m©
 !
SCSI_READ_TOC
 && f‹m© !
SCSI_READ_SESSION_INFO


540 && 
f‹m©
 !
SCSI_READ_FULL_TOC
){

541 
	`Ârötf
(
°dîr
, "Ród TOC f‹m© %dÇŸ fuŒy suµ‹ãd yë\n", 
f‹m©
);

542  
NULL
;

545 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

546 i‡(
èsk
 =
NULL
) {

547  
NULL
;

550 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

551 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READTOC
;

553 i‡(
msf
) {

554 
èsk
->
cdb
[1] |= 0x02;

557 
èsk
->
cdb
[2] = 
f‹m©
 & 0xf;

560 i‡(
f‹m©
 =
SCSI_READ_TOC
 || f‹m© =
SCSI_READ_FULL_TOC
) {

561 
èsk
->
cdb
[6] = 0xf‡& 
åack_£ssi⁄
;

564 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

566 
èsk
->
cdb_size
 = 10;

567 i‡(
Æloc_Àn
 != 0) {

568 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

570 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

572 
èsk
->
expx„æí
 = 
Æloc_Àn
;

574  
èsk
;

575 
	}
}

582 
	$scsi_ªadtoc_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

584 
uöt16_t
 
toc_d©a_Àn
;

586 
toc_d©a_Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

588  
toc_d©a_Àn
;

589 
	}
}

591 
ölöe
 
scsi_ªadtoc_fmt


592 
	$scsi_ªadtoc_f‹m©
(c⁄° 
scsi_èsk
 *
èsk
)

594  
èsk
->
cdb
[2] & 0xf;

595 
	}
}

598 
	$scsi_ªadtoc_desc_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_ªadtoc_li°
 *
li°
, 
i
)

600 
	`scsi_ªadtoc_f‹m©
(
èsk
)) {

601 
SCSI_READ_TOC
:

602 
li°
->
desc
[
i
].desc.
toc
.
adr


603 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

604 
li°
->
desc
[
i
].desc.
toc
.
c⁄åﬁ


605 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

606 
li°
->
desc
[
i
].desc.
toc
.
åack


607 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

608 
li°
->
desc
[
i
].desc.
toc
.
lba


609 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

611 
SCSI_READ_SESSION_INFO
:

612 
li°
->
desc
[
i
].desc.
£s
.
adr


613 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

614 
li°
->
desc
[
i
].desc.
£s
.
c⁄åﬁ


615 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

616 
li°
->
desc
[
i
].desc.
£s
.
fú°_ö_œ°


617 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

618 
li°
->
desc
[
i
].desc.
£s
.
lba


619 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

621 
SCSI_READ_FULL_TOC
:

622 
li°
->
desc
[
i
].desc.
fuŒ
.
£ssi⁄


623 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 0) & 0xf0;

624 
li°
->
desc
[
i
].desc.
fuŒ
.
adr


625 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0xf0;

626 
li°
->
desc
[
i
].desc.
fuŒ
.
c⁄åﬁ


627 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0x0f;

628 
li°
->
desc
[
i
].desc.
fuŒ
.
äo


629 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 2);

630 
li°
->
desc
[
i
].desc.
fuŒ
.
poöt


631 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 3);

632 
li°
->
desc
[
i
].desc.
fuŒ
.
mö


633 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 4);

634 
li°
->
desc
[
i
].desc.
fuŒ
.
£c


635 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 5);

636 
li°
->
desc
[
i
].desc.
fuŒ
.
‰ame


637 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 6);

638 
li°
->
desc
[
i
].desc.
fuŒ
.
zîo


639 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 7);

640 
li°
->
desc
[
i
].desc.
fuŒ
.
pmö


641 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 8);

642 
li°
->
desc
[
i
].desc.
fuŒ
.
p£c


643 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 9);

644 
li°
->
desc
[
i
].desc.
fuŒ
.
p‰ame


645 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 10);

650 
	}
}

655 
scsi_ªadtoc_li°
 *

656 
	$scsi_ªadtoc_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

658 
scsi_ªadtoc_li°
 *
li°
;

659 
d©a_Àn
;

660 
i
, 
num_desc
;

662 i‡(
èsk
->
d©aö
.
size
 < 4) {

663  
NULL
;

667 
d©a_Àn
 = 
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
) - 2;

668 if(
èsk
->
d©aö
.
size
 < 
d©a_Àn
) {

669  
NULL
;

673 
num_desc
 = (
d©a_Àn
 - 4) / 8;

675 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªadtoc_li°
, 
desc
)

676 + (
scsi_ªadtoc_desc
Ë* 
num_desc
);

677 i‡(
li°
 =
NULL
) {

678  
NULL
;

681 
li°
->
num
 = 
num_desc
;

682 
li°
->
fú°
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

683 
li°
->
œ°
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

685 
i
 = 0; i < 
num_desc
; i++) {

686 
	`scsi_ªadtoc_desc_unm¨shÆl
(
èsk
, 
li°
, 
i
);

689  
li°
;

690 
	}
}

695 
scsi_èsk
 *

696 
	$scsi_cdb_ª£rve6
()

698 
scsi_èsk
 *
èsk
;

700 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

701 i‡(
èsk
 =
NULL
) {

702  
NULL
;

705 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

706 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RESERVE6
;

708 
èsk
->
cdb_size
 = 6;

709 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

711  
èsk
;

712 
	}
}

716 
scsi_èsk
 *

717 
	$scsi_cdb_ªÀa£6
()

719 
scsi_èsk
 *
èsk
;

721 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

722 i‡(
èsk
 =
NULL
) {

723  
NULL
;

726 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

727 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RELEASE6
;

729 
èsk
->
cdb_size
 = 6;

730 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

732  
èsk
;

733 
	}
}

735 
ölöe
 
uöt8_t


736 
	$scsi_£rvi˚a˘i⁄ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

738  
èsk
->
cdb
[1];

739 
	}
}

745 
	$scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

747 
	`scsi_£rvi˚a˘i⁄ö_ß
(
èsk
)) {

748 
SCSI_READCAPACITY16
: {

749 
scsi_ªadˇ∑côy16
 *
rc16
 = 
	`scsi_mÆloc
(
èsk
,

750 (*
rc16
));

751 i‡(
rc16
 =
NULL
) {

752  
NULL
;

754 
rc16
->
ªtu∫ed_lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

755 
rc16
->
ªtu∫ed_lba
 = (rc16->ªtu∫ed_lb®<< 32Ë| 
	`èsk_gë_uöt32
(
èsk
, 4);

756 
rc16
->
block_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

757 
rc16
->
p_ty≥
 = (
	`èsk_gë_uöt8
(
èsk
, 12) >> 1) & 0x07;

758 
rc16
->
¥Ÿ_í
 = 
	`èsk_gë_uöt8
(
èsk
, 12) & 0x01;

759 
rc16
->
p_i_exp
 = (
	`èsk_gë_uöt8
(
èsk
, 13) >> 4) & 0x0f;

760 
rc16
->
lbµbe
 = 
	`èsk_gë_uöt8
(
èsk
, 13) & 0x0f;

761 
rc16
->
lbpme
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x80);

762 
rc16
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x40);

763 
rc16
->
œlba
 = 
	`èsk_gë_uöt16
(
èsk
, 14) & 0x3fff;

764  
rc16
;

766 
SCSI_GET_LBA_STATUS
: {

767 
scsi_gë_lba_°©us
 *
gls
 = 
	`scsi_mÆloc
(
èsk
,

768 (*
gls
));

769 
öt32_t
 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

770 
i
;

772 i‡(
gls
 =
NULL
) {

773  
NULL
;

776 i‡(
Àn
 > 
èsk
->
d©aö
.
size
 - 4) {

777 
Àn
 = 
èsk
->
d©aö
.
size
 - 4;

779 
Àn
 =Üen / 16;

781 
gls
->
num_des¸ùt‹s
 = 
Àn
;

782 
gls
->
des¸ùt‹s
 = 
	`scsi_mÆloc
(
èsk
,

783 (*
gls
->
des¸ùt‹s
Ë* 
Àn
);

784 i‡(
gls
->
des¸ùt‹s
 =
NULL
) {

785 
	`‰ì
(
gls
);

786  
NULL
;

789 
i
 = 0; i < ()
gls
->
num_des¸ùt‹s
; i++) {

790 
gls
->
des¸ùt‹s
[
i
].
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 0);

791 
gls
->
des¸ùt‹s
[
i
].
lba
 <<= 32;

792 
gls
->
des¸ùt‹s
[
i
].
lba
 |
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 4);

794 
gls
->
des¸ùt‹s
[
i
].
num_blocks
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 8);

796 
gls
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 = 
	`èsk_gë_uöt8
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 12) & 0x0f;

799  
gls
;

802  
NULL
;

804 
	}
}

809 
ölöe
 
uöt8_t


810 
	$scsi_≥rsi°íåe£rveö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

812  
èsk
->
cdb
[1] & 0x1f;

813 
	}
}

816 
	$scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

818 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

819 
SCSI_PERSISTENT_RESERVE_READ_KEYS
:

820  
	`èsk_gë_uöt32
(
èsk
, 4) + 8;

821 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
:

823 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

828 
	}
}

831 
	$scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

833 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
;

834 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
;

835 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 *
rc
;

836 
i
;

838 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

839 
SCSI_PERSISTENT_RESERVE_READ_KEYS
:

840 
i
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

842 
rk
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
, 
keys
Ë+ 
i
);

843 i‡(
rk
 =
NULL
) {

844  
NULL
;

846 
rk
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

847 
rk
->
addôi⁄Æ_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

849 
rk
->
num_keys
 =Ñk->
addôi⁄Æ_Àngth
 / 8;

850 
i
 = 0; i < ()
rk
->
num_keys
; i++) {

851 
rk
->
keys
[
i
] = 
	`èsk_gë_uöt64
(
èsk
, 8 + i * 8);

853  
rk
;

854 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
: {

855 
size_t
 
Æloc_sz
;

857 
i
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

858 
Æloc_sz
 = (
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
);

860 
º
 = 
	`scsi_mÆloc
(
èsk
, 
Æloc_sz
);

861 i‡(
º
 =
NULL
) {

862  
NULL
;

864 
	`mem£t
(
º
, 0, 
Æloc_sz
);

865 
º
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

867 i‡(
i
 > 0) {

868 
º
->
ª£rved
 = 1;

869 
º
->
ª£rv©i⁄_key
 =

870 
	`èsk_gë_uöt64
(
èsk
, 8);

871 
º
->
¥_sc›e
 = 
	`èsk_gë_uöt8
(
èsk
, 21) >> 4;

872 
º
->
¥_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 21) & 0xf;

875  
º
;

877 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

878 
rc
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
));

879 i‡(
rc
 =
NULL
) {

880  
NULL
;

882 
rc
->
Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

883 
rc
->
¸h
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x10);

884 
rc
->
sù_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x08);

885 
rc
->
©p_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x04);

886 
rc
->
±∂_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x01);

887 
rc
->
tmv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x80);

888 
rc
->
Ælow_comm™ds
 = 
	`èsk_gë_uöt8
(
èsk
, 3) >> 4;

889 
rc
->
≥rsi°ít_ª£rv©i⁄_ty≥_mask
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

891  
rc
;

893  
NULL
;

895 
	}
}

897 
ölöe
 
uöt8_t


898 
	$scsi_maöã«n˚ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

900  
èsk
->
cdb
[1];

901 
	}
}

903 
ölöe
 
uöt8_t


904 
	$scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(c⁄° 
scsi_èsk
 *
èsk
)

906  
èsk
->
cdb
[2] & 0x07;

907 
	}
}

914 
	$scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

917 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

918 
SCSI_REPORT_SUPPORTED_OP_CODES
:

919 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

920 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

921  
	`èsk_gë_uöt32
(
èsk
, 0) + 4;

922 
SCSI_REPORT_SUPPORTING_OPCODE
:

923 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

925 (
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80) ? 12 : 0 +

926 
	`èsk_gë_uöt16
(
èsk
, 2);

931 
	}
}

937 
	$scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

939 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

940 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

941 
Àn
, 
i
;

943 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

944 
SCSI_REPORT_SUPPORTED_OP_CODES
:

945 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

946 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

947 i‡(
èsk
->
d©aö
.
size
 < 4) {

948  
NULL
;

951 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

959 
rsoc
 = 
	`scsi_mÆloc
(
èsk
,

960 
	`off£tof
(
scsi_ªp‹t_suµ‹ãd_›_codes
,

961 
des¸ùt‹s
) +

962 
Àn
 / 8 * (
scsi_comm™d_des¸ùt‹
));

963 i‡(
rsoc
 =
NULL
) {

964  
NULL
;

967 
rsoc
->
num_des¸ùt‹s
 = 0;

968 
i
 = 4;

969 
Àn
 >= 8) {

970 
scsi_comm™d_des¸ùt‹
 *
desc
;

972 
desc
 = &
rsoc
->
des¸ùt‹s
[rsoc->
num_des¸ùt‹s
++];

973 
desc
->
›code
 =

974 
	`èsk_gë_uöt8
(
èsk
, 
i
);

975 
desc
->
ß
 =

976 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 2);

977 
desc
->
˘dp
 =

978 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x02);

979 
desc
->
£rva˘v
 =

980 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x01);

981 
desc
->
cdb_Àn
 =

982 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 6);

984 
Àn
 -= 8;

985 
i
 += 8;

988 i‡(!
desc
->
˘dp
) {

992 
desc
->
to
.
des¸ùt‹_Àngth
 =

993 
	`èsk_gë_uöt16
(
èsk
, 
i
);

994 
desc
->
to
.
comm™d_•ecific
 =

995 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

996 
desc
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

997 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

998 
desc
->
to
.
ªcommíded_timeout
 =

999 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1001 
Àn
 -
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1002 
i
 +
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1004  
rsoc
;

1005 
SCSI_REPORT_SUPPORTING_OPCODE
:

1006 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

1007 
rsoc_⁄e
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
));

1008 i‡(
rsoc_⁄e
 =
NULL
) {

1009  
NULL
;

1012 
rsoc_⁄e
->
˘dp
 =

1013 !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1014 
rsoc_⁄e
->
suµ‹t
 =

1015 
	`èsk_gë_uöt8
(
èsk
, 1) & 0x07;

1016 
rsoc_⁄e
->
cdb_Àngth
 =

1017 
	`èsk_gë_uöt16
(
èsk
, 2);

1018 if(
rsoc_⁄e
->
cdb_Àngth
 <= 16) {

1019 
	`mem˝y
(
rsoc_⁄e
->
cdb_ußge_d©a
,

1020 &
èsk
->
d©aö
.
d©a
[4],

1021 
rsoc_⁄e
->
cdb_Àngth
);

1024 i‡(
rsoc_⁄e
->
˘dp
) {

1025 
i
 = 4 + 
rsoc_⁄e
->
cdb_Àngth
;

1027 
rsoc_⁄e
->
to
.
des¸ùt‹_Àngth
 =

1028 
	`èsk_gë_uöt16
(
èsk
, 
i
);

1029 
rsoc_⁄e
->
to
.
comm™d_•ecific
 =

1030 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

1031 
rsoc_⁄e
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

1032 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

1033 
rsoc_⁄e
->
to
.
ªcommíded_timeout
 =

1034 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1036  
rsoc_⁄e
;

1040  
NULL
;

1041 
	}
}

1046 
scsi_èsk
 *

1047 
	$scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
scsi_›code
 
›code
, 
ß
, 
uöt32_t
 
Æloc_Àn
)

1049 
scsi_èsk
 *
èsk
;

1051 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1052 i‡(
èsk
 =
NULL
) {

1053  
NULL
;

1056 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1057 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MAINTENANCE_IN
;

1058 
èsk
->
cdb
[1] = 
SCSI_REPORT_SUPPORTED_OP_CODES
;

1059 
èsk
->
cdb
[2] = 
›ti⁄s
 & 0x07;

1061 i‡(
r˘d
) {

1062 
èsk
->
cdb
[2] |= 0x80;

1065 
èsk
->
cdb
[3] = 
›code
;

1067 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[4], 
ß
);

1069 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

1071 
èsk
->
cdb_size
 = 12;

1072 i‡(
Æloc_Àn
 != 0) {

1073 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1075 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1077 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1079  
èsk
;

1080 
	}
}

1087 
	$scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
 
_U_
)

1090 
	}
}

1095 
scsi_ªadˇ∑côy10
 *

1096 
	$scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1098 
scsi_ªadˇ∑côy10
 *
rc10
;

1100 i‡(
èsk
->
d©aö
.
size
 < 8) {

1101  
NULL
;

1103 
rc10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªadˇ∑côy10
));

1104 i‡(
rc10
 =
NULL
) {

1105  
NULL
;

1108 
rc10
->
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1109 
rc10
->
block_size
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

1111  
rc10
;

1112 
	}
}

1117 
scsi_èsk
 *

1118 
	$scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
Æloc_Àn
)

1120 
scsi_èsk
 *
èsk
;

1122 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1123 i‡(
èsk
 =
NULL
) {

1124  
NULL
;

1127 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1128 
èsk
->
cdb
[0] = 
SCSI_OPCODE_INQUIRY
;

1130 i‡(
evpd
) {

1131 
èsk
->
cdb
[1] |= 0x01;

1134 
èsk
->
cdb
[2] = 
∑ge_code
;

1136 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[3], 
Æloc_Àn
);

1138 
èsk
->
cdb_size
 = 6;

1139 i‡(
Æloc_Àn
 != 0) {

1140 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1142 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1144 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1146  
èsk
;

1147 
	}
}

1149 
ölöe
 

1150 
	$scsi_öquúy_evpd_£t
(c⁄° 
scsi_èsk
 *
èsk
)

1152  
èsk
->
cdb
[1] & 0x1;

1153 
	}
}

1155 
ölöe
 
uöt8_t


1156 
	$scsi_öquúy_∑ge_code
(c⁄° 
scsi_èsk
 *
èsk
)

1158  
èsk
->
cdb
[2];

1159 
	}
}

1166 
	$scsi_öquúy_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

1168 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1169  
	`èsk_gë_uöt8
(
èsk
, 4) + 5;

1172 
	`scsi_öquúy_∑ge_code
(
èsk
)) {

1173 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1174 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1175 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1176  
	`èsk_gë_uöt8
(
èsk
, 3) + 4;

1177 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1178 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1179 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1180  
	`èsk_gë_uöt16
(
èsk
, 2) + 4;

1184 
	}
}

1186 
scsi_öquúy_°™d¨d
 *

1187 
	$scsi_öquúy_unm¨shÆl_°™d¨d
(
scsi_èsk
 *
èsk
)

1189 
i
;

1191 
scsi_öquúy_°™d¨d
 *
öq
 = 
	`scsi_mÆloc
(
èsk
, (*inq));

1192 i‡(
öq
 =
NULL
) {

1193  
NULL
;

1196 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1197 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1198 
öq
->
rmb
 = !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1199 
öq
->
vîsi⁄
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

1200 
öq
->
n‹maˇ
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x20);

1201 
öq
->
hisup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x10);

1202 
öq
->
ª•⁄£_d©a_f‹m©
 = 
	`èsk_gë_uöt8
(
èsk
, 3) & 0x0f;

1204 
öq
->
addôi⁄Æ_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1206 
öq
->
sccs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1207 
öq
->
acc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1208 
öq
->
çgs
 = (
	`èsk_gë_uöt8
(
èsk
, 5) >> 4) & 0x03;

1209 
öq
->
thªïc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x08);

1210 
öq
->
¥Ÿe˘
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1212 
öq
->
íc£rv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x40);

1213 
öq
->
mu…ù
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x10);

1214 
öq
->
addr16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x01);

1215 
öq
->
wbus16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x20);

1216 
öq
->
sync
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x10);

1217 
öq
->
cmdque
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x02);

1219 
	`mem˝y
(&
öq
->
víd‹_idítifiˇti⁄
[0],

1220 &
èsk
->
d©aö
.
d©a
[8], 8);

1221 
	`mem˝y
(&
öq
->
¥odu˘_idítifiˇti⁄
[0],

1222 &
èsk
->
d©aö
.
d©a
[16], 16);

1223 
	`mem˝y
(&
öq
->
¥odu˘_ªvisi⁄_Àvñ
[0],

1224 &
èsk
->
d©aö
.
d©a
[32], 4);

1226 
öq
->
˛ockög
 = (
	`èsk_gë_uöt8
(
èsk
, 56) >> 2) & 0x03;

1227 
öq
->
qas
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x02);

1228 
öq
->
ius
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x01);

1230 
i
 = 0; i < 8; i++) {

1231 
öq
->
vîsi⁄_des¸ùt‹
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, 58 + i * 2);

1234  
öq
;

1235 
	}
}

1237 
scsi_öquúy_suµ‹ãd_∑ges
 *

1238 
	$scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
scsi_èsk
 *
èsk
)

1240 
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1241 (*
öq
));

1242 i‡(
öq
 =
NULL
) {

1243  
NULL
;

1245 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1246 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1247 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1249 
öq
->
num_∑ges
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

1250 
öq
->
∑ges
 = 
	`scsi_mÆloc
(
èsk
, inq->
num_∑ges
);

1251 i‡(
öq
->
∑ges
 =
NULL
) {

1252 
	`‰ì
 (
öq
);

1253  
NULL
;

1255 
	`mem˝y
(
öq
->
∑ges
, &
èsk
->
d©aö
.
d©a
[4], inq->
num_∑ges
);

1256  
öq
;

1257 
	}
}

1259 
scsi_öquúy_unô_£rül_numbî
 *

1260 
	$scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
scsi_èsk
* 
èsk
)

1262 
scsi_öquúy_unô_£rül_numbî
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1263 (*
öq
));

1264 i‡(
öq
 =
NULL
) {

1265  
NULL
;

1267 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1268 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1269 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1271 
öq
->
u¢
 = 
	`scsi_mÆloc
(
èsk
, 
	`èsk_gë_uöt8
(task, 3) + 1);

1272 i‡(
öq
->
u¢
 =
NULL
) {

1273 
	`‰ì
(
öq
);

1274  
NULL
;

1276 
	`mem˝y
(
öq
->
u¢
, &
èsk
->
d©aö
.
d©a
[4], 
	`èsk_gë_uöt8
(task, 3));

1277 
öq
->
u¢
[
	`èsk_gë_uöt8
(
èsk
, 3)] = 0;

1278  
öq
;

1279 
	}
}

1281 
scsi_öquúy_devi˚_idítifiˇti⁄
 *

1282 
	$scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
scsi_èsk
 *
èsk
)

1284 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1285 (*
öq
));

1286 
ªmaöög
 = 
	`èsk_gë_uöt16
(
èsk
, 2);

1287 *
d±r
;

1289 i‡(
öq
 =
NULL
) {

1290  
NULL
;

1292 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1293 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1294 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1296 
d±r
 = &
èsk
->
d©aö
.
d©a
[4];

1297 
ªmaöög
 > 0) {

1298 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 =

1299 
	`scsi_mÆloc
(
èsk
, (*
dev
));

1300 i‡(
dev
 =
NULL
) {

1301 
îr
;

1304 
dev
->
√xt
 = 
öq
->
desig«t‹s
;

1305 
öq
->
desig«t‹s
 = 
dev
;

1307 
dev
->
¥Ÿocﬁ_idítifõr
 = (
d±r
[0]>>4) & 0x0f;

1308 
dev
->
code_£t
 = 
d±r
[0] & 0x0f;

1309 
dev
->
piv
 = !!(
d±r
[1]&0x80);

1310 
dev
->
assocüti⁄
 = (
d±r
[1]>>4)&0x03;

1311 
dev
->
desig«t‹_ty≥
 = 
d±r
[1]&0x0f;

1313 
dev
->
desig«t‹_Àngth
 = 
d±r
[3];

1314 
dev
->
desig«t‹
 = 
	`scsi_mÆloc
(
èsk
, dev->
desig«t‹_Àngth
 + 1);

1315 i‡(
dev
->
desig«t‹
 =
NULL
) {

1316 
îr
;

1318 
dev
->
desig«t‹
[dev->
desig«t‹_Àngth
] = 0;

1319 
	`mem˝y
(
dev
->
desig«t‹
, &
d±r
[4],

1320 
dev
->
desig«t‹_Àngth
);

1322 
ªmaöög
 -= 4;

1323 
ªmaöög
 -
dev
->
desig«t‹_Àngth
;

1325 
d±r
 +
dev
->
desig«t‹_Àngth
 + 4;

1327  
öq
;

1329 
îr
:

1330 
öq
->
desig«t‹s
) {

1331 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 = 
öq
->
desig«t‹s
;

1332 
öq
->
desig«t‹s
 = 
dev
->
√xt
;

1333 
	`‰ì
(
dev
->
desig«t‹
);

1334 
	`‰ì
(
dev
);

1337 
	`‰ì
(
öq
);

1338  
NULL
;

1339 
	}
}

1341 
scsi_öquúy_block_limôs
 *

1342 
	$scsi_öquúy_unm¨shÆl_block_limôs
(
scsi_èsk
 *
èsk
)

1344 
scsi_öquúy_block_limôs
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1345 (*
öq
));

1346 i‡(
öq
 =
NULL
) {

1347  
NULL
;

1349 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1350 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1351 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1353 
öq
->
w¢z
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

1354 
öq
->
max_cmp
 = 
	`èsk_gë_uöt8
(
èsk
, 5);

1355 
öq
->
›t_gøn
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

1356 
öq
->
max_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

1357 
öq
->
›t_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 12);

1358 
öq
->
max_¥e„tch
 = 
	`èsk_gë_uöt32
(
èsk
, 16);

1359 
öq
->
max_unm≠
 = 
	`èsk_gë_uöt32
(
èsk
, 20);

1360 
öq
->
max_unm≠_bdc
 = 
	`èsk_gë_uöt32
(
èsk
, 24);

1361 
öq
->
›t_unm≠_gøn
 = 
	`èsk_gë_uöt32
(
èsk
, 28);

1362 
öq
->
ugavÆid
 = !!(
	`èsk_gë_uöt8
(
èsk
, 32)&0x80);

1363 
öq
->
unm≠_gøn_Æign
 = 
	`èsk_gë_uöt32
(
èsk
, 32) & 0x7fffffff;

1364 
öq
->
max_ws_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 36);

1365 
öq
->
max_ws_Àn
 = (inq->max_ws_len << 32)

1366 | 
	`èsk_gë_uöt32
(
èsk
, 40);

1368  
öq
;

1369 
	}
}

1371 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *

1372 
	$scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
scsi_èsk
 *
èsk
)

1374 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
 =

1375 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1376 i‡(
öq
 =
NULL
) {

1377  
NULL
;

1379 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1380 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1381 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1383 
öq
->
medium_rŸ©i⁄_øã
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

1384 
öq
->
¥odu˘_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6);

1385 
öq
->
wabîeq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 6) & 0x03;

1386 
öq
->
wa˚ªq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 4) & 0x03;

1387 
öq
->
nomöÆ_f‹m_Á˘‹
 = 
	`èsk_gë_uöt8
(
èsk
, 7) & 0x0f;

1388 
öq
->
fuab
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x02);

1389 
öq
->
vbuls
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x01);

1390  
öq
;

1391 
	}
}

1393 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *

1394 
	$scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
scsi_èsk
 *
èsk
)

1396 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
 =

1397 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1398 i‡(
öq
 =
NULL
) {

1399  
NULL
;

1401 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1402 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1403 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1405 
öq
->
thªshﬁd_exp⁄ít
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1406 
öq
->
lbpu
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1407 
öq
->
lbpws
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1408 
öq
->
lbpws10
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x20);

1409 
öq
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x04);

1410 
öq
->
™c_sup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x02);

1411 
öq
->
dp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1412 
öq
->
¥ovisi⁄ög_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6) & 0x07;

1414  
öq
;

1415 
	}
}

1421 
	$scsi_öquúy_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1423 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1424  
	`scsi_öquúy_unm¨shÆl_°™d¨d
(
èsk
);

1427 
	`scsi_öquúy_∑ge_code
(
èsk
))

1429 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1430  
	`scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
èsk
);

1431 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1432  
	`scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
èsk
);

1433 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1434  
	`scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
èsk
);

1435 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1436  
	`scsi_öquúy_unm¨shÆl_block_limôs
(
èsk
);

1437 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1438  
	`scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
èsk
);

1439 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1440  
	`scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
èsk
);

1442  
NULL
;

1444 
	}
}

1449 
scsi_èsk
 *

1450 
	$scsi_cdb_ªad6
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
)

1452 
scsi_èsk
 *
èsk
;

1453 
num_blocks
;

1455 
num_blocks
 = 
x„æí
/
blocksize
;

1456 i‡(
num_blocks
 > 256) {

1457  
NULL
;

1460 i‡(
lba
 > 0x1fffff) {

1461  
NULL
;

1464 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1465 i‡(
èsk
 =
NULL
) {

1466  
NULL
;

1469 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1470 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

1471 
èsk
->
cdb_size
 = 6;

1473 
èsk
->
cdb
[1] = (
lba
>>16)&0x1f;

1474 
èsk
->
cdb
[2] = (
lba
>> 8)&0xff;

1475 
èsk
->
cdb
[3] = (
lba
 )&0xff;

1477 i‡(
num_blocks
 < 256) {

1478 
èsk
->
cdb
[4] = 
num_blocks
 & 0xff;

1481 i‡(
x„æí
 != 0) {

1482 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1484 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1486 
èsk
->
expx„æí
 = 
x„æí
;

1488  
èsk
;

1489 
	}
}

1494 
scsi_èsk
 *

1495 
	$scsi_cdb_ªad10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1497 
scsi_èsk
 *
èsk
;

1499 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1500 i‡(
èsk
 =
NULL
) {

1501  
NULL
;

1504 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1505 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

1507 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1508 i‡(
dpo
) {

1509 
èsk
->
cdb
[1] |= 0x10;

1511 i‡(
fua
) {

1512 
èsk
->
cdb
[1] |= 0x08;

1514 i‡(
fua_nv
) {

1515 
èsk
->
cdb
[1] |= 0x02;

1518 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1519 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1521 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1523 
èsk
->
cdb_size
 = 10;

1524 i‡(
x„æí
 != 0) {

1525 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1527 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1529 
èsk
->
expx„æí
 = 
x„æí
;

1531  
èsk
;

1532 
	}
}

1537 
scsi_èsk
 *

1538 
	$scsi_cdb_ªad12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1540 
scsi_èsk
 *
èsk
;

1542 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1543 i‡(
èsk
 =
NULL
) {

1544  
NULL
;

1547 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1548 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

1550 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1551 i‡(
dpo
) {

1552 
èsk
->
cdb
[1] |= 0x10;

1554 i‡(
fua
) {

1555 
èsk
->
cdb
[1] |= 0x08;

1557 i‡(
fua_nv
) {

1558 
èsk
->
cdb
[1] |= 0x02;

1561 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1562 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1564 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1566 
èsk
->
cdb_size
 = 12;

1567 i‡(
x„æí
 != 0) {

1568 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1570 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1572 
èsk
->
expx„æí
 = 
x„æí
;

1574  
èsk
;

1575 
	}
}

1580 
scsi_èsk
 *

1581 
	$scsi_cdb_ªad16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1583 
scsi_èsk
 *
èsk
;

1585 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1586 i‡(
èsk
 =
NULL
) {

1587  
NULL
;

1590 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1591 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

1593 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1594 i‡(
dpo
) {

1595 
èsk
->
cdb
[1] |= 0x10;

1597 i‡(
fua
) {

1598 
èsk
->
cdb
[1] |= 0x08;

1600 i‡(
fua_nv
) {

1601 
èsk
->
cdb
[1] |= 0x02;

1604 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1605 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1606 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1608 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1610 
èsk
->
cdb_size
 = 16;

1611 i‡(
x„æí
 != 0) {

1612 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1614 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1616 
èsk
->
expx„æí
 = 
x„æí
;

1618  
èsk
;

1619 
	}
}

1624 
scsi_èsk
 *

1625 
	$scsi_cdb_wrôe10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1627 
scsi_èsk
 *
èsk
;

1629 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1630 i‡(
èsk
 =
NULL
) {

1631  
NULL
;

1634 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1635 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

1637 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1638 i‡(
dpo
) {

1639 
èsk
->
cdb
[1] |= 0x10;

1641 i‡(
fua
) {

1642 
èsk
->
cdb
[1] |= 0x08;

1644 i‡(
fua_nv
) {

1645 
èsk
->
cdb
[1] |= 0x02;

1648 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1649 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1651 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1653 
èsk
->
cdb_size
 = 10;

1654 i‡(
x„æí
 != 0) {

1655 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1657 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1659 
èsk
->
expx„æí
 = 
x„æí
;

1661  
èsk
;

1662 
	}
}

1667 
scsi_èsk
 *

1668 
	$scsi_cdb_wrôe12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1670 
scsi_èsk
 *
èsk
;

1672 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1673 i‡(
èsk
 =
NULL
) {

1674  
NULL
;

1677 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1678 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

1680 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1681 i‡(
dpo
) {

1682 
èsk
->
cdb
[1] |= 0x10;

1684 i‡(
fua
) {

1685 
èsk
->
cdb
[1] |= 0x08;

1687 i‡(
fua_nv
) {

1688 
èsk
->
cdb
[1] |= 0x02;

1691 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1692 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1694 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1696 
èsk
->
cdb_size
 = 12;

1697 i‡(
x„æí
 != 0) {

1698 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1700 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1702 
èsk
->
expx„æí
 = 
x„æí
;

1704  
èsk
;

1705 
	}
}

1710 
scsi_èsk
 *

1711 
	$scsi_cdb_wrôe16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1713 
scsi_èsk
 *
èsk
;

1715 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1716 i‡(
èsk
 =
NULL
) {

1717  
NULL
;

1720 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1721 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

1723 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1724 i‡(
dpo
) {

1725 
èsk
->
cdb
[1] |= 0x10;

1727 i‡(
fua
) {

1728 
èsk
->
cdb
[1] |= 0x08;

1730 i‡(
fua_nv
) {

1731 
èsk
->
cdb
[1] |= 0x02;

1734 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1735 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1736 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
 / 
blocksize
);

1738 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1740 
èsk
->
cdb_size
 = 16;

1741 i‡(
x„æí
 != 0) {

1742 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1744 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1746 
èsk
->
expx„æí
 = 
x„æí
;

1748  
èsk
;

1749 
	}
}

1754 
scsi_èsk
 *

1755 
	$scsi_cdb_‹wrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1757 
scsi_èsk
 *
èsk
;

1759 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1760 i‡(
èsk
 =
NULL
) {

1761  
NULL
;

1764 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1765 
èsk
->
cdb
[0] = 
SCSI_OPCODE_ORWRITE
;

1767 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1768 i‡(
dpo
) {

1769 
èsk
->
cdb
[1] |= 0x10;

1771 i‡(
fua
) {

1772 
èsk
->
cdb
[1] |= 0x08;

1774 i‡(
fua_nv
) {

1775 
èsk
->
cdb
[1] |= 0x02;

1778 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1779 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1780 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1782 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1784 
èsk
->
cdb_size
 = 16;

1785 i‡(
x„æí
 != 0) {

1786 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1788 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1790 
èsk
->
expx„æí
 = 
x„æí
;

1792  
èsk
;

1793 
	}
}

1798 
scsi_èsk
 *

1799 
	$scsi_cdb_com∑ª™dwrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1801 
scsi_èsk
 *
èsk
;

1803 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1804 i‡(
èsk
 =
NULL
) {

1805  
NULL
;

1808 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1809 
èsk
->
cdb
[0] = 
SCSI_OPCODE_COMPARE_AND_WRITE
;

1811 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1812 i‡(
dpo
) {

1813 
èsk
->
cdb
[1] |= 0x10;

1815 i‡(
fua
) {

1816 
èsk
->
cdb
[1] |= 0x08;

1818 i‡(
fua_nv
) {

1819 
èsk
->
cdb
[1] |= 0x02;

1822 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1823 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1824 
èsk
->
cdb
[13] = 
x„æí
 / 
blocksize
 / 2;

1826 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1827 
èsk
->
cdb_size
 = 16;

1828 i‡(
x„æí
 != 0) {

1829 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1831 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1833 
èsk
->
expx„æí
 = 
x„æí
;

1835  
èsk
;

1836 
	}
}

1841 
scsi_èsk
 *

1842 
	$scsi_cdb_vîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1844 
scsi_èsk
 *
èsk
;

1846 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1847 i‡(
èsk
 =
NULL
) {

1848  
NULL
;

1851 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1852 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY10
;

1854 i‡(
v¥Ÿe˘
) {

1855 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1857 i‡(
dpo
) {

1858 
èsk
->
cdb
[1] |= 0x10;

1860 i‡(
bytchk
) {

1861 
èsk
->
cdb
[1] |= 0x02;

1864 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1865 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1867 
èsk
->
cdb_size
 = 10;

1868 i‡(
x„æí
 !0 && 
bytchk
) {

1869 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1870 
èsk
->
expx„æí
 = 
x„æí
;

1872 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1873 
èsk
->
expx„æí
 = 0;

1876  
èsk
;

1877 
	}
}

1882 
scsi_èsk
 *

1883 
	$scsi_cdb_vîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1885 
scsi_èsk
 *
èsk
;

1887 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1888 i‡(
èsk
 =
NULL
) {

1889  
NULL
;

1892 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1893 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY12
;

1895 i‡(
v¥Ÿe˘
) {

1896 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1898 i‡(
dpo
) {

1899 
èsk
->
cdb
[1] |= 0x10;

1901 i‡(
bytchk
) {

1902 
èsk
->
cdb
[1] |= 0x02;

1905 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1906 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1908 
èsk
->
cdb_size
 = 12;

1909 i‡(
x„æí
 !0 && 
bytchk
) {

1910 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1911 
èsk
->
expx„æí
 = 
x„æí
;

1913 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1914 
èsk
->
expx„æí
 = 0;

1917  
èsk
;

1918 
	}
}

1923 
scsi_èsk
 *

1924 
	$scsi_cdb_vîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1926 
scsi_èsk
 *
èsk
;

1928 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1929 i‡(
èsk
 =
NULL
) {

1930  
NULL
;

1933 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1934 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY16
;

1936 i‡(
v¥Ÿe˘
) {

1937 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1939 i‡(
dpo
) {

1940 
èsk
->
cdb
[1] |= 0x10;

1942 i‡(
bytchk
) {

1943 
èsk
->
cdb
[1] |= 0x02;

1946 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1947 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1948 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1950 
èsk
->
cdb_size
 = 16;

1951 i‡(
x„æí
 !0 && 
bytchk
) {

1952 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1953 
èsk
->
expx„æí
 = 
x„æí
;

1955 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1956 
èsk
->
expx„æí
 = 0;

1959  
èsk
;

1960 
	}
}

1965 
scsi_èsk
 *

1966 
	$scsi_cdb_unm≠
(
™ch‹
, 
group
, 
uöt16_t
 
x„æí
)

1968 
scsi_èsk
 *
èsk
;

1970 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1971 i‡(
èsk
 =
NULL
) {

1972  
NULL
;

1975 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1976 
èsk
->
cdb
[0] = 
SCSI_OPCODE_UNMAP
;

1978 i‡(
™ch‹
) {

1979 
èsk
->
cdb
[1] |= 0x01;

1981 
èsk
->
cdb
[6] |
group
 & 0x1f;

1983 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

1985 
èsk
->
cdb_size
 = 10;

1986 i‡(
x„æí
 != 0) {

1987 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1989 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1991 
èsk
->
expx„æí
 = 
x„æí
;

1993  
èsk
;

1994 
	}
}

1999 
scsi_èsk
 *

2000 
	$scsi_cdb_≥rsi°ít_ª£rve_ö
(
scsi_≥rsi°ít_ö_ß
 
ß
, 
uöt16_t
 
x„æí
)

2002 
scsi_èsk
 *
èsk
;

2004 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2005 i‡(
èsk
 =
NULL
) {

2006  
NULL
;

2009 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2010 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
;

2012 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2014 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

2016 
èsk
->
cdb_size
 = 10;

2017 i‡(
x„æí
 != 0) {

2018 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2020 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2022 
èsk
->
expx„æí
 = 
x„æí
;

2024  
èsk
;

2025 
	}
}

2030 
scsi_èsk
 *

2031 
	$scsi_cdb_≥rsi°ít_ª£rve_out
(
scsi_≥rsi°ít_out_ß
 
ß
, 
scsi_≥rsi°ít_out_sc›e
 
sc›e
, 
scsi_≥rsi°ít_out_ty≥
 
ty≥
, *
∑øm
)

2033 
scsi_èsk
 *
èsk
;

2034 
scsi_≥rsi°ít_ª£rve_out_basic
 *
basic
;

2035 
scsi_iovec
 *
iov
;

2036 *
buf
;

2037 
x„æí
;

2039 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2040 i‡(
èsk
 =
NULL
)

2041 
îr
;

2043 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2045 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

2046 i‡(
iov
 =
NULL
)

2047 
îr
;

2049 
ß
) {

2050 
SCSI_PERSISTENT_RESERVE_REGISTER
:

2051 
SCSI_PERSISTENT_RESERVE_RESERVE
:

2052 
SCSI_PERSISTENT_RESERVE_RELEASE
:

2053 
SCSI_PERSISTENT_RESERVE_CLEAR
:

2054 
SCSI_PERSISTENT_RESERVE_PREEMPT
:

2055 
SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT
:

2056 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
:

2057 
basic
 = 
∑øm
;

2059 
x„æí
 = 24;

2060 
buf
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

2061 i‡(
buf
 =
NULL
)

2062 
îr
;

2064 
	`mem£t
(
buf
, 0, 
x„æí
);

2065 
	`scsi_£t_uöt64
(&
buf
[0], 
basic
->
ª£rv©i⁄_key
);

2066 
	`scsi_£t_uöt64
(&
buf
[8], 
basic
->
£rvi˚_a˘i⁄_ª£rv©i⁄_key
);

2067 i‡(
basic
->
•ec_i_±
) {

2068 
buf
[20] |= 0x08;

2070 i‡(
basic
->
Æl_tg_±
) {

2071 
buf
[20] |= 0x04;

2073 i‡(
basic
->
≠çl
) {

2074 
buf
[20] |= 0x01;

2077 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE
:

2079 
îr
;

2081 
îr
;

2084 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_OUT
;

2085 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2086 
èsk
->
cdb
[2] = ((
sc›e
 << 4Ë& 0xf0Ë| (
ty≥
 & 0x0f);

2088 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[5], 
x„æí
);

2090 
èsk
->
cdb_size
 = 10;

2091 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2092 
èsk
->
expx„æí
 = 
x„æí
;

2094 
iov
->
iov_ba£
 = 
buf
;

2095 
iov
->
iov_Àn
 = 
x„æí
;

2096 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

2098  
èsk
;

2100 
îr
:

2101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2102  
NULL
;

2103 
	}
}

2108 
scsi_èsk
 *

2109 
	$scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt32_t
 
lba
, 
group
, 
uöt16_t
 
num_blocks
)

2111 
scsi_èsk
 *
èsk
;

2113 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2114 i‡(
èsk
 =
NULL
) {

2115  
NULL
;

2118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME10
;

2121 i‡(
wΩrŸe˘
) {

2122 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2124 i‡(
™ch‹
) {

2125 
èsk
->
cdb
[1] |= 0x10;

2127 i‡(
unm≠
) {

2128 
èsk
->
cdb
[1] |= 0x08;

2130 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2131 i‡(
group
) {

2132 
èsk
->
cdb
[6] |(
group
 & 0x1f);

2134 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2136 
èsk
->
cdb_size
 = 10;

2137 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2138 
èsk
->
expx„æí
 = 512;

2140  
èsk
;

2141 
	}
}

2146 
scsi_èsk
 *

2147 
	$scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt64_t
 
lba
, 
group
, 
uöt32_t
 
num_blocks
)

2149 
scsi_èsk
 *
èsk
;

2151 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2152 i‡(
èsk
 =
NULL
) {

2153  
NULL
;

2156 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2157 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME16
;

2159 i‡(
wΩrŸe˘
) {

2160 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2162 i‡(
™ch‹
) {

2163 
èsk
->
cdb
[1] |= 0x10;

2165 i‡(
unm≠
) {

2166 
èsk
->
cdb
[1] |= 0x08;

2168 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2169 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2170 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

2171 i‡(
group
) {

2172 
èsk
->
cdb
[14] |(
group
 & 0x1f);

2175 
èsk
->
cdb_size
 = 16;

2176 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2177 
èsk
->
expx„æí
 = 512;

2179  
èsk
;

2180 
	}
}

2185 
scsi_èsk
 *

2186 
	$scsi_cdb_mode£n£6
(
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2187 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2188 
sub_∑ge_code
, 
Æloc_Àn
)

2190 
scsi_èsk
 *
èsk
;

2192 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2193 i‡(
èsk
 =
NULL
) {

2194  
NULL
;

2197 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2198 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE6
;

2200 i‡(
dbd
) {

2201 
èsk
->
cdb
[1] |= 0x08;

2203 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2204 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2205 
èsk
->
cdb
[4] = 
Æloc_Àn
;

2207 
èsk
->
cdb_size
 = 6;

2208 i‡(
Æloc_Àn
 != 0) {

2209 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2211 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2213 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2215  
èsk
;

2216 
	}
}

2221 
scsi_èsk
 *

2222 
	$scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2223 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2224 
sub_∑ge_code
, 
Æloc_Àn
)

2226 
scsi_èsk
 *
èsk
;

2228 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2229 i‡(
èsk
 =
NULL
) {

2230  
NULL
;

2233 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2234 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE10
;

2236 i‡(
ŒbØ
) {

2237 
èsk
->
cdb
[1] |= 0x10;

2239 i‡(
dbd
) {

2240 
èsk
->
cdb
[1] |= 0x08;

2242 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2243 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2245 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

2247 
èsk
->
cdb_size
 = 10;

2248 i‡(
Æloc_Àn
 != 0) {

2249 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2251 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2253 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2255  
èsk
;

2256 
	}
}

2261 
scsi_èsk
 *

2262 
	$scsi_cdb_mode£À˘6
(
pf
, 
•
, 
∑øm_Àn
)

2264 
scsi_èsk
 *
èsk
;

2266 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2267 i‡(
èsk
 =
NULL
) {

2268  
NULL
;

2271 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2272 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT6
;

2274 i‡(
pf
) {

2275 
èsk
->
cdb
[1] |= 0x10;

2277 i‡(
•
) {

2278 
èsk
->
cdb
[1] |= 0x01;

2280 
èsk
->
cdb
[4] = 
∑øm_Àn
;

2282 
èsk
->
cdb_size
 = 6;

2283 i‡(
∑øm_Àn
 != 0) {

2284 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2286 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2288 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2290  
èsk
;

2291 
	}
}

2296 
scsi_èsk
 *

2297 
	$scsi_cdb_mode£À˘10
(
pf
, 
•
, 
∑øm_Àn
)

2299 
scsi_èsk
 *
èsk
;

2301 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2302 i‡(
èsk
 =
NULL
) {

2303  
NULL
;

2306 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2307 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT10
;

2309 i‡(
pf
) {

2310 
èsk
->
cdb
[1] |= 0x10;

2312 i‡(
•
) {

2313 
èsk
->
cdb
[1] |= 0x01;

2316 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

2318 
èsk
->
cdb_size
 = 10;

2319 i‡(
∑øm_Àn
 != 0) {

2320 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2322 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2324 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2326  
èsk
;

2327 
	}
}

2329 
scsi_mode_∑ge
 *

2330 
	$scsi_mode£n£_gë_∑ge
(
scsi_mode_£n£
 *
ms
,

2331 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2332 
sub∑ge_code
)

2334 
scsi_mode_∑ge
 *
mp
;

2336 
mp
 = 
ms
->
∑ges
; mp; m∞mp->
√xt
) {

2337 i‡(
mp
->
∑ge_code
 ==Öage_code

2338 && 
mp
->
sub∑ge_code
 == subpage_code) {

2339  
mp
;

2342  
NULL
;

2343 
	}
}

2351 
	$scsi_mode£n£_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2353 
Àn
;

2355 i‡(
is_mode£n£6
) {

2356 
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 0) + 1;

2358 
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

2361  
Àn
;

2362 
	}
}

2365 
	$scsi_∑r£_mode_ˇchög
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2367 
mp
->
ˇchög
.
ic
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2368 
mp
->
ˇchög
.
abpf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40);

2369 
mp
->
ˇchög
.
ˇp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2370 
mp
->
ˇchög
.
disc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2371 
mp
->
ˇchög
.
size
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2372 
mp
->
ˇchög
.
w˚
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2373 
mp
->
ˇchög
.
mf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2374 
mp
->
ˇchög
.
rcd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2376 
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 =

2377 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2378 
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 =

2379 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2381 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
 =

2382 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2383 
mp
->
ˇchög
.
möimum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2384 
mp
->
ˇchög
.
maximum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2385 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2387 
mp
->
ˇchög
.
fsw
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2388 
mp
->
ˇchög
.
lbcss
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x40);

2389 
mp
->
ˇchög
.
dø
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x20);

2390 
mp
->
ˇchög
.
nv_dis
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x01);

2392 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 11);

2393 
mp
->
ˇchög
.
ˇche_£gmít_size
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2394 
	}
}

2397 
	$scsi_∑r£_mode_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2399 
mp
->
c⁄åﬁ
.
t°
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 5) & 0x07;

2400 
mp
->
c⁄åﬁ
.
tmf_⁄ly
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2401 
mp
->
c⁄åﬁ
.
dpicz
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2402 
mp
->
c⁄åﬁ
.
d_£n£
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2403 
mp
->
c⁄åﬁ
.
g…sd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2404 
mp
->
c⁄åﬁ
.
æec
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2406 
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 =

2407 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2408 
mp
->
c⁄åﬁ
.
nu¨
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08;

2409 
mp
->
c⁄åﬁ
.
qîr
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 1) & 0x03;

2411 
mp
->
c⁄åﬁ
.
vs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x80);

2412 
mp
->
c⁄åﬁ
.
øc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x40);

2413 
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 =

2414 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) >> 4) & 0x0f;

2415 
mp
->
c⁄åﬁ
.
swp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x08);

2417 
mp
->
c⁄åﬁ
.
©o
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x80);

2418 
mp
->
c⁄åﬁ
.
ès
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x40);

2419 
mp
->
c⁄åﬁ
.
©m≥
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x20);

2420 
mp
->
c⁄åﬁ
.
rwwp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x10);

2421 
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x07);

2423 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
 =

2424 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2425 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
 =

2426 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2427 
	}
}

2430 
	$scsi_∑r£_mode_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2432 
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 =

2433 (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 6) & 0x03;

2434 
mp
->
powî_c⁄dôi⁄
.
°™dby_y
 =

2435 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2437 
mp
->
powî_c⁄dôi⁄
.
idÀ_c
 =

2438 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08);

2439 
mp
->
powî_c⁄dôi⁄
.
idÀ_b
 =

2440 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x04);

2441 
mp
->
powî_c⁄dôi⁄
.
idÀ_a
 =

2442 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x02);

2443 
mp
->
powî_c⁄dôi⁄
.
°™dby_z
 =

2444 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x01);

2446 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
 =

2447 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2448 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
 =

2449 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2450 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
 =

2451 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 10);

2452 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
 =

2453 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 14);

2454 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
 =

2455 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 18);

2457 
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 =

2458 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 6) & 0x03;

2459 
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 =

2460 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 4) & 0x03;

2461 
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 =

2462 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 2) & 0x03;

2463 
	}
}

2466 
	$scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2468 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
 =

2469 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2470 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
 =

2471 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1);

2472 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
 =

2473 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2474 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
 =

2475 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2476 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
 =

2477 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2478 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
 =

2479 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2480 
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
 =

2481 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2482 
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 =

2483 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) >> 4) & 0x0f;

2484 
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
 =

2485 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x08);

2486 
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 =

2487 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x07;

2488 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
 =

2489 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2490 
	}
}

2493 
	$scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2495 
mp
->
õc
.
≥rf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2496 
mp
->
õc
.
ebf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2497 
mp
->
õc
.
ewasc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2498 
mp
->
õc
.
dex˝t
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2499 
mp
->
õc
.
ã°
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2500 
mp
->
õc
.
ebackîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2501 
mp
->
õc
.
logîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2502 
mp
->
õc
.
mrõ
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2503 
mp
->
õc
.
öãrvÆ_timî
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2504 
mp
->
õc
.
ªp‹t_cou¡
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2505 
	}
}

2511 
scsi_mode_£n£
 *

2512 
	$scsi_mode£n£_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2514 
scsi_mode_£n£
 *
ms
;

2515 
hdr_Àn
;

2516 
pos
;

2518 i‡(
is_mode£n£6
) {

2519 
hdr_Àn
 = 4;

2521 
hdr_Àn
 = 8;

2524 i‡(
èsk
->
d©aö
.
size
 < 
hdr_Àn
) {

2525  
NULL
;

2528 
ms
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_£n£
));

2529 i‡(
ms
 =
NULL
) {

2530  
NULL
;

2533 i‡(
is_mode£n£6
) {

2534 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 0);

2535 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

2536 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2537 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2538 
ms
->
∑ges
 = 
NULL
;

2540 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

2541 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2542 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2543 
ms
->
l⁄glba
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

2544 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

2545 
ms
->
∑ges
 = 
NULL
;

2548 i‡(
ms
->
mode_d©a_Àngth
 + 1 > 
èsk
->
d©aö
.
size
) {

2549  
NULL
;

2552 
pos
 = 
hdr_Àn
 + 
ms
->
block_des¸ùt‹_Àngth
;

2553 
pos
 < 
èsk
->
d©aö
.
size
) {

2554 
scsi_mode_∑ge
 *
mp
;

2556 
mp
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_∑ge
));

2557 i‡(
mp
 =
NULL
) {

2558  
ms
;

2560 
mp
->
ps
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80;

2561 
mp
->
•f
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40;

2562 
mp
->
∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x3f;

2563 
pos
++;

2565 i‡(
mp
->
•f
) {

2566 
mp
->
sub∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2567 
mp
->
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 1);

2568 
pos
 += 3;

2570 
mp
->
sub∑ge_code
 = 0;

2571 
mp
->
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2572 
pos
++;

2575 
mp
->
∑ge_code
) {

2576 
SCSI_MODEPAGE_CACHING
:

2577 
	`scsi_∑r£_mode_ˇchög
(
èsk
, 
pos
, 
mp
);

2579 
SCSI_MODEPAGE_CONTROL
:

2580 
	`scsi_∑r£_mode_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2582 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

2583 
	`scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
èsk
, 
pos
, 
mp
);

2585 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

2586 
	`scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2588 
SCSI_MODEPAGE_POWER_CONDITION
:

2589 
	`scsi_∑r£_mode_powî_c⁄dôi⁄
(
èsk
, 
pos
, 
mp
);

2597 
mp
->
√xt
 = 
ms
->
∑ges
;

2598 
ms
->
∑ges
 = 
mp
;

2600 
pos
 +
mp
->
Àn
;

2603  
ms
;

2604 
	}
}

2606 
scsi_d©a
 *

2607 
	$scsi_mode£n£_m¨shÆl_ˇchög
(
scsi_èsk
 *
èsk
,

2608 
scsi_mode_∑ge
 *
mp
,

2609 
hdr_size
)

2611 
scsi_d©a
 *
d©a
;

2613 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2615 
d©a
->
size
 = 20 + 
hdr_size
;

2616 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2618 i‡(
mp
->
ˇchög
.
ic
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2619 i‡(
mp
->
ˇchög
.
abpf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x40;

2620 i‡(
mp
->
ˇchög
.
ˇp
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2621 i‡(
mp
->
ˇchög
.
disc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2622 i‡(
mp
->
ˇchög
.
size
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2623 i‡(
mp
->
ˇchög
.
w˚
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2624 i‡(
mp
->
ˇchög
.
mf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2625 i‡(
mp
->
ˇchög
.
rcd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2627 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 << 4) & 0xf0;

2628 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 & 0x0f;

2630 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
);

2631 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
ˇchög
.
möimum_¥e„tch
);

2632 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
ˇchög
.
maximum_¥e„tch
);

2633 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
);

2635 i‡(
mp
->
ˇchög
.
fsw
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2636 i‡(
mp
->
ˇchög
.
lbcss
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x40;

2637 i‡(
mp
->
ˇchög
.
dø
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x20;

2638 i‡(
mp
->
ˇchög
.
nv_dis
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x01;

2640 
d©a
->d©a[
hdr_size
 + 13] = 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
;

2642 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
ˇchög
.
ˇche_£gmít_size
);

2644  
d©a
;

2645 
	}
}

2647 
scsi_d©a
 *

2648 
	$scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2649 
scsi_mode_∑ge
 *
mp
,

2650 
hdr_size
)

2652 
scsi_d©a
 *
d©a
;

2654 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2656 
d©a
->
size
 = 12 + 
hdr_size
;

2657 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2659 
d©a
->d©a[
hdr_size
 + 2] |(
mp
->
c⁄åﬁ
.
t°
 << 5) & 0xe0;

2660 i‡(
mp
->
c⁄åﬁ
.
tmf_⁄ly
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2661 i‡(
mp
->
c⁄åﬁ
.
dpicz
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2662 i‡(
mp
->
c⁄åﬁ
.
d_£n£
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2663 i‡(
mp
->
c⁄åﬁ
.
g…sd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2664 i‡(
mp
->
c⁄åﬁ
.
æec
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2666 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 << 4) & 0xf0;

2667 i‡(
mp
->
c⁄åﬁ
.
nu¨
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2668 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
qîr
 << 1) & 0x06;

2670 i‡(
mp
->
c⁄åﬁ
.
vs
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x80;

2671 i‡(
mp
->
c⁄åﬁ
.
øc
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x40;

2672 
d©a
->d©a[
hdr_size
 + 4] |(
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 << 4) & 0x30;

2673 i‡(
mp
->
c⁄åﬁ
.
swp
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x08;

2675 i‡(
mp
->
c⁄åﬁ
.
©o
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x80;

2676 i‡(
mp
->
c⁄åﬁ
.
ès
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x40;

2677 i‡(
mp
->
c⁄åﬁ
.
©m≥
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x20;

2678 i‡(
mp
->
c⁄åﬁ
.
rwwp
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x10;

2679 
d©a
->d©a[
hdr_size
 + 5] |
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 & 0x07;

2681 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
);

2682 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
);

2684  
d©a
;

2685 
	}
}

2687 
scsi_d©a
 *

2688 
	$scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
,

2689 
scsi_mode_∑ge
 *
mp
,

2690 
hdr_size
)

2692 
scsi_d©a
 *
d©a
;

2694 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2696 
d©a
->
size
 = 40 + 
hdr_size
;

2697 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2699 
d©a
->d©a[
hdr_size
 + 2] |=

2700 (
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 << 6) & 0xc0;

2701 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_y
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2703 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_c
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2704 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_b
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x04;

2705 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_a
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x02;

2706 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_z
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x01;

2708 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4],

2709 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
);

2710 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8],

2711 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
);

2712 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 12],

2713 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
);

2714 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 16],

2715 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
);

2716 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 20],

2717 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
);

2719 
d©a
->d©a[
hdr_size
 + 39] |=

2720 (
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 << 6) & 0xc0;

2721 
d©a
->d©a[
hdr_size
 + 39] |=

2722 (
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 << 4) & 0x30;

2723 
d©a
->d©a[
hdr_size
 + 39] |=

2724 (
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 << 2) & 0x0c;

2726  
d©a
;

2727 
	}
}

2729 
scsi_d©a
 *

2730 
	$scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
,

2731 
scsi_mode_∑ge
 *
mp
,

2732 
hdr_size
)

2734 
scsi_d©a
 *
d©a
;

2736 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2738 
d©a
->
size
 = 16 + 
hdr_size
;

2739 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2741 
d©a
->d©a[
hdr_size
 + 2] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
;

2742 
d©a
->d©a[
hdr_size
 + 3] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
;

2743 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
);

2744 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
);

2745 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
);

2746 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
);

2748 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2749 
d©a
->d©a[
hdr_size
 + 12] |(
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 << 4) & 0x70;

2750 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x08;

2751 
d©a
->d©a[
hdr_size
 + 12] |
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 & 0x07;

2753 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
);

2755  
d©a
;

2756 
	}
}

2758 
scsi_d©a
 *

2759 
	$scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2760 
scsi_mode_∑ge
 *
mp
,

2761 
hdr_size
)

2763 
scsi_d©a
 *
d©a
;

2765 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2767 
d©a
->
size
 = 12 + 
hdr_size
;

2768 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2770 i‡(
mp
->
õc
.
≥rf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2771 i‡(
mp
->
õc
.
ebf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2772 i‡(
mp
->
õc
.
ewasc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2773 i‡(
mp
->
õc
.
dex˝t
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2774 i‡(
mp
->
õc
.
ã°
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2775 i‡(
mp
->
õc
.
ebackîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2776 i‡(
mp
->
õc
.
logîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2778 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
õc
.
mrõ
 & 0x0f;

2780 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
õc
.
öãrvÆ_timî
);

2781 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
õc
.
ªp‹t_cou¡
);

2783  
d©a
;

2784 
	}
}

2789 
scsi_d©a
 *

2790 
	$scsi_mode£n£_d©aout_m¨shÆl
(
scsi_èsk
 *
èsk
,

2791 
scsi_mode_∑ge
 *
mp
,

2792 
is_mode£À˘6
)

2794 
scsi_d©a
 *
d©a
;

2795 
hdr_size
 = 
is_mode£À˘6
 ? 4 : 8;

2797 
mp
->
∑ge_code
) {

2798 
SCSI_MODEPAGE_CACHING
:

2799 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_ˇchög
(
èsk
, 
mp
, 
hdr_size
);

2801 
SCSI_MODEPAGE_CONTROL
:

2802 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

2804 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

2805 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
èsk
, 
mp
, 
hdr_size
);

2807 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

2808 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

2810 
SCSI_MODEPAGE_POWER_CONDITION
:

2811 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
èsk
, 
mp
, 
hdr_size
);

2815  
NULL
;

2818 i‡(
d©a
 =
NULL
) {

2819  
NULL
;

2822 
d©a
->d©a[
hdr_size
 + 0] = 
mp
->
∑ge_code
 & 0x3f;

2823 i‡(
mp
->
ps
) {

2824 
d©a
->d©a[
hdr_size
 + 0] |= 0x80;

2826 i‡(
mp
->
•f
) {

2827 
d©a
->d©a[
hdr_size
 + 0] |= 0x40;

2828 
d©a
->d©a[
hdr_size
 + 1] = 
mp
->
sub∑ge_code
;

2829 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 2], d©a->
size
 -hdr_size - 4);

2831 
d©a
->d©a[
hdr_size
 + 1] = (d©a->
size
 - hdr_size - 2) & 0xff;

2834  
d©a
;

2835 
	}
}

2841 
scsi_èsk
 *

2842 
	$scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

2844 
scsi_èsk
 *
èsk
;

2846 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2847 i‡(
èsk
 =
NULL
) {

2848  
NULL
;

2851 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2852 
èsk
->
cdb
[0] = 
SCSI_OPCODE_STARTSTOPUNIT
;

2854 i‡(
immed
) {

2855 
èsk
->
cdb
[1] |= 0x01;

2857 
èsk
->
cdb
[3] |
pcm
 & 0x0f;

2858 
èsk
->
cdb
[4] |(
pc
 << 4) & 0xf0;

2859 i‡(
no_Êush
) {

2860 
èsk
->
cdb
[4] |= 0x04;

2862 i‡(
l€j
) {

2863 
èsk
->
cdb
[4] |= 0x02;

2865 i‡(
°¨t
) {

2866 
èsk
->
cdb
[4] |= 0x01;

2870 
èsk
->
cdb_size
 = 6;

2871 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2872 
èsk
->
expx„æí
 = 0;

2874  
èsk
;

2875 
	}
}

2880 
scsi_èsk
 *

2881 
	$scsi_cdb_¥evíèŒow
(
¥evít
)

2883 
scsi_èsk
 *
èsk
;

2885 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2886 i‡(
èsk
 =
NULL
) {

2887  
NULL
;

2890 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2891 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREVENTALLOW
;

2893 
èsk
->
cdb
[4] = 
¥evít
 & 0x03;

2895 
èsk
->
cdb_size
 = 6;

2896 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2897 
èsk
->
expx„æí
 = 0;

2899  
èsk
;

2900 
	}
}

2905 
scsi_èsk
 *

2906 
	$scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
, 
immed
)

2908 
scsi_èsk
 *
èsk
;

2910 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2911 i‡(
èsk
 =
NULL
) {

2912  
NULL
;

2915 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2916 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE10
;

2918 i‡(
syn˙v
) {

2919 
èsk
->
cdb
[1] |= 0x04;

2921 i‡(
immed
) {

2922 
èsk
->
cdb
[1] |= 0x02;

2924 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2925 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2927 
èsk
->
cdb_size
 = 10;

2928 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2929 
èsk
->
expx„æí
 = 0;

2931  
èsk
;

2932 
	}
}

2937 
scsi_èsk
 *

2938 
	$scsi_cdb_synchr⁄izeˇche16
(
uöt64_t
 
lba
, 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

2940 
scsi_èsk
 *
èsk
;

2942 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2943 i‡(
èsk
 =
NULL
) {

2944  
NULL
;

2947 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2948 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE16
;

2950 i‡(
syn˙v
) {

2951 
èsk
->
cdb
[1] |= 0x04;

2953 i‡(
immed
) {

2954 
èsk
->
cdb
[1] |= 0x02;

2956 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2957 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2958 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

2960 
èsk
->
cdb_size
 = 16;

2961 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2962 
èsk
->
expx„æí
 = 0;

2964  
èsk
;

2965 
	}
}

2970 
scsi_èsk
 *

2971 
	$scsi_cdb_¥e„tch10
(
uöt32_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

2973 
scsi_èsk
 *
èsk
;

2975 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2976 i‡(
èsk
 =
NULL
) {

2977  
NULL
;

2980 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2981 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH10
;

2983 i‡(
immed
) {

2984 
èsk
->
cdb
[1] |= 0x02;

2986 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2987 
èsk
->
cdb
[6] |
group
 & 0x1f;

2988 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2990 
èsk
->
cdb_size
 = 10;

2991 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2992 
èsk
->
expx„æí
 = 0;

2994  
èsk
;

2995 
	}
}

3000 
scsi_èsk
 *

3001 
	$scsi_cdb_¥e„tch16
(
uöt64_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

3003 
scsi_èsk
 *
èsk
;

3005 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3006 i‡(
èsk
 =
NULL
) {

3007  
NULL
;

3010 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3011 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH16
;

3013 i‡(
immed
) {

3014 
èsk
->
cdb
[1] |= 0x02;

3016 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3017 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3018 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

3020 
èsk
->
cdb
[14] |
group
 & 0x1f;

3022 
èsk
->
cdb_size
 = 16;

3023 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3024 
èsk
->
expx„æí
 = 0;

3026  
èsk
;

3027 
	}
}

3032 
scsi_èsk
 *

3033 
	$scsi_cdb_£rvi˚a˘i⁄ö16
(
scsi_£rvi˚_a˘i⁄_ö
 
ß
, 
uöt32_t
 
x„æí
)

3035 
scsi_èsk
 *
èsk
;

3037 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3038 i‡(
èsk
 =
NULL
) {

3039  
NULL
;

3042 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3043 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3045 
èsk
->
cdb
[1] = 
ß
;

3047 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
);

3049 
èsk
->
cdb_size
 = 16;

3050 i‡(
x„æí
 != 0) {

3051 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3053 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3055 
èsk
->
expx„æí
 = 
x„æí
;

3057  
èsk
;

3058 
	}
}

3063 
scsi_èsk
 *

3064 
	$scsi_cdb_ªadˇ∑côy16
()

3066  
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 32);

3067 
	}
}

3072 
scsi_èsk
 *

3073 
	$scsi_cdb_gë_lba_°©us
(
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

3075 
scsi_èsk
 *
èsk
;

3077 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3078 i‡(
èsk
 =
NULL
) {

3079  
NULL
;

3082 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3083 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3085 
èsk
->
cdb
[1] = 
SCSI_GET_LBA_STATUS
;

3087 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
°¨tög_lba
 >> 32);

3088 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
°¨tög_lba
 & 0xffffffff);

3089 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
Æloc_Àn
);

3091 
èsk
->
cdb_size
 = 16;

3092 i‡(
Æloc_Àn
 != 0) {

3093 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3095 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3097 
èsk
->
expx„æí
 = 
Æloc_Àn
;

3099  
èsk
;

3100 
	}
}

3105 
scsi_èsk
 *

3106 
	$scsi_cdb_wrôevîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3108 
scsi_èsk
 *
èsk
;

3110 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3111 i‡(
èsk
 =
NULL
) {

3112  
NULL
;

3115 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3116 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

3118 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3119 i‡(
dpo
) {

3120 
èsk
->
cdb
[1] |= 0x10;

3122 i‡(
bytchk
) {

3123 
èsk
->
cdb
[1] |= 0x02;

3126 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3127 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

3129 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

3131 
èsk
->
cdb_size
 = 10;

3132 i‡(
x„æí
 != 0) {

3133 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3135 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3137 
èsk
->
expx„æí
 = 
x„æí
;

3139  
èsk
;

3140 
	}
}

3145 
scsi_èsk
 *

3146 
	$scsi_cdb_wrôevîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3148 
scsi_èsk
 *
èsk
;

3150 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3151 i‡(
èsk
 =
NULL
) {

3152  
NULL
;

3155 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3156 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

3158 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3159 i‡(
dpo
) {

3160 
èsk
->
cdb
[1] |= 0x10;

3162 i‡(
bytchk
) {

3163 
èsk
->
cdb
[1] |= 0x02;

3166 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3167 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

3169 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

3171 
èsk
->
cdb_size
 = 12;

3172 i‡(
x„æí
 != 0) {

3173 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3175 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3177 
èsk
->
expx„æí
 = 
x„æí
;

3179  
èsk
;

3180 
	}
}

3185 
scsi_èsk
 *

3186 
	$scsi_cdb_wrôevîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3188 
scsi_èsk
 *
èsk
;

3190 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3191 i‡(
èsk
 =
NULL
) {

3192  
NULL
;

3195 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3196 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

3198 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3199 i‡(
dpo
) {

3200 
èsk
->
cdb
[1] |= 0x10;

3202 i‡(
bytchk
) {

3203 
èsk
->
cdb
[1] |= 0x02;

3206 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3207 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3208 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

3210 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

3212 
èsk
->
cdb_size
 = 16;

3213 i‡(
x„æí
 != 0) {

3214 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3216 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3218 
èsk
->
expx„æí
 = 
x„æí
;

3220  
èsk
;

3221 
	}
}

3224 
	$scsi_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

3226 
èsk
->
cdb
[0]) {

3227 
SCSI_OPCODE_TESTUNITREADY
:

3229 
SCSI_OPCODE_INQUIRY
:

3230  
	`scsi_öquúy_d©aö_gëfuŒsize
(
èsk
);

3231 
SCSI_OPCODE_MODESENSE6
:

3232  
	`scsi_mode£n£_d©aö_gëfuŒsize
(
èsk
, 1);

3233 
SCSI_OPCODE_READCAPACITY10
:

3234  
	`scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
èsk
);

3235 
SCSI_OPCODE_SYNCHRONIZECACHE10
:

3237 
SCSI_OPCODE_READTOC
:

3238  
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
);

3239 
SCSI_OPCODE_REPORTLUNS
:

3240  
	`scsi_ªp‹éuns_d©aö_gëfuŒsize
(
èsk
);

3241 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3242  
	`scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
èsk
);

3243 
SCSI_OPCODE_MAINTENANCE_IN
:

3244  
	`scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
èsk
);

3247 
	}
}

3250 
	$scsi_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3252 
èsk
->
cdb
[0]) {

3253 
SCSI_OPCODE_TESTUNITREADY
:

3254  
NULL
;

3255 
SCSI_OPCODE_INQUIRY
:

3256  
	`scsi_öquúy_d©aö_unm¨shÆl
(
èsk
);

3257 
SCSI_OPCODE_MODESENSE6
:

3258  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 1);

3259 
SCSI_OPCODE_MODESENSE10
:

3260  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 0);

3261 
SCSI_OPCODE_READCAPACITY10
:

3262  
	`scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
èsk
);

3263 
SCSI_OPCODE_SYNCHRONIZECACHE10
:

3264  
NULL
;

3265 
SCSI_OPCODE_READTOC
:

3266  
	`scsi_ªadtoc_d©aö_unm¨shÆl
(
èsk
);

3267 
SCSI_OPCODE_REPORTLUNS
:

3268  
	`scsi_ªp‹éuns_d©aö_unm¨shÆl
(
èsk
);

3269 
SCSI_OPCODE_SERVICE_ACTION_IN
:

3270  
	`scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
èsk
);

3271 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3272  
	`scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
èsk
);

3273 
SCSI_OPCODE_MAINTENANCE_IN
:

3274  
	`scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
èsk
);

3276  
NULL
;

3277 
	}
}

3280 
scsi_ªad6_cdb
 *

3281 
	$scsi_ªad6_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3283 
scsi_ªad6_cdb
 *
ªad6
;

3285 
ªad6
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad6_cdb
));

3286 i‡(
ªad6
 =
NULL
) {

3287  
NULL
;

3290 
ªad6
->
›code
 = 
SCSI_OPCODE_READ6
;

3291 
ªad6
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[0]) & 0x001fffff;

3292 
ªad6
->
å™s„r_Àngth
 = 
èsk
->
cdb
[4];

3293 
ªad6
->
c⁄åﬁ
 = 
èsk
->
cdb
[5];

3295  
ªad6
;

3296 
	}
}

3298 
scsi_ªad10_cdb
 *

3299 
	$scsi_ªad10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3301 
scsi_ªad10_cdb
 *
ªad10
;

3303 
ªad10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad10_cdb
));

3304 i‡(
ªad10
 =
NULL
) {

3305  
NULL
;

3308 
ªad10
->
›code
 = 
SCSI_OPCODE_READ10
;

3309 
ªad10
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3310 
ªad10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3311 
ªad10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3312 
ªad10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3313 
ªad10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3314 
ªad10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3315 
ªad10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3316 
ªad10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3318  
ªad10
;

3319 
	}
}

3321 
scsi_ªad12_cdb
 *

3322 
	$scsi_ªad12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3324 
scsi_ªad12_cdb
 *
ªad12
;

3326 
ªad12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad12_cdb
));

3327 i‡(
ªad12
 =
NULL
) {

3328  
NULL
;

3331 
ªad12
->
›code
 = 
SCSI_OPCODE_READ12
;

3332 
ªad12
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3333 
ªad12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3334 
ªad12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3335 
ªad12
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3336 
ªad12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3337 
ªad12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3338 
ªad12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3339 
ªad12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3340 
ªad12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3342  
ªad12
;

3343 
	}
}

3345 
scsi_ªad16_cdb
 *

3346 
	$scsi_ªad16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3348 
scsi_ªad16_cdb
 *
ªad16
;

3350 
ªad16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad16_cdb
));

3351 i‡(
ªad16
 =
NULL
) {

3352  
NULL
;

3355 
ªad16
->
›code
 = 
SCSI_OPCODE_READ16
;

3356 
ªad16
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3357 
ªad16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3358 
ªad16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3359 
ªad16
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3360 
ªad16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3361 
ªad16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3362 
ªad16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3363 
ªad16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3364 
ªad16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3366  
ªad16
;

3367 
	}
}

3369 
scsi_vîify10_cdb
 *

3370 
	$scsi_vîify10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3372 
scsi_vîify10_cdb
 *
vîify10
;

3374 
vîify10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify10_cdb
));

3375 i‡(
vîify10
 =
NULL
) {

3376  
NULL
;

3379 
vîify10
->
›code
 = 
SCSI_OPCODE_VERIFY10
;

3380 
vîify10
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3381 
vîify10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3382 
vîify10
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3383 
vîify10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3384 
vîify10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3385 
vîify10
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3386 
vîify10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3388  
vîify10
;

3389 
	}
}

3391 
scsi_vîify12_cdb
 *

3392 
	$scsi_vîify12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3394 
scsi_vîify12_cdb
 *
vîify12
;

3396 
vîify12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify12_cdb
));

3397 i‡(
vîify12
 =
NULL
) {

3398  
NULL
;

3401 
vîify12
->
›code
 = 
SCSI_OPCODE_VERIFY12
;

3402 
vîify12
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3403 
vîify12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3404 
vîify12
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3405 
vîify12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3406 
vîify12
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3407 
vîify12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3408 
vîify12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3410  
vîify12
;

3411 
	}
}

3413 
scsi_vîify16_cdb
 *

3414 
	$scsi_vîify16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3416 
scsi_vîify16_cdb
 *
vîify16
;

3418 
vîify16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify16_cdb
));

3419 i‡(
vîify16
 =
NULL
) {

3420  
NULL
;

3423 
vîify16
->
›code
 = 
SCSI_OPCODE_VERIFY16
;

3424 
vîify16
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3425 
vîify16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3426 
vîify16
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3427 
vîify16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3428 
vîify16
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3429 
vîify16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3430 
vîify16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3432  
vîify16
;

3433 
	}
}

3435 
scsi_wrôe10_cdb
 *

3436 
	$scsi_wrôe10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3438 
scsi_wrôe10_cdb
 *
wrôe10
;

3440 
wrôe10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe10_cdb
));

3441 i‡(
wrôe10
 =
NULL
) {

3442  
NULL
;

3445 
wrôe10
->
›code
 = 
SCSI_OPCODE_WRITE10
;

3446 
wrôe10
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3447 
wrôe10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3448 
wrôe10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3449 
wrôe10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3450 
wrôe10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3451 
wrôe10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3452 
wrôe10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3453 
wrôe10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3455  
wrôe10
;

3456 
	}
}

3458 
scsi_wrôe12_cdb
 *

3459 
	$scsi_wrôe12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3461 
scsi_wrôe12_cdb
 *
wrôe12
;

3463 
wrôe12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe12_cdb
));

3464 i‡(
wrôe12
 =
NULL
) {

3465  
NULL
;

3468 
wrôe12
->
›code
 = 
SCSI_OPCODE_WRITE12
;

3469 
wrôe12
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3470 
wrôe12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3471 
wrôe12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3472 
wrôe12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3473 
wrôe12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3474 
wrôe12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3475 
wrôe12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3476 
wrôe12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3478  
wrôe12
;

3479 
	}
}

3481 
scsi_wrôe16_cdb
 *

3482 
	$scsi_wrôe16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3484 
scsi_wrôe16_cdb
 *
wrôe16
;

3486 
wrôe16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe16_cdb
));

3487 i‡(
wrôe16
 =
NULL
) {

3488  
NULL
;

3491 
wrôe16
->
›code
 = 
SCSI_OPCODE_WRITE16
;

3492 
wrôe16
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3493 
wrôe16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3494 
wrôe16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3495 
wrôe16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3496 
wrôe16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3497 
wrôe16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3498 
wrôe16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3499 
wrôe16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3501  
wrôe16
;

3502 
	}
}

3505 
	$scsi_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_›code
 
›code
)

3507 i‡(
èsk
->
cdb
[0] !
›code
) {

3508  
NULL
;

3511 
èsk
->
cdb
[0]) {

3512 
SCSI_OPCODE_READ6
:

3513  
	`scsi_ªad6_cdb_unm¨shÆl
(
èsk
);

3514 
SCSI_OPCODE_READ10
:

3515  
	`scsi_ªad10_cdb_unm¨shÆl
(
èsk
);

3516 
SCSI_OPCODE_READ12
:

3517  
	`scsi_ªad12_cdb_unm¨shÆl
(
èsk
);

3518 
SCSI_OPCODE_READ16
:

3519  
	`scsi_ªad16_cdb_unm¨shÆl
(
èsk
);

3520 
SCSI_OPCODE_VERIFY10
:

3521  
	`scsi_vîify10_cdb_unm¨shÆl
(
èsk
);

3522 
SCSI_OPCODE_VERIFY12
:

3523  
	`scsi_vîify12_cdb_unm¨shÆl
(
èsk
);

3524 
SCSI_OPCODE_VERIFY16
:

3525  
	`scsi_vîify16_cdb_unm¨shÆl
(
èsk
);

3526 
SCSI_OPCODE_WRITE10
:

3527  
	`scsi_wrôe10_cdb_unm¨shÆl
(
èsk
);

3528 
SCSI_OPCODE_WRITE12
:

3529  
	`scsi_wrôe12_cdb_unm¨shÆl
(
èsk
);

3530 
SCSI_OPCODE_WRITE16
:

3531  
	`scsi_wrôe16_cdb_unm¨shÆl
(
èsk
);

3533  
NULL
;

3534 
	}
}

3537 
	$scsi_devty≥_to_°r
(
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
ty≥
)

3539 
ty≥
) {

3540 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

3542 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

3544 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER
:

3546 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR
:

3548 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE
:

3550 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

3552 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER
:

3554 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY
:

3556 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER
:

3558 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS
:

3560 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER
:

3562 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES
:

3564 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS
:

3566 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER
:

3568 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER
:

3570 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD
:

3572 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION
:

3574 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER
:

3576 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN
:

3578 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN
:

3582 
	}
}

3585 
	$scsi_devquÆifõr_to_°r
(
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
)

3587 
quÆifõr
) {

3588 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
:

3590 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED
:

3592 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED
:

3596 
	}
}

3599 
	$scsi_vîsi⁄_to_°r
(
scsi_vîsi⁄
 
vîsi⁄
)

3601 
vîsi⁄
) {

3602 
SCSI_VERSION_SPC
:

3604 
SCSI_VERSION_SPC2
:

3606 
SCSI_VERSION_SPC3
:

3610 
	}
}

3613 
	$scsi_vîsi⁄_des¸ùt‹_to_°r
(
scsi_vîsi⁄_des¸ùt‹
 
vîsi⁄_des¸ùt‹
)

3615 
vîsi⁄_des¸ùt‹
) {

3616 
SCSI_VERSION_DESCRIPTOR_ISCSI
:

3618 
SCSI_VERSION_DESCRIPTOR_SBC
:

3620 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

3622 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

3624 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

3626 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

3628 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

3630 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

3632 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

3634 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

3636 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

3638 
SCSI_VERSION_DESCRIPTOR_SPC
:

3640 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

3642 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

3644 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

3646 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

3648 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

3650 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

3652 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

3654 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

3656 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

3658 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

3660 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

3662 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

3664 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

3666 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

3668 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

3670 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

3672 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

3674 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

3676 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

3678 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

3680 
SCSI_VERSION_DESCRIPTOR_SSC
:

3682 
SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04
:

3686 
	}
}

3689 
	$scsi_öquúy_∑gecode_to_°r
(
∑gecode
)

3691 
∑gecode
) {

3692 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

3694 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

3696 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

3698 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

3702 
	}
}

3706 
	$scsi_¥Ÿocﬁ_idítifõr_to_°r
(
idítifõr
)

3708 
idítifõr
) {

3709 
SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL
:

3711 
SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI
:

3713 
SCSI_PROTOCOL_IDENTIFIER_SSA
:

3715 
SCSI_PROTOCOL_IDENTIFIER_IEEE_1394
:

3717 
SCSI_PROTOCOL_IDENTIFIER_RDMA
:

3719 
SCSI_PROTOCOL_IDENTIFIER_ISCSI
:

3721 
SCSI_PROTOCOL_IDENTIFIER_SAS
:

3723 
SCSI_PROTOCOL_IDENTIFIER_ADT
:

3725 
SCSI_PROTOCOL_IDENTIFIER_ATA
:

3729 
	}
}

3732 
	$scsi_code£t_to_°r
(
code£t
)

3734 
code£t
) {

3735 
SCSI_CODESET_BINARY
:

3737 
SCSI_CODESET_ASCII
:

3739 
SCSI_CODESET_UTF8
:

3743 
	}
}

3746 
	$scsi_assocüti⁄_to_°r
(
assocüti⁄
)

3748 
assocüti⁄
) {

3749 
SCSI_ASSOCIATION_LOGICAL_UNIT
:

3751 
SCSI_ASSOCIATION_TARGET_PORT
:

3753 
SCSI_ASSOCIATION_TARGET_DEVICE
:

3757 
	}
}

3760 
	$scsi_desig«t‹_ty≥_to_°r
(
ty≥
)

3762 
ty≥
) {

3763 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
:

3765 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
:

3767 
SCSI_DESIGNATOR_TYPE_EUI_64
:

3769 
SCSI_DESIGNATOR_TYPE_NAA
:

3771 
SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT
:

3773 
SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP
:

3775 
SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP
:

3777 
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
:

3779 
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING
:

3783 
	}
}

3786 
	$scsi_£t_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
, *
±r
)

3788 
èsk
->
±r
 =Ötr;

3789 
	}
}

3792 
	$scsi_gë_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
)

3794  
èsk
->
±r
;

3795 
	}
}

3798 
	$scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

3800 
èsk
->
iove˘‹_out
.
iov
 = iov;

3801 
èsk
->
iove˘‹_out
.
niov
 =Çiov;

3802 
	}
}

3805 
	$scsi_èsk_£t_iov_ö
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

3807 
èsk
->
iove˘‹_ö
.
iov
 = iov;

3808 
èsk
->
iove˘‹_ö
.
niov
 =Çiov;

3809 
	}
}

3811 
	#IOVECTOR_INITAL_ALLOC
 (16)

	)

3814 
	$scsi_iove˘‹_add
(
scsi_èsk
 *
èsk
, 
scsi_iove˘‹
 *
iove˘‹
, 
Àn
, *
buf
)

3816 i‡(
Àn
 < 0) {

3820 i‡(
iove˘‹
->
iov
 =
NULL
) {

3821 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 
IOVECTOR_INITAL_ALLOC
*(
iovec
));

3822 i‡(
iove˘‹
->
iov
 =
NULL
) {

3825 
iove˘‹
->
«Œoc
 = 
IOVECTOR_INITAL_ALLOC
;

3829 i‡(
iove˘‹
->
«Œoc
 < iove˘‹->
niov
 + 1) {

3830 
scsi_iovec
 *
ﬁd_iov
 = 
iove˘‹
->
iov
;

3831 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 2 * iove˘‹->
«Œoc
 * (
iovec
));

3832 i‡(
iove˘‹
->
iov
 =
NULL
) {

3835 
	`mem˝y
(
iove˘‹
->
iov
, 
ﬁd_iov
, iove˘‹->
niov
 * (
iovec
));

3836 
iove˘‹
->
«Œoc
 <<= 1;

3839 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_Àn
 = 
Àn
;

3840 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_ba£
 = 
buf
;

3841 
iove˘‹
->
niov
++;

3844 
	}
}

3847 
	$scsi_èsk_add_d©a_ö_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

3849  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_ö
, 
Àn
, 
buf
);

3850 
	}
}

3853 
	$scsi_èsk_add_d©a_out_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

3855  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_out
, 
Àn
, 
buf
);

3856 
	}
}

	@lib/socket.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 #ifde‡
HAVE_POLL_H


34 
	~<pﬁl.h
>

37 #ifde‡
AROS


38 
	~"¨os/¨os_com∑t.h
"

41 #i‡
deföed
(
WIN32
)

42 
	~<wösock2.h
>

43 
	~<ws2t˝ù.h
>

44 
	~"wö32/wö32_com∑t.h
"

45 
	#io˘l
 
io˘lsockë


	)

46 
	#˛o£
 
˛o£sockë


	)

48 
	~<°rögs.h
>

49 
	~<√tdb.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<√töë/t˝.h
>

53 
	~<sys/io˘l.h
>

56 #ifde‡
NEED_SYS_FILIO_H


57 
	~<sys/fûio.h
>

60 
	~<sys/uio.h
>

61 
	~<°döt.h
>

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<°rög.h
>

65 
	~<î∫o.h
>

66 
	~<f˙é.h
>

67 
	~<time.h
>

68 
	~"scsi-lowÀvñ.h
"

69 
	~"iscsi.h
"

70 
	~"iscsi-¥iv©e.h
"

71 
	~"¶i°.h
"

73 
uöt32_t
 
	giÁ˚_º
 = 0;

76 
	$iscsi_add_to_outqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

78 
iscsi_pdu
 *
cuºít
 = 
iscsi
->
outqueue
;

79 
iscsi_pdu
 *
œ°
 = 
NULL
;

81 i‡(
iscsi
->
scsi_timeout
 > 0) {

82 
pdu
->
scsi_timeout
 = 
	`time
(
NULL
Ë+ 
iscsi
->scsi_timeout;

84 
pdu
->
scsi_timeout
 = 0;

87 i‡(
iscsi
->
outqueue
 =
NULL
) {

88 
iscsi
->
outqueue
 = 
pdu
;

89 
pdu
->
√xt
 = 
NULL
;

97 i‡(
	`iscsi_£rül32_com∑ª
(
pdu
->
cmd¢
, 
cuºít
->cmdsn) < 0) {

99 i‡(
œ°
 !
NULL
) {

100 
œ°
->
√xt
=
pdu
;

102 
iscsi
->
outqueue
=
pdu
;

104 
pdu
->
√xt
 = 
cuºít
;

107 
œ°
=
cuºít
;

108 
cuºít
=cuºít->
√xt
;

109 } 
cuºít
 !
NULL
);

111 
œ°
->
√xt
 = 
pdu
;

112 
pdu
->
√xt
 = 
NULL
;

113 
	}
}

115 
	$iscsi_de¸emít_iÁ˚_º
() {

116 
iÁ˚_º
--;

117 
	}
}

119 
	$£t_n⁄blockög
(
fd
)

121 #i‡
	`deföed
(
WIN32
)

122 
›t
 = 1;

123 
	`io˘lsockë
(
fd
, 
FIONBIO
, &
›t
);

125 
v
;

126 
v
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

127 
	`f˙é
(
fd
, 
F_SETFL
, 
v
 | 
O_NONBLOCK
);

129 
	}
}

131 
	$£t_t˝_sock›t
(
sockfd
, 
›äame
, 
vÆue
)

133 
Àvñ
;

135 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__sun
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

136 
¥Ÿ€¡
 *
buf
;

138 i‡((
buf
 = 
	`gë¥Ÿoby«me
("t˝")Ë!
NULL
)

139 
Àvñ
 = 
buf
->
p_¥Ÿo
;

143 
Àvñ
 = 
SOL_TCP
;

146  
	`£tsock›t
(
sockfd
, 
Àvñ
, 
›äame
, (*)&
vÆue
, (value));

147 
	}
}

149 #i‚de‡
TCP_USER_TIMEOUT


150 
	#TCP_USER_TIMEOUT
 18

	)

153 
	$£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
)

155 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_USER_TIMEOUT
, iscsi->
t˝_u£r_timeout
) != 0) {

156 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ u£∏timeout. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

159 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_USER_TIMEOUT sëÅÿ%d",iscsi->
t˝_u£r_timeout
);

161 
	}
}

163 #i‚de‡
TCP_SYNCNT


164 
	#TCP_SYNCNT
 7

	)

167 
	$£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
)

169 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_SYNCNT
, iscsi->
t˝_syn˙t
) != 0) {

170 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ sy¿ªåõs. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

173 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_SYNCNT sëÅÿ%d",iscsi->
t˝_syn˙t
);

175 
	}
}

177 
	usockë_addªss
 {

178 
sockaddr_ö
 
	msö
;

179 
sockaddr_ö6
 
	msö6
;

180 
sockaddr
 
	mß
;

184 
	$iscsi_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

185 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

187 
p‹t
 = 3260;

188 *
°r
;

189 *
addr
, *
ho°
;

190 
addröfo
 *
ai
 = 
NULL
;

191 
sockë_addªss
 
ß
;

192 
socksize
;

194 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘ögÅÿp‹è»%s",
p‹èl
);

196 i‡(
iscsi
->
fd
 != -1) {

197 
	`iscsi_£t_îr‹
(
iscsi
,

202 
addr
 = 
	`iscsi_°rdup
(
iscsi
, 
p‹èl
);

203 i‡(
addr
 =
NULL
) {

204 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: "

208 
ho°
 = 
addr
;

211 
°r
 = 
	`°ºchr
(
ho°
, ',');

212 i‡(
°r
 !
NULL
) {

213 
°r
[0] = 0;

216 
°r
 = 
	`°ºchr
(
ho°
, ':');

217 i‡(
°r
 !
NULL
) {

218 i‡(
	`°rchr
(
°r
, ']'Ë=
NULL
) {

219 i‡(
°r
 !
NULL
) {

220 
p‹t
 = 
	`©oi
(
°r
+1);

221 
°r
[0] = 0;

227 i‡(
ho°
[0] == '[') {

228 
ho°
 ++;

229 
°r
 = 
	`°rchr
(
ho°
, ']');

230 i‡(
°r
 =
NULL
) {

231 
	`iscsi_‰ì
(
iscsi
, 
addr
);

232 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

233 "Missög ']' i¿IPv6áddªss", 
p‹èl
);

236 *
°r
 = 0;

240 i‡(
	`gëaddröfo
(
ho°
, 
NULL
, NULL, &
ai
) != 0) {

241 
	`iscsi_‰ì
(
iscsi
, 
addr
);

242 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

243 "C™ÇŸÑesﬁv i¡ÿIPv4/v6.", 
p‹èl
);

246 
	`iscsi_‰ì
(
iscsi
, 
addr
);

248 
	`mem£t
(&
ß
, 0, (sa));

249 
ai
->
ai_Ámûy
) {

250 
AF_INET
:

251 
socksize
 = (
sockaddr_ö
);

252 
	`mem˝y
(&
ß
.
sö
, 
ai
->
ai_addr
, 
socksize
);

253 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

254 #ifde‡
HAVE_SOCK_SIN_LEN


255 
ß
.
sö
.
sö_Àn
 = 
socksize
;

258 #ifde‡
HAVE_SOCKADDR_IN6


259 
AF_INET6
:

260 
socksize
 = (
sockaddr_ö6
);

261 
	`mem˝y
(&
ß
.
sö6
, 
ai
->
ai_addr
, 
socksize
);

262 
ß
.
sö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

263 #ifde‡
HAVE_SOCK_SIN_LEN


264 
ß
.
sö6
.
sö6_Àn
 = 
socksize
;

269 
	`iscsi_£t_îr‹
(
iscsi
, "Unknownáddress family :%d. "

271 
ai
->
ai_Ámûy
);

272 
	`‰ìaddröfo
(
ai
);

277 
iscsi
->
fd
 = 
	`sockë
(
ai
->
ai_Ámûy
, 
SOCK_STREAM
, 0);

278 i‡(
iscsi
->
fd
 == -1) {

279 
	`‰ìaddröfo
(
ai
);

280 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo open iscsi socket. "

281 "Eºno:%s(%d).", 
	`°ªº‹
(
î∫o
),Érrno);

286 
iscsi
->
sockë_°©us_cb
 = 
cb
;

287 
iscsi
->
c⁄√˘_d©a
 = 
¥iv©e_d©a
;

289 
	`£t_n⁄blockög
(
iscsi
->
fd
);

291 
	`iscsi_£t_t˝_kì∑live
(
iscsi
, iscsi->
t˝_kìpidÀ
, iscsi->
t˝_kìp˙t
, iscsi->
t˝_kìpötvl
);

293 i‡(
iscsi
->
t˝_u£r_timeout
 > 0) {

294 
	`£t_t˝_u£r_timeout
(
iscsi
);

297 i‡(
iscsi
->
t˝_syn˙t
 > 0) {

298 
	`£t_t˝_syn˙t
(
iscsi
);

301 #i‡
__löux


302 i‡(
iscsi
->
böd_öãrÁ˚s
[0]) {

303 *
pchr
 = 
iscsi
->
böd_öãrÁ˚s
, *
pchr2
;

304 
iÁ˚_n
 = 
iÁ˚_º
++%
iscsi
->
böd_öãrÁ˚s_˙t
;

305 
iÁ˚_c
 = 0;

307 
pchr2
 = 
	`°rchr
(
pchr
,',');

308 i‡(
iÁ˚_c
 =
iÁ˚_n
) {

309 i‡(
pchr2
)Öchr2[0]=0x00;

312 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

313 
iÁ˚_c
++;

314 } 
pchr2
);

316 
ªs
 = 
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
pchr
, 
	`°æí
(pchr));

317 i‡(
ªs
 < 0) {

318 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿbödÅÿöãrÁ˚ '%s': %s",
pchr
,
	`°ªº‹
(
î∫o
));

320 
	`ISCSI_LOG
(
iscsi
,3,"suc˚ssfuŒy boundÅÿöãrÁ˚ '%s'",
pchr
);

322 i‡(
pchr2
)Öchr2[0]=',';

326 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_NODELAY
, 1) != 0) {

327 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿ£àTCP_NODELAY sock›t: %s",
	`°ªº‹
(
î∫o
));

329 
	`ISCSI_LOG
(
iscsi
,3,"TCP_NODELAY setÅo 1");

332 i‡(
	`c⁄√˘
(
iscsi
->
fd
, &
ß
.ß, 
socksize
) != 0

333 #i‡
	`deföed
(
WIN32
)

334 && 
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK
) {

336 && 
î∫o
 !
EINPROGRESS
) {

338 
	`iscsi_£t_îr‹
(
iscsi
, "Connect failed withÉrrno : "

339 "%s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

340 
	`˛o£
(
iscsi
->
fd
);

341 
iscsi
->
fd
 = -1;

342 
	`‰ìaddröfo
(
ai
);

346 
	`‰ìaddröfo
(
ai
);

348 
	`°∫˝y
(
iscsi
->
c⁄√˘ed_p‹èl
,
p‹èl
,
MAX_STRING_SIZE
);

351 
	}
}

354 
	$iscsi_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

356 i‡(
iscsi
->
fd
 == -1) {

357 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo disconnect "

362 
	`˛o£
(
iscsi
->
fd
);

364 i‡(
iscsi
->
c⁄√˘ed_p‹èl
[0]) {

365 
	`ISCSI_LOG
(
iscsi
, 2, "disc⁄√˘ed fromÖ‹è»%s",iscsi->
c⁄√˘ed_p‹èl
);

368 
iscsi
->
fd
 = -1;

369 
iscsi
->
is_c⁄√˘ed
 = 0;

372 
	}
}

375 
	$iscsi_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
)

377  
iscsi
->
fd
;

378 
	}
}

381 
	$iscsi_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
)

383 
evíts
 = 
iscsi
->
is_c⁄√˘ed
 ? 
POLLIN
 : 
POLLOUT
;

385 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 || (iscsi->
outqueue
 !NULL && 
	`iscsi_£rül32_com∑ª
(iscsi->outqueue->
cmd¢
, iscsi->
maxcmd¢
) <= 0)) {

386 
evíts
 |
POLLOUT
;

388  
evíts
;

389 
	}
}

392 
	$iscsi_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
)

394 
i
 = 0;

395 
iscsi_pdu
 *
pdu
;

397 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

398 
i
++;

400 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

401 
i
++;

403 i‡(
iscsi
->
is_c⁄√˘ed
 == 0) {

404 
i
++;

407  
i
;

408 
	}
}

410 
ssize_t


411 
	$iscsi_iove˘‹_ªadv_wrôev
(
iscsi_c⁄ãxt
 *
iscsi
, 
scsi_iove˘‹
 *
iove˘‹
, 
uöt32_t
 
pos
, 
size_t
 
cou¡
, 
do_wrôe
)

413 
iovec
 *
iovs
;

414 
iovec
 *
fú°_iov
;

415 
iovec
 *
œ°_iov
;

416 
i
, 
niov
;

417 
size_t
 
skù_fú°
, 
skù_œ°
;

419 i‡(
iove˘‹
->
iov
 =
NULL
) {

420 
î∫o
 = 
EINVAL
;

424 
niov
 = 
iove˘‹
->niov;

425 
iovs
 = 
	`Æloˇ
((
iovec
Ë* 
niov
);

426 i‡(
iovs
 =
NULL
) {

427 
î∫o
 = 
ENOMEM
;

430 
i
 = 0; i < 
niov
; i++) {

431 
iovs
[
i
].
iov_ba£
 = 
iove˘‹
->
iov
[i].iov_base;

432 
iovs
[
i
].
iov_Àn
 = 
iove˘‹
->
iov
[i].iov_len;

435 
fú°_iov
 = &
iovs
[0];

438 
pos
 >
fú°_iov
->
iov_Àn
) {

439 
pos
 -
fú°_iov
->
iov_Àn
;

440 
fú°_iov
++;

441 
niov
--;

442 i‡(
niov
 <= 0) {

444 
î∫o
 = 
EINVAL
;

449 
skù_fú°
 = 
pos
;

450 i‡(
skù_fú°
 > 0) {

451 *
buf
 = 
fú°_iov
->
iov_ba£
;

452 
fú°_iov
->
iov_ba£
 = &
buf
[
skù_fú°
];

453 
fú°_iov
->
iov_Àn
 -
skù_fú°
;

458 
œ°_iov
 = 
fú°_iov
;

459 
cou¡
 >
œ°_iov
->
iov_Àn
) {

460 
cou¡
 -
œ°_iov
->
iov_Àn
;

461 
œ°_iov
++;

462 
niov
--;

463 i‡(
niov
 <= 0) {

465 
î∫o
 = 
EINVAL
;

470 
skù_œ°
 = 
œ°_iov
->
iov_Àn
 - 
cou¡
;

471 i‡(
skù_œ°
 > 0) {

472 
œ°_iov
->
iov_Àn
 -
skù_œ°
;

477 
niov
 = 
œ°_iov
 - 
fú°_iov
 + 1;

479 i‡(
do_wrôe
) {

480 
cou¡
 = 
	`wrôev
(
iscsi
->
fd
, 
fú°_iov
, 
niov
);

482 
cou¡
 = 
	`ªadv
(
iscsi
->
fd
, 
fú°_iov
, 
niov
);

485  
cou¡
;

486 
	}
}

489 
	$iscsi_ªad_‰om_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

491 
iscsi_ö_pdu
 *
ö
;

492 
ssize_t
 
d©a_size
, 
cou¡
, 
∑ddög_size
;

494 i‡(
iscsi
->
öcomög
 =
NULL
) {

495 
iscsi
->
öcomög
 = 
	`iscsi_szmÆloc
(iscsi, (
iscsi_ö_pdu
));

496 i‡(
iscsi
->
öcomög
 =
NULL
) {

497 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo malloc iscsi_in_pdu");

501 
ö
 = 
iscsi
->
öcomög
;

504 i‡(
ö
->
hdr_pos
 < 
ISCSI_HEADER_SIZE
) {

508 
cou¡
 = 
ISCSI_HEADER_SIZE
 - 
ö
->
hdr_pos
;

509 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, &
ö
->
hdr
[ö->
hdr_pos
], count, 0);

510 i‡(
cou¡
 == 0) {

513 i‡(
cou¡
 < 0) {

514 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

517 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

518 "î∫o:%d", 
î∫o
);

521 
ö
->
hdr_pos
 +
cou¡
;

524 i‡(
ö
->
hdr_pos
 < 
ISCSI_HEADER_SIZE
) {

529 
∑ddög_size
 = 
	`iscsi_gë_pdu_∑ddög_size
(&
ö
->
hdr
[0]);

530 
d©a_size
 = 
	`iscsi_gë_pdu_d©a_size
(&
ö
->
hdr
[0]Ë+ 
∑ddög_size
;

532 i‡(
d©a_size
 < 0 || d©a_sizê> (
ssize_t
)
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) {

533 
	`iscsi_£t_îr‹
(
iscsi
, "InvÆid d©®sizêª˚ived fromÅ¨gë (%d)", ()
d©a_size
);

536 i‡(
d©a_size
 != 0) {

537 
∑ddög_buf
[3];

538 *
buf
 = 
∑ddög_buf
;

539 
scsi_iove˘‹
 * 
iove˘‹_ö
;

541 
cou¡
 = 
d©a_size
 - 
ö
->
d©a_pos
;

544 
iove˘‹_ö
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi
, 
ö
);

545 i‡(
iove˘‹_ö
 !
NULL
 && 
cou¡
 > 
∑ddög_size
) {

546 
uöt32_t
 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

547 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
, 
iove˘‹_ö
, 
ö
->
d©a_pos
 + 
off£t
, cou¡ - 
∑ddög_size
, 0);

549 i‡(
iove˘‹_ö
 =
NULL
) {

550 i‡(
ö
->
d©a
 =
NULL
) {

551 
ö
->
d©a
 = 
	`iscsi_mÆloc
(
iscsi
, 
d©a_size
);

552 i‡(
ö
->
d©a
 =
NULL
) {

553 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-mem‹y: faûedÅÿmÆlo¯iscsi_ö_pdu->d©a(%d)", ()
d©a_size
);

557 
buf
 = &
ö
->
d©a
[ö->
d©a_pos
];

559 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, 
buf
, count, 0);

562 i‡(
cou¡
 == 0) {

565 i‡(
cou¡
 < 0) {

566 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

569 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

570 "î∫o:%d", 
î∫o
);

574 
ö
->
d©a_pos
 +
cou¡
;

577 i‡(
ö
->
d©a_pos
 < 
d©a_size
) {

581 
	`SLIST_ADD_END
(&
iscsi
->
öqueue
, 
ö
);

582 
iscsi
->
öcomög
 = 
NULL
;

585 
iscsi
->
öqueue
 !
NULL
) {

586 
iscsi_ö_pdu
 *
cuºít
 = 
iscsi
->
öqueue
;

588 i‡(
	`iscsi_¥o˚ss_pdu
(
iscsi
, 
cuºít
) != 0) {

591 
	`SLIST_REMOVE
(&
iscsi
->
öqueue
, 
cuºít
);

592 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
cuºít
);

597 
	}
}

600 
	$iscsi_wrôe_to_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

602 
ssize_t
 
cou¡
;

603 
size_t
 
tŸÆ
;

604 
iscsi_pdu
 *
pdu
;

605 
∑ddög_buf
[3];

607 i‡(
iscsi
->
fd
 == -1) {

608 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo write butÇot connected");

612 
iscsi
->
outqueue
 !
NULL
 || iscsi->
outqueue_cuºít
 != NULL) {

613 i‡(
iscsi
->
outqueue_cuºít
 =
NULL
) {

614 i‡(
	`iscsi_£rül32_com∑ª
(
iscsi
->
outqueue
->
cmd¢
, iscsi->
maxcmd¢
) > 0) {

619 
iscsi
->
outqueue_cuºít
 = iscsi->
outqueue
;

620 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, iscsi->
outqueue_cuºít
);

621 i‡(!(
iscsi
->
outqueue_cuºít
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
)) {

626 
	`SLIST_ADD_END
(&
iscsi
->
waôpdu
, iscsi->
outqueue_cuºít
);

630 
pdu
 = 
iscsi
->
outqueue_cuºít
;

631 
pdu
->
outd©a
.
size
 = (pdu->outdata.size + 3) & 0xfffffffc;

634 i‡(
pdu
->
outd©a_wrôãn
 <Ödu->
outd©a
.
size
) {

635 
cou¡
 = 
	`£nd
(
iscsi
->
fd
,

636 
pdu
->
outd©a
.
d©a
 +Ödu->
outd©a_wrôãn
,

637 
pdu
->
outd©a
.
size
 -Ödu->
outd©a_wrôãn
,

639 i‡(
cou¡
 == -1) {

640 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

643 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

644 "sockë :%d", 
î∫o
);

647 
pdu
->
outd©a_wrôãn
 +
cou¡
;

650 i‡(
pdu
->
outd©a_wrôãn
 !pdu->
outd©a
.
size
) {

655 
pdu
->
∑ylﬂd_wrôãn
 <Ödu->
∑ylﬂd_Àn
) {

656 
scsi_iove˘‹
* 
iove˘‹_out
;

658 
iove˘‹_out
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi
, 
pdu
);

660 i‡(
iove˘‹_out
 =
NULL
) {

661 
	`iscsi_£t_îr‹
(
iscsi
, "Can't find iovector data for DATA-OUT");

665 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
,

666 
iove˘‹_out
,

667 
pdu
->
∑ylﬂd_off£t
 +Ödu->
∑ylﬂd_wrôãn
,

668 
pdu
->
∑ylﬂd_Àn
 -Ödu->
∑ylﬂd_wrôãn
, 1);

669 i‡(
cou¡
 == -1) {

670 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

673 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

674 "sockë :%d", 
î∫o
);

678 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

681 
tŸÆ
 = 
pdu
->
∑ylﬂd_Àn
;

682 
tŸÆ
 = (total + 3) & 0xfffffffc;

685 i‡(
pdu
->
∑ylﬂd_wrôãn
 < 
tŸÆ
) {

686 
cou¡
 = 
	`£nd
(
iscsi
->
fd
, 
∑ddög_buf
, 
tŸÆ
 - 
pdu
->
∑ylﬂd_wrôãn
, 0);

687 i‡(
cou¡
 == -1) {

688 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

691 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

692 "sockë :%d", 
î∫o
);

695 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

698 i‡(
pdu
->
∑ylﬂd_wrôãn
 !
tŸÆ
) {

702 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

703 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

705 
iscsi
->
outqueue_cuºít
 = 
NULL
;

708 
	}
}

711 
	$iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi_c⁄ãxt
 *
iscsi
)

713 i‡(
iscsi
->
is_loggedö
) {

714 i‡(
	`iscsi_ªc⁄√˘
(
iscsi
) == 0) {

719 
	}
}

722 
	$iscsi_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
)

724 i‡(
iscsi
->
fd
 < 0) {

728 i‡(
ªvíts
 & 
POLLERR
) {

729 
îr
 = 0;

730 
sockÀn_t
 
îr_size
 = (
îr
);

732 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

733 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

734 i‡(
îr
 == 0) {

735 
îr
 = 
î∫o
;

737 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

739 
	`°ªº‹
(
îr
),Érr);

741 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLERR, "

744 i‡(
iscsi
->
sockë_°©us_cb
) {

745 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

746 
iscsi
->
c⁄√˘_d©a
);

747 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

749  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

751 i‡(
ªvíts
 & 
POLLHUP
) {

752 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLHUP, "

754 i‡(
iscsi
->
sockë_°©us_cb
) {

755 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

756 
iscsi
->
c⁄√˘_d©a
);

757 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

759  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

762 i‡(
iscsi
->
is_c⁄√˘ed
 =0 && 
ªvíts
&
POLLOUT
) {

763 
îr
 = 0;

764 
sockÀn_t
 
îr_size
 = (
îr
);

765 
sockaddr_ö
 
loˇl
;

766 
sockÀn_t
 
loˇl_l
 = (
loˇl
);

768 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

769 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

770 i‡(
îr
 == 0) {

771 
îr
 = 
î∫o
;

773 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

775 
	`°ªº‹
(
îr
),Érr);

776 i‡(
iscsi
->
sockë_°©us_cb
) {

777 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
,

778 
NULL
, 
iscsi
->
c⁄√˘_d©a
);

779 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

782  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

785 i‡(
	`gësock«me
(
iscsi
->
fd
, (
sockaddr
 *Ë&
loˇl
, &
loˇl_l
) == 0) {

786 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘i⁄É°ablished (%s:%u -> %s)", 
	`öë_¡ﬂ
(
loˇl
.
sö_addr
),

787 ()
	`¡ohs
(
loˇl
.
sö_p‹t
),
iscsi
->
c⁄√˘ed_p‹èl
);

790 
iscsi
->
is_c⁄√˘ed
 = 1;

791 i‡(
iscsi
->
sockë_°©us_cb
) {

792 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_GOOD
, 
NULL
,

793 
iscsi
->
c⁄√˘_d©a
);

794 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

799 i‡(
ªvíts
 & 
POLLOUT
 && (
iscsi
->
outqueue
 !
NULL
 || iscsi->
outqueue_cuºít
 != NULL)) {

800 i‡(
	`iscsi_wrôe_to_sockë
(
iscsi
) != 0) {

801  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

804 i‡(
ªvíts
 & 
POLLIN
) {

805 i‡(
	`iscsi_ªad_‰om_sockë
(
iscsi
) != 0) {

806  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

811 
	}
}

814 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

816 i‡(
pdu
 =
NULL
) {

817 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo queue NULLÖdu");

821 i‡(
iscsi
->
hódî_dige°
 !
ISCSI_HEADER_DIGEST_NONE
) {

822 
¸c
;

824 i‡(
pdu
->
outd©a
.
size
 < 
ISCSI_RAW_HEADER_SIZE
 + 4) {

825 
	`iscsi_£t_îr‹
(
iscsi
, "PDUÅoo small (%u)Åo contain header digest",

826 (Ë
pdu
->
outd©a
.
size
);

830 
¸c
 = 
	`¸c32c
((*)
pdu
->
outd©a
.
d©a
, 
ISCSI_RAW_HEADER_SIZE
);

832 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+3] = (
¸c
 >> 24)&0xff;

833 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+2] = (
¸c
 >> 16)&0xff;

834 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+1] = (
¸c
 >> 8)&0xff;

835 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+0] = (
¸c
) &0xff;

838 
	`iscsi_add_to_outqueue
(
iscsi
, 
pdu
);

841 
	}
}

844 
	$iscsi_‰ì_iscsi_ö_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

846 
	`iscsi_‰ì
(
iscsi
, 
ö
->
d©a
);

847 
ö
->
d©a
=
NULL
;

848 
	`iscsi_s‰ì
(
iscsi
, 
ö
);

849 
ö
=
NULL
;

850 
	}
}

853 
	$iscsi_‰ì_iscsi_öqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
öqueue
)

855 
öqueue
 !
NULL
) {

856 
iscsi_ö_pdu
 *
√xt
 = 
öqueue
->next;

857 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
öqueue
);

858 
öqueue
 = 
√xt
;

860 
	}
}

862 
	$iscsi_£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

864 
iscsi
->
t˝_syn˙t
=
vÆue
;

865 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_SYNCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

866 
	}
}

868 
	$iscsi_£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

870 
iscsi
->
t˝_u£r_timeout
=
vÆue
;

871 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_USER_TIMEOUT wû»bê£àtÿ%dm†⁄Çexàsockë cª©i⁄",
vÆue
);

872 
	}
}

874 
	$iscsi_£t_t˝_kìpidÀ
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

876 
iscsi
->
t˝_kìpidÀ
=
vÆue
;

877 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPIDLE wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

878 
	}
}

880 
	$iscsi_£t_t˝_kìp˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

882 
iscsi
->
t˝_kìp˙t
=
vÆue
;

883 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

884 
	}
}

886 
	$iscsi_£t_t˝_kìpötvl
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

888 
iscsi
->
t˝_kìpötvl
=
vÆue
;

889 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPINTVL wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

890 
	}
}

892 
	$iscsi_£t_t˝_kì∑live
(
iscsi_c⁄ãxt
 *
iscsi
, 
idÀ
 
_U_
, 
cou¡
 _U_, 
öãrvÆ
 _U_)

894 #ifde‡
SO_KEEPALIVE


895 
vÆue
 = 1;

896 i‡(
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
vÆue
, (value)) != 0) {

897 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àsockë o±i⁄ SO_KEEPALIVE. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

900 
	`ISCSI_LOG
(
iscsi
, 3, "SO_KEEPALIVE sëÅÿ%d",
vÆue
);

901 #ifde‡
TCP_KEEPCNT


902 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPCNT
, 
cou¡
) != 0) {

903 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêcou¡. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

906 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPCNT sëÅÿ%d",
cou¡
);

908 #ifde‡
TCP_KEEPINTVL


909 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPINTVL
, 
öãrvÆ
) != 0) {

910 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêöãrvÆ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

913 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPINTVL sëÅÿ%d",
öãrvÆ
);

915 #ifde‡
TCP_KEEPIDLE


916 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPIDLE
, 
idÀ
) != 0) {

917 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêidÀ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

920 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPIDLE sëÅÿ%d",
idÀ
);

925 
	}
}

927 
	$iscsi_£t_böd_öãrÁ˚s
(
iscsi_c⁄ãxt
 *
iscsi
, * 
öãrÁ˚s
 
_U_
)

929 #i‡
__löux


930 
	`°∫˝y
(
iscsi
->
böd_öãrÁ˚s
,
öãrÁ˚s
,
MAX_STRING_SIZE
);

931 
iscsi
->
böd_öãrÁ˚s_˙t
=0;

932 * 
pchr
 = 
öãrÁ˚s
;

933 * 
pchr2
 = 
NULL
;

935 
pchr2
 = 
	`°rchr
(
pchr
,',');

936 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

937 
iscsi
->
böd_öãrÁ˚s_˙t
++;

938 } 
pchr2
);

939 
	`ISCSI_LOG
(
iscsi
,2,"wû»bödÅÿ⁄êo‡thêfﬁlowög %d i¡îÁ˚(sË⁄Çexàsockë cª©i⁄: %s",iscsi->
böd_öãrÁ˚s_˙t
,
öãrÁ˚s
);

940 i‡(!
iÁ˚_º
ËiÁ˚_º=
	`ønd
()%
iscsi
->
böd_öãrÁ˚s_˙t
+1;

942 
	`ISCSI_LOG
(
iscsi
,1,"bindingÅoán interface isÇot supported on your OS");

944 
	}
}

	@lib/sync.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
AROS


26 
	~"¨os/¨os_com∑t.h
"

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

31 
	~"wö32/wö32_com∑t.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<time.h
>

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

42 
	siscsi_sync_°©e
 {

43 
	mföished
;

44 
	m°©us
;

45 
scsi_èsk
 *
	mèsk
;

49 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_sync_°©e
 *
°©e
)

51 
pﬁlfd
 
pfd
;

52 
ªt
;

54 
°©e
->
föished
 == 0) {

55 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

56 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

58 i‡((
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000)) < 0) {

59 
	`iscsi_£t_îr‹
(
iscsi
, "Poll failed");

60 
°©e
->
°©us
 = -1;

63 i‡(
ªt
 == 0) {

64 
	`iscsi_timeout_sˇn
(
iscsi
);

67 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

68 
	`iscsi_£t_îr‹
(
iscsi
,

70 
	`iscsi_gë_îr‹
(
iscsi
));

71 
°©e
->
°©us
 = -1;

75 
	}
}

81 
	$iscsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

82 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

84 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

86 i‡(
°©e
 !
NULL
) {

87 
°©e
->
°©us
 = status;

88 
°©e
->
föished
 = 1;

90 
	}
}

93 
	$iscsi_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
)

95 
iscsi_sync_°©e
 
°©e
;

97 
	`mem£t
(&
°©e
, 0, (state));

99 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
,

100 
iscsi_sync_cb
, &
°©e
) != 0) {

101 
	`iscsi_£t_îr‹
(
iscsi
,

103 
	`iscsi_gë_îr‹
(
iscsi
));

107 
	`evít_lo›
(
iscsi
, &
°©e
);

110 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

112  
°©e
.
°©us
;

113 
	}
}

116 
	$iscsi_fuŒ_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

117 c⁄° *
p‹èl
, 
lun
)

119 
iscsi_sync_°©e
 
°©e
;

121 
	`mem£t
(&
°©e
, 0, (state));

123 i‡(
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
lun
,

124 
iscsi_sync_cb
, &
°©e
) != 0) {

125 
	`iscsi_£t_îr‹
(
iscsi
,

127 
	`iscsi_gë_îr‹
(
iscsi
));

131 
	`evít_lo›
(
iscsi
, &
°©e
);

133  
°©e
.
°©us
;

134 
	}
}

136 
	$iscsi_logö_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

138 
iscsi_sync_°©e
 
°©e
;

140 
	`mem£t
(&
°©e
, 0, (state));

142 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

143 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜogin. %s",

144 
	`iscsi_gë_îr‹
(
iscsi
));

148 
	`evít_lo›
(
iscsi
, &
°©e
);

150  
°©e
.
°©us
;

151 
	}
}

153 
	$iscsi_logout_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

155 
iscsi_sync_°©e
 
°©e
;

157 
	`mem£t
(&
°©e
, 0, (state));

159 i‡(
	`iscsi_logout_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

160 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo startÜogout() %s",

161 
	`iscsi_gë_îr‹
(
iscsi
));

165 
	`evít_lo›
(
iscsi
, &
°©e
);

167  
°©e
.
°©us
;

168 
	}
}

171 
	$iscsi_èsk_mgmt_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

172 *
comm™d_d©a
, *
¥iv©e_d©a
)

174 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

176 i‡(
°©e
 !
NULL
) {

177 
°©e
->
°©us
 = status;

178 
°©e
->
föished
 = 1;

185 i‡(
comm™d_d©a
 && *(
uöt32_t
 *)command_data) {

186 *(
uöt32_t
 *)
comm™d_d©a
) {

187 1: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Does Not Exist");

189 2: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded LUN Does Not Exist");

191 3: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Still Allegiant");

193 4: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Allegiance Reassignment Not Supported");

195 5: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Mgmt Function Not Supported");

197 6: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Authorization Failed");

199 255: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Rejected");

203 
°©e
->
°©us
 = 
SCSI_STATUS_ERROR
;

205 
	}
}

208 
	$iscsi_èsk_mgmt_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

209 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

210 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
)

212 
iscsi_sync_°©e
 
°©e
;

214 
	`mem£t
(&
°©e
, 0, (state));

216 i‡(
	`iscsi_èsk_mgmt_async
(
iscsi
, 
lun
, 
fun˘i⁄
,

217 
rôt
, 
rcmd¢
,

218 
iscsi_èsk_mgmt_sync_cb
, &
°©e
) != 0) {

219 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send TASK MGMT function: %s",

220 
	`iscsi_gë_îr‹
(
iscsi
));

224 
	`evít_lo›
(
iscsi
, &
°©e
);

226  
°©e
.
°©us
;

227 
	}
}

230 
	$iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

231 
scsi_èsk
 *
èsk
)

233 
	`iscsi_scsi_ˇn˚l_èsk
(
iscsi
, 
èsk
);

235  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
èsk
->
lun
,

236 
ISCSI_TM_ABORT_TASK
,

237 
èsk
->
ôt
,Åask->
cmd¢
);

238 
	}
}

241 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

242 
uöt32_t
 
lun
)

244 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

246  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

247 
ISCSI_TM_ABORT_TASK_SET
,

249 
	}
}

252 
	$iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

253 
uöt32_t
 
lun
)

255 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

257  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

258 
ISCSI_TM_LUN_RESET
,

260 
	}
}

263 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

265 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

267  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

268 
ISCSI_TM_TARGET_WARM_RESET
,

270 
	}
}

274 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

276 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

278  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

279 
ISCSI_TM_TARGET_COLD_RESET
,

281 
	}
}

288 
	$scsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
,

289 *
¥iv©e_d©a
)

291 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

292 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

294 
èsk
->
°©us
 = status;

296 
°©e
->
°©us
 = status;

297 
°©e
->
föished
 = 1;

298 
°©e
->
èsk
 =Åask;

299 
	}
}

301 
scsi_èsk
 *

302 
	$iscsi_ªp‹éuns_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

303 
Æloc_Àn
)

305 
iscsi_sync_°©e
 
°©e
;

307 
	`mem£t
(&
°©e
, 0, (state));

309 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 
ªp‹t_ty≥
, 
Æloc_Àn
,

310 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

311 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send ReportLuns command");

312  
NULL
;

315 
	`evít_lo›
(
iscsi
, &
°©e
);

317  
°©e
.
èsk
;

318 
	}
}

321 
scsi_èsk
 *

322 
	$iscsi_ã°unôªady_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

324 
iscsi_sync_°©e
 
°©e
;

326 
	`mem£t
(&
°©e
, 0, (state));

328 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
lun
,

329 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

330 
	`iscsi_£t_îr‹
(
iscsi
,

332  
NULL
;

335 
	`evít_lo›
(
iscsi
, &
°©e
);

337  
°©e
.
èsk
;

338 
	}
}

340 
scsi_èsk
 *

341 
	$iscsi_öquúy_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

342 
∑ge_code
, 
maxsize
)

344 
iscsi_sync_°©e
 
°©e
;

346 
	`mem£t
(&
°©e
, 0, (state));

348 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
,

349 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

350 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Inquiry command");

351  
NULL
;

354 
	`evít_lo›
(
iscsi
, &
°©e
);

356  
°©e
.
èsk
;

357 
	}
}

359 
scsi_èsk
 *

360 
	$iscsi_ªad6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

361 
uöt32_t
 
d©Æí
, 
blocksize
)

363 
iscsi_sync_°©e
 
°©e
;

365 
	`mem£t
(&
°©e
, 0, (state));

367 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

368 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

369 
	`iscsi_£t_îr‹
(
iscsi
,

371  
NULL
;

374 
	`evít_lo›
(
iscsi
, &
°©e
);

376  
°©e
.
èsk
;

377 
	}
}

379 
scsi_èsk
 *

380 
	$iscsi_ªad10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

381 
uöt32_t
 
d©Æí
, 
blocksize
,

382 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

384 
iscsi_sync_°©e
 
°©e
;

386 
	`mem£t
(&
°©e
, 0, (state));

388 i‡(
	`iscsi_ªad10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

389 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

390 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

391 
	`iscsi_£t_îr‹
(
iscsi
,

393  
NULL
;

396 
	`evít_lo›
(
iscsi
, &
°©e
);

398  
°©e
.
èsk
;

399 
	}
}

401 
scsi_èsk
 *

402 
	$iscsi_ªad12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

403 
uöt32_t
 
d©Æí
, 
blocksize
,

404 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

406 
iscsi_sync_°©e
 
°©e
;

408 
	`mem£t
(&
°©e
, 0, (state));

410 i‡(
	`iscsi_ªad12_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

411 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

412 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

413 
	`iscsi_£t_îr‹
(
iscsi
,

415  
NULL
;

418 
	`evít_lo›
(
iscsi
, &
°©e
);

420  
°©e
.
èsk
;

421 
	}
}

423 
scsi_èsk
 *

424 
	$iscsi_ªad16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

425 
uöt32_t
 
d©Æí
, 
blocksize
,

426 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

428 
iscsi_sync_°©e
 
°©e
;

430 
	`mem£t
(&
°©e
, 0, (state));

432 i‡(
	`iscsi_ªad16_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

433 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

434 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

435 
	`iscsi_£t_îr‹
(
iscsi
,

437  
NULL
;

440 
	`evít_lo›
(
iscsi
, &
°©e
);

442  
°©e
.
èsk
;

443 
	}
}

445 
scsi_èsk
 *

446 
	$iscsi_ªadˇ∑côy10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

447 
pmi
)

449 
iscsi_sync_°©e
 
°©e
;

451 
	`mem£t
(&
°©e
, 0, (state));

453 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
lun
, 
lba
, 
pmi
,

454 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

455 
	`iscsi_£t_îr‹
(
iscsi
,

457  
NULL
;

460 
	`evít_lo›
(
iscsi
, &
°©e
);

462  
°©e
.
èsk
;

463 
	}
}

465 
scsi_èsk
 *

466 
	$iscsi_ªadˇ∑côy16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

468 
iscsi_sync_°©e
 
°©e
;

470 
	`mem£t
(&
°©e
, 0, (state));

472 i‡(
	`iscsi_ªadˇ∑côy16_èsk
(
iscsi
, 
lun
,

473 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

474 
	`iscsi_£t_îr‹
(
iscsi
,

476  
NULL
;

479 
	`evít_lo›
(
iscsi
, &
°©e
);

481  
°©e
.
èsk
;

482 
	}
}

484 
scsi_èsk
 *

485 
	$iscsi_ßnôize_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

486 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

487 
iscsi_d©a
 *
d©a
)

489 
iscsi_sync_°©e
 
°©e
;

491 
	`mem£t
(&
°©e
, 0, (state));

493 i‡(
	`iscsi_ßnôize_èsk
(
iscsi
, 
lun
,

494 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
d©a
,

495 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

496 
	`iscsi_£t_îr‹
(
iscsi
,

498  
NULL
;

501 
	`evít_lo›
(
iscsi
, &
°©e
);

503  
°©e
.
èsk
;

504 
	}
}

506 
scsi_èsk
 *

507 
	$iscsi_ßnôize_block_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

508 
immed
, 
au£
)

510 
iscsi_sync_°©e
 
°©e
;

512 
	`mem£t
(&
°©e
, 0, (state));

514 i‡(
	`iscsi_ßnôize_block_îa£_èsk
(
iscsi
, 
lun
,

515 
immed
, 
au£
,

516 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

517 
	`iscsi_£t_îr‹
(
iscsi
,

519  
NULL
;

522 
	`evít_lo›
(
iscsi
, &
°©e
);

524  
°©e
.
èsk
;

525 
	}
}

527 
scsi_èsk
 *

528 
	$iscsi_ßnôize_¸y±o_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

529 
immed
, 
au£
)

531 
iscsi_sync_°©e
 
°©e
;

533 
	`mem£t
(&
°©e
, 0, (state));

535 i‡(
	`iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi
, 
lun
,

536 
immed
, 
au£
,

537 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

538 
	`iscsi_£t_îr‹
(
iscsi
,

540  
NULL
;

543 
	`evít_lo›
(
iscsi
, &
°©e
);

545  
°©e
.
èsk
;

546 
	}
}

548 
scsi_èsk
 *

549 
	$iscsi_ßnôize_exô_Áûuª_mode_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

550 
immed
, 
au£
)

552 
iscsi_sync_°©e
 
°©e
;

554 
	`mem£t
(&
°©e
, 0, (state));

556 i‡(
	`iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi
, 
lun
,

557 
immed
, 
au£
,

558 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

559 
	`iscsi_£t_îr‹
(
iscsi
,

561  
NULL
;

564 
	`evít_lo›
(
iscsi
, &
°©e
);

566  
°©e
.
èsk
;

567 
	}
}

569 
scsi_èsk
 *

570 
	$iscsi_gë_lba_°©us_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

572 
iscsi_sync_°©e
 
°©e
;

574 
	`mem£t
(&
°©e
, 0, (state));

576 i‡(
	`iscsi_gë_lba_°©us_èsk
(
iscsi
, 
lun
, 
°¨tög_lba
, 
Æloc_Àn
,

577 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

578 
	`iscsi_£t_îr‹
(
iscsi
,

580  
NULL
;

583 
	`evít_lo›
(
iscsi
, &
°©e
);

585  
°©e
.
èsk
;

586 
	}
}

588 
scsi_èsk
 *

589 
	$iscsi_synchr⁄izeˇche10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

590 
num_blocks
, 
syn˙v
, 
immed
)

592 
iscsi_sync_°©e
 
°©e
;

594 
	`mem£t
(&
°©e
, 0, (state));

596 i‡(
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

597 
syn˙v
, 
immed
,

598 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

599 
	`iscsi_£t_îr‹
(
iscsi
,

601  
NULL
;

604 
	`evít_lo›
(
iscsi
, &
°©e
);

606  
°©e
.
èsk
;

607 
	}
}

609 
scsi_èsk
 *

610 
	$iscsi_°¨t°›unô_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

611 
immed
, 
pcm
, 
pc
,

612 
no_Êush
, 
l€j
, 
°¨t
)

614 
iscsi_sync_°©e
 
°©e
;

616 
	`mem£t
(&
°©e
, 0, (state));

618 i‡(
	`iscsi_°¨t°›unô_èsk
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
,

619 
no_Êush
, 
l€j
, 
°¨t
,

620 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

621 
	`iscsi_£t_îr‹
(
iscsi
,

623  
NULL
;

626 
	`evít_lo›
(
iscsi
, &
°©e
);

628  
°©e
.
èsk
;

629 
	}
}

631 
scsi_èsk
 *

632 
	$iscsi_¥evíèŒow_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

633 
¥evít
)

635 
iscsi_sync_°©e
 
°©e
;

637 
	`mem£t
(&
°©e
, 0, (state));

639 i‡(
	`iscsi_¥evíèŒow_èsk
(
iscsi
, 
lun
, 
¥evít
,

640 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

641 
	`iscsi_£t_îr‹
(
iscsi
,

643  
NULL
;

646 
	`evít_lo›
(
iscsi
, &
°©e
);

648  
°©e
.
èsk
;

649 
	}
}

651 
scsi_èsk
 *

652 
	$iscsi_synchr⁄izeˇche16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

653 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

655 
iscsi_sync_°©e
 
°©e
;

657 
	`mem£t
(&
°©e
, 0, (state));

659 i‡(
	`iscsi_synchr⁄izeˇche16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

660 
syn˙v
, 
immed
,

661 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

662 
	`iscsi_£t_îr‹
(
iscsi
,

664  
NULL
;

667 
	`evít_lo›
(
iscsi
, &
°©e
);

669  
°©e
.
èsk
;

670 
	}
}

672 
scsi_èsk
 *

673 
	$iscsi_¥e„tch10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

674 
num_blocks
, 
immed
, 
group
)

676 
iscsi_sync_°©e
 
°©e
;

678 
	`mem£t
(&
°©e
, 0, (state));

680 i‡(
	`iscsi_¥e„tch10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

681 
immed
, 
group
,

682 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

683 
	`iscsi_£t_îr‹
(
iscsi
,

685  
NULL
;

688 
	`evít_lo›
(
iscsi
, &
°©e
);

690  
°©e
.
èsk
;

691 
	}
}

693 
scsi_èsk
 *

694 
	$iscsi_¥e„tch16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

695 
num_blocks
, 
immed
, 
group
)

697 
iscsi_sync_°©e
 
°©e
;

699 
	`mem£t
(&
°©e
, 0, (state));

701 i‡(
	`iscsi_¥e„tch16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

702 
immed
, 
group
,

703 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

704 
	`iscsi_£t_îr‹
(
iscsi
,

706  
NULL
;

709 
	`evít_lo›
(
iscsi
, &
°©e
);

711  
°©e
.
èsk
;

712 
	}
}

714 
scsi_èsk
 *

715 
	$iscsi_wrôe10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

716 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

717 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

719 
iscsi_sync_°©e
 
°©e
;

721 
	`mem£t
(&
°©e
, 0, (state));

723 i‡(
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

724 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

725 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

726 
	`iscsi_£t_îr‹
(
iscsi
,

728  
NULL
;

731 
	`evít_lo›
(
iscsi
, &
°©e
);

733  
°©e
.
èsk
;

734 
	}
}

736 
scsi_èsk
 *

737 
	$iscsi_wrôe12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

738 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

739 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

741 
iscsi_sync_°©e
 
°©e
;

743 
	`mem£t
(&
°©e
, 0, (state));

745 i‡(
	`iscsi_wrôe12_èsk
(
iscsi
, 
lun
, 
lba
,

746 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

747 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

748 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

749 
	`iscsi_£t_îr‹
(
iscsi
,

751  
NULL
;

754 
	`evít_lo›
(
iscsi
, &
°©e
);

756  
°©e
.
èsk
;

757 
	}
}

759 
scsi_èsk
 *

760 
	$iscsi_wrôe16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

761 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

762 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

764 
iscsi_sync_°©e
 
°©e
;

766 
	`mem£t
(&
°©e
, 0, (state));

768 i‡(
	`iscsi_wrôe16_èsk
(
iscsi
, 
lun
, 
lba
,

769 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

770 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

771 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

772 
	`iscsi_£t_îr‹
(
iscsi
,

774  
NULL
;

777 
	`evít_lo›
(
iscsi
, &
°©e
);

779  
°©e
.
èsk
;

780 
	}
}

782 
scsi_èsk
 *

783 
	$iscsi_‹wrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

784 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

785 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

787 
iscsi_sync_°©e
 
°©e
;

789 
	`mem£t
(&
°©e
, 0, (state));

791 i‡(
	`iscsi_‹wrôe_èsk
(
iscsi
, 
lun
, 
lba
,

792 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

793 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

794 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

795 
	`iscsi_£t_îr‹
(
iscsi
,

797  
NULL
;

800 
	`evít_lo›
(
iscsi
, &
°©e
);

802  
°©e
.
èsk
;

803 
	}
}

805 
scsi_èsk
 *

806 
	$iscsi_com∑ª™dwrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

807 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

808 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

810 
iscsi_sync_°©e
 
°©e
;

812 
	`mem£t
(&
°©e
, 0, (state));

814 i‡(
	`iscsi_com∑ª™dwrôe_èsk
(
iscsi
, 
lun
, 
lba
,

815 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

816 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

817 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

818 
	`iscsi_£t_îr‹
(
iscsi
,

820  
NULL
;

823 
	`evít_lo›
(
iscsi
, &
°©e
);

825  
°©e
.
èsk
;

826 
	}
}

828 
scsi_èsk
 *

829 
	$iscsi_wrôevîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

830 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

831 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

833 
iscsi_sync_°©e
 
°©e
;

835 
	`mem£t
(&
°©e
, 0, (state));

837 i‡(
	`iscsi_wrôevîify10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

838 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

839 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

840 
	`iscsi_£t_îr‹
(
iscsi
,

842  
NULL
;

845 
	`evít_lo›
(
iscsi
, &
°©e
);

847  
°©e
.
èsk
;

848 
	}
}

850 
scsi_èsk
 *

851 
	$iscsi_wrôevîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

852 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

853 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

855 
iscsi_sync_°©e
 
°©e
;

857 
	`mem£t
(&
°©e
, 0, (state));

859 i‡(
	`iscsi_wrôevîify12_èsk
(
iscsi
, 
lun
, 
lba
,

860 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

861 
dpo
, 
bytchk
, 
group_numbî
,

862 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

863 
	`iscsi_£t_îr‹
(
iscsi
,

865  
NULL
;

868 
	`evít_lo›
(
iscsi
, &
°©e
);

870  
°©e
.
èsk
;

871 
	}
}

873 
scsi_èsk
 *

874 
	$iscsi_wrôevîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

875 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

876 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

878 
iscsi_sync_°©e
 
°©e
;

880 
	`mem£t
(&
°©e
, 0, (state));

882 i‡(
	`iscsi_wrôevîify16_èsk
(
iscsi
, 
lun
, 
lba
,

883 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

884 
dpo
, 
bytchk
, 
group_numbî
,

885 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

886 
	`iscsi_£t_îr‹
(
iscsi
,

888  
NULL
;

891 
	`evít_lo›
(
iscsi
, &
°©e
);

893  
°©e
.
èsk
;

894 
	}
}

896 
scsi_èsk
 *

897 
	$iscsi_vîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

898 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

900 
iscsi_sync_°©e
 
°©e
;

902 
	`mem£t
(&
°©e
, 0, (state));

904 i‡(
	`iscsi_vîify10_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

905 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

906 
	`iscsi_£t_îr‹
(
iscsi
,

908  
NULL
;

911 
	`evít_lo›
(
iscsi
, &
°©e
);

913  
°©e
.
èsk
;

914 
	}
}

916 
scsi_èsk
 *

917 
	$iscsi_vîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

918 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

920 
iscsi_sync_°©e
 
°©e
;

922 
	`mem£t
(&
°©e
, 0, (state));

924 i‡(
	`iscsi_vîify12_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

925 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

926 
	`iscsi_£t_îr‹
(
iscsi
,

928  
NULL
;

931 
	`evít_lo›
(
iscsi
, &
°©e
);

933  
°©e
.
èsk
;

934 
	}
}

936 
scsi_èsk
 *

937 
	$iscsi_vîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

938 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

940 
iscsi_sync_°©e
 
°©e
;

942 
	`mem£t
(&
°©e
, 0, (state));

944 i‡(
	`iscsi_vîify16_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

945 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

946 
	`iscsi_£t_îr‹
(
iscsi
,

948  
NULL
;

951 
	`evít_lo›
(
iscsi
, &
°©e
);

953  
°©e
.
èsk
;

954 
	}
}

956 
scsi_èsk
 *

957 
	$iscsi_wrôeßme10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

958 *
d©a
, 
uöt32_t
 
d©Æí
,

959 
uöt16_t
 
num_blocks
,

960 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

962 
iscsi_sync_°©e
 
°©e
;

964 
	`mem£t
(&
°©e
, 0, (state));

966 i‡(
	`iscsi_wrôeßme10_èsk
(
iscsi
, 
lun
, 
lba
,

967 
d©a
, 
d©Æí
, 
num_blocks
,

968 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

969 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

970 
	`iscsi_£t_îr‹
(
iscsi
,

972  
NULL
;

975 
	`evít_lo›
(
iscsi
, &
°©e
);

977  
°©e
.
èsk
;

978 
	}
}

980 
scsi_èsk
 *

981 
	$iscsi_wrôeßme16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

982 *
d©a
, 
uöt32_t
 
d©Æí
,

983 
uöt32_t
 
num_blocks
,

984 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

986 
iscsi_sync_°©e
 
°©e
;

988 
	`mem£t
(&
°©e
, 0, (state));

990 i‡(
	`iscsi_wrôeßme16_èsk
(
iscsi
, 
lun
, 
lba
,

991 
d©a
, 
d©Æí
, 
num_blocks
,

992 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

993 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

994 
	`iscsi_£t_îr‹
(
iscsi
,

996  
NULL
;

999 
	`evít_lo›
(
iscsi
, &
°©e
);

1001  
°©e
.
èsk
;

1002 
	}
}

1004 
scsi_èsk
 *

1005 
	$iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1006 
ß
, 
uöt16_t
 
x„æí
)

1008 
iscsi_sync_°©e
 
°©e
;

1010 
	`mem£t
(&
°©e
, 0, (state));

1012 i‡(
	`iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi
, 
lun
, 
ß
, 
x„æí
,

1013 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1014 
	`iscsi_£t_îr‹
(
iscsi
,

1016  
NULL
;

1019 
	`evít_lo›
(
iscsi
, &
°©e
);

1021  
°©e
.
èsk
;

1022 
	}
}

1024 
scsi_èsk
 *

1025 
	$iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1026 
ß
, 
sc›e
, 
ty≥
, *
∑øm
)

1028 
iscsi_sync_°©e
 
°©e
;

1030 
	`mem£t
(&
°©e
, 0, (state));

1032 i‡(
	`iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi
, 
lun
,

1033 
ß
, 
sc›e
, 
ty≥
, 
∑øm
,

1034 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1035 
	`iscsi_£t_îr‹
(
iscsi
,

1037  
NULL
;

1040 
	`evít_lo›
(
iscsi
, &
°©e
);

1042  
°©e
.
èsk
;

1043 
	}
}

1045 
scsi_èsk
 *

1046 
	$iscsi_unm≠_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1047 
unm≠_li°
 *
li°
, 
li°_Àn
)

1049 
iscsi_sync_°©e
 
°©e
;

1051 
	`mem£t
(&
°©e
, 0, (state));

1053 i‡(
	`iscsi_unm≠_èsk
(
iscsi
, 
lun
, 
™ch‹
, 
group
, 
li°
, 
li°_Àn
,

1054 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1055 
	`iscsi_£t_îr‹
(
iscsi
,

1057  
NULL
;

1060 
	`evít_lo›
(
iscsi
, &
°©e
);

1062  
°©e
.
èsk
;

1063 
	}
}

1065 
scsi_èsk
 *

1066 
	$iscsi_ªadtoc_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
, 
f‹m©
,

1067 
åack_£ssi⁄
, 
maxsize
)

1069 
iscsi_sync_°©e
 
°©e
;

1071 
	`mem£t
(&
°©e
, 0, (state));

1073 i‡(
	`iscsi_ªadtoc_èsk
(
iscsi
, 
lun
, 
msf
, 
f‹m©
, 
åack_£ssi⁄
,

1074 
maxsize
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1075 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Read TOC command");

1076  
NULL
;

1079 
	`evít_lo›
(
iscsi
, &
°©e
);

1081  
°©e
.
èsk
;

1082 
	}
}

1084 
scsi_èsk
 *

1085 
	$iscsi_ª£rve6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1087 
iscsi_sync_°©e
 
°©e
;

1089 
	`mem£t
(&
°©e
, 0, (state));

1091 i‡(
	`iscsi_ª£rve6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1092 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RESERVE6 command");

1093  
NULL
;

1096 
	`evít_lo›
(
iscsi
, &
°©e
);

1098  
°©e
.
èsk
;

1099 
	}
}

1101 
scsi_èsk
 *

1102 
	$iscsi_ªÀa£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1104 
iscsi_sync_°©e
 
°©e
;

1106 
	`mem£t
(&
°©e
, 0, (state));

1108 i‡(
	`iscsi_ªÀa£6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1109 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RELEASE6 command");

1110  
NULL
;

1113 
	`evít_lo›
(
iscsi
, &
°©e
);

1115  
°©e
.
èsk
;

1116 
	}
}

1118 
scsi_èsk
 *

1119 
	$iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1120 
r˘d
, 
›ti⁄s
,

1121 
›code
, 
ß
,

1122 
uöt32_t
 
Æloc_Àn
)

1124 
iscsi_sync_°©e
 
°©e
;

1126 
	`mem£t
(&
°©e
, 0, (state));

1128 i‡(
	`iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1129 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send MaintenanceIn:"

1131  
NULL
;

1134 
	`evít_lo›
(
iscsi
, &
°©e
);

1136  
°©e
.
èsk
;

1137 
	}
}

1139 
scsi_èsk
 *

1140 
	$iscsi_scsi_comm™d_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1141 
scsi_èsk
 *
èsk
, 
iscsi_d©a
 *
d©a
)

1143 
iscsi_sync_°©e
 
°©e
;

1145 
	`mem£t
(&
°©e
, 0, (state));

1147 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
,

1148 
scsi_sync_cb
, 
d©a
, &
°©e
) != 0) {

1149 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send SCSI command");

1150  
NULL
;

1153 
	`evít_lo›
(
iscsi
, &
°©e
);

1155  
°©e
.
èsk
;

1156 
	}
}

1159 
scsi_èsk
 *

1160 
	$iscsi_mode£À˘6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1161 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1163 
iscsi_sync_°©e
 
°©e
;

1165 
	`mem£t
(&
°©e
, 0, (state));

1167 i‡(
	`iscsi_mode£À˘6_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1168 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1169 
	`iscsi_£t_îr‹
(
iscsi
,

1171  
NULL
;

1174 
	`evít_lo›
(
iscsi
, &
°©e
);

1176  
°©e
.
èsk
;

1177 
	}
}

1179 
scsi_èsk
 *

1180 
	$iscsi_mode£À˘10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1181 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1183 
iscsi_sync_°©e
 
°©e
;

1185 
	`mem£t
(&
°©e
, 0, (state));

1187 i‡(
	`iscsi_mode£À˘10_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1188 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1189 
	`iscsi_£t_îr‹
(
iscsi
,

1191  
NULL
;

1194 
	`evít_lo›
(
iscsi
, &
°©e
);

1196  
°©e
.
èsk
;

1197 
	}
}

1199 
scsi_èsk
 *

1200 
	$iscsi_mode£n£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
,

1201 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1202 
Æloc_Àn
)

1204 
iscsi_sync_°©e
 
°©e
;

1206 
	`mem£t
(&
°©e
, 0, (state));

1208 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
lun
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1209 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1210 
	`iscsi_£t_îr‹
(
iscsi
,

1212  
NULL
;

1215 
	`evít_lo›
(
iscsi
, &
°©e
);

1217  
°©e
.
èsk
;

1218 
	}
}

1220 
scsi_èsk
 *

1221 
	$iscsi_mode£n£10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
ŒbØ
, 
dbd
,

1222 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1223 
Æloc_Àn
)

1225 
iscsi_sync_°©e
 
°©e
;

1227 
	`mem£t
(&
°©e
, 0, (state));

1229 i‡(
	`iscsi_mode£n£10_èsk
(
iscsi
, 
lun
, 
ŒbØ
, 
dbd
, 
pc
,

1230 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1231 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1232 
	`iscsi_£t_îr‹
(
iscsi
,

1234  
NULL
;

1237 
	`evít_lo›
(
iscsi
, &
°©e
);

1239  
°©e
.
èsk
;

1240 
	}
}

	@lib/task_mgmt.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 
	~<°dio.h
>

34 
	~"iscsi.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"scsi-lowÀvñ.h
"

39 
	$iscsi_èsk_mgmt_async
(
iscsi_c⁄ãxt
 *
iscsi
,

40 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

41 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
,

42 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

44 
iscsi_pdu
 *
pdu
;

46 i‡(
iscsi
->
is_loggedö
 == 0) {

47 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÅask-mgmt whileÇot "

52 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_REQUEST
,

53 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
);

54 i‡(
pdu
 =
NULL
) {

55 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÅask mgmtÖdu");

60 
	`iscsi_pdu_£t_immedüã
(
pdu
);

63 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80 | 
fun˘i⁄
);

66 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

69 
	`iscsi_pdu_£t_rôt
(
pdu
, 
rôt
);

72 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

73 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

76 
	`iscsi_pdu_£t_rcmd¢
(
pdu
, 
rcmd¢
);

79 
pdu
->
ˇŒback
 = 
cb
;

80 
pdu
->
¥iv©e_d©a
 =Örivate_data;

82 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

83 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÅaskmgmtÖdu");

84 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

89 
	}
}

92 
	$iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

93 
iscsi_ö_pdu
 *
ö
)

95 
uöt32_t
 
ª•⁄£
, 
maxcmd¢
, 
expcmd¢
;

97 
ª•⁄£
 = 
ö
->
hdr
[2];

99 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

100 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

101 
iscsi
->
maxcmd¢
 = maxcmdsn;

103 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

104 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

105 
iscsi
->
expcmd¢
 =Éxpcmdsn;

108 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
ª•⁄£
,Ödu->
¥iv©e_d©a
);

111 
	}
}

115 
	$iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi_c⁄ãxt
 *
iscsi
,

116 
scsi_èsk
 *
èsk
,

117 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

119 
	`iscsi_scsi_ˇn˚l_èsk
(
iscsi
, 
èsk
);

121  
	`iscsi_èsk_mgmt_async
(
iscsi
,

122 
èsk
->
lun
, 
ISCSI_TM_ABORT_TASK
,

123 
èsk
->
ôt
,Åask->
cmd¢
,

124 
cb
, 
¥iv©e_d©a
);

125 
	}
}

128 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

129 
uöt32_t
 
lun
,

130 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

132 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

134  
	`iscsi_èsk_mgmt_async
(
iscsi
,

135 
lun
, 
ISCSI_TM_ABORT_TASK_SET
,

137 
cb
, 
¥iv©e_d©a
);

138 
	}
}

141 
	$iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

142 
uöt32_t
 
lun
,

143 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

145 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

147  
	`iscsi_èsk_mgmt_async
(
iscsi
,

148 
lun
, 
ISCSI_TM_LUN_RESET
,

150 
cb
, 
¥iv©e_d©a
);

151 
	}
}

154 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

155 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

157 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

159  
	`iscsi_èsk_mgmt_async
(
iscsi
,

160 0, 
ISCSI_TM_TARGET_WARM_RESET
,

162 
cb
, 
¥iv©e_d©a
);

163 
	}
}

167 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

168 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

170 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

172  
	`iscsi_èsk_mgmt_async
(
iscsi
,

173 0, 
ISCSI_TM_TARGET_COLD_RESET
,

175 
cb
, 
¥iv©e_d©a
);

176 
	}
}

	@src/iscsi-inq.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~"iscsi.h
"

31 
	~"scsi-lowÀvñ.h
"

33 #i‚de‡
disˇrd_c⁄°


34 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

37 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-inq";

39 
	$öquúy_block_limôs
(
scsi_öquúy_block_limôs
 *
öq
)

41 
	`¥ötf
("w¢z:%d\n", 
öq
->
w¢z
);

42 
	`¥ötf
("maximum com∑ªánd wrôêÀngth:%d\n", 
öq
->
max_cmp
);

43 
	`¥ötf
("›timÆÅøns„∏Àngth gønuœrôy:%d\n", 
öq
->
›t_gøn
);

44 
	`¥ötf
("maximumÅøns„∏Àngth:%d\n", 
öq
->
max_x„r_Àn
);

45 
	`¥ötf
("›timÆÅøns„∏Àngth:%d\n",
öq
->
›t_x„r_Àn
);

46 
	`¥ötf
("maximumÖª„tch xdªad xdwrôêå™s„∏Àngth:%d\n", 
öq
->
max_¥e„tch
);

47 
	`¥ötf
("maximum unm≠Üb®cou¡:%d\n", 
öq
->
max_unm≠
);

48 
	`¥ötf
("maximum unm≠ block des¸ùt‹ cou¡:%d\n", 
öq
->
max_unm≠_bdc
);

49 
	`¥ötf
("›timÆ unm≠ gønuœrôy:%d\n", 
öq
->
›t_unm≠_gøn
);

50 
	`¥ötf
("ugavÆid:%d\n", 
öq
->
ugavÆid
);

51 
	`¥ötf
("unm≠ gønuœrôyálignmít:%d\n", 
öq
->
unm≠_gøn_Æign
);

52 
	`¥ötf
("maximum wrôêßmêÀngth:%d\n", ()
öq
->
max_ws_Àn
);

53 
	}
}

55 
	$öquúy_logiˇl_block_¥ovisi⁄ög
(
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
)

57 
	`¥ötf
("Thªshﬁd Exp⁄ít:%d\n", 
öq
->
thªshﬁd_exp⁄ít
);

58 
	`¥ötf
("lbpu:%d\n", 
öq
->
lbpu
);

59 
	`¥ötf
("lbpws:%d\n", 
öq
->
lbpws
);

60 
	`¥ötf
("lbpws10:%d\n", 
öq
->
lbpws10
);

61 
	`¥ötf
("lb¥z:%d\n", 
öq
->
lb¥z
);

62 
	`¥ötf
("™c_sup:%d\n", 
öq
->
™c_sup
);

63 
	`¥ötf
("dp:%d\n", 
öq
->
dp
);

64 
	`¥ötf
("¥ovisi⁄ögÅy≥:%d\n", 
öq
->
¥ovisi⁄ög_ty≥
);

65 
	}
}

67 
	$öquúy_block_devi˚_ch¨a˘îi°ics
(
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
)

69 
	`¥ötf
("Medium RŸ©i⁄ R©e:%dRPM\n", 
öq
->
medium_rŸ©i⁄_øã
);

70 
	}
}

72 
	$öquúy_devi˚_idítifiˇti⁄
(
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
)

74 
scsi_öquúy_devi˚_desig«t‹
 *
dev
;

75 
i
;

77 
	`¥ötf
("Peripheral Qualifier:%s\n",

78 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

79 
	`¥ötf
("Peripheral Device Type:%s\n",

80 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

81 
	`¥ötf
("Page Code:(0x%02x) %s\n",

82 
öq
->
∑gecode
, 
	`scsi_öquúy_∑gecode_to_°r
(inq->pagecode));

84 
i
=0, 
dev
 = 
öq
->
desig«t‹s
; dev; i++, dev = dev->
√xt
) {

85 
	`¥ötf
("DEVICE DESIGNATOR #%d\n", 
i
);

86 i‡(
dev
->
piv
 != 0) {

87 
	`¥ötf
("Devi˚ PrŸocﬁ Idítifõr:(%dË%s\n", 
dev
->
¥Ÿocﬁ_idítifõr
, 
	`scsi_¥Ÿocﬁ_idítifõr_to_°r
(dev->protocol_identifier));

89 
	`¥ötf
("CodêSë:(%dË%s\n", 
dev
->
code_£t
, 
	`scsi_code£t_to_°r
(dev->code_set));

90 
	`¥ötf
("PIV:%d\n", 
dev
->
piv
);

91 
	`¥ötf
("Assocüti⁄:(%dË%s\n", 
dev
->
assocüti⁄
, 
	`scsi_assocüti⁄_to_°r
(dev->association));

92 
	`¥ötf
("Desig«t‹ Ty≥:(%dË%s\n", 
dev
->
desig«t‹_ty≥
, 
	`scsi_desig«t‹_ty≥_to_°r
(dev->designator_type));

93 
	`¥ötf
("Desig«t‹:[%s]\n", 
dev
->
desig«t‹
);

95 
	}
}

97 
	$öquúy_unô_£rül_numbî
(
scsi_öquúy_unô_£rül_numbî
 *
öq
)

99 
	`¥ötf
("Unô Sîü»Numbî:[%s]\n", 
öq
->
u¢
);

100 
	}
}

102 
	$öquúy_suµ‹ãd_∑ges
(
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
)

104 
i
;

106 
i
 = 0; i < 
öq
->
num_∑ges
; i++) {

107 
	`¥ötf
("Page:0x%02x %s\n", 
öq
->
∑ges
[
i
], 
	`scsi_öquúy_∑gecode_to_°r
(inq->pages[i]));

109 
	}
}

111 
	$öquúy_°™d¨d
(
scsi_öquúy_°™d¨d
 *
öq
)

113 
i
;

115 
	`¥ötf
("Peripheral Qualifier:%s\n",

116 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

117 
	`¥ötf
("Peripheral Device Type:%s\n",

118 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

119 
	`¥ötf
("RemovabÀ:%d\n", 
öq
->
rmb
);

120 
	`¥ötf
("Vîsi⁄:%d %s\n", 
öq
->
vîsi⁄
, 
	`scsi_vîsi⁄_to_°r
(inq->version));

121 
	`¥ötf
("N‹mACA:%d\n", 
öq
->
n‹maˇ
);

122 
	`¥ötf
("HiSup:%d\n", 
öq
->
hisup
);

123 
	`¥ötf
("Rï⁄£D©aF‹m©:%d\n", 
öq
->
ª•⁄£_d©a_f‹m©
);

124 
	`¥ötf
("SCCS:%d\n", 
öq
->
sccs
);

125 
	`¥ötf
("ACC:%d\n", 
öq
->
acc
);

126 
	`¥ötf
("TPGS:%d\n", 
öq
->
çgs
);

127 
	`¥ötf
("3PC:%d\n", 
öq
->
thªïc
);

128 
	`¥ötf
("PrŸe˘:%d\n", 
öq
->
¥Ÿe˘
);

129 
	`¥ötf
("EncSîv:%d\n", 
öq
->
íc£rv
);

130 
	`¥ötf
("Mu…iP:%d\n", 
öq
->
mu…ù
);

131 
	`¥ötf
("SYNC:%d\n", 
öq
->
sync
);

132 
	`¥ötf
("CmdQue:%d\n", 
öq
->
cmdque
);

133 
	`¥ötf
("Víd‹:%s\n", 
öq
->
víd‹_idítifiˇti⁄
);

134 
	`¥ötf
("Produ˘:%s\n", 
öq
->
¥odu˘_idítifiˇti⁄
);

135 
	`¥ötf
("Revisi⁄:%s\n", 
öq
->
¥odu˘_ªvisi⁄_Àvñ
);

137 
i
 = 0; i < 8; i++) {

138 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0) {

142 
	`¥ötf
("Version Descriptor:%04x %s\n",

143 
öq
->
vîsi⁄_des¸ùt‹
[
i
],

144 
	`scsi_vîsi⁄_des¸ùt‹_to_°r
(

145 
öq
->
vîsi⁄_des¸ùt‹
[
i
]));

147 
	}
}

149 
	$do_öquúy
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
pc
)

151 
scsi_èsk
 *
èsk
;

152 
fuŒ_size
;

153 *
öq
;

156 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 64);

157 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

158 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
	`exô
(10);

162 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

163 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 
fuŒ_size
)Ë=
NULL
) {

168 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

169 
	`exô
(10);

173 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

174 i‡(
öq
 =
NULL
) {

175 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

176 
	`exô
(10);

179 i‡(
evpd
 == 0) {

180 
	`öquúy_°™d¨d
(
öq
);

182 
pc
) {

183 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

184 
	`öquúy_suµ‹ãd_∑ges
(
öq
);

186 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

187 
	`öquúy_unô_£rül_numbî
(
öq
);

189 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

190 
	`öquúy_devi˚_idítifiˇti⁄
(
öq
);

192 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

193 
	`öquúy_block_limôs
(
öq
);

195 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

196 
	`öquúy_block_devi˚_ch¨a˘îi°ics
(
öq
);

198 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

199 
	`öquúy_logiˇl_block_¥ovisi⁄ög
(
öq
);

202 
	`Ârötf
(
°dîr
, "Usuµ‹ãdÖagecode:0x%02x\n", 
pc
);

205 
	`scsi_‰ì_scsi_èsk
(
èsk
);

206 
	}
}

209 
	$¥öt_ußge
()

211 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

213 
	}
}

215 
	$¥öt_hñp
()

217 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [OPTION...] <iscsi-url>\n");

218 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

219 
	`Ârötf
(
°dîr
, " -e, --evpd=integerÉvpd\n");

220 
	`Ârötf
(
°dîr
, " -c, --pagecode=integerÖage code\n");

221 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

222 
	`Ârötf
(
°dîr
, "\n");

223 
	`Ârötf
(
°dîr
, "Help options:\n");

224 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

225 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

226 
	`Ârötf
(
°dîr
, "\n");

227 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

228 
	`Ârötf
(
°dîr
, "\n");

229 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

230 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

231 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

232 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

233 
	}
}

235 
	$maö
(
¨gc
, *
¨gv
[])

237 
iscsi_c⁄ãxt
 *
iscsi
;

238 c⁄° *
uæ
 = 
NULL
;

239 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

240 
evpd
 = 0, 
∑gecode
 = 0;

241 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

242 
c
;

244 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

245 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

246 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

247 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

248 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

249 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

250 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

253 
›ti⁄_ödex
;

255 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:e:c:", 
l⁄g_›ti⁄s
,

256 &
›ti⁄_ödex
)) != -1) {

257 
c
) {

260 
show_hñp
 = 1;

263 
show_ußge
 = 1;

266 
debug
 = 1;

269 
öôüt‹
 = 
›èrg
;

272 
evpd
 = 
	`©oi
(
›èrg
);

275 
∑gecode
 = 
	`©oi
(
›èrg
);

278 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

279 
	`¥öt_hñp
();

280 
	`exô
(0);

284 i‡(
show_hñp
 != 0) {

285 
	`¥öt_hñp
();

286 
	`exô
(0);

289 i‡(
show_ußge
 != 0) {

290 
	`¥öt_ußge
();

291 
	`exô
(0);

294 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

295 i‡(
iscsi
 =
NULL
) {

296 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

297 
	`exô
(10);

300 i‡(
debug
 > 0) {

301 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

302 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

305 i‡(
¨gv
[
›töd
] !
NULL
) {

306 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

308 i‡(
uæ
 =
NULL
) {

309 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

310 
	`¥öt_ußge
();

311 
	`exô
(10);

313 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

315 i‡(
uæ
) {

316 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

319 i‡(
iscsi_uæ
 =
NULL
) {

320 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

321 
	`iscsi_gë_îr‹
(
iscsi
));

322 
	`exô
(10);

325 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

326 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

327 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

329 i‡(
iscsi_uæ
->
u£r
[0]) {

330 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

331 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

332 
	`exô
(10);

336 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

337 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

338 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

339 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

340 
	`exô
(10);

343 
	`do_öquúy
(
iscsi
, 
iscsi_uæ
->
lun
, 
evpd
, 
∑gecode
);

344 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

346 
	`iscsi_logout_sync
(
iscsi
);

347 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

349 
	}
}

	@src/iscsi-ls.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<gë›t.h
>

34 
	~"iscsi.h
"

35 
	~"scsi-lowÀvñ.h
"

37 #i‚de‡
disˇrd_c⁄°


38 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

41 
	gshowluns
;

42 
	gu£uæs
;

43 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

45 
	s˛õ¡_°©e
 {

46 
	mföished
;

47 
	m°©us
;

48 
	mlun
;

49 
	mty≥
;

50 c⁄° *
	mu£∫ame
;

51 c⁄° *
	m∑ssw‹d
;

55 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

57 
pﬁlfd
 
pfd
;

59 
°©e
->
föished
 == 0) {

60 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

61 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

63 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

64 
	`Ârötf
(
°dîr
, "Poll failed");

65 
	`exô
(10);

67 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

68 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
	`exô
(10);

72 
	}
}

74 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

76 
scsi_èsk
 *
èsk
;

77 
scsi_öquúy_°™d¨d
 *
öq
;

78 
ty≥
, 
no_medü
;

79 
size
 = 0;

80 
size_pf
 = 0;

81 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

84 
tur_åy_agaö
:

85 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

86 
	`Ârötf
(
°dîr
, "testunitready failed\n");

87 
	`exô
(10);

89 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

90 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
tur_åy_agaö
;

96 
no_medü
 = 0;

97 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


98 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


99 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

101 
no_medü
 = 1;

102 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

103 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
	`exô
(10);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

112 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

113 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
	`exô
(10);

116 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

117 i‡(
öq
 =
NULL
) {

118 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

119 
	`exô
(10);

121 
ty≥
 = 
öq
->
devi˚_ty≥
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

127 
scsi_ªadˇ∑côy10
 *
rc10
;

129 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

130 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

132 
	`exô
(10);

135 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

136 i‡(
rc10
 =
NULL
) {

137 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

138 
	`exô
(10);

141 
size
 = 
rc10
->
block_size
;

142 
size
 *
rc10
->
lba
;

144 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

145 
size
 /= 1024;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

153 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

154 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

156 i‡(
no_medü
) {

157 
	`¥ötf
(" (No mediaÜoaded)");

159 
	`¥ötf
("\n");

160 
	}
}

162 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

164 
iscsi_c⁄ãxt
 *
iscsi
;

165 
scsi_èsk
 *
èsk
;

166 
scsi_ªp‹éuns_li°
 *
li°
;

167 
fuŒ_ªp‹t_size
;

168 
i
;

170 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

171 i‡(
iscsi
 =
NULL
) {

172 
	`¥ötf
("FailedÅo create context\n");

173 
	`exô
(10);

175 i‡(
˛¡
->
u£∫ame
 !
NULL
) {

176 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
) != 0) {

177 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

178 
	`exô
(10);

181 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

182 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

183 
	`exô
(10);

185 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

186 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

187 i‡(
	`iscsi_c⁄√˘_sync
(
iscsi
, 
p‹èl
) != 0) {

188 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
	`exô
(10);

192 i‡(
	`iscsi_logö_sync
(
iscsi
) != 0) {

193 
	`Ârötf
(
°dîr
, "logö faûed :%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

194 
	`exô
(10);

201 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

202 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

203 
	`exô
(10);

205 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

206 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

211 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

212 
	`exô
(10);

216 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

217 i‡(
li°
 =
NULL
) {

218 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

219 
	`exô
(10);

221 
i
=0; i < ()
li°
->
num
; i++) {

222 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

227 
	}
}

232 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

234 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

236 i‡(
°©us
 != 0) {

237 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

238 
	`exô
(10);

241 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

242 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

243 
	`exô
(10);

246 
°©e
->
föished
 = 1;

247 
	}
}

249 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

251 
iscsi_discovîy_addªss
 *
addr
;

253 i‡(
°©us
 != 0) {

254 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

255 
	`exô
(10);

258 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

259 
iscsi_èrgë_p‹èl
 *
p‹èl
 = 
addr
->
p‹èls
;

261 
p‹èl
 !
NULL
) {

262 i‡(
u£uæs
 =1 && 
showluns
 == 0) {

263 
	`¥ötf
("iscsi://%s/%s/0\n", 
p‹èl
->p‹èl, 
addr
->
èrgë_«me
);

265 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
, 
p‹èl
->portal);

267 i‡(
showluns
 != 0) {

268 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
, 
p‹èl
->portal);

270 
p‹èl
 =Ö‹èl->
√xt
;

274 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

275 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

276 
	`exô
(10);

278 
	}
}

281 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

283 i‡(
°©us
 != 0) {

284 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

285 
	`exô
(10);

288 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

289 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

290 
	`exô
(10);

292 
	}
}

294 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

296 i‡(
°©us
 != 0) {

297 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

298 
	`exô
(10);

301 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

302 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

303 
	`exô
(10);

305 
	}
}

307 
	$¥öt_ußge
()

309 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

311 
	}
}

313 
	$¥öt_hñp
()

315 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

316 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

317 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

318 
	`Ârötf
(
°dîr
, " --url OutputÅargets in URL format\n");

319 
	`Ârötf
(
°dîr
, " (doesÇot work with -s)\n");

320 
	`Ârötf
(
°dîr
, "\n");

321 
	`Ârötf
(
°dîr
, "Help options:\n");

322 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

323 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

324 
	`Ârötf
(
°dîr
, "\n");

325 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

326 
	`Ârötf
(
°dîr
, "\n");

327 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

328 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

329 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

330 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

331 
	}
}

333 
	$maö
(
¨gc
, *
¨gv
[])

335 
iscsi_c⁄ãxt
 *
iscsi
;

336 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

337 
˛õ¡_°©e
 
°©e
;

338 c⁄° *
uæ
 = 
NULL
;

339 
c
;

340 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

342 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

343 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

344 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

345 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

346 {"show-luns", 
no_¨gumít
, 
NULL
, 's'},

347 {"uæ", 
no_¨gumít
, 
NULL
, 'U'},

348 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

351 
›ti⁄_ödex
;

353 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

354 &
›ti⁄_ödex
)) != -1) {

355 
c
) {

358 
show_hñp
 = 1;

361 
show_ußge
 = 1;

364 
u£uæs
 = 1;

367 
debug
 = 1;

370 
öôüt‹
 = 
›èrg
;

373 
showluns
 = 1;

376 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

377 
	`¥öt_hñp
();

378 
	`exô
(0);

382 i‡(
show_hñp
 != 0) {

383 
	`¥öt_hñp
();

384 
	`exô
(0);

387 i‡(
show_ußge
 != 0) {

388 
	`¥öt_ußge
();

389 
	`exô
(0);

392 i‡(
›töd
 !
¨gc
 -1) {

393 
	`¥öt_ußge
();

394 
	`exô
(0);

397 
	`mem£t
(&
°©e
, 0, (state));

399 i‡(
¨gv
[
›töd
] !
NULL
) {

400 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

402 i‡(
uæ
 =
NULL
) {

403 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

404 
	`¥öt_ußge
();

405 
	`exô
(10);

408 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

409 i‡(
iscsi
 =
NULL
) {

410 
	`¥ötf
("FailedÅo create context\n");

411 
	`exô
(10);

414 i‡(
debug
 > 0) {

415 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

416 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

419 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

421 i‡(
uæ
) {

422 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

425 i‡(
iscsi_uæ
 =
NULL
) {

426 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

427 
	`iscsi_gë_îr‹
(
iscsi
));

428 
	`exô
(10);

431 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

433 i‡(
iscsi_uæ
->
u£r
[0]) {

434 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

435 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

436 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

437 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

438 
	`exô
(10);

441 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

442 
	`Ârötf
(
°dîr
, "iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

443 
	`exô
(10);

446 
	`evít_lo›
(
iscsi
, &
°©e
);

448 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

449 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

451 
	}
}

	@src/iscsi-readcapacity16.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

22 
	~<öây≥s.h
>

23 
	~<°rög.h
>

24 
	~<pﬁl.h
>

25 
	~<gë›t.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

29 #i‚de‡
disˇrd_c⁄°


30 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

33 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-readcapacity16";

35 
	$¥öt_ußge
()

37 
	`Ârötf
(
°dîr
, "Usage: iscsi-readcapacity16 [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name] [-s] <iscsi-url>\n");

38 
	}
}

40 
	$¥öt_hñp
()

42 
	`Ârötf
(
°dîr
, "Usage: iscsi_readcapacity16 [OPTION...] <iscsi-url>\n");

43 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

44 
	`Ârötf
(
°dîr
, " -s, --sizeÖrintÅarget size only\n");

45 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

46 
	`Ârötf
(
°dîr
, "\n");

47 
	`Ârötf
(
°dîr
, "Help options:\n");

48 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

49 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

50 
	`Ârötf
(
°dîr
, "\n");

51 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

54 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

55 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

56 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

57 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
iscsi_c⁄ãxt
 *
iscsi
;

62 c⁄° *
uæ
 = 
NULL
;

63 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

64 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0, 
size_⁄ly
=0;

65 
c
;

66 
scsi_èsk
 *
èsk
;

67 
scsi_ªadˇ∑côy16
 *
rc16
;

69 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

70 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

71 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

72 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

73 {"size", 
no_¨gumít
, 
NULL
, 's'},

74 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

75 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

76 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

79 
›ti⁄_ödex
;

81 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s", 
l⁄g_›ti⁄s
,

82 &
›ti⁄_ödex
)) != -1) {

83 
c
) {

86 
show_hñp
 = 1;

89 
show_ußge
 = 1;

92 
size_⁄ly
 = 1;

95 
debug
 = 1;

98 
öôüt‹
 = 
›èrg
;

101 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

102 
	`¥öt_hñp
();

103 
	`exô
(0);

107 i‡(
show_hñp
 != 0) {

108 
	`¥öt_hñp
();

109 
	`exô
(0);

112 i‡(
show_ußge
 != 0) {

113 
	`¥öt_ußge
();

114 
	`exô
(0);

117 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

118 i‡(
iscsi
 =
NULL
) {

119 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

120 
	`exô
(10);

123 i‡(
debug
 > 0) {

124 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

125 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

128 i‡(
¨gv
[
›töd
] !
NULL
) {

129 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

131 i‡(
uæ
 =
NULL
) {

132 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

133 
	`¥öt_ußge
();

134 
	`exô
(10);

136 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

138 i‡(
uæ
) {

139 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

142 i‡(
iscsi_uæ
 =
NULL
) {

143 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

144 
	`iscsi_gë_îr‹
(
iscsi
));

145 
	`exô
(10);

148 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

149 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

150 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

152 i‡(
iscsi_uæ
->
u£r
[0]) {

153 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

154 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

155 
	`exô
(10);

159 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

160 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

162 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

163 
	`exô
(10);

166 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

167 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`Ârötf
(
°dîr
,"failedÅo sendÑeadcapacity command\n");

169 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

171 
	`exô
(10);

174 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

175 i‡(
rc16
 =
NULL
) {

176 
	`Ârötf
(
°dîr
,"failedÅo unmarshallÑeadcapacity16 data\n");

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

179 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

180 
	`exô
(10);

183 i‡(!
size_⁄ly
) {

184 
	`¥ötf
("RETURNED LOGICAL BLOCK ADDRESS:%" 
PRIu64
 "\n", 
rc16
->
ªtu∫ed_lba
);

185 
	`¥ötf
("LOGICAL BLOCK LENGTH IN BYTES:%u\n", 
rc16
->
block_Àngth
);

186 
	`¥ötf
("P_TYPE:%d PROT_EN:%d\n", 
rc16
->
p_ty≥
,Ñc16->
¥Ÿ_í
);

187 
	`¥ötf
("P_I_EXPONENT:%d LOGICAL BLOCKS PER PHYSICAL BLOCK EXPONENT:%d\n", 
rc16
->
p_i_exp
,Ñc16->
lbµbe
);

188 
	`¥ötf
("LBPME:%d LBPRZ:%d\n", 
rc16
->
lbpme
,Ñc16->
lb¥z
);

189 
	`¥ötf
("LOWEST ALIGNED LOGICAL BLOCK ADDRESS:%d\n", 
rc16
->
œlba
);

191 
	`¥ötf
("TŸÆ size:%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

195 
	`¥ötf
("%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

198 
	`scsi_‰ì_scsi_èsk
(
èsk
);

199 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

201 
	`iscsi_logout_sync
(
iscsi
);

202 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

204 
	}
}

	@src/iscsi-swp.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~"iscsi.h
"

31 
	~"scsi-lowÀvñ.h
"

33 #i‚de‡
disˇrd_c⁄°


34 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

37 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-swp";

40 
	$¥öt_ußge
()

42 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

44 
	}
}

46 
	$¥öt_hñp
()

48 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [OPTION...] <iscsi-url>\n");

49 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

50 
	`Ârötf
(
°dîr
, " -s, --swp={on|off} Turn software writeÖrotect on/off\n");

51 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "Help options:\n");

54 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

55 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

56 
	`Ârötf
(
°dîr
, "\n");

57 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

58 
	`Ârötf
(
°dîr
, "\n");

59 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

60 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

61 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

62 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

63 
	}
}

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
iscsi_c⁄ãxt
 *
iscsi
;

68 c⁄° *
uæ
 = 
NULL
;

69 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

70 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

71 
c
;

72 
ªt
 = 0;

73 
swp
 = 0;

74 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

75 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

76 
scsi_mode_£n£
 *
ms
;

77 
scsi_mode_∑ge
 *
mp
;

79 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

80 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

81 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

82 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

83 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

84 {"swp", 
ªquúed_¨gumít
, 
NULL
, 's'},

87 
›ti⁄_ödex
;

89 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s:", 
l⁄g_›ti⁄s
,

90 &
›ti⁄_ödex
)) != -1) {

91 
c
) {

94 
show_hñp
 = 1;

97 
show_ußge
 = 1;

100 
debug
 = 1;

103 
öôüt‹
 = 
›èrg
;

106 i‡(!
	`°rcmp
(
›èrg
, "on") || !strcmp(optarg, "ON")) {

107 
swp
 = 1;

109 i‡(!
	`°rcmp
(
›èrg
, "off") || !strcmp(optarg, "OFF")) {

110 
swp
 = 2;

114 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

115 
	`¥öt_hñp
();

116 
	`exô
(0);

120 i‡(
show_hñp
 != 0) {

121 
	`¥öt_hñp
();

122 
	`exô
(0);

125 i‡(
show_ußge
 != 0) {

126 
	`¥öt_ußge
();

127 
	`exô
(0);

130 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

131 i‡(
iscsi
 =
NULL
) {

132 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

133 
	`exô
(10);

136 i‡(
debug
 > 0) {

137 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

138 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

141 i‡(
¨gv
[
›töd
] !
NULL
) {

142 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

144 i‡(
uæ
 =
NULL
) {

145 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

146 
	`¥öt_ußge
();

147 
ªt
 = 10;

148 
föished
;

150 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

152 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

154 i‡(
iscsi_uæ
 =
NULL
) {

155 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

156 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = 10;

158 
föished
;

161 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

162 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

163 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

165 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

166 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

167 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

168 
ªt
 = 10;

169 
föished
;

173 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

174 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = 10;

176 
föished
;

180 
£n£_èsk
 = 
	`iscsi_mode£n£10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

181 0, 1, 
SCSI_MODESENSE_PC_CURRENT
,

182 
SCSI_MODEPAGE_CONTROL
,

184 i‡(
£n£_èsk
 =
NULL
) {

185 
	`¥ötf
("FailedÅo send MODE_SENSE10 command: %s\n",

186 
	`iscsi_gë_îr‹
(
iscsi
));

187 
ªt
 = 10;

188 
föished
;

190 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

191 
	`¥ötf
("MODE_SENSE10 failed: %s\n",

192 
	`iscsi_gë_îr‹
(
iscsi
));

193 
ªt
 = 10;

194 
föished
;

196 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

197 i‡(
ms
 =
NULL
) {

198 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

199 
ªt
 = 10;

200 
föished
;

202 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

203 i‡(
mp
 =
NULL
) {

204 
	`¥ötf
("failedÅoÑead control modeÖage\n");

205 
ªt
 = 10;

206 
föished
;

209 
	`¥ötf
("SWP:%d\n", 
mp
->
c⁄åﬁ
.
swp
);

211 
swp
) {

213 
mp
->
c⁄åﬁ
.
swp
 = 1;

216 
mp
->
c⁄åﬁ
.
swp
 = 0;

219 
föished
;

222 
	`¥ötf
("Tu∫ög SWP %s\n", (
swp
 == 1) ? "ON" : "OFF");

223 
£À˘_èsk
 = 
	`iscsi_mode£À˘10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

224 1, 0, 
mp
);

225 i‡(
£À˘_èsk
 =
NULL
) {

226 
	`¥ötf
("FailedÅo send MODE_SELECT10 command: %s\n",

227 
	`iscsi_gë_îr‹
(
iscsi
));

228 
ªt
 = 10;

229 
föished
;

231 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

232 
	`¥ötf
("MODE_SELECT10 failed: %s\n",

233 
	`iscsi_gë_îr‹
(
iscsi
));

234 
ªt
 = 10;

235 
föished
;

239 
föished
:

240 i‡(
£n£_èsk
 !
NULL
) {

241 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

243 i‡(
£À˘_èsk
 !
NULL
) {

244 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

246 i‡(
iscsi_uæ
 !
NULL
) {

247 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

249 
	`iscsi_logout_sync
(
iscsi
);

250 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

251  
ªt
;

252 
	}
}

	@src/ld_iscsi.c

18 
	#_GNU_SOURCE


	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<°dio.h
>

27 
	~<asm/f˙é.h
>

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

33 
	~<sys/sysˇŒ.h
>

34 
	~<dlf˙.h
>

36 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:ld-iscsi";

38 
	#ISCSI_MAX_FD
 255

	)

40 
	gdebug
 = 0;

42 
	#LD_ISCSI_DPRINTF
(
Àvñ
,
fmt
,
¨gs
...Ëdÿ{ i‡((
debug
Ë>ÀvñË{
	`Ârötf
(
°dîr
,"ld_iscsi: ");Ârötf(°dîr, (fmt), ##¨gs); f¥ötf(°dîr,"\n");} } 0);

	)

44 
	siscsi_fd_li°
 {

45 
	mis_iscsi
;

46 
	mdup2fd
;

47 
	mö_Êight
;

48 
iscsi_c⁄ãxt
 *
	miscsi
;

49 
	mlun
;

50 
uöt32_t
 
	mblock_size
;

51 
uöt64_t
 
	mnum_blocks
;

52 
off_t
 
	moff£t
;

53 
mode_t
 
	mmode
;

54 
	mgë_lba_°©us
;

55 
scsi_lba_°©us_des¸ùt‹
 
	mlbasd_ˇched
;

56 
	mlbasd_ˇche_vÆid
;

59 
iscsi_fd_li°
 
	giscsi_fd_li°
[
ISCSI_MAX_FD
];

61 (*
ªÆ_›í
)(
__c⁄°
 *
∑th
, 
Êags
, 
mode_t
 
mode
);

63 
	$›í
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

65 
fd
;

67 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

68 
iscsi_c⁄ãxt
 *
iscsi
;

69 
iscsi_uæ
 *iscsi_url;

70 
scsi_èsk
 *
èsk
;

71 
scsi_ªadˇ∑côy16
 *
rc16
;

73 i‡(
mode
 & 
O_NONBLOCK
) {

74 
	`LD_ISCSI_DPRINTF
(0,"Non-blocking I/O is currentlyÇot supported");

75 
î∫o
 = 
EINVAL
;

79 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

80 i‡(
iscsi
 =
NULL
) {

81 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo create context");

82 
î∫o
 = 
ENOMEM
;

86 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
∑th
);

87 i‡(
iscsi_uæ
 =
NULL
) {

88 
	`LD_ISCSI_DPRINTF
(0,"FaûedÅÿ∑r£ URL: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90 
î∫o
 = 
EINVAL
;

94 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

95 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

96 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

98 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

99 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

100 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo set initiator usernameándÖassword");

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102 
î∫o
 = 
ENOMEM
;

107 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

108 
	`LD_ISCSI_DPRINTF
(0,"Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

110 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

111 
î∫o
 = 
EIO
;

115 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

116 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

117 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑeadcapacity command");

118 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

119 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

120 
î∫o
 = 
EIO
;

124 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

125 i‡(
rc16
 =
NULL
) {

126 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshallÑeadcapacity10 data");

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

129 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

130 
î∫o
 = 
EIO
;

134 
	`LD_ISCSI_DPRINTF
(4,"ªadˇ∑côy16_sync: block_size: %d,Çum_blocks: %lu",
rc16
->
block_Àngth
,rc16->
ªtu∫ed_lba
 + 1);

136 
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

137 i‡(
fd
 >
ISCSI_MAX_FD
) {

138 
	`LD_ISCSI_DPRINTF
(0,"Too many files open");

139 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

140 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

141 
î∫o
 = 
ENFILE
;

145 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 1;

146 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

147 
iscsi_fd_li°
[
fd
].
iscsi
 = iscsi;

148 
iscsi_fd_li°
[
fd
].
block_size
 = 
rc16
->
block_Àngth
;

149 
iscsi_fd_li°
[
fd
].
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

150 
iscsi_fd_li°
[
fd
].
off£t
 = 0;

151 
iscsi_fd_li°
[
fd
].
lun
 = 
iscsi_uæ
->lun;

152 
iscsi_fd_li°
[
fd
].
mode
 = mode;

154 i‡(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"Ë!
NULL
) {

155 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 
	`©oi
(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"));

156 i‡(
rc16
->
lbpme
 == 0){

157 
	`LD_ISCSI_DPRINTF
(1,"Logical unit is fullyÖrovisioned. Will skip get_lba_statusÅasks");

158 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 0;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

163 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

165  
fd
;

168  
	`ªÆ_›í
(
∑th
, 
Êags
, 
mode
);

169 
	}
}

171 
	$›í64
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

173  
	`›í
(
∑th
, 
Êags
 | 
O_LARGEFILE
, 
mode
);

174 
	}
}

176 (*
ªÆ_˛o£
)(
fd
);

178 
	$˛o£
(
fd
)

180 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

181 
i
;

183 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

184 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

185 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

186 
	`ªÆ_˛o£
(
fd
);

191 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

192 i‡(
iscsi_fd_li°
[
i
].
dup2fd
 =
fd
) {

196 i‡(
i
 < 
ISCSI_MAX_FD
) {

197 
j
;

202 
	`mem˝y
(&
iscsi_fd_li°
[
i
], &iscsi_fd_li°[
fd
], (iscsi_fd_list));

203 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

205 
	`mem£t
(&
iscsi_fd_li°
[
fd
], 0, (iscsi_fd_list));

206 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

208 
iscsi_fd_li°
[
i
].
iscsi
->
fd
 = i;

209 
	`ªÆ_˛o£
(
fd
);

211 
j
 = 0; j < 
ISCSI_MAX_FD
; j++) {

212 i‡(
j
 !
i
 && 
iscsi_fd_li°
[j].
dup2fd
 =
fd
) {

213 
iscsi_fd_li°
[
j
].
dup2fd
 = 
i
;

220 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

221 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

222 
	`iscsi_de°roy_c⁄ãxt
(
iscsi_fd_li°
[
fd
].
iscsi
);

223 
iscsi_fd_li°
[
fd
].
iscsi
 = 
NULL
;

228  
	`ªÆ_˛o£
(
fd
);

229 
	}
}

231 (*
ªÆ_fx°©
)(
vî
, 
fd
, 
°©
 *
buf
);

233 
	$__fx°©
(
vî
, 
fd
, 
°©
 *
buf
)

235 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

236 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

237  
	`__fx°©
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

240 
	`mem£t
(
buf
, 0, (
°©
));

241 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

242 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

247  
	`ªÆ_fx°©
(
vî
, 
fd
, 
buf
);

248 
	}
}

251 (*
ªÆ_lx°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

253 
	$__lx°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

255 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

256 
fd
, 
ªt
;

258 
fd
 = 
	`›í
(
∑th
, 0, 0);

259 i‡(
fd
 == -1) {

260  
fd
;

263 
ªt
 = 
	`__fx°©
(
vî
, 
fd
, 
buf
);

264 
	`˛o£
(
fd
);

265  
ªt
;

268  
	`ªÆ_lx°©
(
vî
, 
∑th
, 
buf
);

269 
	}
}

271 (*
ªÆ_x°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

273 
	$__x°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

275  
	`__lx°©
(
vî
, 
∑th
, 
buf
);

276 
	}
}

278 
	$off_t
 (*
ªÆ_l£ek
)(
fd
, 
off_t
 
off£t
, 
whí˚
);

280 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

281 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

282 
off_t
 
√w_off£t
;

283 
off_t
 
size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
*iscsi_fd_li°[fd].
block_size
;

284 
whí˚
) {

285 
SEEK_SET
:

286 
√w_off£t
 = 
off£t
;

288 
SEEK_CUR
:

289 
√w_off£t
 = 
iscsi_fd_li°
[
fd
].
off£t
+offset;

291 
SEEK_END
:

292 
√w_off£t
 = 
size
 + 
off£t
;

295 
î∫o
 = 
EINVAL
;

298 i‡(
√w_off£t
 < 0 ||Çew_off£à> 
size
) {

299 
î∫o
 = 
EINVAL
;

302 
iscsi_fd_li°
[
fd
].
off£t
=
√w_off£t
;

303  
iscsi_fd_li°
[
fd
].
off£t
;

306  
	`ªÆ_l£ek
(
fd
, 
off£t
, 
whí˚
);

307 
	}
}

309 
	$ssize_t
 (*
ªÆ_ªad
)(
fd
, *
buf
, 
size_t
 
cou¡
);

311 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

313 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

314 
uöt64_t
 
off£t
;

315 
uöt64_t
 
num_blocks
, 
lba
;

316 
scsi_èsk
 *
èsk
;

317 
scsi_gë_lba_°©us
 *
lbas
;

319 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

320  
	`ªad
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

322 
off£t
 = 
iscsi_fd_li°
[
fd
].off£à/ iscsi_fd_li°[fd].
block_size
 * iscsi_fd_list[fd].block_size;

323 
num_blocks
 = (
iscsi_fd_li°
[
fd
].
off£t
 - off£à+ 
cou¡
 + iscsi_fd_li°[fd].
block_size
 - 1) / iscsi_fd_list[fd].block_size;

324 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

327 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

331 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

332 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

333 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

336 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

337 i‡(
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 != 0) {

338 
uöt32_t
 
i
;

339 
uöt32_t
 
_num_Æloˇãd
=0;

340 
uöt32_t
 
_num_blocks
=0;

342 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
==1) {

343 
	`LD_ISCSI_DPRINTF
(5,"ˇched gë_lba_°©us_des¸ùt‹ i†lb®%lu,Çum_block†%d,Örovisi⁄ög %d",
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
lba
,iscsi_fd_li°[fd].lbasd_ˇched.
num_blocks
,iscsi_fd_li°[fd].lbasd_ˇched.
¥ovisi⁄ög
);

344 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
¥ovisi⁄ög
 !0x00 && 
lba
 >iscsi_fd_li°[fd].lbasd_ˇched.lb®&&Üba+
num_blocks
 < iscsi_fd_list[fd].lbasd_cached.lba+iscsi_fd_list[fd].lbasd_cached.num_blocks)

346 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

347 
	`mem£t
(
buf
, 0x00, 
cou¡
);

348 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

349 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

350  
cou¡
;

353 
	`LD_ISCSI_DPRINTF
(4,"gë_lba_°©us_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
);

354 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 8+16);

355 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

356 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send get_lba_status command");

357 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

358 
î∫o
 = 
EIO
;

361 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

362 i‡(
lbas
 =
NULL
) {

363 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshall get_lba_status data");

364 
	`scsi_‰ì_scsi_èsk
(
èsk
);

365 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

366 
î∫o
 = 
EIO
;

370 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us:Çum_des¸ùt‹s: %d",
lbas
->
num_des¸ùt‹s
);

371 
i
=0;i<
lbas
->
num_des¸ùt‹s
;i++) {

372 
scsi_lba_°©us_des¸ùt‹
 *
lbasd
 = &
lbas
->
des¸ùt‹s
[
i
];

373 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us_des¸ùt‹ %d,Üb®%lu,Çum_block†%d,Örovisi⁄ög %d",
i
,
lbasd
->
lba
,lbasd->
num_blocks
,lbasd->
¥ovisi⁄ög
);

374 i‡(
lbasd
->
lba
 !
_num_blocks
+lba) {

375 
	`LD_ISCSI_DPRINTF
(0,"get_lba_statusÑesponse isÇon-continuous");

376 
	`scsi_‰ì_scsi_èsk
(
èsk
);

377 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

378 
î∫o
 = 
EIO
;

381 
_num_Æloˇãd
+=(
lbasd
->
¥ovisi⁄ög
==0x00)?lbasd->
num_blocks
:0;

382 
_num_blocks
+=
lbasd
->
num_blocks
;

383 
iscsi_fd_li°
[
fd
].
lbasd_ˇched
=
lbas
->
des¸ùt‹s
[
i
];

384 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
=1;

386 
	`scsi_‰ì_scsi_èsk
(
èsk
);

387 i‡(
_num_Æloˇãd
 =0 && 
_num_blocks
 >
num_blocks
) {

388 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

389 
	`mem£t
(
buf
, 0x00, 
cou¡
);

390 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

391 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

392  
cou¡
;

396 
	`LD_ISCSI_DPRINTF
(4,"ªad16_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

398 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 
num_blocks
 * iscsi_fd_li°[fd].
block_size
, iscsi_fd_list[fd].block_size, 0, 0, 0, 0, 0);

399 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

400 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

401 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑead16 command");

402 
î∫o
 = 
EIO
;

406 
	`mem˝y
(
buf
, &
èsk
->
d©aö
.
d©a
[
iscsi_fd_li°
[
fd
].
off£t
 - off£t], 
cou¡
);

407 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

409 
	`scsi_‰ì_scsi_èsk
(
èsk
);

411  
cou¡
;

414  
	`ªÆ_ªad
(
fd
, 
buf
, 
cou¡
);

415 
	}
}

417 
	$ssize_t
 (*
ªÆ_¥ód
)(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

418 
ssize_t
 
	$¥ód
(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

419 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

420 
off_t
 
ﬁd_off£t
;

421 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

422 
î∫o
 = 
EIO
;

425 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

428 i‡(
	`ªad
(
fd
, 
buf
, 
cou¡
) < 0) {

429 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

432 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

433  
cou¡
;

435  
	`ªÆ_¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

436 
	}
}

438 
	$ssize_t
 (*
ªÆ_wrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

440 
ssize_t
 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

442 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

443 
uöt64_t
 
off£t
;

444 
uöt64_t
 
num_blocks
, 
lba
;

445 
scsi_èsk
 *
èsk
;

447 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

448  
	`wrôe
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

450 i‡(
iscsi_fd_li°
[
fd
].
off£t
%iscsi_fd_li°[fd].
block_size
) {

451 
î∫o
 = 
EINVAL
;

454 i‡(
cou¡
%
iscsi_fd_li°
[
fd
].
block_size
) {

455 
î∫o
 = 
EINVAL
;

459 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
 = 0;

461 
off£t
 = 
iscsi_fd_li°
[
fd
].offset;

462 
num_blocks
 = 
cou¡
/
iscsi_fd_li°
[
fd
].
block_size
;

463 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

466 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

470 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

471 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

472 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

475 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

476 
	`LD_ISCSI_DPRINTF
(4,"wrôe16_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

477 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, (*Ë
buf
, 
cou¡
, iscsi_fd_li°[fd].
block_size
, 0, 0, 0, 0, 0);

478 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

479 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

480 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send write16 command");

481 
î∫o
 = 
EIO
;

485 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

486 
	`scsi_‰ì_scsi_èsk
(
èsk
);

488  
cou¡
;

491  
	`ªÆ_wrôe
(
fd
, 
buf
, 
cou¡
);

492 
	}
}

494 
	$ssize_t
 (*
ªÆ_pwrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

495 
ssize_t
 
	$pwrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

496 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

497 
off_t
 
ﬁd_off£t
;

498 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

499 
î∫o
 = 
EIO
;

502 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

505 i‡(
	`wrôe
(
fd
, 
buf
, 
cou¡
) < 0) {

506 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

509 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

510  
cou¡
;

512  
	`ªÆ_pwrôe
(
fd
, 
buf
, 
cou¡
, 
off£t
);

513 
	}
}

515 (*
ªÆ_dup2
)(
ﬁdfd
, 
√wfd
);

517 
	$dup2
(
ﬁdfd
, 
√wfd
)

519 i‡(
iscsi_fd_li°
[
√wfd
].
is_iscsi
) {

520  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

523 
	`˛o£
(
√wfd
);

525 i‡(
iscsi_fd_li°
[
ﬁdfd
].
is_iscsi
 == 1) {

526 
ªt
;

527 i‡(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
 >= 0) {

528  
	`dup2
(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
, 
√wfd
);

531 
ªt
 = 
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

532 i‡(
ªt
 < 0) {

533  
ªt
;

536 
iscsi_fd_li°
[
√wfd
].
is_iscsi
 = 1;

537 
iscsi_fd_li°
[
√wfd
].
dup2fd
 = 
ﬁdfd
;

539  
√wfd
;

542  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

543 
	}
}

546 (*
ªÆ_fx°©64
)(
vî
, 
fd
, 
°©64
 *
buf
);

548 
	$__fx°©64
(
vî
, 
fd
, 
°©64
 *
buf
)

550 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

551 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

552  
	`__fx°©64
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

555 
	`mem£t
(
buf
, 0, (
°©64
));

556 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

557 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

561  
	`ªÆ_fx°©64
(
vî
, 
fd
, 
buf
);

562 
	}
}

565 (*
ªÆ_lx°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

567 
	$__lx°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

569 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

570 
fd
, 
ªt
;

572 
fd
 = 
	`›í64
(
∑th
, 0, 0);

573 i‡(
fd
 == -1) {

574  
fd
;

577 
ªt
 = 
	`__fx°©64
(
vî
, 
fd
, 
buf
);

578 
	`˛o£
(
fd
);

579  
ªt
;

582  
	`ªÆ_lx°©64
(
vî
, 
∑th
, 
buf
);

583 
	}
}

586 (*
ªÆ_x°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

588 
	$__x°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

590  
	`__lx°©64
(
vî
, 
∑th
, 
buf
);

591 
	}
}

594 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$_öô
()

596 
i
;

598 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

599 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

602 i‡(
	`gëív
("LD_ISCSI_DEBUG"Ë!
NULL
) {

603 
debug
 = 
	`©oi
(
	`gëív
("LD_ISCSI_DEBUG"));

606 
ªÆ_›í
 = 
	`dlsym
(
RTLD_NEXT
, "open");

607 i‡(
ªÆ_›í
 =
NULL
) {

608 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(open)");

609 
	`exô
(10);

612 
ªÆ_˛o£
 = 
	`dlsym
(
RTLD_NEXT
, "close");

613 i‡(
ªÆ_˛o£
 =
NULL
) {

614 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(close)");

615 
	`exô
(10);

618 
ªÆ_fx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat");

619 i‡(
ªÆ_fx°©
 =
NULL
) {

620 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat)");

621 
	`exô
(10);

624 
ªÆ_lx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat");

625 i‡(
ªÆ_lx°©
 =
NULL
) {

626 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__lxstat)");

627 
	`exô
(10);

629 
ªÆ_x°©
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat");

630 i‡(
ªÆ_x°©
 =
NULL
) {

631 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat)");

632 
	`exô
(10);

635 
ªÆ_l£ek
 = 
	`dlsym
(
RTLD_NEXT
, "lseek");

636 i‡(
ªÆ_l£ek
 =
NULL
) {

637 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(lseek)");

638 
	`exô
(10);

641 
ªÆ_ªad
 = 
	`dlsym
(
RTLD_NEXT
, "read");

642 i‡(
ªÆ_ªad
 =
NULL
) {

643 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(read)");

644 
	`exô
(10);

647 
ªÆ_¥ód
 = 
	`dlsym
(
RTLD_NEXT
, "pread");

648 i‡(
ªÆ_¥ód
 =
NULL
) {

649 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pread)");

650 
	`exô
(10);

653 
ªÆ_wrôe
 = 
	`dlsym
(
RTLD_NEXT
, "write");

654 i‡(
ªÆ_wrôe
 =
NULL
) {

655 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(write)");

656 
	`exô
(10);

659 
ªÆ_pwrôe
 = 
	`dlsym
(
RTLD_NEXT
, "pwrite");

660 i‡(
ªÆ_pwrôe
 =
NULL
) {

661 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pwrite)");

662 
	`exô
(10);

665 
ªÆ_dup2
 = 
	`dlsym
(
RTLD_NEXT
, "dup2");

666 i‡(
ªÆ_dup2
 =
NULL
) {

667 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(dup2)");

668 
	`exô
(10);

671 
ªÆ_fx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat64");

672 i‡(
ªÆ_fx°©64
 =
NULL
) {

673 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat64)");

676 
ªÆ_lx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat64");

677 i‡(
ªÆ_lx°©64
 =
NULL
) {

678 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(_lxstat64)");

681 
ªÆ_x°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat64");

682 i‡(
ªÆ_x°©64
 =
NULL
) {

683 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat64)");

685 
	}
}

	@test-tool/0000_testunitready_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0000_ã°unôªady_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0000_testunitready_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic TESTUNITREADY functionality.\n");

32 
	`¥ötf
("1, Verify TESTUNITREADY works.\n");

33 
	`¥ötf
("\n");

37 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

38 i‡(
iscsi
 =
NULL
) {

39 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

43 
ªt
=0;

45 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

46 i‡(
ªt
 != 0) {

47 
föished
;

50 
föished
:

51 
	`iscsi_logout_sync
(
iscsi
);

52 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

53  
ªt
;

54 
	}
}

	@test-tool/0100_read10_simple.c

19 
	~<°dio.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0100_ªad10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

30 
	`¥ötf
("0100_read10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic READ10 functionality.\n");

34 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Reading first 1-256 blocks ... ");

51 
i
=1; i<=256; i++) {

52 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

53 i‡(
èsk
 =
NULL
) {

54 
	`¥ötf
("[FAILED]\n");

55 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

56 
ªt
 = -1;

57 
föished
;

59 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
föished
;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
	`¥ötf
("[OK]\n");

72 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

73 
i
=1; i<=256; i++) {

74 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
	`¥ötf
("[OK]\n");

93 
föished
:

94 
	`iscsi_logout_sync
(
iscsi
);

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96  
ªt
;

97 
	}
}

	@test-tool/0101_read10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0101_ªad10_bey⁄d_eﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0101_read10_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ10 fails whenÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^31\n");

36 
	`¥ötf
("3, Read 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("4, Read 2-256 blocksáll but one beyondÉnd-of-lun.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 >= 0x80000000) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ10. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

58 
	`¥ötf
("ReadingÜast 1-256 blocks one block beyondÉol ... ");

59 
i
=1; i<=256; i++) {

60 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("READ10 beyondÉnd-of-lun didÇot fail with sense.\n");

70 
ªt
 = -1;

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


75 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


76 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

89 
	`¥ötf
("Reaing 1-256 blocksát LBA 2^31 ... ");

90 
i
 = 1; i <= 256; i++) {

91 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0x80000000, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
föished
;

98 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("READ10 command should fail whenÑeading from LBA 2^31\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


106 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


107 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("READ10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`¥ötf
("[OK]\n");

120 
	`¥ötf
("Read 1-256 blocksát LBA -1 ... ");

121 
i
 = 1; i <= 256; i++) {

122 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

123 i‡(
èsk
 =
NULL
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

126 
ªt
 = -1;

127 
föished
;

129 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("READ10 command should fail whenÑeadingát LBA -1\n");

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


137 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


138 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("READ10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 
	`scsi_‰ì_scsi_èsk
(
èsk
);

147 
	`¥ötf
("[OK]\n");

151 
	`¥ötf
("Reading 1-255 blocks beyondÉol startingátÜast block ... ");

152 
i
=2; i<=256; i++) {

153 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

154 i‡(
èsk
 =
NULL
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
föished
;

160 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("READ10 beyondÉnd-of-lun didÇotÑeturn sense.\n");

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


168 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


169 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
föished
:

182 
	`iscsi_logout_sync
(
iscsi
);

183 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

184  
ªt
;

185 
	}
}

	@test-tool/0102_read10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0102_ªad10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0102_read10_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ10 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát LBA:0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Readát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
	`¥ötf
("READ10 0blocksát LBA:0 ... ");

49 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

50 i‡(
èsk
 =
NULL
) {

51 
	`¥ötf
("[FAILED]\n");

52 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

53 
ªt
 = -1;

54 
föished
;

56 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`¥ötf
("[OK]\n");

67 
	`¥ötf
("READ10 0blocksát one block beyond <end-of-LUN> ... ");

68 i‡(
num_blocks
 > 0x80000000) {

69 
	`¥ötf
("[SKIPPED]\n");

70 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

71 
föished
;

73 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocks beyondÉnd\n");

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


88 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


89 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

92 
ªt
 = -1;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
föished
;

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
	`¥ötf
("READ10 0blocksát LBA 2^31 ... ");

101 i‡(
num_blocks
 > 0x80000000) {

102 
	`¥ötf
("[SKIPPED]\n");

103 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

104 
föished
;

106 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocksát 2^31\n");

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


121 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


122 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

125 
ªt
 = -1;

126 
	`scsi_‰ì_scsi_èsk
(
èsk
);

127 
föished
;

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
	`¥ötf
("[OK]\n");

133 
	`¥ötf
("READ10 0blocksát LBA -1 ... ");

134 i‡(
num_blocks
 > 0x80000000) {

135 
	`¥ötf
("[SKIPPED]\n");

136 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

137 
föished
;

139 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocksát -1\n");

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


154 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


155 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

163 
	`¥ötf
("[OK]\n");

166 
föished
:

167 
	`iscsi_logout_sync
(
iscsi
);

168 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

169  
ªt
;

170 
	}
}

	@test-tool/0103_read10_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0103_ªad10_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0103_read10_rdprotect:\n");

32 
	`¥ötf
("======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test how READ10 handlesÅheÑdprotect bits\n");

35 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

47 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

52 
ªt
 = 0;

55 
	`¥ötf
("Read10 withÇon-zero RDPROTECT ... ");

56 
i
 = 1; i < 8; i++) {

58 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

68 
èsk
->
cdb
[1] = (
i
<<5)&0xe0;

69 
èsk
->
cdb
[8] = 1;

70 
èsk
->
cdb_size
 = 10;

71 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

72 
èsk
->
expx„æí
 = 
block_size
;

74 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

81 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


82 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


83 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("READ10 withÑdprotect should fail with ILLEGAL REQUEST/INVALID_FIELD_IN_CDB\n");

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

95 
föished
:

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0104_read10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0104_ªad10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0104_read10_flags:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test how READ10 handles DPO, FUAánd FUA_NV flags.\n");

35 
	`¥ötf
("1, DPO:1 should work\n");

36 
	`¥ötf
("2, FUA:1ánd FUA_NV:0 should work\n");

37 
	`¥ötf
("3, FUA:1ánd FUA_NV:1 should work\n");

38 
	`¥ötf
("4, FUA:0ánd FUA_NV:1 should work\n");

39 
	`¥ötf
("5, DPO:1 , FUA:1ánd FUA_NV:1 should work\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

51 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

56 
ªt
 = 0;

60 
	`¥ötf
("Read10 with DPO==1 ... ");

62 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("FailedÅoállocateÅask structure\n");

65 
ªt
 = -1;

66 
föished
;

69 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

70 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

71 
èsk
->
cdb
[1] = 0x10;

72 
èsk
->
cdb
[8] = 1;

73 
èsk
->
cdb_size
 = 10;

74 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

75 
èsk
->
expx„æí
 = 
block_size
;

77 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("Ród10 wôh DPO==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

97 
	`¥ötf
("Read10 with FUA==1 FUA_NV==0 ... ");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("FailedÅoállocateÅask structure\n");

102 
ªt
 = -1;

103 
föished
;

106 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

107 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

108 
èsk
->
cdb
[1] = 0x08;

109 
èsk
->
cdb
[8] = 1;

110 
èsk
->
cdb_size
 = 10;

111 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

112 
èsk
->
expx„æí
 = 
block_size
;

114 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Ród10 wôh FUA==1 FUA_NV==0 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
	`¥ötf
("[OK]\n");

133 
	`¥ötf
("Read10 with FUA==1 FUA_NV==1 ... ");

135 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

136 i‡(
èsk
 =
NULL
) {

137 
	`¥ötf
("FailedÅoállocateÅask structure\n");

138 
ªt
 = -1;

139 
föished
;

142 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

143 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

144 
èsk
->
cdb
[1] = 0x0a;

145 
èsk
->
cdb
[8] = 1;

146 
èsk
->
cdb_size
 = 10;

147 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

148 
èsk
->
expx„æí
 = 
block_size
;

150 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

151 
	`¥ötf
("[FAILED]\n");

152 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

153 
ªt
 = -1;

155 
föished
;

157 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("Ród10 wôh FUA==1 FUA_NV==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

160 
ªt
 = -1;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
föished
;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
	`¥ötf
("[OK]\n");

169 
	`¥ötf
("Read10 with FUA==0 FUA_NV==1 ... ");

171 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

172 i‡(
èsk
 =
NULL
) {

173 
	`¥ötf
("FailedÅoállocateÅask structure\n");

174 
ªt
 = -1;

175 
föished
;

178 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

179 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

180 
èsk
->
cdb
[1] = 0x02;

181 
èsk
->
cdb
[8] = 1;

182 
èsk
->
cdb_size
 = 10;

183 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

184 
èsk
->
expx„æí
 = 
block_size
;

186 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
ªt
 = -1;

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("Ród10 wôh FUA==0 FUA_NV==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("Read10 with DPO==1 FUA==1 FUA_NV==1 ... ");

207 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

208 i‡(
èsk
 =
NULL
) {

209 
	`¥ötf
("FailedÅoállocateÅask structure\n");

210 
ªt
 = -1;

211 
föished
;

214 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

215 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

216 
èsk
->
cdb
[1] = 0x18;

217 
èsk
->
cdb
[8] = 1;

218 
èsk
->
cdb_size
 = 10;

219 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

220 
èsk
->
expx„æí
 = 
block_size
;

222 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

225 
ªt
 = -1;

227 
föished
;

229 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("Ród10 wôh DPO==1 FUA==1 FUA_NV==0Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

232 
ªt
 = -1;

233 
	`scsi_‰ì_scsi_èsk
(
èsk
);

234 
föished
;

236 
	`scsi_‰ì_scsi_èsk
(
èsk
);

237 
	`¥ötf
("[OK]\n");

241 
föished
:

242 
	`iscsi_logout_sync
(
iscsi
);

243 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

244  
ªt
;

245 
	}
}

	@test-tool/0105_read10_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0105_ªad10_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
iscsi_d©a
 
d©a
;

31 
buf
[4096];

32 
ªt
, 
lun
;

34 
	`¥ötf
("0105_read10_invalid:\n");

35 
	`¥ötf
("=======================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test variousÖrotocol violations.\n");

38 
	`¥ötf
("1, Read 1 block but set xferlengthÅo 0. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

39 
	`¥ötf
("2, Read 1 block but set xferlengthÅo 2*'block_size'. ShouldÑesult inÑesidual underflow of 'block_size' bytes.\n");

40 
	`¥ötf
("3, Read 1 block but set xferlengthÅo 200. ShouldÑesult inÑesidual overflow of 'block_size'-200 bytes.\n");

41 
	`¥ötf
("4, Read 2 blocks but set xferlengthÅo 'block_size'. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

42 
	`¥ötf
("5, Read 1 block but send one blockás data-out write onÅhe iSCSIÜevel. ShouldÑesult in bothÑesidual overflowánd underflow of 'block_size' bytes.\n");

43 
	`¥ötf
("\n");

47 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

48 i‡(
iscsi
 =
NULL
) {

49 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

53 
ªt
 = 0;

57 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==0 ... ");

59 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

68 
èsk
->
cdb
[8] = 1;

69 
èsk
->
cdb_size
 = 10;

70 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

71 
èsk
->
expx„æí
 = 0;

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

78 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CANCELLED
) {

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
	`¥ötf
("Target droppedÅhe session [OK]\n");

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==0 shouldÇot fail.\n");

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

98 
èsk
->
ªsiduÆ
 !
block_size
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

113 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==1024 ... ");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 i‡(
èsk
 =
NULL
) {

117 
	`¥ötf
("FailedÅoállocateÅask structure\n");

118 
ªt
 = -1;

119 
föished
;

122 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

123 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

124 
èsk
->
cdb
[8] = 1;

125 
èsk
->
cdb_size
 = 10;

126 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

127 
èsk
->
expx„æí
 = 1024;

129 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==1024 shouldÇot fail.\n");

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

143 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
 ||

144 
èsk
->
ªsiduÆ
 !
block_size
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Read10Ñeturned incorrectÑesidual underflow.\n");

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("[OK]\n");

156 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==200 ... ");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 i‡(
èsk
 =
NULL
) {

160 
	`¥ötf
("FailedÅoállocateÅask structure\n");

161 
ªt
 = -1;

162 
föished
;

165 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

166 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

167 
èsk
->
cdb
[8] = 1;

168 
èsk
->
cdb_size
 = 10;

169 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

170 
èsk
->
expx„æí
 = 200;

172 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

173 
	`¥ötf
("[FAILED]\n");

174 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = -1;

177 
föished
;

179 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==200 shouldÇot fail.\n");

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

187 
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`¥ötf
("[FAILED]\n");

189 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

190 
ªt
 = -1;

191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

192 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
	`¥ötf
("[OK]\n");

199 
	`¥ötf
("Ród10 2 block†buàwôh iscsòEx≥˘edD©aTøns„rLígth==%zu ... ", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("FailedÅoállocateÅask structure\n");

204 
ªt
 = -1;

205 
föished
;

208 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

209 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

210 
èsk
->
cdb
[8] = 2;

211 
èsk
->
cdb_size
 = 10;

212 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

213 
èsk
->
expx„æí
 = 
block_size
;

215 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

220 
föished
;

222 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("Ród10 o‡2 block†wôh iscsòEx≥˘edD©aTøns„rLígth==%zu should suc˚ed.\n", 
block_size
);

225 
ªt
 = -1;

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
föished
;

229 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

230 
èsk
->
ªsiduÆ
 !
block_size
) {

231 
	`¥ötf
("[FAILED]\n");

232 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

233 
ªt
 = -1;

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
föished
;

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
	`¥ötf
("[OK]\n");

243 
	`¥ötf
("Read10 of 1 block but sentás data-out write in iscsiÜayer ... ");

245 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

246 i‡(
èsk
 =
NULL
) {

247 
	`¥ötf
("FailedÅoállocateÅask structure\n");

248 
ªt
 = -1;

249 
föished
;

252 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

253 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

254 
èsk
->
cdb
[8] = 1;

255 
èsk
->
cdb_size
 = 10;

256 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

257 
èsk
->
expx„æí
 = (
buf
);

259 
d©a
.
size
 = (
buf
);

260 
d©a
.d©®(*)&
buf
[0];

262 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, &
d©a
Ë=
NULL
) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

265 
ªt
 = -1;

267 
föished
;

269 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

270 
	`¥ötf
("[FAILED]\n");

271 
	`¥ötf
("Read10 of 1 block but iscsi data-out write should fail.\n");

272 
ªt
 = -1;

273 
	`scsi_‰ì_scsi_èsk
(
èsk
);

274 
föished
;

276 
	`scsi_‰ì_scsi_èsk
(
èsk
);

277 
	`¥ötf
("[OK]\n");

279 
föished
:

280 
	`iscsi_logout_sync
(
iscsi
);

281 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

282  
ªt
;

283 
	}
}

	@test-tool/0110_readcapacity10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0110_ªadˇ∑côy10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
scsi_ªadˇ∑côy10
 *
rc10
;

28 
ªt
, 
lun
;

30 
ªt
 = 0;

32 
	`¥ötf
("0110_readcapacity10_simple:\n");

33 
	`¥ötf
("===========================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("TestÅhat basic READCAPACITY10 works\n");

36 
	`¥ötf
("1, Readcapacity10 should work.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
	`¥ötf
("TestÅhat Readcapacity10 is supported ... ");

48 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

49 i‡(
èsk
 =
NULL
) {

50 
	`¥ötf
("[FAILED]\n");

51 
	`¥ötf
("FaûedÅÿ£ndÑódˇ∑côy10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

52 
ªt
 = -1;

53 
föished
;

55 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("Ródˇ∑côy comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
	`scsi_‰ì_scsi_èsk
(
èsk
);

60 
föished
;

62 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

63 i‡(
rc10
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ÁûedÅÿunm¨shÆ»ªadˇ∑côy10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0120_read6_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0120_ªad6_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0120_read6_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ6 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN using READ6.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Reading first 1-256 blocks ... ");

49 
i
 = 1; i <= 256; i++) {

50 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size);

51 i‡(
èsk
 =
NULL
) {

52 
	`¥ötf
("[FAILED]\n");

53 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

54 
ªt
 = -1;

55 
föished
;

57 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("Ród6 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
	`scsi_‰ì_scsi_èsk
(
èsk
);

62 
föished
;

64 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
	`¥ötf
("[OK]\n");

68 
föished
:

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0121_read6_beyond_eol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0121_ªad6_bey⁄d_eﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0121_read6_beyond_eol:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ6 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^20 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 2-256 blocksáll but one beyondÉnd-of-lun.\n");

36 
	`¥ötf
("3, Read 0(==256) blocks 128 blocks beyondÉnd-of-lun.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 > 0x1fffff) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

59 
	`¥ötf
("ReadingÜast 1-256 blocks one block beyondÉol ... ");

60 
i
=1; i<=256; i++) {

61 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i * 
block_size
, block_size);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇot fail with sense.\n");

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

75 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
föished
;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
	`¥ötf
("[OK]\n");

95 
	`¥ötf
("Reading 1-255 blocks beyondÉol startingátÜast block ... ");

96 
i
=2; i<=256; i++) {

97 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇotÑeturn sense.\n");

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

127 
	`¥ötf
("[OK]\n");

131 
	`¥ötf
("Reading 0(==256) blocks beyondÉol startingát 128 blocks beforeÉol ... ");

132 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
-128, 
i
 * 
block_size
, block_size);

133 i‡(
èsk
 =
NULL
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
föished
;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇotÑeturn sense.\n");

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
	`¥ötf
("[OK]\n");

164 
föished
:

165 
	`iscsi_logout_sync
(
iscsi
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

167  
ªt
;

168 
	}
}

	@test-tool/0122_read6_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0122_ªad6_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
iscsi_d©a
 
d©a
;

31 
buf
[4096];

32 
ªt
, 
lun
;

34 
	`¥ötf
("0122_read6_invalid:\n");

35 
	`¥ötf
("=======================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test variousÖrotocol violations.\n");

38 
	`¥ötf
("1, Read 1 block but set xferlengthÅo 0. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

39 
	`¥ötf
("2, Read 1 block but set xferlengthÅo 2*'block_size'. ShouldÑesult inÑesidual underflow of 'block_size' bytes.\n");

40 
	`¥ötf
("3, Read 1 block but set xferlengthÅo 200. ShouldÑesult inÑesidual overflow of 'block_size' - 200 bytes.\n");

41 
	`¥ötf
("4, Read 2 blocks but set xferlengthÅo 'block_size'. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

42 
	`¥ötf
("5, Read 1 block but send one blockás data-out write onÅhe iSCSIÜevel. ShouldÑesult in bothÑesidual overflowánd underflow of 'block_size' bytes.\n");

43 
	`¥ötf
("\n");

47 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

48 i‡(
iscsi
 =
NULL
) {

49 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 
ªt
 = 0;

57 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==0 ... ");

59 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

68 
èsk
->
cdb
[4] = 1;

69 
èsk
->
cdb_size
 = 6;

70 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

71 
èsk
->
expx„æí
 = 0;

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

78 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CANCELLED
) {

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
	`¥ötf
("Target droppedÅhe session [OK]\n");

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==0 shouldÇot fail.\n");

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

98 
èsk
->
ªsiduÆ
 !
block_size
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

113 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==1024 ... ");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 i‡(
èsk
 =
NULL
) {

117 
	`¥ötf
("FailedÅoállocateÅask structure\n");

118 
ªt
 = -1;

119 
föished
;

122 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

123 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

124 
èsk
->
cdb
[4] = 1;

125 
èsk
->
cdb_size
 = 6;

126 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

127 
èsk
->
expx„æí
 = 1024;

129 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==1024 shouldÇot fail.\n");

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

143 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
 ||

144 
èsk
->
ªsiduÆ
 !
block_size
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Read6Ñeturned incorrectÑesidual underflow.\n");

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("[OK]\n");

156 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==200 ... ");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 i‡(
èsk
 =
NULL
) {

160 
	`¥ötf
("FailedÅoállocateÅask structure\n");

161 
ªt
 = -1;

162 
föished
;

165 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

166 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

167 
èsk
->
cdb
[4] = 1;

168 
èsk
->
cdb_size
 = 6;

169 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

170 
èsk
->
expx„æí
 = 200;

172 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

173 
	`¥ötf
("[FAILED]\n");

174 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = -1;

177 
föished
;

179 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==200 shouldÇot fail.\n");

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

187 
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`¥ötf
("[FAILED]\n");

189 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

190 
ªt
 = -1;

191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

192 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
	`¥ötf
("[OK]\n");

199 
	`¥ötf
("Ród6 2 block†buàwôh iscsòEx≥˘edD©aTøns„rLígth==%zu ... ", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("FailedÅoállocateÅask structure\n");

204 
ªt
 = -1;

205 
föished
;

208 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

209 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

210 
èsk
->
cdb
[4] = 2;

211 
èsk
->
cdb_size
 = 6;

212 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

213 
èsk
->
expx„æí
 = 
block_size
;

215 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

220 
föished
;

222 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("Ród6 o‡2 block†wôh iscsòEx≥˘edD©aTøns„rLígth==%zu should suc˚ed.\n", 
block_size
);

225 
ªt
 = -1;

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
föished
;

229 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

230 
èsk
->
ªsiduÆ
 !
block_size
) {

231 
	`¥ötf
("[FAILED]\n");

232 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

233 
ªt
 = -1;

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
föished
;

237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

238 
	`¥ötf
("[OK]\n");

242 
	`¥ötf
("Read6 of 1 block but sentás data-out write in iscsiÜayer ... ");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 i‡(
èsk
 =
NULL
) {

246 
	`¥ötf
("FailedÅoállocateÅask structure\n");

247 
ªt
 = -1;

248 
föished
;

251 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

252 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

253 
èsk
->
cdb
[4] = 1;

254 
èsk
->
cdb_size
 = 6;

255 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

256 
èsk
->
expx„æí
 = (
buf
);

258 
d©a
.
size
 = (
buf
);

259 
d©a
.d©®(*)&
buf
[0];

261 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, &
d©a
Ë=
NULL
) {

262 
	`¥ötf
("[FAILED]\n");

263 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

264 
ªt
 = -1;

266 
föished
;

268 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

269 
	`¥ötf
("[FAILED]\n");

270 
	`¥ötf
("Read6 of 1 block but iscsi data-out write should fail.\n");

271 
ªt
 = -1;

272 
	`scsi_‰ì_scsi_èsk
(
èsk
);

273 
föished
;

275 
	`scsi_‰ì_scsi_èsk
(
èsk
);

276 
	`¥ötf
("[OK]\n");

279 
föished
:

280 
	`iscsi_logout_sync
(
iscsi
);

281 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

282  
ªt
;

283 
	}
}

	@test-tool/0130_verify10_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0130_vîify10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0130_verify10_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY10 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ10/VERIFY10.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify10
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0131_verify10_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0131_vîify10_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

33 
	`¥ötf
("0131_verify10_mismatch:\n");

34 
	`¥ötf
("=======================\n");

35 i‡(
show_öfo
) {

36 
	`¥ötf
("Test basic VERIFY10 functionality.\n");

37 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0132_verify10_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0132_vîify10_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0132_verify10_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY10 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify10
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0133_verify10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0133_vîify10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

27 *
buf
 = 
NULL
;

29 
	`¥ötf
("0133_verify10_beyond_eol:\n");

30 
	`¥ötf
("========================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat VERIFY10 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

48 i‡(
num_blocks
 >= 0x80000000) {

49 
	`¥ötf
("[SKIPPED]\n");

50 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY10. SkippingÅest.\n");

51 
ªt
 = -2;

52 
föished
;

55 
buf
 = 
	`mÆloc
(256 * 
block_size
);

58 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

59 
i
 = 2; i <= 256; i++) {

60 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

61 i‡(
ªt
 != 0) {

62 
föished
;

67 
föished
:

68 
	`‰ì
(
buf
);

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0160_readcapacity16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0160_ªadˇ∑côy16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_ªadˇ∑côy16
 *
rc
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0160_readcapacity16_simple:\n");

31 
	`¥ötf
("===========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat basic READCAPACITY16 works\n");

34 
	`¥ötf
("1, READCAPACITY16 should work.\n");

35 
	`¥ötf
("\n");

39 
ªt
 = 0;

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
	`¥ötf
("TestÅhat READCAPACITY16 is supported ... ");

48 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

49 i‡(
èsk
 =
NULL
) {

50 
	`¥ötf
("[FAILED]\n");

51 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

52 
ªt
 = -1;

53 
föished
;

55 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("READCAPACITY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
	`scsi_‰ì_scsi_èsk
(
èsk
);

60 
föished
;

62 
rc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

63 i‡(
rc
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY16 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0161_readcapacity16_alloclen.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0161_ªadˇ∑côy16_Ælo˛í
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
ªt
, 
lun
;

32 
	`¥ötf
("0161_readcapacity16_alloclen:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Testállocation-length for READCAPACITY16\n");

36 
	`¥ötf
("1, READCAPACITY16 withálloclen==0 isÇotánÉrror\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("READCAPACITY16 with AllocationLength==0 ... ");

51 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("FailedÅoállocateÅask structure\n");

54 
ªt
 = -1;

55 
föished
;

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 0x9e;

60 
èsk
->
cdb
[1] = 0x10;

61 
èsk
->
cdb_size
 = 16;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

63 
èsk
->
expx„æí
 = 0;

65 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("READCAPACITY16 wôh AŒoˇti⁄Lígth==0 shouldÇŸ faû. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
föished
;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
	`¥ötf
("[OK]\n");

83 
föished
:

84 
	`iscsi_logout_sync
(
iscsi
);

85 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

86  
ªt
;

87 
	}
}

	@test-tool/0170_unmap_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0170_unm≠_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0170_unmap_simple:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic UNMAP functionality.\n");

33 
	`¥ötf
("1, Test UNMAPÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Test UNMAPÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

46 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("data_loss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

57 
ªt
 = 0;

60 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

61 
i
=1; i<=256; i++) {

62 
unm≠_li°
 
li°
[1];

64 
li°
[0].
lba
 = 0;

65 
li°
[0].
num
 = 
i
;

66 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
	`¥ötf
("[OK]\n");

86 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

87 
i
=1; i<=256; i++) {

88 
unm≠_li°
 
li°
[1];

90 
li°
[0].
lba
 = 
num_blocks
 + 1 - 
i
;

91 
li°
[0].
num
 = 
i
;

92 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

100 
	`¥ötf
("[FAILED]\n");

101 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

102 
ªt
 = -1;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
föished
;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
	`¥ötf
("[OK]\n");

111 
föished
:

112 
	`iscsi_logout_sync
(
iscsi
);

113 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

114  
ªt
;

115 
	}
}

	@test-tool/0171_unmap_zero.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0171_unm≠_zîo
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0171_unmap_zero:\n");

30 
	`¥ötf
("================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test UNMAP of 0 blocks.\n");

33 
	`¥ötf
("1, TryÅo UNMAP 0 blocksát LBA 0Åo LBA 255\n");

34 
	`¥ötf
("2, TryÅo UNMAP 0 blocksát 0Åo 255 blocks fromÉnd-of-lun\n");

35 
	`¥ötf
("3, TryÅo UNMAP 0 blocksát 1Åo 256 blocks beyondÉnd-of-lun\n");

36 
	`¥ötf
("4, Send UNMAP withoutány block descriptors\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

48 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

53 i‡(!
d©a_loss
) {

54 
	`¥ötf
("data_loss flag isÇot set. SkippingÅest\n");

55 
ªt
 = -2;

56 
föished
;

59 
ªt
 = 0;

62 
	`¥ötf
("Unmapping ofÇo blockátÜbas 0-255 blocks ... ");

63 
i
=0; i<=255; i++) {

64 
unm≠_li°
 
li°
[1];

66 
li°
[0].
lba
 = 
i
;

67 
li°
[0].
num
 = 0;

68 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

89 
i
=0; i<=255; i++) {

90 
unm≠_li°
 
li°
[1];

92 
li°
[0].
lba
 = 
num_blocks
 - 
i
;

93 
li°
[0].
num
 = 0;

94 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

95 i‡(
èsk
 =
NULL
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
föished
;

101 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
föished
;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

110 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("UnmappingÇo blocks but 0-255 blocks beyongÉnd of LUN... ");

114 
i
=0; i<=255; i++) {

115 
unm≠_li°
 
li°
[1];

117 
li°
[0].
lba
 = 
num_blocks
 + 1 + 
i
;

118 
li°
[0].
num
 = 0;

119 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("STATUS==GOOD. UNMAP command should fail with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

129 
ªt
 = -1;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
föished
;

133 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


134 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


135 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

136 
	`¥ötf
("[FAILED]\n");

137 
	`¥ötf
("UNMAP fail butáscq was wrong. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

138 
ªt
 = -1;

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
föished
;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
	`¥ötf
("[OK]\n");

147 
	`¥ötf
("Unmap withoutány block descriptors ... ");

148 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
)); 
ªt
 = -1;

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
	`scsi_‰ì_scsi_èsk
(
èsk
);

159 
föished
;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
	`¥ötf
("[OK]\n");

164 
föished
:

165 
	`iscsi_logout_sync
(
iscsi
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

167  
ªt
;

168 
	}
}

	@test-tool/0180_writesame10_unmap.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0180_wrôeßme10_unm≠
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
fuŒ_size
;

28 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0180_writesame10_unmap:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic WRITESAME10-UNMAP functionality.\n");

35 
	`¥ötf
("1, If LBPME==1 we should have VPDÖage 0xB2\n");

36 
	`¥ötf
("2, UNMAPÅhe first 1-256 blocksátÅhe start ofÅhe LUN\n");

37 
	`¥ötf
("3, UNMAPÅheÜast 1-256 blocksátÅheÉnd ofÅhe LUN\n");

38 
	`¥ötf
("4, VerifyÅhat UNMAP == 0ánd ANCHOR == 1 is invalid\n");

39 
	`¥ötf
("5, UNMAP == 1ánd ANCHOR == 1\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 
ªt
 = 0;

52 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

53 
	`¥ötf
("Logical unit is fullyÖrovisioned.\n");

54 
	`¥ötf
("[SKIPPED]\n");

55 
	`¥ötf
("LUN doesÇot useÅhinÖrovisioning. LBPME==0.\n");

56 
ªt
 = -2;

57 
föished
;

61 
	`¥ötf
("Logical Block Provisioning isávailable. CheckÅhat VPDÖage 0xB2Éxists ... ");

64 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

65 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

72 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

76 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
föished
;

84 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

85 i‡(
lbp
 =
NULL
) {

86 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
ªt
 = -1;

89 
föished
;

91 
	`¥ötf
("[OK]\n");

93 i‡(
lbp
->
lbpws10
 == 0) {

94 
	`¥ötf
("Device doesÇot support WRITE_SAME10 for UNMAP. All WRITE_SAME10 commandsÅo unmap should fail.\n");

97 i‡(!
d©a_loss
) {

98 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

99 
ªt
 = -2;

100 
föished
;

103 
ªt
 = 0;

106 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

107 i‡(
lbp
->
lbpws10
 == 0) {

108 
	`¥ötf
("(Shouldáll fail since LBPWS10 is 0) ");

110 
i
=1; i<=256; i++) {

113 i‡(
lbp
->
lbpws10
 =1 && 
i
 % 
lbµb
) {

116 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

117 
NULL
, 0,

118 
i
,

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


127 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


128 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

129 
	`¥ötf
("[SKIPPED]\n");

130 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
ªt
 = -2;

133 
föished
;

135 i‡(
lbp
->
lbpws10
) {

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
ªt
 = -1;

141 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITESAME10 comm™d should faû sö˚ LBPWS10 i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 
ªt
 = -1;

151 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
	`¥ötf
("[OK]\n");

161 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

162 i‡(
lbp
->
lbpws10
 == 0) {

163 
	`¥ötf
("(Shouldáll fail since LBPWS10 is 0) ");

165 
i
=1; i<=256; i++) {

168 i‡(
lbp
->
lbpws10
 =1 && 
i
 % 
lbµb
) {

172 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
,

173 
NULL
, 0,

174 
i
,

176 i‡(
èsk
 =
NULL
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

179 
ªt
 = -1;

180 
föished
;

182 i‡(
lbp
->
lbpws10
) {

183 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
ªt
 = -1;

188 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


193 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("WRITESAME10 comm™d should faû sö˚ LBPWS10 i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
	`scsi_‰ì_scsi_èsk
(
èsk
);

197 
ªt
 = -1;

198 
föished
;

201 
	`scsi_‰ì_scsi_èsk
(
èsk
);

203 
	`¥ötf
("[OK]\n");

207 
	`¥ötf
("Try UNMAP==0ánd ANCHOR==1 ... ");

208 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

209 
NULL
, 0,

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

215 
ªt
 = -1;

216 
föished
;

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


219 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


220 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

221 
	`¥ötf
("[FAILED]\n");

222 
	`¥ötf
("WRITESAME10 with UNMAP=0 ANCHOR=1 failed with wrong sense code %d %s(%d) %s(0x%04x) should be CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n",

223 
èsk
->
°©us
,

224 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

225 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
ªt
 = -1;

228 
föished
;

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
	`¥ötf
("[OK]\n");

235 
	`¥ötf
("Try UNMAP==1ánd ANCHOR==1 ... ");

236 i‡(
lbp
->
™c_sup
 == 0) {

237 
	`¥ötf
("(ANC_SUP==0 so check conditionÉxpected) ");

239 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

240 
NULL
, 0,

243 i‡(
èsk
 =
NULL
) {

244 
	`¥ötf
("[FAILED]\n");

245 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

246 
ªt
 = -1;

247 
föished
;

249 i‡(
lbp
->
™c_sup
 == 0) {

250 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


251 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


252 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("WRITESAME10 with UNMAP=1 ANCHOR=1 failed with wrong sense code %d %s(%d) %s(0x%04x) should be CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n",

255 
èsk
->
°©us
,

256 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

257 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

258 
	`scsi_‰ì_scsi_èsk
(
èsk
);

259 
ªt
 = -1;

260 
föished
;

263 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

264 
	`¥ötf
("[FAILED]\n");

265 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
ªt
 = -1;

268 
föished
;

271 
	`scsi_‰ì_scsi_èsk
(
èsk
);

272 
	`¥ötf
("[OK]\n");

275 
föished
:

276 
	`iscsi_logout_sync
(
iscsi
);

277 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

278  
ªt
;

279 
	}
}

	@test-tool/0181_writesame10_unmap_unaligned.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0181_wrôeßme10_unm≠_u«lig√d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0181_writesame10_unmap_unaligned:\n");

30 
	`¥ötf
("=================================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test unaligned WRITESAME10-UNMAP functionality.\n");

33 
	`¥ötf
("1, UNMAPÅhe first 1-lbppb blocksátÅhe start ofÅhe LUN\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

51 i‡(
lbµb
 < 2) {

52 
	`¥ötf
("LBPPB==%d C™ÇŸ unm≠ fø˘i⁄ÆÖhysiˇ»block\n", 
lbµb
);

53 
ªt
 = -1;

54 
föished
;

57 i‡(!
d©a_loss
) {

58 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

59 
ªt
 = -2;

60 
föished
;

63 
ªt
 = 0;

66 
	`¥ötf
("Unmapping first 1 - (LBPPB-1) blocks ... ");

67 
i
=1; i < 
lbµb
; i++) {

68 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

69 
NULL
, 0,

70 
i
,

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`¥ötf
("[SKIPPED]\n");

82 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
ªt
 = -2;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME10 commandÅo unmapá fractionalÖhysical block should fail\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

99 
föished
:

100 
	`iscsi_logout_sync
(
iscsi
);

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102  
ªt
;

103 
	}
}

	@test-tool/0182_writesame10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0182_wrôeßme10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0182_writesame10_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Write 1-256 blocks one block beyondÉnd-of-lun.\n");

36 
	`¥ötf
("2, Write 1-256 blocksát LBA 2^31\n");

37 
	`¥ötf
("3, Write 1-256 blocksát LBA -1\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 i‡(
num_blocks
 >= 0x80000000) {

58 
	`¥ötf
("[SKIPPED]\n");

59 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

60 
ªt
 = -2;

61 
föished
;

65 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

66 
i
 = 2; i <= 257; i++) {

67 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
,

68 
buf
, 
block_size
,

69 
i
,

71 i‡(
èsk
 =
NULL
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`¥ötf
("[SKIPPED]\n");

81 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
ªt
 = -2;

84 
föished
;

86 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME10 command should fail when writing beyondÉnd of device\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


94 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


95 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

109 
i
 = 1; i <= 256; i++) {

110 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0x80000000,

111 
buf
, 
block_size
,

112 
i
,

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITESAME10 command should fail when writingát LBA 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 
i
 = 1; i <= 256; i++) {

144 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, -1,

145 
buf
, 
block_size
,

146 
i
,

148 i‡(
èsk
 =
NULL
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
föished
;

154 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("WRITESAME10 command should fail whenÑeadingát LBA -1\n");

157 
ªt
 = -1;

158 
	`scsi_‰ì_scsi_èsk
(
èsk
);

159 
föished
;

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


162 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


163 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
	`¥ötf
("[OK]\n");

175 
föished
:

176 
	`iscsi_logout_sync
(
iscsi
);

177 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

178  
ªt
;

179 
	}
}

	@test-tool/0183_writesame10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0183_wrôeßme10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0183_writesame10_wrptotect:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 wrprotect\n");

34 
	`¥ötf
("1, Write using WRPROTECTásÇon-zero\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

57 
	`¥ötf
("WRITESAME10 with WRPROTECT ... ");

58 
i
 = 1; i <= 7; i++) {

59 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

60 
buf
, 
block_size
,

62 0, 0, 
i
, 0);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`¥ötf
("[SKIPPED]\n");

73 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = -2;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("WRITESAME10 command should fail when WRPROTECT is set\n");

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


86 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


87 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME10 failed but withÅhe wrong sense code. It should have failed with ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

99 
föished
:

100 
	`iscsi_logout_sync
(
iscsi
);

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102  
ªt
;

103 
	}
}

	@test-tool/0184_writesame10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0184_wrôeßme10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0184_writesame10_0blocks:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 works correctly whenÅransferÜength is 0 blocks.\n");

34 
	`¥ötf
("1, Writesameát LBA:0 should work.\n");

35 
	`¥ötf
("2, Writesameát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

36 
	`¥ötf
("3, Writesameát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("4, Writesameát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 
	`¥ötf
("Writesame10 0blocksát LBA:0 ... ");

58 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
öq_bl
 =
NULL
) {

78 
	`¥ötf
("[SKIPPED]\n");

79 
	`¥ötf
("Target doesÇot support blockÜimits VPD\n");

80 
ªt
 = -2;

81 
föished
;

83 i‡((!
öq_bl
->
w¢z
 && 
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) ||

84 (
öq_bl
->
w¢z
 && 
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION
)) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("WRITESAME10 command: failed with senseánd WSNZ = %d. "

87 "%s\n", 
öq_bl
->
w¢z
, 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Writesame10 0blocksát one block beyond <end-of-LUN> ... ");

97 i‡(
num_blocks
 > 0x80000000) {

98 
	`¥ötf
("[SKIPPED]\n");

99 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

100 
föished
;

102 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2,

103 
buf
, 
block_size
,

106 i‡(
èsk
 =
NULL
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
föished
;

112 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocks beyondÉnd\n");

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


120 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


121 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
	`¥ötf
("[OK]\n");

132 
	`¥ötf
("Writesame10 0blocksát LBA 2^31 ... ");

133 i‡(
num_blocks
 > 0x80000000) {

134 
	`¥ötf
("[SKIPPED]\n");

135 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

136 
föished
;

138 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0x80000000,

139 
buf
, 
block_size
,

142 i‡(
èsk
 =
NULL
) {

143 
	`¥ötf
("[FAILED]\n");

144 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

145 
ªt
 = -1;

146 
föished
;

148 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocksát 2^31\n");

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


156 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


157 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

160 
ªt
 = -1;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
föished
;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
	`¥ötf
("[OK]\n");

168 
	`¥ötf
("Writesame10 0blocksát LBA -1 ... ");

169 i‡(
num_blocks
 > 0x80000000) {

170 
	`¥ötf
("[SKIPPED]\n");

171 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

172 
föished
;

174 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, -1,

175 
buf
, 
block_size
,

178 i‡(
èsk
 =
NULL
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
föished
;

184 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

185 
	`¥ötf
("[FAILED]\n");

186 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocksát -1\n");

187 
ªt
 = -1;

188 
	`scsi_‰ì_scsi_èsk
(
èsk
);

189 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


193 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

204 
föished
:

205 
	`iscsi_logout_sync
(
iscsi
);

206 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

207  
ªt
;

208 
	}
}

	@test-tool/0190_writesame16_unmap.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0190_wrôeßme16_unm≠
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
fuŒ_size
;

28 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0190_writesame16_unmap:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic WRITESAME16-UNMAP functionality.\n");

35 
	`¥ötf
("1, If LBPME==1 we should have VPDÖage 0xB2\n");

36 
	`¥ötf
("2, UNMAPÅhe first 1-256 blocksátÅhe start ofÅhe LUN\n");

37 
	`¥ötf
("3, UNMAPÅheÜast 1-256 blocksátÅheÉnd ofÅhe LUN\n");

38 
	`¥ötf
("4, VerifyÅhat UNMAP == 0ánd ANCHOR == 1 is invalid\n");

39 
	`¥ötf
("5, UNMAP == 1ánd ANCHOR == 1\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 
ªt
 = 0;

52 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

53 
	`¥ötf
("LBPMEÇot set. SkipÅest for CPDÖage 0xB2 (logical blockÖrovisioning)\n");

54 
föished
;

58 
	`¥ötf
("Logical Block Provisioning isávailable. CheckÅhat VPDÖage 0xB2Éxists ... ");

61 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

62 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

69 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
föished
;

81 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

82 i‡(
lbp
 =
NULL
) {

83 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
ªt
 = -1;

86 
föished
;

88 
	`¥ötf
("[OK]\n");

90 i‡(
lbp
->
lbpws
 == 0) {

91 
	`¥ötf
("Device doesÇot support WRITE_SAME16 for UNMAP. All WRITE_SAME16 commandsÅo unmap should fail.\n");

95 i‡(!
d©a_loss
) {

96 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

97 
ªt
 = -2;

98 
föished
;

101 
ªt
 = 0;

104 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

105 i‡(
lbp
->
lbpws
 == 0) {

106 
	`¥ötf
("(Shouldáll fail since LBPWS is 0) ");

108 
i
=1; i<=256; i++) {

111 i‡(
lbp
->
lbpws
 =1 && 
i
 % 
lbµb
) {

114 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

115 
NULL
, 0,

116 
i
,

118 i‡(
èsk
 =
NULL
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
föished
;

124 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


125 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


126 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

127 
	`¥ötf
("[SKIPPED]\n");

128 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
ªt
 = -2;

131 
föished
;

133 i‡(
lbp
->
lbpws
) {

134 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
ªt
 = -1;

139 
föished
;

142 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


143 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


144 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("WRITESAME16 comm™d should faû sö˚ LBPWS i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
ªt
 = -1;

149 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

159 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

160 i‡(
lbp
->
lbpws
 == 0) {

161 
	`¥ötf
("(Shouldáll fail since LBPWS is 0) ");

163 
i
=1; i<=256; i++) {

166 i‡(
lbp
->
lbpws
 =1 && 
i
 % 
lbµb
) {

170 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
,

171 
NULL
, 0,

172 
i
,

174 i‡(
èsk
 =
NULL
) {

175 
	`¥ötf
("[FAILED]\n");

176 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

177 
ªt
 = -1;

178 
föished
;

180 i‡(
lbp
->
lbpws
) {

181 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

182 
	`¥ötf
("[FAILED]\n");

183 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

185 
ªt
 = -1;

186 
föished
;

189 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


190 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


191 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

192 
	`¥ötf
("[FAILED]\n");

193 
	`¥ötf
("WRITESAME16 comm™d should faû sö˚ LBPWS i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
ªt
 = -1;

196 
föished
;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("Try UNMAP==0ánd ANCHOR==1 ... ");

206 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

207 
NULL
, 0,

210 i‡(
èsk
 =
NULL
) {

211 
	`¥ötf
("[FAILED]\n");

212 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

213 
ªt
 = -1;

214 
föished
;

216 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


217 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


218 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("WRITESAME16 wôh UNMAP=0 ANCHOR=1 faûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

221 
	`scsi_‰ì_scsi_èsk
(
èsk
);

222 
ªt
 = -1;

223 
föished
;

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

230 
	`¥ötf
("Try UNMAP==1ánd ANCHOR==1 ... ");

231 i‡(
lbp
->
™c_sup
 == 0) {

232 
	`¥ötf
("(ANC_SUP==0 so check conditionÉxpected) ");

234 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

235 
NULL
, 0,

238 i‡(
èsk
 =
NULL
) {

239 
	`¥ötf
("[FAILED]\n");

240 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

241 
ªt
 = -1;

242 
föished
;

244 i‡(
lbp
->
™c_sup
 == 0) {

245 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


246 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


247 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

248 
	`¥ötf
("[FAILED]\n");

249 
	`¥ötf
("WRITESAME16 wôh UNMAP=1 ANCHOR=1 faûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

250 
	`scsi_‰ì_scsi_èsk
(
èsk
);

251 
ªt
 = -1;

252 
föished
;

255 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

256 
	`¥ötf
("[FAILED]\n");

257 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

258 
	`scsi_‰ì_scsi_èsk
(
èsk
);

259 
ªt
 = -1;

260 
föished
;

263 
	`scsi_‰ì_scsi_èsk
(
èsk
);

264 
	`¥ötf
("[OK]\n");

267 
föished
:

268 
	`iscsi_logout_sync
(
iscsi
);

269 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

270  
ªt
;

271 
	}
}

	@test-tool/0191_writesame16_unmap_unaligned.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0191_wrôeßme16_unm≠_u«lig√d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0191_writesame16_unmap_unaligned:\n");

30 
	`¥ötf
("=================================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test unaligned WRITESAME16-UNMAP functionality.\n");

33 
	`¥ötf
("1, UNMAPÅhe first 1-lbppb blocksátÅhe start ofÅhe LUN\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

50 i‡(
lbµb
 < 2) {

51 
	`¥ötf
("LBPPB==%d C™ÇŸ unm≠ fø˘i⁄ÆÖhysiˇ»block\n", 
lbµb
);

52 
ªt
 = -2;

53 
föished
;

56 i‡(!
d©a_loss
) {

57 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

58 
ªt
 = -2;

59 
föished
;

62 
ªt
 = 0;

65 
	`¥ötf
("Unmapping first 1 - (LBPPB-1) blocks ... ");

66 
i
=1; i < 
lbµb
; i++) {

67 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

68 
NULL
, 0,

69 
i
,

71 i‡(
èsk
 =
NULL
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`¥ötf
("[SKIPPED]\n");

81 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
ªt
 = -2;

84 
föished
;

86 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME16 commandÅo unmapá fractionalÖhysical block should fail\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

97 
föished
:

98 
	`iscsi_logout_sync
(
iscsi
);

99 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

100  
ªt
;

101 
	}
}

	@test-tool/0192_writesame16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0192_wrôeßme16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0192_writesame16_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Write 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Write 1-256 blocksát LBA 2^63\n");

36 
	`¥ötf
("3, Write 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

58 
i
 = 2; i <= 257; i++) {

59 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
,

60 
buf
, 
block_size
,

61 
i
,

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`¥ötf
("[SKIPPED]\n");

73 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = -2;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("WRITESAME16 command should fail when writing beyondÉnd of device\n");

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


86 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


87 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

100 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

101 
i
 = 1; i <= 256; i++) {

102 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0x8000000000000000ULL,

103 
buf
, 
block_size
,

104 
i
,

106 i‡(
èsk
 =
NULL
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
föished
;

112 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("WRITESAME16 command should fail when writingát LBA 2^63\n");

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


120 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


121 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
	`¥ötf
("[OK]\n");

134 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

135 
i
 = 1; i <= 256; i++) {

136 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, -1,

137 
buf
, 
block_size
,

138 
i
,

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITESAME16 command should fail whenÑeadingát LBA -1\n");

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


154 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


155 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

167 
föished
:

168 
	`iscsi_logout_sync
(
iscsi
);

169 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

170  
ªt
;

171 
	}
}

	@test-tool/0193_writesame16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0193_wrôeßme16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0193_writesame16_wrptotect:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 wrprotect\n");

34 
	`¥ötf
("1, Write using WRPROTECTásÇon-zero\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

52 
ªt
 = 0;

56 
	`¥ötf
("WRITESAME16 with WRPROTECT ... ");

57 
i
 = 1; i <= 7; i++) {

58 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

61 0, 0, 
i
, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITESAME16 command should fail when WRPROTECT is set\n");

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


85 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


86 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME16 failed but withÅhe wrong sense code. It should have failed with ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

98 
föished
:

99 
	`iscsi_logout_sync
(
iscsi
);

100 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

101  
ªt
;

102 
	}
}

	@test-tool/0194_writesame16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0194_wrôeßme16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0194_writesame16_0blocks:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 works correctly whenÅransferÜength is 0 blocks.\n");

34 
	`¥ötf
("1, Writesameát LBA:0 should work.\n");

35 
	`¥ötf
("2, Writesameát one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("3, Writesameát LBA 2^63 should fail.\n");

37 
	`¥ötf
("4, Writesameát LBA -1 should fail.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 
	`¥ötf
("Writesame16 0blocksát LBA:0 ... ");

58 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Writesame16 0blocksát one block beyond <end-of-LUN> ... ");

89 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2,

90 
buf
, 
block_size
,

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

100 
	`¥ötf
("[FAILED]\n");

101 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocks beyondÉnd\n");

102 
ªt
 = -1;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


107 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


108 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

111 
ªt
 = -1;

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
föished
;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`¥ötf
("[OK]\n");

119 
	`¥ötf
("Writesame16 0blocksát LBA 2^63 ... ");

120 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0x8000000000000000,

121 
buf
, 
block_size
,

124 i‡(
èsk
 =
NULL
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

127 
ªt
 = -1;

128 
föished
;

130 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

131 
	`¥ötf
("[FAILED]\n");

132 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocksát 2^63\n");

133 
ªt
 = -1;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
föished
;

137 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


138 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


139 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 
	`scsi_‰ì_scsi_èsk
(
èsk
);

147 
	`¥ötf
("[OK]\n");

150 
	`¥ötf
("Writesame16 0blocksát LBA -1 ... ");

151 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, -1,

152 
buf
, 
block_size
,

155 i‡(
èsk
 =
NULL
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
föished
;

161 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocksát -1\n");

164 
ªt
 = -1;

165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

166 
föished
;

168 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


169 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


170 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
föished
:

182 
	`iscsi_logout_sync
(
iscsi
);

183 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

184  
ªt
;

185 
	}
}

	@test-tool/0200_read16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0200_ªad16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0200_read16_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ16 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

49 
	`¥ötf
("Reading first 1-256 blocks ... ");

50 
i
=1; i<=256; i++) {

51 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("[FAILED]\n");

54 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

55 
ªt
 = -1;

56 
föished
;

58 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
föished
;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
	`¥ötf
("[OK]\n");

71 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

72 
i
=1; i<=256; i++) {

73 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0201_read16_rdprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0201_ªad16_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

29 
	`¥ötf
("0201_read16_rdprotect:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ16 handlesÅheÑdprotect bits\n");

33 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
	`¥ötf
("Read16 with RDPROTECT ");

46 
i
 = 1; i <= 7; i++) {

47 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

48 i‡(
èsk
 =
NULL
) {

49 
	`¥ötf
("[FAILED]\n");

50 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

51 
ªt
 = -1;

52 
föished
;

54 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


55 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


56 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("Read16 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

67 
föished
:

68 
	`iscsi_logout_sync
(
iscsi
);

69 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

70  
ªt
;

71 
	}
}

	@test-tool/0202_read16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0202_ªad16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0202_read16_flags:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ16 handlesÅhe flag bits\n");

33 
	`¥ötf
("1, Reading with DPO should work\n");

34 
	`¥ötf
("2, Reading with FUA should work\n");

35 
	`¥ötf
("3, Reading with FUA_NV should work\n");

36 
	`¥ötf
("4, Reading with FUA+FUA_NV should work\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

48 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

53 
	`¥ötf
("Read16 with DPO ");

54 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 
	`¥ötf
("[OK]\n");

70 
	`¥ötf
("Read16 with FUA ");

71 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Read16 with FUA_NV ");

89 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Read16 with FUA+FUA_NV ");

106 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 
	`¥ötf
("[OK]\n");

122 
föished
:

123 
	`iscsi_logout_sync
(
iscsi
);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

125  
ªt
;

126 
	}
}

	@test-tool/0203_read16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0203_ªad16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0203_read16_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ16 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát 0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("3, Readát LBA:2^63 should fail.\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
	`¥ötf
("READ16 0blocksát LBA:0 ... ");

49 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

50 i‡(
èsk
 =
NULL
) {

51 
	`¥ötf
("[FAILED]\n");

52 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

53 
ªt
 = -1;

54 
föished
;

56 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`¥ötf
("[OK]\n");

67 
	`¥ötf
("READ16 0blocksát LBA:<beyondÉnd-of-disk> ... ");

68 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocks beyondÉnd\n");

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


83 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


84 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

95 
	`¥ötf
("READ16 0blocksát LBA 2^63 ... ");

96 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 0, 
block_size
, 0, 0, 0, 0, 0);

97 i‡(
èsk
 =
NULL
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
föished
;

103 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocksát 2^63\n");

106 
ªt
 = -1;

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
föished
;

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


111 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


112 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

123 
	`¥ötf
("READ16 0blocksát LBA -1 ... ");

124 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

125 i‡(
èsk
 =
NULL
) {

126 
	`¥ötf
("[FAILED]\n");

127 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
föished
;

131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocksát -1\n");

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


139 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


140 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

145 
föished
;

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
	`¥ötf
("[OK]\n");

151 
föished
:

152 
	`iscsi_logout_sync
(
iscsi
);

153 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

154  
ªt
;

155 
	}
}

	@test-tool/0204_read16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0204_ªad16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0204_read16_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ16 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

34 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^63\n");

35 
	`¥ötf
("3, Read 1-256 blocksát LBA -1\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Reading 1-256 blocks beyondÉnd-of-device ... ");

51 
i
 = 2; i <= 257; i++) {

52 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

53 i‡(
èsk
 =
NULL
) {

54 
	`¥ötf
("[FAILED]\n");

55 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

56 
ªt
 = -1;

57 
föished
;

59 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("Read16 command should fail whenÑeading beyondÉnd of device\n");

62 
ªt
 = -1;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


67 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


68 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

75 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("Reading 1-256 blocksát LBA 2^63 ... ");

81 
i
 = 2; i <= 257; i++) {

82 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0x8000000000000000ULL, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

83 i‡(
èsk
 =
NULL
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
föished
;

89 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("Read16 command should fail whenÑeadingát LBA 2^63\n");

92 
ªt
 = -1;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


97 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


98 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
	`¥ötf
("[OK]\n");

110 
	`¥ötf
("Reading 1-256 blocksát LBA -1 ... ");

111 
i
 = 2; i <= 257; i++) {

112 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

113 i‡(
èsk
 =
NULL
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
föished
;

119 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("Read16 command should fail whenÑeadingát LBA -1\n");

122 
ªt
 = -1;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

124 
föished
;

126 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


127 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


128 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
föished
;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

139 
föished
:

140 
	`iscsi_logout_sync
(
iscsi
);

141 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

142  
ªt
;

143 
	}
}

	@test-tool/0210_read12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0210_ªad12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0210_read12_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ12 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

49 
	`¥ötf
("Reading first 1-256 blocks ... ");

50 
i
=1; i<=256; i++) {

51 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("[FAILED]\n");

54 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

55 
ªt
 = -1;

56 
föished
;

58 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
föished
;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
	`¥ötf
("[OK]\n");

71 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

72 
i
=1; i<=256; i++) {

73 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0211_read12_rdprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0211_ªad12_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

29 
	`¥ötf
("0211_read12_rdprotect:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ12 handlesÅheÑdprotect bits\n");

33 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
	`¥ötf
("Read12 with RDPROTECT ");

46 
i
 = 1; i <= 7; i++) {

47 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

48 i‡(
èsk
 =
NULL
) {

49 
	`¥ötf
("[FAILED]\n");

50 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

51 
ªt
 = -1;

52 
föished
;

54 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


55 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


56 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("Read12 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

68 
föished
:

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0212_read12_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0212_ªad12_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0212_read12_flags:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ12 handlesÅhe flag bits\n");

33 
	`¥ötf
("1, Reading with DPO should work\n");

34 
	`¥ötf
("2, Reading with FUA should work\n");

35 
	`¥ötf
("3, Reading with FUA_NV should work\n");

36 
	`¥ötf
("4, Reading with FUA+FUA_NV should work\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

48 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

53 
	`¥ötf
("Read12 with DPO ");

54 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 
	`¥ötf
("[OK]\n");

70 
	`¥ötf
("Read12 with FUA ");

71 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Read12 with FUA_NV ");

89 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Read12 with FUA+FUA_NV ");

106 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 
	`¥ötf
("[OK]\n");

122 
föished
:

123 
	`iscsi_logout_sync
(
iscsi
);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

125  
ªt
;

126 
	}
}

	@test-tool/0213_read12_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0213_ªad12_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0213_read12_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ12 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát LBA:0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Readát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
	`¥ötf
("READ12 0blocksát LBA:0 ... ");

50 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

51 i‡(
èsk
 =
NULL
) {

52 
	`¥ötf
("[FAILED]\n");

53 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

54 
ªt
 = -1;

55 
föished
;

57 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("READ12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
	`scsi_‰ì_scsi_èsk
(
èsk
);

62 
föished
;

64 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

68 
	`¥ötf
("READ12 0blocksát one block beyond <end-of-LUN> ... ");

69 i‡(
num_blocks
 > 0x80000000) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

72 
föished
;

74 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocks beyondÉnd\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


89 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


90 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

101 
	`¥ötf
("READ12 0blocksát LBA 2^31 ... ");

102 i‡(
num_blocks
 > 0x80000000) {

103 
	`¥ötf
("[SKIPPED]\n");

104 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

105 
föished
;

107 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0);

108 i‡(
èsk
 =
NULL
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

111 
ªt
 = -1;

112 
föished
;

114 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocksát 2^31\n");

117 
ªt
 = -1;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


122 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


123 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

126 
ªt
 = -1;

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
föished
;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
	`¥ötf
("[OK]\n");

134 
	`¥ötf
("READ12 0blocksát LBA -1 ... ");

135 i‡(
num_blocks
 > 0x80000000) {

136 
	`¥ötf
("[SKIPPED]\n");

137 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

138 
föished
;

140 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

141 i‡(
èsk
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
föished
;

147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocksát -1\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


155 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


156 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
föished
;

163 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

167 
föished
:

168 
	`iscsi_logout_sync
(
iscsi
);

169 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

170  
ªt
;

171 
	}
}

	@test-tool/0214_read12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0214_ªad12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0214_read12_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ12 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^31\n");

36 
	`¥ötf
("2, Read 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 >= 0x80000000) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ12. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

58 
	`¥ötf
("Reading 1-256 blocks beyondÉnd-of-device ... ");

59 
i
 = 2; i <= 257; i++) {

60 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("READ12 command should fail whenÑeading beyondÉnd of device\n");

70 
ªt
 = -1;

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


75 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


76 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

89 
	`¥ötf
("Reading 1-256 blocksát LBA 2^31 ... ");

90 i‡(
num_blocks
 >= 0xffffffff) {

91 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

92 
föished
;

94 
i
 = 2; i <= 257; i++) {

95 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0x80000000U, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
föished
;

102 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

103 
	`¥ötf
("[FAILED]\n");

104 
	`¥ötf
("READ12 command should fail whenÑeading from LBA 2^31\n");

105 
ªt
 = -1;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
föished
;

109 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


110 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


111 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("Reading 1-256 blocksát LBA -1 ... ");

125 i‡(
num_blocks
 > 0x80000000) {

126 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

127 
föished
;

129 
i
 = 2; i <= 257; i++) {

130 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

131 i‡(
èsk
 =
NULL
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
föished
;

137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("READ12 command should fail whenÑeading from LBA -1\n");

140 
ªt
 = -1;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
föished
:

159 
	`iscsi_logout_sync
(
iscsi
);

160 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

161  
ªt
;

162 
	}
}

	@test-tool/0220_write16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0220_wrôe16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0220_write16_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE16 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0221_write16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0221_wrôe16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0221_write16_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE16 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
	`¥ötf
("Write16 with WRPROTECT ");

52 
i
 = 1; i <= 7; i++) {

53 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


61 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


62 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Write16 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0222_write16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0222_wrôe16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0222_write16_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE16 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write16 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write16 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write16 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write16 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0223_write16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0223_wrôe16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0223_write16_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE16 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("3, Writeát LBA:2^63 should fail.\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
	`¥ötf
("WRITE16 0blocksát LBA:0 ... ");

55 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("WRITE16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
	`¥ötf
("[OK]\n");

73 
	`¥ötf
("WRITE16 0blocksát one block beyond <end-of-LUN> ... ");

74 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocks beyondÉnd\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


89 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


90 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

101 
	`¥ötf
("WRITE16 0blocksát LBA 2^63 ... ");

102 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

103 i‡(
èsk
 =
NULL
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
ªt
 = -1;

107 
föished
;

109 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocksát 2^31\n");

112 
ªt
 = -1;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("WRITE16 0blocksát LBA -1 ... ");

130 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

131 i‡(
èsk
 =
NULL
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
föished
;

137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocksát -1\n");

140 
ªt
 = -1;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`¥ötf
("[OK]\n");

157 
föished
:

158 
	`iscsi_logout_sync
(
iscsi
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

160  
ªt
;

161 
	}
}

	@test-tool/0224_write16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0224_wrôe16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0224_write16_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

57 
i
 = 2; i <= 257; i++) {

58 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

59 i‡(
èsk
 =
NULL
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
föished
;

65 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("Write16 command should fail when writing beyondÉnd of device\n");

68 
ªt
 = -1;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
föished
;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
	`¥ötf
("[OK]\n");

77 
föished
:

78 
	`iscsi_logout_sync
(
iscsi
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

80  
ªt
;

81 
	}
}

	@test-tool/0230_write12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0230_wrôe12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0230_write12_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE12 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0231_write12_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0231_wrôe12_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0231_write12_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE12 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
	`¥ötf
("Write12 with RDPROTECT ");

52 
i
 = 1; i <= 7; i++) {

53 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


61 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


62 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Write12 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0232_write12_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0232_wrôe12_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0232_write12_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE12 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write12 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write12 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write12 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write12 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0233_write12_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0233_wrôe12_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0233_write12_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE12 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Writeát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
	`¥ötf
("WRITE12 0blocksát LBA:0 ... ");

56 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITE12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("WRITE12 0blocksát one block beyond <end-of-LUN> ... ");

75 i‡(
num_blocks
 > 0x80000000) {

76 
	`¥ötf
("[SKIPPED]\n");

77 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

78 
föished
;

80 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocks beyondÉnd\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


95 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


96 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("WRITE12 0blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

111 
föished
;

113 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0x80000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocksát 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

140 
	`¥ötf
("WRITE12 0blocksát LBA -1 ... ");

141 i‡(
num_blocks
 > 0x80000000) {

142 
	`¥ötf
("[SKIPPED]\n");

143 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

144 
föished
;

146 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

147 i‡(
èsk
 =
NULL
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
föished
;

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocksát -1\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


161 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


162 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

173 
föished
:

174 
	`iscsi_logout_sync
(
iscsi
);

175 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

176  
ªt
;

177 
	}
}

	@test-tool/0234_write12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0234_wrôe12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0234_write12_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE12 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

55 i‡(
num_blocks
 >= 0x80000000) {

56 
	`¥ötf
("[SKIPPED]\n");

57 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE12. SkippingÅest.\n");

58 
ªt
 = -2;

59 
föished
;

63 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

64 
i
 = 2; i <= 257; i++) {

65 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

66 i‡(
èsk
 =
NULL
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("Write12 command should fail when writing beyondÉnd of device\n");

75 
ªt
 = -1;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
föished
;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
	`¥ötf
("[OK]\n");

84 
föished
:

85 
	`iscsi_logout_sync
(
iscsi
);

86 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

87  
ªt
;

88 
	}
}

	@test-tool/0240_prefetch10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0240_¥e„tch10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0240_prefetch10_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic PREFETCH10 functionality.\n");

32 
	`¥ötf
("1, Verify we canÖrefetchÅhe first 0-256 blocks ofÅhe LUN.\n");

33 
	`¥ötf
("2, Verify we canÖrefetchÅheÜast 0-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 
ªt
 = 0;

47 
	`¥ötf
("Prefetching first 0-256 blocks.\n");

48 
i
 = 0; i <= 256; i++) {

49 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 
i
, 0, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

57 
	`¥ötf
("PrefetchingÜast 0-256 blocks.\n");

58 
i
 = 0; i <= 256; i++) {

59 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 
num_blocks
 - 
i
, i, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
föished
:

67 
	`iscsi_logout_sync
(
iscsi
);

68 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

69  
ªt
;

70 
	}
}

	@test-tool/0241_prefetch10_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0241_¥e„tch10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0241_prefetch10_flags:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH10 flags.\n");

32 
	`¥ötf
("1, TestÅhe IMMED flag.\n");

33 
	`¥ötf
("2, Test different GROUPNUMBERS.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Check PREFETCH10 with IMMED==1.\n");

49 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 1, 1, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

56 
	`¥ötf
("Check PREFETCH10 with GROUPNEMBER 0-31.\n");

57 
i
 = 0; i < 32; i++) {

58 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 1, 0, 
i
);

59 i‡(
ªt
 != 0) {

60 
föished
;

65 
föished
:

66 
	`iscsi_logout_sync
(
iscsi
);

67 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

68  
ªt
;

69 
	}
}

	@test-tool/0242_prefetch10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0242_¥e„tch10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0242_prefetch10_beyondeol:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH10 for blocks beyondÅhe EOL.\n");

32 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

33 
	`¥ötf
("1, Prefetch 1-256 blocks one block beyondÉnd-of-lun.\n");

34 
	`¥ötf
("2, Prefetch 1-256 blocksát LBA 2^31 (only on LUNs < 1TB)\n");

35 
	`¥ötf
("3, Prefetch 1-256 blocksát LBA -1 (only on LUN < 2TB)\n");

36 
	`¥ötf
("4, Prefetch 2-256 blocksáll but one beyondÉnd-of-lun.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

51 i‡(
num_blocks
 > 0x80000000) {

52 
	`¥ötf
("[SKIPPED]\n");

53 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with PREFETCH10. SkippingÅest.\n");

54 
ªt
 = -2;

55 
föished
;

59 
	`¥ötf
("PrefetchÜast 1-256 blocks one block beyondÉol.\n");

60 
i
 = 1; i <= 256; i++) {

61 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i, 0, 0);

62 i‡(
ªt
 != 0) {

63 
föished
;

69 
	`¥ötf
("Prefetch 1-256 blocksát LBA 2^31.\n");

70 
i
 = 1; i <= 256; i++) {

71 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0x80000000, 
i
, 0, 0);

72 i‡(
ªt
 != 0) {

73 
föished
;

79 
	`¥ötf
("Prefetch 1-256 blocksát LBA -1.\n");

80 
i
 = 1; i <= 256; i++) {

81 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, -1, 
i
, 0, 0);

82 i‡(
ªt
 != 0) {

83 
föished
;

89 
	`¥ötf
("Prefetch 1-255 blocks beyondÉol startingátÜast block.\n");

90 
i
=2; i<=256; i++) {

91 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
, 0, 0);

92 i‡(
ªt
 != 0) {

93 
föished
;

98 
föished
:

99 
	`iscsi_logout_sync
(
iscsi
);

100 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

101  
ªt
;

102 
	}
}

	@test-tool/0243_prefetch10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0243_¥e„tch10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0243_prefetch10_0blocks:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("TestÅhat PREFETCH10 works correctly whenÅransferÜength is 0 blocks.\n");

32 
	`¥ötf
("Transfer Length == 0 meansÅo PREFETCH untilÅheÉnd ofÅhe LUN.\n");

33 
	`¥ötf
("1, Prefetchát LBA:0 should work.\n");

34 
	`¥ötf
("2, Prefetchát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Prefetchát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Prefetchát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

52 
	`¥ötf
("PREFETCH10 0blocksát LBA==0.\n");

53 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 0, 0, 0);

54 i‡(
ªt
 != 0) {

55 
föished
;

60 
	`¥ötf
("PREFETCH10 0blocksát one block beyond <end-of-LUN>.\n");

61 i‡(
num_blocks
 > 0x80000000) {

62 
	`¥ötf
("[SKIPPED]\n");

63 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

64 
föished
;

66 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 0, 0);

67 i‡(
ªt
 != 0) {

68 
föished
;

73 
	`¥ötf
("PREFETCH10 0blocksát LBA:2^31.\n");

74 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0x80000000, 0, 0, 0);

75 i‡(
ªt
 != 0) {

76 
föished
;

81 
	`¥ötf
("PREFETCH10 0blocksát LBA:-1.\n");

82 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffff, 0, 0, 0);

83 i‡(
ªt
 != 0) {

84 
föished
;

88 
föished
:

89 
	`iscsi_logout_sync
(
iscsi
);

90 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

91  
ªt
;

92 
	}
}

	@test-tool/0250_prefetch16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0250_¥e„tch16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0250_prefetch16_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic PREFETCH16 functionality.\n");

32 
	`¥ötf
("1, Verify we canÖrefetchÅhe first 0-256 blocks ofÅhe LUN.\n");

33 
	`¥ötf
("2, Verify we canÖrefetchÅheÜast 0-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 
ªt
 = 0;

47 
	`¥ötf
("Prefetching first 0-256 blocks.\n");

48 
i
 = 0; i <= 256; i++) {

49 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 
i
, 0, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

57 
	`¥ötf
("PrefetchingÜast 0-255 blocks.\n");

58 
i
 = 1; i < 256; i++) {

59 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 
num_blocks
 - 
i
, i, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
föished
:

67 
	`iscsi_logout_sync
(
iscsi
);

68 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

69  
ªt
;

70 
	}
}

	@test-tool/0251_prefetch16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0251_¥e„tch16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0251_prefetch16_flags:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH16 flags.\n");

32 
	`¥ötf
("1, TestÅhe IMMED flag.\n");

33 
	`¥ötf
("2, Test different GROUPNUMBERS.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Check PREFETCH16 with IMMED==1.\n");

49 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 1, 1, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

56 
	`¥ötf
("Check PREFETCH16 with GROUPNEMBER 0-31.\n");

57 
i
 = 0; i < 32; i++) {

58 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 1, 0, 
i
);

59 i‡(
ªt
 != 0) {

60 
föished
;

65 
föished
:

66 
	`iscsi_logout_sync
(
iscsi
);

67 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

68  
ªt
;

69 
	}
}

	@test-tool/0252_prefetch16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0252_¥e„tch16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0252_prefetch16_beyondeol:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH16 for blocks beyondÅhe EOL.\n");

32 
	`¥ötf
("1, Prefetch 1-256 blocks one block beyondÉnd-of-lun.\n");

33 
	`¥ötf
("2, Prefetch 1-256 blocksát LBA 2^63 should fail.\n");

34 
	`¥ötf
("3, Prefetch 1-256 blocksát LBA -1 should fail.\n");

35 
	`¥ötf
("4, Prefetch 1-256 blocksáll but one block beyondÉol\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

50 
	`¥ötf
("PrefetchÜast 1-256 blocks one block beyondÉol.\n");

51 
i
 = 1; i <= 256; i++) {

52 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i, 0, 0);

53 i‡(
ªt
 != 0) {

54 
föished
;

60 
	`¥ötf
("Prefetch 1-256 blocksát LBA 2^63.\n");

61 
i
 = 1; i <= 256; i++) {

62 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 
i
, 0, 0);

63 i‡(
ªt
 != 0) {

64 
föished
;

70 
	`¥ötf
("Prefetch 1-256 blocksát LBA -1.\n");

71 
i
 = 1; i <= 256; i++) {

72 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, -1, 
i
, 0, 0);

73 i‡(
ªt
 != 0) {

74 
föished
;

80 
	`¥ötf
("Prefetch 1-255 blocks beyondÉol startingátÜast block.\n");

81 
i
=2; i<=256; i++) {

82 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
, 0, 0);

83 i‡(
ªt
 != 0) {

84 
föished
;

89 
föished
:

90 
	`iscsi_logout_sync
(
iscsi
);

91 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

92  
ªt
;

93 
	}
}

	@test-tool/0253_prefetch16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0253_¥e„tch16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0253_prefetch16_0blocks:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("TestÅhat PREFETCH16 works correctly whenÅransferÜength is 0 blocks.\n");

32 
	`¥ötf
("1, Prefetchát LBA:0 should work.\n");

33 
	`¥ötf
("2, Prefetchát one block beyondÉnd-of-lun should fail.\n");

34 
	`¥ötf
("3, Prefetchát LBA:2^63 should fail.\n");

35 
	`¥ötf
("4, Prefetchát LBA:-1 should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

50 
	`¥ötf
("PREFETCH16 0blocksát LBA==0.\n");

51 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 0, 0, 0);

52 i‡(
ªt
 != 0) {

53 
föished
;

58 
	`¥ötf
("PREFETCH16 0blocksát one block beyond <end-of-LUN>.\n");

59 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
	`¥ötf
("PREFETCH16 0blocksát LBA:2^63.\n");

67 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 0, 0, 0);

68 i‡(
ªt
 != 0) {

69 
föished
;

74 
	`¥ötf
("PREFETCH16 0blocksát LBA:-1.\n");

75 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffffffffffff, 0, 0, 0);

76 i‡(
ªt
 != 0) {

77 
föished
;

81 
föished
:

82 
	`iscsi_logout_sync
(
iscsi
);

83 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

84  
ªt
;

85 
	}
}

	@test-tool/0260_get_lba_status_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0260_gë_lba_°©us_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

29 
	`¥ötf
("0260_get_lba_status_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic GET_LBA_STATUS functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadá descriptorátÅhe start ofÅheÜun.\n");

34 
	`¥ötf
("2, Verify we canÑeadá descriptorátÅheÉnd ofÅheÜun.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

46 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
ªt
 = 0;

54 
	`¥ötf
("Read one descriptorát LBA 0 ... ");

55 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 0, 8 + 16);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("GET_LBA_STATUS comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("Read one descriptorátÉnd-of-device ... ");

75 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
num_blocks
, 8 + 16);

76 i‡(
èsk
 =
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
föished
;

82 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("GET_LBA_STATUS comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
föished
;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0264_get_lba_status_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0264_gë_lba_°©us_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

29 
	`¥ötf
("0264_get_lba_status_beyondeol:\n");

30 
	`¥ötf
("==============================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test GET_LBA_STATUS functionality for beyondÉnd-of-lunÑequests\n");

33 
	`¥ötf
("1, Readingá descriptor beyondÅheÉnd ofÅheÜun should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

50 
ªt
 = 0;

53 
	`¥ötf
("Read one descriptor beyondÉnd-of-device ... ");

54 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1, 8 + 16);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("GET_LBA_STATUS beyondÉol should fail with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE\n");

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


69 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


70 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("GET_LBA_STATUS faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
föished
;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsi
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

83  
ªt
;

84 
	}
}

	@test-tool/0270_verify16_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0270_vîify16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0270_verify16_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY16 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ16/VERIFY16.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify16
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0271_verify16_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0271_vîify16_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0271_verify16_mismatch:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test basic VERIFY16 functionality.\n");

36 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0272_verify16_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0272_vîify16_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0272_verify16_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY16 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify16
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0273_verify16_beyondeol.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0273_vîify16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
ªt
, 
i
, 
lun
;

28 *
buf
 = 
NULL
;

30 
	`¥ötf
("0273_verify16_beyond_eol:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat VERIFY16 fails ifÑeading beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Verify 1-256 blocksát LBA 2^63\n");

36 
	`¥ötf
("3, Verify 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

51 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

52 
i
 = 2; i <= 256; i++) {

53 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

54 i‡(
ªt
 != 0) {

55 
föished
;

60 
	`¥ötf
("Verifying 1-256 blocksát LBA 2^63.\n");

61 
i
 = 1; i <= 256; i++) {

62 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

63 i‡(
ªt
 != 0) {

64 
föished
;

69 
	`¥ötf
("Verifying 1-256 blocksát LBA -1.\n");

70 
i
 = 1; i <= 256; i++) {

71 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffffffffffff, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

72 i‡(
ªt
 != 0) {

73 
föished
;

76 
föished
:

77 
	`‰ì
(
buf
);

78 
	`iscsi_logout_sync
(
iscsi
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

80  
ªt
;

81 
	}
}

	@test-tool/0280_verify12_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0280_vîify12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0280_verify12_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY12 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ12/VERIFY12.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify12
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0281_verify12_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0281_vîify12_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0281_verify12_mismatch:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test basic VERIFY12 functionality.\n");

36 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0282_verify12_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0282_vîify12_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0282_verify12_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY12 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify12
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0283_verify12_beyondeol.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0283_vîify12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
ªt
, 
i
, 
lun
;

28 *
buf
 = 
NULL
;

30 
	`¥ötf
("0283_verify12_beyond_eol:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat VERIFY12 fails ifÑeading beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

49 i‡(
num_blocks
 >= 0x80000000) {

50 
	`¥ötf
("[SKIPPED]\n");

51 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY12. SkippingÅest.\n");

52 
ªt
 = -2;

53 
föished
;

56 
buf
 = 
	`mÆloc
(256 * 
block_size
);

59 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

60 
i
 = 2; i <= 256; i++) {

61 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

62 i‡(
ªt
 != 0) {

63 
föished
;

68 
föished
:

69 
	`‰ì
(
buf
);

70 
	`iscsi_logout_sync
(
iscsi
);

71 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

72  
ªt
;

73 
	}
}

	@test-tool/0290_write10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0290_wrôe10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0290_write10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE10 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0291_write10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0291_wrôe10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0291_write10_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE10 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Write10 with WRPROTECT ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("Write10 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

74 
föished
:

75 
	`iscsi_logout_sync
(
iscsi
);

76 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

77  
ªt
;

78 
	}
}

	@test-tool/0292_write10_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0292_wrôe10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0292_write10_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE10 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write10 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write10 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write10 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write10 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0293_write10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0293_wrôe10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0293_write10_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE10 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Writeát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
	`¥ötf
("WRITE10 0blocksát LBA:0 ... ");

56 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITE10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("WRITE10 0blocksát one block beyond <end-of-LUN> ... ");

75 i‡(
num_blocks
 > 0x80000000) {

76 
	`¥ötf
("[SKIPPED]\n");

77 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

78 
föished
;

80 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocks beyondÉnd\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


95 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


96 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("WRITE10 0blocksát LBA:2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

111 
föished
;

113 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0x80000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocksát 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

140 
	`¥ötf
("WRITE10 0blocksát LBA:-1 ... ");

141 i‡(
num_blocks
 > 0x80000000) {

142 
	`¥ötf
("[SKIPPED]\n");

143 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

144 
föished
;

146 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

147 i‡(
èsk
 =
NULL
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
föished
;

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocksát -1\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


161 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


162 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

173 
föished
:

174 
	`iscsi_logout_sync
(
iscsi
);

175 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

176  
ªt
;

177 
	}
}

	@test-tool/0294_write10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0294_wrôe10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0294_write10_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

56 i‡(
num_blocks
 >= 0x80000000) {

57 
	`¥ötf
("[SKIPPED]\n");

58 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE10. SkippingÅest.\n");

59 
ªt
 = -2;

60 
föished
;

64 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

65 
i
 = 2; i <= 257; i++) {

66 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("WRITE10 command should fail when writing beyondÉnd of device\n");

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
	`¥ötf
("[OK]\n");

85 
föished
:

86 
	`iscsi_logout_sync
(
iscsi
);

87 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

88  
ªt
;

89 
	}
}

	@test-tool/0300_readonly.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0300_ªad⁄ly
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
scsi_mode_£n£
 *
ms
;

28 
ªt
, 
lun
;

29 
d©a
[4096];

30 
unm≠_li°
 
li°
[1];

31 
fuŒ_size
;

33 
ªt
 = -1;

35 
	`¥ötf
("0300_readonly:\n");

36 
	`¥ötf
("==============\n");

37 i‡(
show_öfo
) {

38 
	`¥ötf
("TestÅhatáll commandsÅhat modifyÅhe medium fail forÑeadonly devices\n");

39 
	`¥ötf
("1, WRITE10át LUN 0 should fail.\n");

40 
	`¥ötf
("2, WRITE12át LUN 0 should fail.\n");

41 
	`¥ötf
("3, WRITE16át LUN 0 should fail.\n");

42 
	`¥ötf
("4, WRITESAME10át LUN 0 should fail.\n");

43 
	`¥ötf
("5, WRITESAME16át LUN 0 should fail.\n");

44 
	`¥ötf
("6, WRITESAME10 with UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

45 
	`¥ötf
("7, WRITESAME16 with UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

46 
	`¥ötf
("8, UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

47 
	`¥ötf
("9, WRITEVERIFY10át LUN 0 should fail.\n");

48 
	`¥ötf
("10, WRITEVERIFY12át LUN 0 should fail.\n");

49 
	`¥ötf
("11, WRITEVERIFY16át LUN 0 should fail.\n");

50 
	`¥ötf
("12, COMPAREANDWRITEát LUN 0 should fail.\n");

51 
	`¥ötf
("13, ORWRITEát LUN 0 should fail.\n");

52 
	`¥ötf
("\n");

56 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

57 i‡(
iscsi
 =
NULL
) {

58 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

63 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

67 i‡(!
d©a_loss
) {

68 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] --dataloss flagÇot set."

74 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

75 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0,

77 i‡(
èsk
 =
NULL
) {

78 
	`¥ötf
("FaûedÅÿ£nd mode£n£6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
föished
;

81 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

82 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

85 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0,

86 
fuŒ_size
);

87 i‡(
èsk
 =
NULL
) {

88 
	`¥ötf
("FaûedÅÿ£nd mode£n£6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
föished
;

92 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

93 i‡(
ms
 =
NULL
) {

94 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
föished
;

98 i‡(!(
ms
->
devi˚_•ecific_∑ømëî
 & 0x80)) {

99 
	`¥ötf
("Device isÇotÑead-only. SkippingÅest\n");

100 
ªt
 = -2;

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
ªt
 = 0;

110 
	`¥ötf
("WRITE10Åo LUN 0 ... ");

111 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

112 i‡(
èsk
 =
NULL
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
ªt
 = -1;

116 
föished
;

118 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("WRITE10 command should fail when writingÅoÑeadonly devices\n");

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


126 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


127 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("WRITE10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

130 
ªt
 = -1;

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
föished
;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`¥ötf
("[OK]\n");

139 
	`¥ötf
("WRITE12Åo LUN 0 ... ");

140 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

141 i‡(
èsk
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
föished
;

147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("WRITE12 command should fail when writingÅoÑeadonly devices\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


155 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


156 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("WRITE12 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

159 
ªt
 = -1;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
föished
;

163 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

168 
	`¥ötf
("WRITE16Åo LUN 0 ... ");

169 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

170 i‡(
èsk
 =
NULL
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
föished
;

176 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("WRITE16 command should fail when writingÅoÑeadonly devices\n");

179 
ªt
 = -1;

180 
	`scsi_‰ì_scsi_èsk
(
èsk
);

181 
föished
;

183 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


184 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


185 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

186 
	`¥ötf
("[FAILED]\n");

187 
	`¥ötf
("WRITE16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

188 
ªt
 = -1;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
föished
;

192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
	`¥ötf
("[OK]\n");

197 
	`¥ötf
("WRITESAME10Åo LUN 0 ... ");

198 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

199 
d©a
, 
block_size
,

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("[FAILED]\n");

204 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

205 
ªt
 = -1;

206 
föished
;

208 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

209 
	`¥ötf
("[FAILED]\n");

210 
	`¥ötf
("WRITESAME10 command should fail when writingÅoÑeadonly devices\n");

211 
ªt
 = -1;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
föished
;

215 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


216 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


217 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

218 
	`¥ötf
("[FAILED]\n");

219 
	`¥ötf
("WRITESAME10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

220 
ªt
 = -1;

221 
	`scsi_‰ì_scsi_èsk
(
èsk
);

222 
föished
;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
	`¥ötf
("[OK]\n");

229 
	`¥ötf
("WRITESAME16Åo LUN 0 ... ");

230 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

231 
d©a
, 
block_size
,

234 i‡(
èsk
 =
NULL
) {

235 
	`¥ötf
("[FAILED]\n");

236 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

237 
ªt
 = -1;

238 
föished
;

240 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

241 
	`¥ötf
("[FAILED]\n");

242 
	`¥ötf
("WRITESAME16 command should fail when writingÅoÑeadonly devices\n");

243 
ªt
 = -1;

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
föished
;

247 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


248 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


249 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

250 
	`¥ötf
("[FAILED]\n");

251 
	`¥ötf
("WRITESAME16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

252 
ªt
 = -1;

253 
	`scsi_‰ì_scsi_èsk
(
èsk
);

254 
föished
;

256 
	`scsi_‰ì_scsi_èsk
(
èsk
);

257 
	`¥ötf
("[OK]\n");

261 
	`¥ötf
("WRITESAME10Åo UNMAP LUN 0 ... ");

262 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

263 
	`¥ötf
("LUN isÇotÅhin-provisioned. [SKIPPED]\n");

264 
föished
;

266 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

267 
d©a
, 
block_size
,

270 i‡(
èsk
 =
NULL
) {

271 
	`¥ötf
("[FAILED]\n");

272 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

273 
ªt
 = -1;

274 
föished
;

276 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

277 
	`¥ötf
("[FAILED]\n");

278 
	`¥ötf
("WRITESAME10 command should fail when writingÅoÑeadonly devices\n");

279 
ªt
 = -1;

280 
	`scsi_‰ì_scsi_èsk
(
èsk
);

281 
föished
;

283 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


284 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


285 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

286 
	`¥ötf
("[FAILED]\n");

287 
	`¥ötf
("WRITESAME10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

288 
ªt
 = -1;

289 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
föished
;

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
	`¥ötf
("[OK]\n");

297 
	`¥ötf
("WRITESAME16Åo UNMAP LUN 0 ... ");

298 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

299 
d©a
, 
block_size
,

302 i‡(
èsk
 =
NULL
) {

303 
	`¥ötf
("[FAILED]\n");

304 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

305 
ªt
 = -1;

306 
föished
;

308 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

309 
	`¥ötf
("[FAILED]\n");

310 
	`¥ötf
("WRITESAME16 command should fail when writingÅoÑeadonly devices\n");

311 
ªt
 = -1;

312 
	`scsi_‰ì_scsi_èsk
(
èsk
);

313 
föished
;

315 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


316 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


317 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

318 
	`¥ötf
("[FAILED]\n");

319 
	`¥ötf
("WRITESAME16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

320 
ªt
 = -1;

321 
	`scsi_‰ì_scsi_èsk
(
èsk
);

322 
föished
;

324 
	`scsi_‰ì_scsi_èsk
(
èsk
);

325 
	`¥ötf
("[OK]\n");

329 
	`¥ötf
("UNMAP LUN 0 ... ");

330 
li°
[0].
lba
 = 0;

331 
li°
[0].
num
 = 1;

332 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

333 i‡(
èsk
 =
NULL
) {

334 
	`¥ötf
("[FAILED]\n");

335 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

336 
ªt
 = -1;

337 
föished
;

339 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

340 
	`¥ötf
("[FAILED]\n");

341 
	`¥ötf
("UNMAP command should fail when writingÅoÑeadonly devices\n");

342 
ªt
 = -1;

343 
	`scsi_‰ì_scsi_èsk
(
èsk
);

344 
föished
;

346 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


347 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


348 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

349 
	`¥ötf
("[FAILED]\n");

350 
	`¥ötf
("UNMAP failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

351 
ªt
 = -1;

352 
	`scsi_‰ì_scsi_èsk
(
èsk
);

353 
föished
;

355 
	`scsi_‰ì_scsi_èsk
(
èsk
);

356 
	`¥ötf
("[OK]\n");

360 
	`¥ötf
("WRITEVERIFY10Åo LUN 0 ... ");

361 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

362 i‡(
èsk
 =
NULL
) {

363 
	`¥ötf
("[FAILED]\n");

364 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

365 
ªt
 = -1;

366 
föished
;

368 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

369 
	`¥ötf
("[FAILED]\n");

370 
	`¥ötf
("WRITEVERIFY10 command should fail when writingÅoÑeadonly devices\n");

371 
ªt
 = -1;

372 
	`scsi_‰ì_scsi_èsk
(
èsk
);

373 
föished
;

375 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


376 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


377 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

378 
	`¥ötf
("[FAILED]\n");

379 
	`¥ötf
("WRITEVERIFY10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

380 
ªt
 = -1;

381 
	`scsi_‰ì_scsi_èsk
(
èsk
);

382 
föished
;

384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

385 
	`¥ötf
("[OK]\n");

389 
	`¥ötf
("WRITEVERIFY12Åo LUN 0 ... ");

390 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

391 i‡(
èsk
 =
NULL
) {

392 
	`¥ötf
("[FAILED]\n");

393 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

394 
ªt
 = -1;

395 
föished
;

397 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

398 
	`¥ötf
("[FAILED]\n");

399 
	`¥ötf
("WRITEVERIFY12 command should fail when writingÅoÑeadonly devices\n");

400 
ªt
 = -1;

401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

402 
föished
;

404 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


405 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


406 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

407 
	`¥ötf
("[FAILED]\n");

408 
	`¥ötf
("WRITEVERIFY12 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

409 
ªt
 = -1;

410 
	`scsi_‰ì_scsi_èsk
(
èsk
);

411 
föished
;

413 
	`scsi_‰ì_scsi_èsk
(
èsk
);

414 
	`¥ötf
("[OK]\n");

418 
	`¥ötf
("WRITEVERIFY16Åo LUN 0 ... ");

419 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

420 i‡(
èsk
 =
NULL
) {

421 
	`¥ötf
("[FAILED]\n");

422 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

423 
ªt
 = -1;

424 
föished
;

426 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

427 
	`¥ötf
("[FAILED]\n");

428 
	`¥ötf
("WRITEVERIFY16 command should fail when writingÅoÑeadonly devices\n");

429 
ªt
 = -1;

430 
	`scsi_‰ì_scsi_èsk
(
èsk
);

431 
föished
;

433 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


434 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


435 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

436 
	`¥ötf
("[FAILED]\n");

437 
	`¥ötf
("WRITEVERIFY16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

438 
ªt
 = -1;

439 
	`scsi_‰ì_scsi_èsk
(
èsk
);

440 
föished
;

442 
	`scsi_‰ì_scsi_èsk
(
èsk
);

443 
	`¥ötf
("[OK]\n");

447 
	`¥ötf
("COMPAREWRITEÅo LUN 0 ... ");

448 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

449 i‡(
èsk
 =
NULL
) {

450 
	`¥ötf
("[FAILED]\n");

451 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

452 
ªt
 = -1;

453 
föished
;

455 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

456 
	`¥ötf
("[FAILED]\n");

457 
	`¥ötf
("COMPAREANDWRITE command should fail when writingÅoÑeadonly devices\n");

458 
ªt
 = -1;

459 
	`scsi_‰ì_scsi_èsk
(
èsk
);

460 
föished
;

462 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


463 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


464 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

465 
	`¥ötf
("[FAILED]\n");

466 
	`¥ötf
("COMPAREANDWRITE failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

467 
ªt
 = -1;

468 
	`scsi_‰ì_scsi_èsk
(
èsk
);

469 
föished
;

471 
	`scsi_‰ì_scsi_èsk
(
èsk
);

472 
	`¥ötf
("[OK]\n");

476 
	`¥ötf
("ORWRITEÅo LUN 0 ... ");

477 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

478 i‡(
èsk
 =
NULL
) {

479 
	`¥ötf
("[FAILED]\n");

480 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

481 
ªt
 = -1;

482 
föished
;

484 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

485 
	`¥ötf
("[FAILED]\n");

486 
	`¥ötf
("ORWRITE command should fail when writingÅoÑeadonly devices\n");

487 
ªt
 = -1;

488 
	`scsi_‰ì_scsi_èsk
(
èsk
);

489 
föished
;

491 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


492 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


493 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

494 
	`¥ötf
("[FAILED]\n");

495 
	`¥ötf
("ORWRITE failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

496 
ªt
 = -1;

497 
	`scsi_‰ì_scsi_èsk
(
èsk
);

498 
föished
;

500 
	`scsi_‰ì_scsi_èsk
(
èsk
);

501 
	`¥ötf
("[OK]\n");

504 
föished
:

505 
	`iscsi_logout_sync
(
iscsi
);

506 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

507  
ªt
;

508 
	}
}

	@test-tool/0310_writeverify10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0310_wrôevîify10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0310_writeverify10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY10 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0311_writeverify10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0311_wrôevîify10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0311_writeverify10_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY10 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY10 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY10 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0314_writeverify10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0314_wrôevîify10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0314_writeverify10_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^31 should fail.\n");

37 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

38 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

39 
	`¥ötf
("\n");

43 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

44 i‡(
iscsi
 =
NULL
) {

45 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

59 i‡(
num_blocks
 >= 0x80000000) {

60 
	`¥ötf
("[SKIPPED]\n");

61 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

62 
ªt
 = -2;

63 
föished
;

67 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

68 
i
 = 1; i <= 256; i++) {

69 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

70 i‡(
èsk
 =
NULL
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


77 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


78 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

79 
	`¥ötf
("[SKIPPED]\n");

80 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
ªt
 = -2;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


93 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


94 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

110 
föished
;

112 
i
 = 1; i <= 256; i++) {

113 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0x80000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 i‡(
num_blocks
 >= 0xffffffff) {

144 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

145 
föished
;

147 
i
 = 1; i <= 256; i++) {

148 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0xffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


163 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


164 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

178 
i
=2; i<=256; i++) {

179 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

186 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


194 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


195 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
föished
;

202 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210  
ªt
;

211 
	}
}

	@test-tool/0320_writeverify12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0320_wrôevîify12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0320_writeverify12_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY12 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0321_writeverify12_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0321_wrôevîify12_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0321_writeverify12_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY12 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY12 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY12 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0324_writeverify12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0324_wrôevîify12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0324_writeverify12_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY12 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^31 should fail.\n");

37 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

38 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

39 
	`¥ötf
("\n");

43 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

44 i‡(
iscsi
 =
NULL
) {

45 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

59 i‡(
num_blocks
 >= 0x80000000) {

60 
	`¥ötf
("[SKIPPED]\n");

61 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

62 
ªt
 = -2;

63 
föished
;

67 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

68 
i
 = 1; i <= 256; i++) {

69 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

70 i‡(
èsk
 =
NULL
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


77 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


78 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

79 
	`¥ötf
("[SKIPPED]\n");

80 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
ªt
 = -2;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


93 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


94 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

110 
föished
;

112 
i
 = 1; i <= 256; i++) {

113 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0x80000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 i‡(
num_blocks
 >= 0xffffffff) {

144 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

145 
föished
;

147 
i
 = 1; i <= 256; i++) {

148 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0xffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


163 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


164 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

178 
i
=2; i<=256; i++) {

179 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

186 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


194 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


195 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
föished
;

202 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210  
ªt
;

211 
	}
}

	@test-tool/0330_writeverify16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0330_wrôevîify16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0330_writeverify16_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY16 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0331_writeverify16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0331_wrôevîify16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0331_writeverify16_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY16 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY16 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY16 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0334_writeverify16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0334_wrôevîify16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0334_writeverify16_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 i‡(!
d©a_loss
) {

50 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

51 
ªt
 = -2;

52 
föished
;

56 
ªt
 = 0;

59 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

60 
i
 = 1; i <= 256; i++) {

61 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


85 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


86 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

99 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

100 
i
 = 1; i <= 256; i++) {

101 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

102 i‡(
èsk
 =
NULL
) {

103 
	`¥ötf
("[FAILED]\n");

104 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

105 
ªt
 = -1;

106 
föished
;

108 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

111 
ªt
 = -1;

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
föished
;

115 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


116 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


117 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

122 
föished
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("[OK]\n");

130 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

131 
i
 = 1; i <= 256; i++) {

132 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

133 i‡(
èsk
 =
NULL
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
föished
;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


147 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


148 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
	`¥ötf
("[OK]\n");

161 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

162 
i
=2; i<=256; i++) {

163 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

164 i‡(
èsk
 =
NULL
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
föished
;

170 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


178 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


179 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

188 
	`¥ötf
("[OK]\n");

191 
föished
:

192 
	`iscsi_logout_sync
(
iscsi
);

193 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

194  
ªt
;

195 
	}
}

	@test-tool/0340_compareandwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$bôwi£_övît
(
d©a
[], 
Àn
) {

25 
j
;

27 
j
 = 0; j < 
Àn
; j++) {

28 
d©a
[
j
] = ~data[j];

30 
	}
}

32 
	$T0340_com∑ª™dwrôe_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

34 
iscsi_c⁄ãxt
 *
iscsi
;

35 
scsi_èsk
 *
èsk
;

36 
ªt
, 
i
, 
lun
;

37 
d©a
[4096 * 256];

39 
	`¥ötf
("0340_compareandwrite_simple:\n");

40 
	`¥ötf
("===================\n");

41 i‡(
show_öfo
) {

42 
	`¥ötf
("Test basic COMPAREANDWRITE functionality.\n");

43 
	`¥ötf
("1, Verify we can writeÅhe first 1-255 blocks ofÅhe LUN.\n");

44 
	`¥ötf
("2, Verify we can writeÅheÜast 1-255 blocks ofÅhe LUN.\n");

45 
	`¥ötf
("\n");

49 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

50 i‡(
iscsi
 =
NULL
) {

51 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

55 i‡(!
d©a_loss
) {

56 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

57 
ªt
 = -2;

58 
föished
;

62 
ªt
 = 0;

66 
	`¥ötf
("Compareánd write first 1-255 blocks ... ");

67 
i
 = 1; i < 256; i++) {

68 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

83 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

90 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

91 
	`mem˝y
(
d©a
 + (
i
 * 
block_size
), 
èsk
->
d©aö
.data, i * block_size);

92 
	`bôwi£_övît
(
d©a
 + (
i
 * 
block_size
), i * block_size);

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
föished
;

102 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


103 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


104 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

105 
	`¥ötf
("[SKIPPED]\n");

106 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
ªt
 = -2;

109 
föished
;

111 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("COMPAREANDWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("Compareánd writeÜast 1-255 blocks ... ");

125 
i
 = 1; i < 256; i++) {

126 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

127 i‡(
èsk
 =
NULL
) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

130 
ªt
 = -1;

131 
föished
;

133 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
föished
;

141 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
	`scsi_‰ì_scsi_èsk
(
èsk
);

146 
föished
;

148 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

149 
	`mem˝y
(
d©a
 + (
i
 * 
block_size
), 
èsk
->
d©aö
.data, i * block_size);

150 
	`bôwi£_övît
(
d©a
 + (
i
 * 
block_size
), i * block_size);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

154 i‡(
èsk
 =
NULL
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("COMPAREANDWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
	`¥ötf
("[OK]\n");

172 
föished
:

173 
	`iscsi_logout_sync
(
iscsi
);

174 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

175  
ªt
;

176 
	}
}

	@test-tool/0341_compareandwrite_mismatch.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0341_com∑ª™dwrôe_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 
d©a
[4096 * 256];

31 
	`¥ötf
("0341_compareandwrite_mismatch:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test COMPAREANDWRITE can detectá data mismatch.\n");

35 
	`¥ötf
("1, Verify we detectá mismatch inÅhe first 1-255 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("2, Verify we detectá mismatch inÅheÜast 1-255 blocks ofÅhe LUN.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

59 
	`¥ötf
("Compareánd write first 1-255 blocks (data isÇot matching) ... ");

60 
i
 = 1; i < 256; i++) {

61 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

76 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
d©a
[ (
i
 - 1Ë* 
block_size
] ^= 0xa5;

89 
	`mem£t
(
d©a
 + (
i
 * 
block_size
), 0xff, (i * block_size));

91 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
föished
;

98 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


99 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


100 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

101 
	`¥ötf
("[SKIPPED]\n");

102 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
ªt
 = -2;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("COMPAREANDWRITE successful. It should have failed with MISCOMPARE/MISCOMPARE_DURING_VERIFY\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("COMPAREANDWRITE Faûed wôhÅhêwr⁄g sí£ : %s(0x%02x)/%s(0x%04x). Iàshould havêÁûed wôh MISCOMPARE/MISCOMPARE_DURING_VERIFY\n", 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->£n£.key, 
	`scsi_£n£_ascq_°r
—ask->£n£.
ascq
),Åask->sense.ascq);

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Compareánd writeÜast 1-255 blocks (data isÇot matching) ... ");

130 
i
 = 1; i < 256; i++) {

131 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

146 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
d©a
[ (
i
 - 1Ë* 
block_size
] ^= 0xa5;

159 
	`mem£t
(
d©a
 + (
i
 * 
block_size
), 0xff, (i * block_size));

161 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

162 i‡(
èsk
 =
NULL
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
föished
;

168 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

169 
	`¥ötf
("[FAILED]\n");

170 
	`¥ötf
("COMPAREANDWRITE successful. It should have failed with MISCOMPARE/MISCOMPARE_DURING_VERIFY\n");

171 
ªt
 = -1;

172 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
föished
;

175 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


176 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


177 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

178 
	`¥ötf
("[FAILED]\n");

179 
	`¥ötf
("COMPAREANDWRITE Faûed wôhÅhêwr⁄g sí£ : %s(0x%02x)/%s(0x%04x). Iàshould havêÁûed wôh MISCOMPARE/MISCOMPARE_DURING_VERIFY\n", 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->£n£.key, 
	`scsi_£n£_ascq_°r
—ask->£n£.
ascq
),Åask->sense.ascq);

180 
ªt
 = -1;

181 
	`scsi_‰ì_scsi_èsk
(
èsk
);

182 
föished
;

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

186 
	`¥ötf
("[OK]\n");

189 
föished
:

190 
	`iscsi_logout_sync
(
iscsi
);

191 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

192  
ªt
;

193 
	}
}

	@test-tool/0343_compareandwrite_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0343_com∑ª™dwrôe_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0343_compareandwrite_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat COMPAREANDWRITE fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-255 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-255 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-255 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-255 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 
	`¥ötf
("Writing 1-255 blocks with one block beyondÉnd-of-device ... ");

59 
i
 = 1; i <= 255; i++) {

60 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


68 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


69 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -2;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


84 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


85 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Writing 1-255 blocksát LBA 2^63 ... ");

99 
i
 = 1; i < 256; i++) {

100 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

101 i‡(
èsk
 =
NULL
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Writing 1-255 blocksát LBA -1 ... ");

130 
i
 = 1; i < 256; i++) {

131 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


146 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


147 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("[OK]\n");

160 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

161 
i
 = 2; i < 256; i++) {

162 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

163 i‡(
èsk
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
föished
;

169 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


177 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


178 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

183 
föished
;

185 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
	`¥ötf
("[OK]\n");

190 
föished
:

191 
	`iscsi_logout_sync
(
iscsi
);

192 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

193  
ªt
;

194 
	}
}

	@test-tool/0350_orwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0350_‹wrôe_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 
j
;

30 
r1d©a
[4096 * 256];

31 
r2d©a
[4096 * 256];

32 
‹d©a
[4096 * 256];

34 
	`¥ötf
("0350_orwrite_simple:\n");

35 
	`¥ötf
("===================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test basic ORWRITE functionality.\n");

38 
	`¥ötf
("1, Verify we can writeÅhe first 1-255 blocks ofÅhe LUN.\n");

39 
	`¥ötf
("2, Verify we can writeÅheÜast 1-255 blocks ofÅhe LUN.\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

58 
ªt
 = 0;

62 
	`¥ötf
("Orwrite first 1-255 blocks ... ");

63 
i
 = 1; i < 256; i++) {

64 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
	`scsi_‰ì_scsi_èsk
(
èsk
);

76 
föished
;

79 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

86 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

87 
	`mem£t
(
‹d©a
, 0x5a, 
i
 * 
block_size
);

88 
j
 = 0; j < 
i
 * 
block_size
; j++) {

89 
r2d©a
[
j
] = 
r1d©a
[j] | 
‹d©a
[j];

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
‹d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

94 i‡(
èsk
 =
NULL
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
föished
;

100 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("ORWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
föished
;

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

124 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

127 
ªt
 = -1;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
föished
;

132 i‡(
	`memcmp
(
r2d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
)) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("Blocks wereÇot updatedásÉxpected.\n");

135 
ªt
 = -1;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
föished
;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
	`¥ötf
("[OK]\n");

146 
	`¥ötf
("OrwriteÜast 1-255 blocks ... ");

147 
i
 = 1; i < 256; i++) {

148 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

163 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
föished
;

170 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

171 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

172 
	`mem£t
(
‹d©a
, 0xa5, 
i
 * 
block_size
);

173 
j
 = 0; j < 
i
 * 
block_size
; j++) {

174 
r2d©a
[
j
] = 
r1d©a
[j] | 
‹d©a
[j];

176 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
‹d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

179 i‡(
èsk
 =
NULL
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
föished
;

185 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

186 
	`¥ötf
("[FAILED]\n");

187 
	`¥ötf
("ORWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

188 
ªt
 = -1;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
föished
;

192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

194 i‡(
èsk
 =
NULL
) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

197 
ªt
 = -1;

198 
föished
;

200 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

201 
	`¥ötf
("[FAILED]\n");

202 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

203 
ªt
 = -1;

204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

205 
föished
;

208 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

209 
	`¥ötf
("[FAILED]\n");

210 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

211 
ªt
 = -1;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
föished
;

216 i‡(
	`memcmp
(
r2d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
)) {

217 
	`¥ötf
("[FAILED]\n");

218 
	`¥ötf
("Blocks wereÇot updatedásÉxpected.\n");

219 
ªt
 = -1;

220 
	`scsi_‰ì_scsi_èsk
(
èsk
);

221 
föished
;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

229 
föished
:

230 
	`iscsi_logout_sync
(
iscsi
);

231 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

232  
ªt
;

233 
	}
}

	@test-tool/0351_orwrite_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0351_‹wrôe_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0351_orwrite_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how ORWRITE handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test ORWRITE with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ORWRITE with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0354_orwrite_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0354_‹wrôe_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0354_orwrite_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat ORWRITE fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

59 
i
 = 1; i <= 256; i++) {

60 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


68 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


69 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -2;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


84 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


85 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

99 
i
 = 1; i <= 256; i++) {

100 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

101 i‡(
èsk
 =
NULL
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

130 
i
 = 1; i <= 256; i++) {

131 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


146 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


147 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("[OK]\n");

160 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

161 
i
=2; i<=256; i++) {

162 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

163 i‡(
èsk
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
föished
;

169 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


177 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


178 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

183 
föished
;

185 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
	`¥ötf
("[OK]\n");

190 
föished
:

191 
	`iscsi_logout_sync
(
iscsi
);

192 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

193  
ªt
;

194 
	}
}

	@test-tool/0360_startstopunit_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0360_°¨t°›unô_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0360_startstopunit_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic STARTSTOPUNIT functionality.\n");

34 
	`¥ötf
("1, Verify we canÉjectÑemovableÅhe media with IMMED==1\n");

35 
	`¥ötf
("2, Verify we canÜoadÅhe media backágain with IMMED==1\n");

36 
	`¥ötf
("3, Verify we canÉjectÑemovableÅhe media with IMMED==0\n");

37 
	`¥ötf
("4, Verify we canÜoadÅhe media backágain with IMMED==0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 i‡(
öq
->
rmb
) {

59 
	`¥ötf
("Media isÑemovable. STARTSTOPUNIT should work\n");

61 
	`¥ötf
("Media isÇotÑemovable. STARTSTOPUNIT should fail\n");

65 
	`¥ötf
("STARTSTOPUNITÅryÅoÉjectÅhe media with IMMED==1 ... ");

66 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
	`¥ötf
("[OK]\n");

83 i‡(
öq
->
rmb
) {

84 
	`¥ötf
("Medium isÑemovable. Check with TESTUNITREADYÅhat wasÑemoved.\n");

85 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

86 i‡(
ªt
 != 0) {

87 
föished
;

90 
	`¥ötf
("Medium isÇotÑemovable. Check with TESTUNITREADYÅhat medium is stillÖresent.\n");

91 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

92 i‡(
ªt
 != 0) {

93 
föished
;

98 
	`¥ötf
("STARTSTOPUNITÅryÅo mountÅhe mediaágain with IMMED==1 ... ");

99 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
föished
;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`¥ötf
("[OK]\n");

116 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresent.\n");

117 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

123 
	`¥ötf
("STARTSTOPUNITÅryÅoÉjectÅhe media with IMMED==0 ... ");

124 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 1, 0);

125 i‡(
èsk
 =
NULL
) {

126 
	`¥ötf
("[FAILED]\n");

127 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
föished
;

131 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
	`¥ötf
("[OK]\n");

141 i‡(
öq
->
rmb
) {

142 
	`¥ötf
("Medium isÑemovable. Check with TESTUNITREADYÅhat wasÑemoved.\n");

143 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

144 i‡(
ªt
 != 0) {

145 
föished
;

148 
	`¥ötf
("Medium isÇotÑemovable. Check with TESTUNITREADYÅhat medium is stillÖresent.\n");

149 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

150 i‡(
ªt
 != 0) {

151 
föished
;

156 
	`¥ötf
("STARTSTOPUNITÅryÅo mountÅhe mediaágain with IMMED==0 ... ");

157 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 1, 1);

158 i‡(
èsk
 =
NULL
) {

159 
	`¥ötf
("[FAILED]\n");

160 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
ªt
 = -1;

162 
föished
;

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
	`¥ötf
("[OK]\n");

175 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresent.\n");

176 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

177 i‡(
ªt
 != 0) {

178 
föished
;

182 
föished
:

183 
	`iscsi_logout_sync
(
iscsi
);

184 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

185  
ªt
;

186 
	}
}

	@test-tool/0361_startstopunit_pwrcnd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0361_°¨t°›unô_pwr˙d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

30 
	`¥ötf
("0361_startstopunit_pwrcnd:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test STARTSTOPUNIT POWERCONDITION functionality.\n");

34 
	`¥ötf
("1, If PC != 0 we canÇotÉjectÅhe media\n");

35 
	`¥ötf
("2, TryÅoÑemountÅhe media\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 i‡(
öq
->
rmb
) {

57 
	`¥ötf
("Media isÑemovable. STARTSTOPUNIT should work\n");

59 
	`¥ötf
("Media isÇotÑemovable. STARTSTOPUNIT should fail\n");

61 
i
 = 1; i < 16; i++) {

62 
	`¥ötf
("TryÅÿeje˘ medü wôh PC =%d ... ", 
i
);

63 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 
i
, 0, 1, 0);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
föished
;

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
föished
;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

81 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

82 i‡(
ªt
 != 0) {

83 
föished
;

89 
	`¥ötf
("TryÅo mountÅhe mediaágain ... ");

90 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

91 i‡(
èsk
 =
NULL
) {

92 
	`¥ötf
("[FAILED]\n");

93 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

94 
ªt
 = -1;

95 
föished
;

97 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

102 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

109 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

110 i‡(
ªt
 != 0) {

111 
föished
;

115 
föished
:

116 
	`iscsi_logout_sync
(
iscsi
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118  
ªt
;

119 
	}
}

	@test-tool/0362_startstopunit_noloej.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0362_°¨t°›unô_nﬁ€j
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0362_startstopunit_noloej:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test STARTSTOPUNITánd LOEJ==0 willÇeverÉject/load media.\n");

34 
	`¥ötf
("1, LOEJ==0 IMMED==0 NO_FLUSH==0 START==0 willÇotÉjectÅhe media\n");

35 
	`¥ötf
("2, LOEJ==0 IMMED==0 NO_FLUSH==0 START==1 willÇotÉjectÅhe media\n");

36 
	`¥ötf
("3, LOEJ==0 IMMED==1 NO_FLUSH==0 START==0 willÇotÉjectÅhe media\n");

37 
	`¥ötf
("4, LOEJ==0 IMMED==1 NO_FLUSH==0 START==1 willÇotÉjectÅhe media\n");

38 
	`¥ötf
("5, LOEJ==0 IMMED==0 NO_FLUSH==1 START==0 willÇotÉjectÅhe media\n");

39 
	`¥ötf
("6, LOEJ==0 IMMED==0 NO_FLUSH==1 START==1 willÇotÉjectÅhe media\n");

40 
	`¥ötf
("7, LOEJ==0 IMMED==1 NO_FLUSH==1 START==0 willÇotÉjectÅhe media\n");

41 
	`¥ötf
("8, LOEJ==0 IMMED==1 NO_FLUSH==1 START==1 willÇotÉjectÅhe media\n");

42 
	`¥ötf
("\n");

46 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

47 i‡(
iscsi
 =
NULL
) {

48 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

52 i‡(!
d©a_loss
) {

53 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

54 
ªt
 = -2;

55 
föished
;

59 
ªt
 = 0;

62 i‡(!
öq
->
rmb
) {

63 
	`¥ötf
("Media isÇotÑemovable. SKIPPINGÅests\n");

64 
ªt
 = -2;

65 
föished
;

70 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==0 START==0 doesÇotÉject media ... ");

71 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

89 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

90 i‡(
ªt
 != 0) {

91 
föished
;

96 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

98 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==0 START==1 doesÇotÉject media ... ");

99 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 0, 1);

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
föished
;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`¥ötf
("[OK]\n");

116 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

117 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

124 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

126 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==0 START==0 doesÇotÉject media ... ");

127 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 0, 0);

128 i‡(
èsk
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
föished
;

134 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 
ªt
 = -1;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
föished
;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
	`¥ötf
("[OK]\n");

144 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

145 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

146 i‡(
ªt
 != 0) {

147 
föished
;

152 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

154 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==0 START==1 doesÇotÉject media ... ");

155 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 0, 1);

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

172 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

173 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

174 i‡(
ªt
 != 0) {

175 
föished
;

180 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

182 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==1 START==0 doesÇotÉject media ... ");

183 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 1, 0, 0);

184 i‡(
èsk
 =
NULL
) {

185 
	`¥ötf
("[FAILED]\n");

186 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

187 
ªt
 = -1;

188 
föished
;

190 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

191 
	`¥ötf
("[FAILED]\n");

192 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

193 
ªt
 = -1;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
föished
;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
	`¥ötf
("[OK]\n");

200 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

201 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

202 i‡(
ªt
 != 0) {

203 
föished
;

208 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

210 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==1 START==1 doesÇotÉject media ... ");

211 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 1, 0, 1);

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

215 
ªt
 = -1;

216 
föished
;

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

221 
ªt
 = -1;

222 
	`scsi_‰ì_scsi_èsk
(
èsk
);

223 
föished
;

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

228 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

229 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

230 i‡(
ªt
 != 0) {

231 
föished
;

236 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

238 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==1 START==0 doesÇotÉject media ... ");

239 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 1, 0, 0);

240 i‡(
èsk
 =
NULL
) {

241 
	`¥ötf
("[FAILED]\n");

242 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

243 
ªt
 = -1;

244 
föished
;

246 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

247 
	`¥ötf
("[FAILED]\n");

248 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

249 
ªt
 = -1;

250 
	`scsi_‰ì_scsi_èsk
(
èsk
);

251 
föished
;

253 
	`scsi_‰ì_scsi_èsk
(
èsk
);

254 
	`¥ötf
("[OK]\n");

256 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

257 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

258 i‡(
ªt
 != 0) {

259 
föished
;

264 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

266 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==1 START==1 doesÇotÉject media ... ");

267 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 1, 0, 1);

268 i‡(
èsk
 =
NULL
) {

269 
	`¥ötf
("[FAILED]\n");

270 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

271 
ªt
 = -1;

272 
föished
;

274 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

275 
	`¥ötf
("[FAILED]\n");

276 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

277 
ªt
 = -1;

278 
	`scsi_‰ì_scsi_èsk
(
èsk
);

279 
föished
;

281 
	`scsi_‰ì_scsi_èsk
(
èsk
);

282 
	`¥ötf
("[OK]\n");

284 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

285 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

286 i‡(
ªt
 != 0) {

287 
föished
;

292 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

294 
föished
:

295 
	`iscsi_logout_sync
(
iscsi
);

296 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

297  
ªt
;

298 
	}
}

	@test-tool/0370_nomedia.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0370_nomedü
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

29 
buf
[4096];

31 
	`¥ötf
("0370_nomedia:\n");

32 
	`¥ötf
("============\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhat mediaáccess commands fail correctly if media isÉjected\n");

35 
	`¥ötf
("1, Verify we canÉjectÅhe media\n");

36 
	`¥ötf
("2, Verify TESTUNITREADY\n");

37 
	`¥ötf
("3, Verify SYNCHRONIZECACHE10\n");

38 
	`¥ötf
("4, Verify SYNCHRONIZECACHE16\n");

39 
	`¥ötf
("5, Verify READ10\n");

40 
	`¥ötf
("6, Verify READ12\n");

41 
	`¥ötf
("7, Verify READ16\n");

42 
	`¥ötf
("8, Verify READCAPACITY10\n");

43 
	`¥ötf
("9, Verify READCAPACITY16\n");

44 
	`¥ötf
("10, Verify GETLBASTATUS\n");

45 
	`¥ötf
("11, Verify PREFETCH10\n");

46 
	`¥ötf
("12, Verify PREFETCH16\n");

47 
	`¥ötf
("13, Verify VERIFY10\n");

48 
	`¥ötf
("14, Verify VERIFY12\n");

49 
	`¥ötf
("15, Verify VERIFY16\n");

50 
	`¥ötf
("Write commands (only if --dataloss is specified)\n");

51 
	`¥ötf
("16, Verify WRITE10\n");

52 
	`¥ötf
("17, Verify WRITE12\n");

53 
	`¥ötf
("18, Verify WRITE16\n");

54 
	`¥ötf
("19, Verify WRITEVERIFY10\n");

55 
	`¥ötf
("20, Verify WRITEVERIFY12\n");

56 
	`¥ötf
("21, Verify WRITEVERIFY16\n");

57 
	`¥ötf
("22, Verify ORWRITE\n");

58 
	`¥ötf
("23, Verify COMPAREWRITE\n");

59 
	`¥ötf
("24, Verify WRITESAME10\n");

60 
	`¥ötf
("25, Verify WRITESAME16\n");

61 
	`¥ötf
("26, Verify UNMAP\n");

63 
	`¥ötf
("Verify we canÜoadÅhe media backágain\n");

64 
	`¥ötf
("\n");

68 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

69 i‡(
iscsi
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅest.\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

82 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

83 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

84 i‡(
èsk
 =
NULL
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Test TESTUNITREADY.\n");

106 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

107 i‡(
ªt
 != 0) {

108 
föished
;

112 
	`¥ötf
("Test SYNCHRONIZECACHE10 ... ");

113 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 0, 1, 1, 1);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd SYNCHRONIZECACHE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


121 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


122 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


123 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


124 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("SYNCHRONIZECACHE10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

127 
ªt
 = -1;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
föished
;

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
	`¥ötf
("[OK]\n");

135 
	`¥ötf
("Test SYNCHRONIZECACHE16 ... ");

136 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 0, 1, 1, 1);

137 i‡(
èsk
 =
NULL
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FaûedÅÿ£nd SYNCHRONIZECACHE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

140 
ªt
 = -1;

141 
föished
;

143 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


144 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


145 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


146 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


147 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("SYNCHRONIZECACHE16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
	`¥ötf
("Test READ10 ... ");

159 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

166 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


167 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


168 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


169 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


170 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("READ10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
	`¥ötf
("Test READ12 ... ");

182 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

183 i‡(
èsk
 =
NULL
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

186 
ªt
 = -1;

187 
föished
;

189 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


190 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


191 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


192 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


193 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("READ12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

204 
	`¥ötf
("Test READ16 ... ");

205 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

206 i‡(
èsk
 =
NULL
) {

207 
	`¥ötf
("[FAILED]\n");

208 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

209 
ªt
 = -1;

210 
föished
;

212 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


213 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


214 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


215 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


216 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

217 
	`¥ötf
("[FAILED]\n");

218 
	`¥ötf
("READ16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

219 
ªt
 = -1;

220 
	`scsi_‰ì_scsi_èsk
(
èsk
);

221 
föished
;

223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

224 
	`¥ötf
("[OK]\n");

227 
	`¥ötf
("Test READCAPACITY10 ... ");

228 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

229 i‡(
èsk
 =
NULL
) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

232 
ªt
 = -1;

233 
föished
;

235 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


236 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


237 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


238 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


239 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("READCAPACITY10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

242 
ªt
 = -1;

243 
	`scsi_‰ì_scsi_èsk
(
èsk
);

244 
föished
;

246 
	`scsi_‰ì_scsi_èsk
(
èsk
);

247 
	`¥ötf
("[OK]\n");

250 
	`¥ötf
("Test READCAPACITY16 ... ");

251 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

252 i‡(
èsk
 =
NULL
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

255 
ªt
 = -1;

256 
föished
;

258 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


259 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


260 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


261 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


262 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("READCAPACITY16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

265 
ªt
 = -1;

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
föished
;

269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

270 
	`¥ötf
("[OK]\n");

273 
	`¥ötf
("Test GETLBASTATUS ... ");

274 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 0, 64);

275 i‡(
èsk
 =
NULL
) {

276 
	`¥ötf
("[FAILED]\n");

277 
	`¥ötf
("FaûedÅÿ£nd GETLBASTATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

278 
ªt
 = -1;

279 
föished
;

281 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


282 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


283 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


284 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


285 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

286 
	`¥ötf
("[FAILED]\n");

287 
	`¥ötf
("GETLBASTATUSáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

288 
ªt
 = -1;

289 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
föished
;

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
	`¥ötf
("[OK]\n");

296 
	`¥ötf
("Test PREFETCH10.\n");

297 
ªt
 = 
	`¥e„tch10_nomedium
(
iscsi
, 
lun
, 0, 1, 1, 0);

298 i‡(
ªt
 != 0) {

299 
föished
;

303 
	`¥ötf
("Test PREFETCH16.\n");

304 
ªt
 = 
	`¥e„tch16_nomedium
(
iscsi
, 
lun
, 0, 1, 1, 0);

305 i‡(
ªt
 != 0) {

306 
föished
;

310 
	`¥ötf
("Test VERIFY10.\n");

311 
ªt
 = 
	`vîify10_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

312 i‡(
ªt
 != 0) {

313 
föished
;

317 
	`¥ötf
("Test VERIFY12.\n");

318 
ªt
 = 
	`vîify12_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

319 i‡(
ªt
 != 0) {

320 
föished
;

323 
	`¥ötf
("Test VERIFY16.\n");

324 
ªt
 = 
	`vîify16_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

325 i‡(
ªt
 != 0) {

326 
föished
;

331 i‡(!
d©a_loss
) {

332 
	`¥ötf
("--dataloss flag isÇot set. Skippingáll WRITEÅests\n");

333 
ªt
 = -2;

334 
föished
;

342 
	`¥ötf
("Test WRITE10 ... ");

343 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

344 i‡(
èsk
 =
NULL
) {

345 
	`¥ötf
("[FAILED]\n");

346 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

347 
ªt
 = -1;

348 
föished
;

350 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


351 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


352 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


353 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


354 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

355 
	`¥ötf
("[FAILED]\n");

356 
	`¥ötf
("WRITE10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

357 
ªt
 = -1;

358 
	`scsi_‰ì_scsi_èsk
(
èsk
);

359 
föished
;

361 
	`scsi_‰ì_scsi_èsk
(
èsk
);

362 
	`¥ötf
("[OK]\n");

365 
	`¥ötf
("Test WRITE12 ... ");

366 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

367 i‡(
èsk
 =
NULL
) {

368 
	`¥ötf
("[FAILED]\n");

369 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

370 
ªt
 = -1;

371 
föished
;

373 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


374 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


375 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


376 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


377 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

378 
	`¥ötf
("[FAILED]\n");

379 
	`¥ötf
("WRITE12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

380 
ªt
 = -1;

381 
	`scsi_‰ì_scsi_èsk
(
èsk
);

382 
föished
;

384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

385 
	`¥ötf
("[OK]\n");

388 
	`¥ötf
("Test WRITE16 ... ");

389 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

390 i‡(
èsk
 =
NULL
) {

391 
	`¥ötf
("[FAILED]\n");

392 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

393 
ªt
 = -1;

394 
föished
;

396 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


397 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


398 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


399 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


400 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

401 
	`¥ötf
("[FAILED]\n");

402 
	`¥ötf
("WRITE16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

403 
ªt
 = -1;

404 
	`scsi_‰ì_scsi_èsk
(
èsk
);

405 
föished
;

407 
	`scsi_‰ì_scsi_èsk
(
èsk
);

408 
	`¥ötf
("[OK]\n");

411 
	`¥ötf
("Test WRITEVERIFY10 ... ");

412 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

413 i‡(
èsk
 =
NULL
) {

414 
	`¥ötf
("[FAILED]\n");

415 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

416 
ªt
 = -1;

417 
föished
;

419 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


420 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


421 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


422 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


423 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

424 
	`¥ötf
("[FAILED]\n");

425 
	`¥ötf
("WRITEVERIFY10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

426 
ªt
 = -1;

427 
	`scsi_‰ì_scsi_èsk
(
èsk
);

428 
föished
;

430 
	`scsi_‰ì_scsi_èsk
(
èsk
);

431 
	`¥ötf
("[OK]\n");

434 
	`¥ötf
("Test WRITEVERIFY12 ... ");

435 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

436 i‡(
èsk
 =
NULL
) {

437 
	`¥ötf
("[FAILED]\n");

438 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

439 
ªt
 = -1;

440 
föished
;

442 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


443 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


444 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


445 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


446 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

447 
	`¥ötf
("[FAILED]\n");

448 
	`¥ötf
("WRITEVERIFY12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

449 
ªt
 = -1;

450 
	`scsi_‰ì_scsi_èsk
(
èsk
);

451 
föished
;

453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`¥ötf
("[OK]\n");

457 
	`¥ötf
("Test WRITEVERIFY16 ... ");

458 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

459 i‡(
èsk
 =
NULL
) {

460 
	`¥ötf
("[FAILED]\n");

461 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

462 
ªt
 = -1;

463 
föished
;

465 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


466 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


467 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


468 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


469 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

470 
	`¥ötf
("[FAILED]\n");

471 
	`¥ötf
("WRITEVERIFY16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

472 
ªt
 = -1;

473 
	`scsi_‰ì_scsi_èsk
(
èsk
);

474 
föished
;

476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

477 
	`¥ötf
("[OK]\n");

480 
	`¥ötf
("Test ORWRITE ... ");

481 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

482 i‡(
èsk
 =
NULL
) {

483 
	`¥ötf
("[FAILED]\n");

484 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

485 
ªt
 = -1;

486 
föished
;

488 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


489 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


490 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


491 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


492 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

493 
	`¥ötf
("[FAILED]\n");

494 
	`¥ötf
("ORWRITEáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

495 
ªt
 = -1;

496 
	`scsi_‰ì_scsi_èsk
(
èsk
);

497 
föished
;

499 
	`scsi_‰ì_scsi_èsk
(
èsk
);

500 
	`¥ötf
("[OK]\n");

503 
	`¥ötf
("Test COMPAREWRITE ... ");

504 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

505 i‡(
èsk
 =
NULL
) {

506 
	`¥ötf
("[FAILED]\n");

507 
	`¥ötf
("FaûedÅÿ£nd COMPAREWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

508 
ªt
 = -1;

509 
föished
;

511 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


512 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


513 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


514 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


515 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

516 
	`¥ötf
("[FAILED]\n");

517 
	`¥ötf
("COMPAREWRITEáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

518 
ªt
 = -1;

519 
	`scsi_‰ì_scsi_èsk
(
èsk
);

520 
föished
;

522 
	`scsi_‰ì_scsi_èsk
(
èsk
);

523 
	`¥ötf
("[OK]\n");

526 
	`¥ötf
("Test WRITESAME10 ... ");

527 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

528 
buf
, 
block_size
,

531 i‡(
èsk
 =
NULL
) {

532 
	`¥ötf
("[FAILED]\n");

533 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

534 
ªt
 = -1;

535 
föished
;

537 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


538 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


539 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


540 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


541 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

542 
	`¥ötf
("[FAILED]\n");

543 
	`¥ötf
("WRITESAME10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

544 
ªt
 = -1;

545 
	`scsi_‰ì_scsi_èsk
(
èsk
);

546 
föished
;

548 
	`scsi_‰ì_scsi_èsk
(
èsk
);

549 
	`¥ötf
("[OK]\n");

552 
	`¥ötf
("Test WRITESAME16 ... ");

553 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

554 
buf
, 
block_size
,

557 i‡(
èsk
 =
NULL
) {

558 
	`¥ötf
("[FAILED]\n");

559 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

560 
ªt
 = -1;

561 
föished
;

563 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


564 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


565 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


566 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


567 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

568 
	`¥ötf
("[FAILED]\n");

569 
	`¥ötf
("WRITESAME16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

570 
ªt
 = -1;

571 
	`scsi_‰ì_scsi_èsk
(
èsk
);

572 
föished
;

574 
	`scsi_‰ì_scsi_èsk
(
èsk
);

575 
	`¥ötf
("[OK]\n");

578 
	`¥ötf
("Test UNMAP ... ");

579 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

580 i‡(
èsk
 =
NULL
) {

581 
	`¥ötf
("[FAILED]\n");

582 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

583 
ªt
 = -1;

584 
föished
;

586 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


587 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


588 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


589 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


590 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

591 
	`¥ötf
("[FAILED]\n");

592 
	`¥ötf
("UNMAPáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

593 
ªt
 = -1;

594 
	`scsi_‰ì_scsi_èsk
(
èsk
);

595 
föished
;

597 
	`scsi_‰ì_scsi_èsk
(
èsk
);

598 
	`¥ötf
("[OK]\n");

602 
	`¥ötf
("TryÅo mountÅhe mediaágain ... ");

603 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

604 i‡(
èsk
 =
NULL
) {

605 
	`¥ötf
("[FAILED]\n");

606 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

607 
ªt
 = -1;

608 
föished
;

610 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

611 
	`¥ötf
("[FAILED]\n");

612 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

613 
ªt
 = -1;

614 
	`scsi_‰ì_scsi_èsk
(
èsk
);

615 
föished
;

617 
	`scsi_‰ì_scsi_èsk
(
èsk
);

618 
	`¥ötf
("[OK]\n");

620 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresentágain.\n");

621 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

622 i‡(
ªt
 != 0) {

623 
föished
;

627 
föished
:

628 
	`¥ötf
("Make sureÅhe media is mountedágain beforeÅheÇextÅest ... ");

629 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

630 i‡(
èsk
 =
NULL
) {

631 
	`¥ötf
("[FAILED]\n");

632 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

635 
	`scsi_‰ì_scsi_èsk
(
èsk
);

636 
	`¥ötf
("[OK]\n");

638 
	`iscsi_logout_sync
(
iscsi
);

639 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

640  
ªt
;

641 
	}
}

	@test-tool/0380_preventallow_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0380_¥evíèŒow_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0380_preventallow_simple:\n");

31 
	`¥ötf
("=========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic PREVENTALLOW functionality.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we can clear itágain\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 i‡(
öq
->
rmb
) {

57 
	`¥ötf
("Media isÑemovable. PREVENTALLOW should work\n");

59 
	`¥ötf
("Media isÇotÑemovable. PREVENTALLOW should fail\n");

61 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

62 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

73 i‡(
öq
->
rmb
) {

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
	`¥ötf
("[OK]\n");

86 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

87 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

88 i‡(
èsk
 =
NULL
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
föished
;

97 i‡(
öq
->
rmb
) {

98 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
	`¥ötf
("[OK]\n");

110 
föished
:

111 
	`iscsi_logout_sync
(
iscsi
);

112 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

113  
ªt
;

114 
	}
}

	@test-tool/0381_preventallow_eject.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0381_¥evíèŒow_eje˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0381_preventallow_eject:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test we canÇotÉject media when PREVENTALLOW isáctive.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

36 
	`¥ötf
("3, LoadÅhe mediaágain in case it wasÉjected\n");

37 
	`¥ötf
("4, Clear PREVENTALLOWágain\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

54 i‡(!
öq
->
rmb
) {

55 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

56 
ªt
 = -2;

57 
föished
;

60 
ªt
 = 0;

63 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

64 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

75 i‡(
öq
->
rmb
) {

76 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

89 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


97 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


98 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("Eject failed. [OK]\n");

109 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

110 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

111 i‡(
èsk
 =
NULL
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
föished
;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

125 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

126 i‡(
èsk
 =
NULL
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

129 
ªt
 = -1;

130 
föished
;

135 i‡(
öq
->
rmb
) {

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

145 
	`¥ötf
("[OK]\n");

148 
föished
:

149 
	`iscsi_logout_sync
(
iscsi
);

150 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

151  
ªt
;

152 
	}
}

	@test-tool/0382_preventallow_itnexus_loss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0382_¥evíèŒow_ô√xus_loss
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0382_preventallow_itnexus_loss:\n");

31 
	`¥ötf
("===============================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhatán I_T_NexusÜoss clears PREVENTALLOW.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

36 
	`¥ötf
("3, Tear downÅhe I_T_NexusándÑe-login onáÇewÇexus\n");

37 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

38 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

39 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

60 i‡(!
öq
->
rmb
) {

61 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

62 
ªt
 = -2;

63 
föished
;

66 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

67 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

78 i‡(
öq
->
rmb
) {

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
	`¥ötf
("[OK]\n");

91 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

92 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


100 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


101 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
föished
;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
	`¥ötf
("Eject failed. [OK]\n");

112 
	`¥ötf
("Tear downÅhe IT_Nexusánd createáÇew one ... ");

113 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

114 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

115 i‡(
iscsi
 =
NULL
) {

116 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

117 
föished
;

119 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

125 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

126 i‡(
èsk
 =
NULL
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

129 
ªt
 = -1;

130 
föished
;

132 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
föished
;

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
	`¥ötf
("[OK]\n");

143 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

144 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

145 i‡(
èsk
 =
NULL
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

148 
ªt
 = -1;

149 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

159 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

169 i‡(
öq
->
rmb
) {

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

178 
	`scsi_‰ì_scsi_èsk
(
èsk
);

179 
	`¥ötf
("[OK]\n");

182 
föished
:

183 
	`iscsi_logout_sync
(
iscsi
);

184 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

185  
ªt
;

186 
	}
}

	@test-tool/0383_preventallow_target_warm_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0383_¥evíèŒow_èrgë_w¨m_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0383_preventallow_target_warm_reset:\n");

49 
	`¥ötf
("====================================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá Warm ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá Warm ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅheÅarget\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

158 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

159 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

166 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

167 
	`¥ötf
("[FAILED]\n");

168 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

169 
ªt
 = -1;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
föished
;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

178 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

179 i‡(
èsk
 =
NULL
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
föished
;

188 
	`scsi_‰ì_scsi_èsk
(
èsk
);

189 
	`¥ötf
("[OK]\n");

192 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

193 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

194 i‡(
èsk
 =
NULL
) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

197 
ªt
 = -1;

198 
föished
;

203 i‡(
öq
->
rmb
) {

204 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

205 
	`¥ötf
("[FAILED]\n");

206 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

207 
ªt
 = -1;

208 
	`scsi_‰ì_scsi_èsk
(
èsk
);

209 
föished
;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
	`¥ötf
("[OK]\n");

216 
föished
:

217 
	`iscsi_logout_sync
(
iscsi
);

218 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

219  
ªt
;

220 
	}
}

	@test-tool/0384_preventallow_target_cold_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0384_¥evíèŒow_èrgë_cﬁd_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0384_preventallow_target_cold_reset:\n");

49 
	`¥ötf
("====================================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá Cold ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá Cold ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅheÅarget\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

159 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`¥ötf
("[FAILED]\n");

169 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

170 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

178 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

179 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
	`¥ötf
("[OK]\n");

193 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

194 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

195 i‡(
èsk
 =
NULL
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
föished
;

204 i‡(
öq
->
rmb
) {

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

213 
	`scsi_‰ì_scsi_èsk
(
èsk
);

214 
	`¥ötf
("[OK]\n");

217 
föished
:

218 
	`iscsi_logout_sync
(
iscsi
);

219 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

220  
ªt
;

221 
	}
}

	@test-tool/0385_preventallow_lun_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0385_¥evíèŒow_lun_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0385_preventallow_lun_reset:\n");

49 
	`¥ötf
("============================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá LUN ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá LUN ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi
, 
lun
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

159 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`¥ötf
("[FAILED]\n");

169 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

170 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

178 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

179 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
	`¥ötf
("[OK]\n");

193 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

194 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

195 i‡(
èsk
 =
NULL
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
föished
;

204 i‡(
öq
->
rmb
) {

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

213 
	`scsi_‰ì_scsi_èsk
(
èsk
);

214 
	`¥ötf
("[OK]\n");

217 
föished
:

218 
	`iscsi_logout_sync
(
iscsi
);

219 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

220  
ªt
;

221 
	}
}

	@test-tool/0386_preventallow_2_it_nexuses.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0386_¥evíèŒow_2_ôl_√xu£s
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0386_preventallow_2_itl_nexuses:\n");

32 
	`¥ötf
("============================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatÉach ITÇexus has its own PREVENT setting\n");

35 
	`¥ötf
("1, Verify we can set PREVENTALLOW onÅwo IT_Nexusen (ifÅhe medium isÑemovable)\n");

36 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

37 
	`¥ötf
("3, RemoveÅhe PREVENT onÅhis IT_Nexus\n");

38 
	`¥ötf
("4, Verify we can stillÇotÉjectÅhe media\n");

39 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

40 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

57 i‡(!
öq
->
rmb
) {

58 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

59 
ªt
 = -2;

60 
föished
;

63 
ªt
 = 0;

66 
	`¥ötf
("TryÅo set PREVENTALLOW on 2 different IT_Nexusen ... ");

67 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

78 i‡(
öq
->
rmb
) {

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

90 i‡(
iscsi
 =
NULL
) {

91 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

94 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi2
, 
lun
, 1);

95 i‡(
èsk
 =
NULL
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi2
));

98 
ªt
 = -1;

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

102 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

106 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


114 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


115 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
föished
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
	`¥ötf
("Eject failed. [OK]\n");

126 
	`¥ötf
("RemoveÅhe PREVENT onÅhis IT_Nexus ... ");

127 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

128 i‡(
èsk
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
föished
;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`¥ötf
("[OK]\n");

138 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

139 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


147 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


148 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("Eject failed. [OK]\n");

159 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
	`¥ötf
("[OK]\n");

174 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

175 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

176 i‡(
èsk
 =
NULL
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

179 
ªt
 = -1;

180 
föished
;

185 i‡(
öq
->
rmb
) {

186 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi2
, 
lun
, 0);

197 i‡(
èsk
 =
NULL
) {

198 
	`¥ötf
("[FAILED]\n");

199 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi2
));

200 
ªt
 = -1;

201 
föished
;

203 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210 i‡(
iscsi2
 !
NULL
) {

211 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

213  
ªt
;

214 
	}
}

	@test-tool/0390_mandatory_opcodes_sbc.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0390_m™d©‹y_›codes_sbc
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
 = 0, 
lun
;

29 
d©a
[4096];

31 
	`¥ötf
("0390_mandatory_opcodes_sbc:\n");

32 
	`¥ötf
("===========================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test support foráll mandatory opcodes for SBC devices\n");

35 
	`¥ötf
("1, Verify FORMAT UNIT isávailable\n");

36 
	`¥ötf
("2, Verify INQUIRY isávailable\n");

37 
	`¥ötf
("3, Verify MAINTENANCE IN isávailable (if SCCS bit is set)\n");

38 
	`¥ötf
("4, Verify MAINTENANCE OUT isávailable (if SCCS bit is set)\n");

39 
	`¥ötf
("5, Verify READ CAPACITY10 isávailable\n");

40 
	`¥ötf
("6, Verify READ CAPACITY16 isávailable\n");

41 
	`¥ötf
("7, Verify RECEIVE DIAGNOSTIC RESULT isávailable (if ENCSERV bit is set)\n");

42 
	`¥ötf
("8, Verify REDUNDANCY GROUP IN isávailable (if SCCS bit is set)\n");

43 
	`¥ötf
("9, Verify REDUNDANCY GROUP OUT isávailable (if SCCS bit is set)\n");

44 
	`¥ötf
("10, Verify REPORT LUNS isávailable\n");

45 
	`¥ötf
("11, Verify REQUEST SENSE isávailable\n");

46 
	`¥ötf
("12, Verify SEND DIAGNOSTIC isávailable\n");

47 
	`¥ötf
("13, Verify SPARE IN isávailable (if SCCS bit is set)\n");

48 
	`¥ötf
("14, Verify SPARE OUT isávailable (if SCCS bit is set)\n");

49 
	`¥ötf
("15, Verify TEST UNIT READY isávailable\n");

50 
	`¥ötf
("16, Verify UNAMP isávailable (if LBPME bit is set)\n");

51 
	`¥ötf
("17, Verify VOLUME SET IN isávailable (if SCCS bit is set)\n");

52 
	`¥ötf
("18, Verify VOLUME SET OUT isávailable (if SCCS bit is set)\n");

53 
	`¥ötf
("19, Verify WRITE SAME16 isávailable (if LBPME bit is set)\n");

54 
	`¥ötf
("20, Verify WRITE SAME32 isávailable (if LBPME bit is set)\n");

55 
	`¥ötf
("\n");

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

65 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

66 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

70 i‡(!
d©a_loss
) {

71 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] --dataloss flagÇot set."

76 
	`¥ötf
("Test FORMAT UNIT ... ");

77 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

80 
	`¥ötf
("Test INQUIRY.\n");

81 i‡(
	`öquúy
(
iscsi
, 
lun
, 0, 0, 64, 
NULL
) == -1) {

82 
ªt
 = -1;

86 
	`¥ötf
("Test MAINTENANCE IN ... ");

87 i‡(
öq
->
sccs
 == 0) {

88 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

90 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

94 
	`¥ötf
("Test MAINTENANCE OUT ... ");

95 i‡(
öq
->
sccs
 == 0) {

96 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

98 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

102 
	`¥ötf
("Test READ CAPACITY10 ... ");

103 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
,0 ,0);

104 i‡(
èsk
 =
NULL
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("FaûedÅÿ£nd READ CAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
föished
;

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("READ CAPACITY10 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

115 
	`¥ötf
("[OK]\n");

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("Test READ CAPACITY16 ... ");

121 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

122 i‡(
èsk
 =
NULL
) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("FaûedÅÿ£nd READ CAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

125 
ªt
 = -1;

126 
föished
;

128 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("READ CAPACITY16 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

133 
	`¥ötf
("[OK]\n");

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("Test RECEIVE DIAGNOSTIC RESULT ... ");

139 i‡(
öq
->
íc£rv
 == 0) {

140 
	`¥ötf
("[ENCSERV == 0, SKIPPING TEST]\n");

142 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

146 
	`¥ötf
("Test REDUNDANCY GROUP IN ... ");

147 i‡(
öq
->
sccs
 == 0) {

148 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

150 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

154 
	`¥ötf
("Test REDUNDANCY GROUP OUT ... ");

155 i‡(
öq
->
sccs
 == 0) {

156 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

158 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

162 
	`¥ötf
("Test REPORT LUNS ... ");

163 
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 64);

164 i‡(
èsk
 =
NULL
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("FaûedÅÿ£nd REPORT LUNS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
föished
;

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("REPORT LUNS comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

175 
	`¥ötf
("[OK]\n");

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
	`¥ötf
("Test REQUEST SENSE ... ");

181 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

184 
	`¥ötf
("Test SEND DIAGNOSTIC ... ");

185 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

188 
	`¥ötf
("Test SPARE IN ... ");

189 i‡(
öq
->
sccs
 == 0) {

190 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

191 
föished
;

193 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

196 
	`¥ötf
("Test SPARE OUT ... ");

197 i‡(
öq
->
sccs
 == 0) {

198 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

200 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

204 
	`¥ötf
("Test TEST UNIT READY.\n");

205 i‡(
	`ã°unôªady
(
iscsi
, 
lun
) == -1) {

206 
ªt
 = -1;

210 
	`¥ötf
("Test UNMAP ... ");

211 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

212 
	`¥ötf
("[LBPME == 0, SKIPPING TEST]\n");

214 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

215 i‡(
èsk
 =
NULL
) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

219 
föished
;

221 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

222 
	`¥ötf
("[FAILED]\n");

223 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

224 
ªt
 = -1;

226 
	`¥ötf
("[OK]\n");

228 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
	`¥ötf
("Test VOLUME SET IN ... ");

233 i‡(
öq
->
sccs
 == 0) {

234 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

236 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

240 
	`¥ötf
("Test VOLUME SET OUT ... ");

241 i‡(
öq
->
sccs
 == 0) {

242 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

244 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

248 
	`¥ötf
("Test WRITE SAME16 ... ");

249 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

250 
	`¥ötf
("[LBPME == 0, SKIPPING TEST]\n");

252 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

253 
d©a
, 
block_size
,

256 i‡(
èsk
 =
NULL
) {

257 
	`¥ötf
("[FAILED]\n");

258 
	`¥ötf
("FaûedÅÿ£nd WRITE SAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

259 
ªt
 = -1;

260 
föished
;

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("WRITE SAME16 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

265 
ªt
 = -1;

267 
	`¥ötf
("[OK]\n");

269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

272 
	`¥ötf
("Test WRITE SAME32 ... ");

273 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

276 
föished
:

277 
	`iscsi_logout_sync
(
iscsi
);

278 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

279  
ªt
;

280 
	}
}

	@test-tool/0400_inquiry_basic.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0400_öquúy_basic
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_°™d¨d
 *
°d_öq
;

30 
ªt
, 
lun
, 
i
;

31 
fuŒ_size
;

33 
	`¥ötf
("0400_inquiry_basic:\n");

34 
	`¥ötf
("===================\n");

35 i‡(
show_öfo
) {

36 
	`¥ötf
("TestÅhe standard INQUIRY data format.\n");

37 
	`¥ötf
("1, Check we canÑeadÅhe standard INQUIRY data.\n");

38 
	`¥ötf
("2, Standard data must beátÜeast 36 bytes in size.\n");

39 
	`¥ötf
("3, Device-type must beÉither of DISK/TAPE/CDROM.\n");

40 
	`¥ötf
("4, CheckÅhatÖeripheral-qualifier field is 0.\n");

41 
	`¥ötf
("5, CheckÅhatÅhe version field is valid.\n");

42 
	`¥ötf
("6, CheckÅhatÑesponse-data-format is valid.\n");

43 
	`¥ötf
("7, CheckÅhatádditional-length is valid.\n");

44 
	`¥ötf
("8, Verify HiSup flag is set.\n");

45 
	`¥ötf
("9, Verify vendor-identification is in ASCII.\n");

46 
	`¥ötf
("10, VerifyÖroduct-identification is in ASCII.\n");

47 
	`¥ötf
("11, VerifyÖroduct-revision-level is in ASCII.\n");

48 
	`¥ötf
("12, Verify AERC is clear in SPC-3ándÜater.\n");

49 
	`¥ötf
("13, Verify TrmTsk is clear in SPC-2ándÜater.\n");

50 
	`¥ötf
("\n");

54 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

55 i‡(
iscsi
 =
NULL
) {

56 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

61 
ªt
 = 0;

65 
	`¥ötf
("Read standard INQUIRY data ... ");

67 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 255);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
ªt
 = -1;

79 
föished
;

81 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

82 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
föished
;

93 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

94 i‡(
°d_öq
 =
NULL
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
ªt
 = -1;

99 
föished
;

101 
	`¥ötf
("[OK]\n");

103 
	`¥ötf
("CheckÅhat standard data is >= 36 bytes in size ... ");

104 i‡(
fuŒ_size
 < 36) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Standard INQUIRY data isÜessÅhan 36 bytes.\n");

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
ªt
 = -1;

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Check device-type isÉither of DISK, TAPE or CD/DVD ... ");

114 
°d_öq
->
devi˚_ty≥
) {

115 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

116 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

117 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("Devi˚-ty≥ i†nŸ DISK, TAPE o∏CD/DVD. Devi˚Ñï‹ãd:%s\n", 
	`scsi_devty≥_to_°r
(
°d_öq
->
devi˚_ty≥
));

122 
ªt
 = -1;

123 
ã°4
;

125 
	`¥ötf
("[OK]\n");

128 
ã°4
:

129 
	`¥ötf
("Check PREIPHERAL QUALIFIER FIELD is 0 ... ");

130 i‡(
°d_öq
->
quÆifõr
 != 0) {

131 
	`¥ötf
("[FAILED]\n");

132 
	`¥ötf
("QUALIFIER wa†nŸ 0, iàwa†%d\n", 
°d_öq
->
quÆifõr
);

133 
ªt
 = -1;

134 
ã°5
;

136 
	`¥ötf
("[OK]\n");

138 
ã°5
:

139 
	`¥ötf
("Check VERSION field isÉither 0x4, 0x5 or 0x6 ... ");

140 
°d_öq
->
vîsi⁄
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("InvÆid VERSION:%d. Should bê0x4, 0x5 o∏0x6\n", 
°d_öq
->
vîsi⁄
);

148 
ªt
 = -1;

149 
ã°6
;

151 
	`¥ötf
("[OK]\n");

153 
ã°6
:

154 
	`¥ötf
("Check RESPONSE DATA FORMAT is 2 ... ");

155 i‡(
°d_öq
->
ª•⁄£_d©a_f‹m©
 != 2) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("InvÆid RESPONSE_DATA_FORMAT:%d. Should bê2\n", 
°d_öq
->
ª•⁄£_d©a_f‹m©
);

158 
ªt
 = -1;

159 
ã°7
;

161 
	`¥ötf
("[OK]\n");

163 
ã°7
:

164 
	`¥ötf
("Verify Additional-Length ... ");

165 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 + 5 !
fuŒ_size
) {

166 
	`¥ötf
("[FAILED]\n");

167 
	`¥ötf
("InvÆidáddôi⁄Æ-Àngth. Wa†%d buàshould bê%d\n", 
°d_öq
->
addôi⁄Æ_Àngth
, 
fuŒ_size
-5);

168 
ªt
 = -1;

169 
ã°8
;

171 
	`¥ötf
("[OK]\n");

173 
ã°8
:

174 
	`¥ötf
("Verify HiSup is set ... ");

175 i‡(!
°d_öq
->
hisup
) {

176 
	`¥ötf
("[FAILED]\n");

177 
	`¥ötf
("HiSup flag isÇot set.\n");

178 
ªt
 = -1;

179 
ã°9
;

181 
	`¥ötf
("[OK]\n");

183 
ã°9
:

184 
	`¥ötf
("Verify VENDOR_IDENTIFICATION is in ASCII ... ");

185 
i
 = 8; i < 16; i++) {

187 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

190 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("VENDOR_IDENTIFICATION containsÇon-ASCII characters\n");

196 
ªt
 = -1;

197 
ã°10
;

199 
	`¥ötf
("[OK]\n");

201 
ã°10
:

202 
	`¥ötf
("Verify PRODUCT_IDENTIFICATION is in ASCII ... ");

203 
i
 = 16; i < 32; i++) {

205 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

208 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

212 
	`¥ötf
("[FAILED]\n");

213 
	`¥ötf
("PRODUCT_IDENTIFICATION containsÇon-ASCII characters\n");

214 
ªt
 = -1;

215 
ã°11
;

217 
	`¥ötf
("[OK]\n");

219 
ã°11
:

220 
	`¥ötf
("Verify PRODUCT_REVISION_LEVEL is in ASCII ... ");

221 
i
 = 32; i < 36; i++) {

223 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

226 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("PRODUCT_REVISION_LEVEL containsÇon-ASCII characters\n");

232 
ªt
 = -1;

233 
ã°12
;

235 
	`¥ötf
("[OK]\n");

237 
ã°12
:

238 
	`¥ötf
("Verify AERC is clear in SPC-3ándÜater ... ");

239 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x80 && 
°d_öq
->
vîsi⁄
 >= 5) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("AERC is set butÅhis deviceÑeports SPC-3 orÜater\n");

242 
ªt
 = -1;

243 
ã°13
;

245 
	`¥ötf
("[OK]\n");

247 
ã°13
:

248 
	`¥ötf
("Verify TrmTsk is clear in SPC-2ándÜater ... ");

249 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x40 && 
°d_öq
->
vîsi⁄
 >= 4) {

250 
	`¥ötf
("[FAILED]\n");

251 
	`¥ötf
("TrmTsk is set butÅhis deviceÑeports SPC-2 orÜater\n");

252 
ªt
 = -1;

253 
ã°14
;

255 
	`¥ötf
("[OK]\n");

257 
ã°14
:

261 
	`scsi_‰ì_scsi_èsk
(
èsk
);

264 
föished
:

265 
	`iscsi_logout_sync
(
iscsi
);

266 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

267  
ªt
;

268 
	}
}

	@test-tool/0401_inquiry_alloclen.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0401_öquúy_Ælo˛í
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
, 
i
;

31 
	`¥ötf
("0401_inquiry_alloclen:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test INQUIRY withálloclen 0-255.\n");

35 
	`¥ötf
("1, Test standard inquiry withálloclen 0-255 is successful\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

51 
	`¥ötf
("Test INQUIRY withálloclen 0-255 ... ");

52 
i
 = 0; i < 256; i++) {

53 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
i
);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("INQUIRY comm™d wôháŒo˛í:%d faûed : %s\n", 
i
, 
	`iscsi_gë_îr‹
(
iscsi
));

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
ªt
 = -1;

65 
föished
;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
	`¥ötf
("[OK]\n");

71 
föished
:

72 
	`iscsi_logout_sync
(
iscsi
);

73 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

74  
ªt
;

75 
	}
}

	@test-tool/0402_inquiry_evpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0402_öquúy_evpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
, 
i
;

31 
	`¥ötf
("0402_inquiry_evpd:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhe EVPD flag.\n");

35 
	`¥ötf
("1, TestÅhat EVPD==0ánd PC!=0 isánÉrror\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

51 
	`¥ötf
("Test INQUIRY with EVPD==0ánd PC!=0 ... ");

52 
i
 = 1; i < 256; i++) {

53 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 
i
, 255);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("INQUIRY should havêÁûed wôh CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


68 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


69 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("INQUIRY should havêÁûed wôh wr⁄g sí£ code. IàÁûed wôh %†buàshould havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -1;

74 
föished
;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsi
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

83  
ªt
;

84 
	}
}

	@test-tool/0403_inquiry_supported_vpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0403_öquúy_suµ‹ãd_vpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_suµ‹ãd_∑ges
 *
°d_öq
;

30 
size_t
 
i
;

31 
ªt
, 
lun
, 
j
;

32 
fuŒ_size
;

33 
∑ge_code
;

34 
scsi_öquúy_∑gecode
 
ªquúed_•c_∑ges
[] = {

35 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

36 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION


39 
	`¥ötf
("0403_inquiry_supported_vpd:\n");

40 
	`¥ötf
("==========================\n");

41 i‡(
show_öfo
) {

42 
	`¥ötf
("CheckÅhe INQUIRY SUPPORTED VPDÖage.\n");

43 
	`¥ötf
("1, Check we canÑeadÅhe SUPPORTED VPDÖage.\n");

44 
	`¥ötf
("2, Verify we haveáll mandatory SPC VPDÖages\n");

45 
	`¥ötf
("\n");

49 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

50 i‡(
iscsi
 =
NULL
) {

51 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

55 
ªt
 = 0;

57 
	`¥ötf
("Read SUPPORTED VPD data ... ");

59 
∑ge_code
 = 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
;

60 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 255);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
ªt
 = -1;

72 
föished
;

74 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

75 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 
fuŒ_size
)Ë=
NULL
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
föished
;

86 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

87 i‡(
°d_öq
 =
NULL
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
ªt
 = -1;

92 
föished
;

94 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Verify we haveáll mandatory SPC VPDÖages:\n");

97 
i
 = 0; i < (
ªquúed_•c_∑ges
Ë/ (
scsi_öquúy_∑gecode
); i++) {

98 
	`¥ötf
("VîifyÅhêèrgë suµ‹t†∑gê0x%02x ... ", 
ªquúed_•c_∑ges
[
i
]);

99 
j
 = 0; j < 
°d_öq
->
num_∑ges
; j++) {

100 i‡(
ªquúed_•c_∑ges
[
i
] =
°d_öq
->
∑ges
[
j
]) {

104 i‡(
j
 =
°d_öq
->
num_∑ges
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("T¨gë didÇŸÑï‹à∑gê0x%02x. Thi†∑gêi†m™d©‹y i¿SPC.\n", 
ªquúed_•c_∑ges
[
i
]);

107 
ªt
 = -1;

109 
	`¥ötf
("[OK]\n");

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

115 
föished
:

116 
	`iscsi_logout_sync
(
iscsi
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118  
ªt
;

119 
	}
}

	@test-tool/0404_inquiry_all_reported_vpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0404_öquúy_Æl_ªp‹ãd_vpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_suµ‹ãd_∑ges
 *
sup_öq
;

30 
ªt
, 
lun
, 
i
;

31 
fuŒ_size
;

32 
scsi_öquúy_∑gecode
 
∑ge_code
;

34 
	`¥ötf
("0404_inquiry_all_reported_vpd:\n");

35 
	`¥ötf
("==========================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("CheckÅhe INQUIRY SUPPORTED VPDÖage.\n");

38 
	`¥ötf
("1, Check we canÑeadÅhe SUPPORTED VPDÖage.\n");

39 
	`¥ötf
("2, Verify we canÑeadÉachÑeportedÖageánd checkÅhe qualifier,device-typeándÖage code onÅheÑeturned data\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
ªt
 = 0;

55 
	`¥ötf
("Read SUPPORTED VPD data ... ");

57 
∑ge_code
 = 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
;

58 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 255);

59 i‡(
èsk
 =
NULL
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
föished
;

65 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
ªt
 = -1;

70 
föished
;

72 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

73 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 
fuŒ_size
)Ë=
NULL
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

81 
föished
;

84 
sup_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

85 i‡(
sup_öq
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
ªt
 = -1;

90 
föished
;

92 
	`¥ötf
("[OK]\n");

94 
	`¥ötf
("ReadÉachÖageánd verify qualifier,ÅypeándÖage code:\n");

95 
i
 = 0; i < 
sup_öq
->
num_∑ges
; i++) {

96 
scsi_èsk
 *
pc_èsk
;

98 
	`¥ötf
("VîifyÖagê0x%02x c™ bêªad ... ", 
sup_öq
->
∑ges
[
i
]);

99 
pc_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
sup_öq
->
∑ges
[
i
], 255);

100 i‡(
pc_èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

106 i‡(
pc_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿªad VPDÖagê: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

110 
ªt
 = -1;

113 
	`¥ötf
("[OK]\n");

115 
	`¥ötf
("VîifyÖagê0x%02x quÆifõ∏ ... ", 
sup_öq
->
∑ges
[
i
]);

116 i‡((
pc_èsk
->
d©aö
.
d©a
[0] & 0xe0Ë>> 5 !
sup_öq
->
quÆifõr
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("Qualifier differs between VPDÖages: %x != %x\n",

119 
pc_èsk
->
d©aö
.
d©a
[0] & 0xe0, 
sup_öq
->
quÆifõr
);

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

124 
	`¥ötf
("[OK]\n");

127 
	`¥ötf
("VîifyÖagê0x%02x devi˚Åy≥ ... ", 
sup_öq
->
∑ges
[
i
]);

128 i‡((
pc_èsk
->
d©aö
.
d©a
[0] & 0x1fË!
sup_öq
->
devi˚_ty≥
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("Device Type differs between VPDÖages: %x != %x\n",

131 
pc_èsk
->
d©aö
.
d©a
[0] & 0x1f, 
sup_öq
->
devi˚_ty≥
);

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

136 
	`¥ötf
("[OK]\n");

139 
	`¥ötf
("VîifyÖagê0x%02xÖagêcodê ... ", 
sup_öq
->
∑ges
[
i
]);

140 i‡(
pc_èsk
->
d©aö
.
d©a
[1] !
sup_öq
->
∑ges
[
i
]) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("Page code is wrong: %x != %x\n",

143 
pc_èsk
->
d©aö
.
d©a
[1], 
sup_öq
->
∑ges
[
i
]);

144 
ªt
 = -1;

145 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

148 
	`¥ötf
("[OK]\n");

151 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
föished
:

157 
	`iscsi_logout_sync
(
iscsi
);

158 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

159  
ªt
;

160 
	}
}

	@test-tool/0410_readtoc_basic.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0410_ªadtoc_basic
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
, *
èsk1
;

29 
scsi_öquúy_°™d¨d
 *
°d_öq
;

30 
scsi_ªadˇ∑côy10
 *
rc10
;

31 
scsi_ªadtoc_li°
 *
li°
, *
li°1
;

32 
ªt
, 
lun
, 
i
, 
toc_devi˚
, 
fuŒ_size
;

33 
is_bœnk
 = 0;

34 
no_medium
 = 0;

36 
	`¥ötf
("0410_readtoc_basic:\n");

37 
	`¥ötf
("===================\n");

38 i‡(
show_öfo
) {

39 
	`¥ötf
("Test Read TOC command.\n");

40 
	`¥ötf
(" If device doesÇot support, just verifyáppropriateÉrrorÑeturned\n");

41 
	`¥ötf
("1, Verify we canÑeadÅhe TOC:Årack 0,Çon-MSF. (non-MMC devices shouldÑeturn sense)\n");

42 
	`¥ötf
("2, Make sureátÜeast 4 bytesÑeturnedás header.\n");

43 
	`¥ötf
("3, Verify we canÑeadÅhe TOC:Årack 1,Çon-MSF.\n");

44 
	`¥ötf
("4, Make sureátÜeast 4 bytesÑeturnedás header.\n");

45 
	`¥ötf
("5, VerifyÅrack 0ánd 1 bothÑeturnedÅhe same data.\n");

46 
	`¥ötf
("\n");

50 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

51 i‡(
iscsi
 =
NULL
) {

52 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

60 
	`¥ötf
("Read standard INQUIRY data ... ");

62 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 255);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -1;

74 
föished
;

76 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

77 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

88 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

89 i‡(
°d_öq
 =
NULL
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
ªt
 = -1;

94 
föished
;

96 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Check device-type isÉither of DISK, TAPE or CD/DVD ... ");

99 
°d_öq
->
devi˚_ty≥
) {

100 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

101 
toc_devi˚
 = 1;

103 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

104 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

105 
toc_devi˚
 = 0;

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("ThisÅest is onlyávailable on SBC/SBC/SSC devices\n");

111 
ªt
 = -2;

112 
föished
;

114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

115 
	`¥ötf
("[OK]\n");

118 
	`¥ötf
("CD/DVD Device. Check if mediumÖresent ... ");

119 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£ndÑódˇ∑côy10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

127 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

128 i‡(
rc10
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("ÁûedÅÿunm¨shÆ»ªadˇ∑côy10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
föished
;

136 
is_bœnk
 = 
rc10
->
lba
 ? 0 : 1;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


140 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


141 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


142 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


143 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

144 
no_medium
 = 1;

145 
	`¥ötf
("[OK]\n");

146 
	`¥ötf
("No medium in drive. Mediumáccess commands should fail\n");

147 
ã°1
;

148 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("Ródˇ∑côy comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

156 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
	`¥ötf
("[OK]\n");

159 i‡(
is_bœnk
) {

160 
	`¥ötf
("Blank diskÜoaded. ReadTOC should fail.\n");

162 
	`¥ötf
("There isá disk inÅhe drive. ReadTOC should work.\n");

167 
ã°1
:

168 
	`¥ötf
("Verify we can READTOC format 0000b (TOC)Årack 0 (%s) ... ",

169 
toc_devi˚
 ? "On MMC Device" : "OnÇon-MMC Device"

172 
èsk
 = 
	`iscsi_ªadtoc_sync
(
iscsi
, 
lun
, 0, 0, 0, 255);

173 i‡(
èsk
 =
NULL
) {

174 
	`¥ötf
("[FAILED]\n");

175 
	`¥ötf
("FaûedÅÿ£nd READTOC comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

176 
ªt
 = -1;

177 
föished
;

182 i‡(
no_medium
) {

183 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("READTOC Should have failed sinceÇo medium isÜoaded.\n");

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
ªt
 = -1;

188 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


193 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
 &&Åask->£n£.ascq !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


194 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("READTOC failed butáscq was wrong. Should "

198 "Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
ªt
 = -1;

201 
föished
;

204 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("No disk, we gotÅhe correct sense codeÅhat medium isÇotÖresent. SkippingÅheÑemainder ofÅheÅest\n");

206 
	`scsi_‰ì_scsi_èsk
(
èsk
);

207 
föished
;

213 i‡(!
toc_devi˚
) {

214 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

215 
	`¥ötf
("[FAILED]\n");

216 
	`¥ötf
("READTOC Should have failed\n");

217 
ªt
 = -1;

218 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


219 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


220 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

221 
	`¥ötf
("[FAILED]\n");

222 
	`¥ötf
("READTOC faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/INVALID OPERATION_CODE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

223 
ªt
 = -1;

225 
	`¥ötf
("[OK]\n");

226 
	`¥ötf
("Notán MMC device so READTOC failedás it should. SkippingÑest ofÅest\n");

228 
	`scsi_‰ì_scsi_èsk
(
èsk
);

229 
föished
;

232 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

233 
	`¥ötf
("[FAILED]\n");

234 
	`¥ötf
("READTOC comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

235 
	`scsi_‰ì_scsi_èsk
(
èsk
);

236 
ªt
 = -1;

237 
föished
;

239 
	`¥ötf
("[OK]\n");

242 
	`¥ötf
("Verify we gotátÜeast 4 bytes of data forÅrack 0 ... ");

243 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

244 i‡(
fuŒ_size
 < 4) {

245 
	`¥ötf
("[FAILED]\n");

246 
	`¥ötf
("TOC D©®Lígth %d < 4\n", 
fuŒ_size
);

247 
	`scsi_‰ì_scsi_èsk
(
èsk
);

248 
ªt
 = -1;

249 
föished
;

251 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

252 i‡(
li°
 =
NULL
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("Read TOC Unmarshall failed\n");

255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

256 
ªt
 = -1;

257 
föished
;

259 
	`¥ötf
("[OK]\n");

261 
	`¥ötf
("Verify we can READTOC format 0000b (TOC)Årack 1 ... ");

262 
èsk1
 = 
	`iscsi_ªadtoc_sync
(
iscsi
, 
lun
, 0, 1, 0, 255);

263 i‡(
èsk1
 =
NULL
) {

264 
	`¥ötf
("[FAILED]\n");

265 
	`¥ötf
("FaûedÅÿ£nd READTOC comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
ªt
 = -1;

268 
föished
;

271 i‡(
èsk1
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`¥ötf
("[FAILED]\n");

273 
	`¥ötf
("READTOC comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

274 
	`scsi_‰ì_scsi_èsk
(
èsk
);

275 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

276 
ªt
 = -1;

277 
föished
;

279 
	`¥ötf
("[OK]\n");

281 
	`¥ötf
("Verify we gotátÜeast 4 bytes of data forÅrack 1 ... ");

282 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk1
);

283 i‡(
fuŒ_size
 < 4) {

284 
	`¥ötf
("[FAILED]\n");

285 
	`¥ötf
("TOC D©®Lígth %d < 4\n", 
fuŒ_size
);

286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

287 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

288 
ªt
 = -1;

289 
föished
;

291 
li°1
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk1
);

292 i‡(
li°1
 =
NULL
) {

293 
	`¥ötf
("[FAILED]\n");

294 
	`¥ötf
("Read TOC Unmarshall failed\n");

295 
	`scsi_‰ì_scsi_èsk
(
èsk
);

296 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

297 
ªt
 = -1;

298 
föished
;

300 
	`¥ötf
("[OK]\n");

302 
	`¥ötf
("VerifyÅrack 0ánd 1 bothÑeturnedÅhe same data ... ");

303 i‡(
li°
->
num
 !
li°1
->num ||

304 
li°
->
fú°
 !
li°1
->first ||

305 
li°
->
œ°
 !
li°1
->last) {

306 
	`¥ötf
("[FAILED]\n");

307 
	`¥ötf
("Read TOC header ofÜba 0 != TOC ofÜba 1.\n");

308 
ªt
 = -1;

309 
	`scsi_‰ì_scsi_èsk
(
èsk
);

310 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

311 
föished
;

314 
i
=0; i<
li°
->
num
; i++) {

315 i‡(
li°
->
desc
[
i
].desc.
toc
.
adr
 !
li°1
->desc[i].desc.toc.adr ||

316 
li°
->
desc
[
i
].desc.
toc
.
c⁄åﬁ
 !
li°1
->desc[i].desc.toc.control ||

317 
li°
->
desc
[
i
].desc.
toc
.
åack
 !
li°1
->desc[i].desc.toc.track ||

318 
li°
->
desc
[
i
].desc.
toc
.
lba
 !
li°1
->desc[i].desc.toc.lba) {

319 
	`¥ötf
("[FAILED]\n");

320 
	`¥ötf
("Read TOC descriptors ofÜba 0 != TOC ofÜba 1.\n");

321 
ªt
 = -1;

322 
	`scsi_‰ì_scsi_èsk
(
èsk
);

323 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

324 
föished
;

327 
	`¥ötf
("[OK]\n");

328 
	`scsi_‰ì_scsi_èsk
(
èsk
);

329 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

332 
föished
:

333 
	`iscsi_logout_sync
(
iscsi
);

334 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

335  
ªt
;

336 
	}
}

	@test-tool/0420_reserve6_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0420_ª£rve6_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0420_reserve6_simple:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test RESERVE6/RELEASE6 commands if supported.\n");

35 
	`¥ötf
(" If device doesÇot support, just verifyáppropriateÉrrorÑeturned\n");

36 
	`¥ötf
("1. Test simple RESERVE6 followed by RELEASE6\n");

37 
	`¥ötf
("2. Test Initator 1 canÑeserve ifálreadyÑeserved by Intiator 1.\n");

38 
	`¥ötf
("3. Test Initiator 2 can'tÑeserve ifálreadyÑeserved by Initiator 1.\n");

39 
	`¥ötf
("3a. Test Initiator 2Ñelease whenÑeserved by Initiator 1Ñeturns success, but withoutÑeleasing.\n");

40 
	`¥ötf
("4. Test Initiator 1 canÅestunitready ifÑeserved by Initiator 1.\n");

41 
	`¥ötf
("5. Test Initiator 2 can'tÅestunitready ifÑeserved by Initiator 1.\n");

42 
	`¥ötf
("6. Test Initiator 2 can getÑeservation once Intiator 1ÑeleasesÑeservation.\n");

44 
	`¥ötf
("\n");

48 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

49 i‡(
iscsi
 =
NULL
) {

50 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

55 i‡(
iscsi2
 =
NULL
) {

56 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 1;

58 
föished
;

61 
ªt
 = 0;

63 
	`¥ötf
("Send RESERVE6 ... ");

64 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

68 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

73 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


74 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


75 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

76 
	`¥ötf
("[OK]\n");

77 
	`¥ötf
("RESERVE6 Not Supported\n");

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed butáscq was wrong. Should "

85 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

94 
	`¥ötf
("Send RELEASE6 ... ");

95 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

99 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
föished
;

103 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("RELEASE6 command failed : %s\n",

106 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
	`¥ötf
("[OK]\n");

114 
	`¥ötf
("TestÅhatÑeservation works.\n");

115 
	`¥ötf
("Send RESERVE6 from Initiator 1. ... ");

116 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

117 i‡(
èsk
 =
NULL
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

120 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
föished
;

124 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("RESERVE6 command failed : %s\n",

127 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
föished
;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
	`¥ötf
("[OK]\n");

135 
	`¥ötf
("Send RESERVE6 from Initiator 2. Expect conflict. ... ");

136 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

137 i‡(
èsk
 =
NULL
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

140 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("Expected RESERVATION CONFLICT\n");

148 
ªt
 = -1;

149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 
föished
;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
	`¥ötf
("[OK]\n");

155 
	`¥ötf
("Send RELEASE6 from Initiator 2..Expect NO-OP. ... ");

156 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi2
, 
lun
);

157 i‡(
èsk
 =
NULL
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

160 
	`iscsi_gë_îr‹
(
iscsi
));

161 
ªt
 = -1;

162 
föished
;

165 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

166 
	`¥ötf
("[FAILED]\n");

167 
	`¥ötf
("RELEASE6 command: failed with sense %s\n",

168 
	`iscsi_gë_îr‹
(
iscsi
));

169 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Send TESTUNITREADY from Initiator 1\n");

178 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

179 i‡(
ªt
 != 0) {

180 
föished
;

183 
	`¥ötf
("Send TESTUNITREADY from Initiator 2. Expect conflict.\n");

184 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

185 i‡(
ªt
 != 0) {

186 
föished
;

189 
	`¥ötf
("TestÅhatÑeleaseáctually works\n");

190 
	`¥ötf
("Send RELEASE6 from Initiator 1 ... ");

191 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

192 i‡(
èsk
 =
NULL
) {

193 
	`¥ötf
("[FAILED]\n");

194 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

195 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
föished
;

199 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

200 
	`¥ötf
("[FAILED]\n");

201 
	`¥ötf
("RELEASE6 command failed : %s\n",

202 
	`iscsi_gë_îr‹
(
iscsi
));

203 
ªt
 = -1;

204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

205 
föished
;

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

208 
	`¥ötf
("[OK]\n");

210 
	`¥ötf
("Send RESERVE6 Initiator 2 ... ");

211 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

215 
	`iscsi_gë_îr‹
(
iscsi
));

216 
ªt
 = -1;

217 
föished
;

219 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

220 
	`¥ötf
("[FAILED]\n");

221 
	`¥ötf
("RESERVE6 command failed : %s\n",

222 
	`iscsi_gë_îr‹
(
iscsi
));

223 
ªt
 = -1;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
föished
;

227 
	`scsi_‰ì_scsi_èsk
(
èsk
);

228 
	`¥ötf
("[OK]\n");

230 
	`¥ötf
("Send RELEASE6 Initiator 2 ... ");

231 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

232 i‡(
èsk
 =
NULL
) {

233 
	`¥ötf
("[FAILED]\n");

234 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

235 
	`iscsi_gë_îr‹
(
iscsi
));

236 
ªt
 = -1;

237 
föished
;

239 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("RELEASE6 command failed : %s\n",

242 
	`iscsi_gë_îr‹
(
iscsi
));

243 
ªt
 = -1;

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
föished
;

247 
	`scsi_‰ì_scsi_èsk
(
èsk
);

248 
	`¥ötf
("[OK]\n");

249 
föished
;

252 
föished
:

253 i‡(
iscsi2
 !
NULL
) {

254 
	`iscsi_logout_sync
(
iscsi2
);

255 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

257 i‡(
iscsi
 !
NULL
) {

258 
	`iscsi_logout_sync
(
iscsi
);

259 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

261  
ªt
;

262 
	}
}

	@test-tool/0421_reserve6_lun_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~<pﬁl.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	smgmt_èsk
 {

27 
uöt32_t
 
	m°©us
;

28 
uöt32_t
 
	mföished
;

31 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

32 *
comm™d_d©a
, *
¥iv©e_d©a
)

34 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

36 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

37 
mgmt_èsk
->
föished
 = 1;

38 
	}
}

40 
	$T0421_ª£rve6_lun_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0421_reserve6_lun_reset:\n");

49 
	`¥ötf
("========================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatá RESERVE6 is dropped byá LUN-reset\n");

52 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

53 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

54 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator\n");

55 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator\n");

56 
	`¥ötf
("4, Sendá LUN-resetÅoÅheÅarget\n");

57 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

69 i‡(
iscsi2
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
ªt
 = 0;

79 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

80 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

84 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


89 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


90 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

91 
	`¥ötf
("[SKIPPED]\n");

92 
	`¥ötf
("RESERVE6 Not Supported\n");

93 
ªt
 = -2;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

100 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

109 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

110 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

111 i‡(
ªt
 != 0) {

112 
föished
;

116 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

117 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

122 
	`¥ötf
("Sendá LUN ResetÅoÅheÅarget ... ");

123 
	`iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi
, 
lun
, 
mgmt_cb
, &
mgmt_èsk
);

124 
mgmt_èsk
.
föished
 == 0) {

125 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

126 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

128 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

129 
	`¥ötf
("Poll failed");

130 
föished
;

132 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

133 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 i‡(
mgmt_èsk
.
°©us
 != 0) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

140 
föished
;

142 
	`¥ötf
("[OK]\n");

148 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions onÅhe second initiator.\n");

149 
agaö
:

150 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

151 i‡(
ªt
 != 0) {

152 
agaö
;

156 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

157 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

158 i‡(
ªt
 != 0) {

159 
föished
;

163 
föished
:

164 i‡(
iscsi2
 !
NULL
) {

165 
	`iscsi_logout_sync
(
iscsi2
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

168 i‡(
iscsi
 !
NULL
) {

169 
	`iscsi_logout_sync
(
iscsi
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

172  
ªt
;

173 
	}
}

	@test-tool/0422_reserve6_logout.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0422_ª£rve6_logout
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0422_reserve6_logout:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatá RESERVE6 is dropped whenÅhe session isÜogged out\n");

35 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

36 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

37 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

38 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

39 
	`¥ötf
("4, LogoutÅhe first initiator.\n");

40 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

52 i‡(
iscsi2
 =
NULL
) {

53 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

62 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

63 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

67 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`¥ötf
("[SKIPPED]\n");

75 
	`¥ötf
("RESERVE6 Not Supported\n");

76 
ªt
 = -2;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

83 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

93 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

94 i‡(
ªt
 != 0) {

95 
föished
;

99 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

100 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

101 i‡(
ªt
 != 0) {

102 
föished
;

105 
	`¥ötf
("LogoutÅhe first initiator ... ");

106 
	`iscsi_logout_sync
(
iscsi
);

107 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

108 
iscsi
 = 
NULL
;

109 
	`¥ötf
("[OK]\n");

111 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

112 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

113 i‡(
ªt
 != 0) {

114 
föished
;

118 
föished
:

119 i‡(
iscsi2
 !
NULL
) {

120 
	`iscsi_logout_sync
(
iscsi2
);

121 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

123 i‡(
iscsi
 !
NULL
) {

124 
	`iscsi_logout_sync
(
iscsi
);

125 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

127  
ªt
;

128 
	}
}

	@test-tool/0423_reserve6_sessionloss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0423_ª£rve6_£ssi⁄loss
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0423_reserve6_sessionloss:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatá RESERVE6 is dropped whenÅhe session is dropped\n");

35 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

36 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

37 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

38 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

39 
	`¥ötf
("4, Drop session forÅhe first initiator.\n");

40 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

52 i‡(
iscsi2
 =
NULL
) {

53 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

62 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

63 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

67 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`¥ötf
("[SKIPPED]\n");

75 
	`¥ötf
("RESERVE6 Not Supported\n");

76 
ªt
 = -2;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

83 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

93 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

94 i‡(
ªt
 != 0) {

95 
föished
;

99 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

100 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

101 i‡(
ªt
 != 0) {

102 
föished
;

106 
	`¥ötf
("DropÅhe sessionÅoÅhe first initiator ... ");

107 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

108 
iscsi
 = 
NULL
;

109 
	`¥ötf
("[OK]\n");

111 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

112 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

113 i‡(
ªt
 != 0) {

114 
föished
;

118 
föished
:

119 i‡(
iscsi2
 !
NULL
) {

120 
	`iscsi_logout_sync
(
iscsi2
);

121 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

123 i‡(
iscsi
 !
NULL
) {

124 
	`iscsi_logout_sync
(
iscsi
);

125 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

127  
ªt
;

128 
	}
}

	@test-tool/0424_reserve6_target_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~<pﬁl.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	smgmt_èsk
 {

27 
uöt32_t
 
	m°©us
;

28 
uöt32_t
 
	mföished
;

31 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

32 *
comm™d_d©a
, *
¥iv©e_d©a
)

34 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

36 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

37 
mgmt_èsk
->
föished
 = 1;

38 
	}
}

40 
	$T0424_ª£rve6_èrgë_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0424_reserve6_target_reset:\n");

49 
	`¥ötf
("========================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatá RESERVE6 is dropped byá Target-reset\n");

52 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

53 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

54 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator\n");

55 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator\n");

56 
	`¥ötf
("4, Sendá Target-reset\n");

57 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

69 i‡(
iscsi2
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
ªt
 = 0;

76 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

77 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

78 i‡(
èsk
 =
NULL
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

81 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


86 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


87 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

88 
	`¥ötf
("[SKIPPED]\n");

89 
	`¥ötf
("RESERVE6 Not Supported\n");

90 
ªt
 = -2;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

97 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

106 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

107 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

108 i‡(
ªt
 != 0) {

109 
föished
;

113 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

114 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

115 i‡(
ªt
 != 0) {

116 
föished
;

119 
	`¥ötf
("Sendá Target Cold-Reset ... ");

120 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

121 
mgmt_èsk
.
föished
 == 0) {

122 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

123 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

125 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

126 
	`¥ötf
("Poll failed");

127 
föished
;

129 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

130 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 i‡(
mgmt_èsk
.
°©us
 != 0) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

137 
föished
;

139 
	`¥ötf
("[OK]\n");

145 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions onÅhe second initiator.\n");

146 
agaö
:

147 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

148 i‡(
ªt
 != 0) {

149 
agaö
;

153 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator ... ");

154 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

155 i‡(
ªt
 != 0) {

156 
föished
;

160 
föished
:

161 i‡(
iscsi2
 !
NULL
) {

162 
	`iscsi_logout_sync
(
iscsi2
);

163 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

165 i‡(
iscsi
 !
NULL
) {

166 
	`iscsi_logout_sync
(
iscsi
);

167 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

169  
ªt
;

170 
	}
}

	@test-tool/0430_report_all_supported_ops.c

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<˘y≥.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0430_ªp‹t_Æl_suµ‹ãd_›s
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
tmp_rsoc
;

31 
scsi_comm™d_des¸ùt‹
 *
desc
;

32 
ªt
, 
lun
;

33 
fuŒ_size
, 
desc_size
;

34 
i
;

36 
	`¥ötf
("0430_report_all_supported_ops:\n");

37 
	`¥ötf
("===================\n");

38 i‡(
show_öfo
) {

39 
	`¥ötf
("Test MaintenanceIn: Report Supported Operations.\n");

40 
	`¥ötf
("1, Report Supported Ops (noÅimeout information).\n");

41 
	`¥ötf
("2, Report Supported Ops (withÅimeout information).\n");

42 
	`¥ötf
("\n");

46 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

47 i‡(
iscsi
 =
NULL
) {

48 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

52 
ªt
 = 0;

54 
	`¥ötf
("See if Report Supported Opcodes is supported... ");

56 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

57 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

59 i‡(
èsk
 =
NULL
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("FailedÅo send Report Supported Opcodes command : %s\n",

62 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


67 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


68 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

69 
	`¥ötf
("[SKIPPED]\n");

70 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

71 
	`iscsi_gë_îr‹
(
iscsi
));

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -2;

74 
föished
;

76 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

79 
	`iscsi_gë_îr‹
(
iscsi
));

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
ªt
 = -1;

82 
föished
;

84 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

86 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 i‡((
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

90 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

91 
fuŒ_size
)Ë=
NULL
) {

92 
	`¥ötf
("[FAILED]\n");

93 
	`¥ötf
("REPORT SUPPORTED OPCODES faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

94 
ªt
 = -1;

95 
föished
;

98 
tmp_rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

99 i‡(
tmp_rsoc
 =
NULL
) {

100 
	`¥ötf
("[FAILED]\n");

101 
	`¥ötf
("failedÅo unmarshall REPORT SUPPORTED OPCODES datain blob\n");

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
ªt
 = -1;

104 
föished
;

107 
	`¥ötf
("Suµ‹ãd Comm™ds: %d\n", 
tmp_rsoc
->
num_des¸ùt‹s
);

108 
	`¥ötf
("=======================\n");

109 
i
 = 0; i < 
tmp_rsoc
->
num_des¸ùt‹s
; i++) {

110 
	`¥ötf
("op:%x\tsa:%x\tcdbÜength:%d\n",

111 
tmp_rsoc
->
des¸ùt‹s
[
i
].
›code
,

112 
tmp_rsoc
->
des¸ùt‹s
[
i
].
ß
,

113 
tmp_rsoc
->
des¸ùt‹s
[
i
].
cdb_Àn
);

116 
	`¥ötf
("\n[OK]\n");

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("See if Report Supported Opcodes with Timeouts is supported... ");

122 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

123 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

125 i‡(
èsk
 =
NULL
) {

126 
	`¥ötf
("[FAILED]\n");

127 
	`¥ötf
("FailedÅo send Report Supported Opcodes command : %s\n",

128 
	`iscsi_gë_îr‹
(
iscsi
));

129 
ªt
 = -1;

130 
föished
;

132 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


133 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


134 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE


135 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
)) {

136 
	`¥ötf
("[SKIPPED]\n");

137 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

138 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
ªt
 = -2;

141 
föished
;

143 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

144 
	`¥ötf
("[FAILED]\n");

145 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

146 
	`iscsi_gë_îr‹
(
iscsi
));

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
ªt
 = -1;

149 
föished
;

151 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

153 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 i‡((
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

158 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

159 
fuŒ_size
)Ë=
NULL
) {

160 
	`¥ötf
("[FAILED]\n");

161 
	`¥ötf
("REPORT SUPPORTED OPCODES faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

162 
ªt
 = -1;

163 
föished
;

166 
tmp_rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

167 i‡(
tmp_rsoc
 =
NULL
) {

168 
	`¥ötf
("[FAILED]\n");

169 
	`¥ötf
("failedÅo unmarshall REPORT SUPPORTED OPCODES datain blob\n");

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
ªt
 = -1;

172 
föished
;

175 
	`¥ötf
("Suµ‹ãd Comm™d†(wôhÅimeouàöf‹m©i⁄): %d\n", 
tmp_rsoc
->
num_des¸ùt‹s
);

176 
	`¥ötf
("=======================\n");

177 
desc_size
 =  (
scsi_comm™d_des¸ùt‹
)

178 +  (
scsi_›_timeout_des¸ùt‹
);

179 
desc
 = &
tmp_rsoc
->
des¸ùt‹s
[0];

181 
	`¥ötf
("\n[OK]\n");

182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
:

185 
	`iscsi_logout_sync
(
iscsi
);

186 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

187  
ªt
;

188 
	}
}

	@test-tool/1000_cmdsn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	gch™ge_cmd¢
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

29 
ch™ge_cmd¢
) {

32 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
maxcmd¢
 + 1);

36 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 0);

40 
ch™ge_cmd¢
 = 0;

42 
	}
}

44 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

45 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

47 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

48 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

50 
°©e
->
föished
 = 1;

51 
°©e
->
°©us
 = status;

53 i‡(
°©us
) {

54 
èsk
->
°©us
 = status;

56 
	}
}

59 
	$T1000_cmd¢_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

61 
iscsi_c⁄ãxt
 *
iscsi
;

62 
scsi_èsk
 *
èsk
;

63 
ªt
, 
lun
;

64 
d©a
[4096 * 2];

65 
iscsi_async_°©e
 
ã°_°©e
;

67 
	`¥ötf
("1000_cmdsn_invalid:\n");

68 
	`¥ötf
("==================\n");

69 i‡(
show_öfo
) {

70 
	`¥ötf
("Test sending commands with invalid cmdsn values.\n");

71 
	`¥ötf
("CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN\n");

72 
	`¥ötf
("1, TestÅhatá CMDSN > MAXCMDSN isánÉrror\n");

73 
	`¥ötf
("2, TestÅhatá CMDSN == 0 isánÉrror\n");

74 
	`¥ötf
("\n");

78 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

79 i‡(
iscsi
 =
NULL
) {

80 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

84 i‡(!
d©a_loss
) {

85 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

86 
ªt
 = -2;

87 
föished
;

91 
ªt
 = 0;

93 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

94 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

95 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

97 
	`¥ötf
("Write 2 blocks with CMDSN > MAXCMDSN ... ");

98 
ch™ge_cmd¢
 = 1;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

104 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

106 
ã°_cb
, &
ã°_°©e
);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 
ã°_°©e
.
èsk
 =Åask;

114 
ã°_°©e
.
föished
 = 0;

115 
ã°_°©e
.
°©us
 = 0;

116 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

117 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

122 
föished
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

130 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

131 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

133 
	`¥ötf
("Wrôê2 block†wôh CMDSN =0 ... ");
	`fÊush
(
°dout
);

134 
ch™ge_cmd¢
 = 2;

139 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

140 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

142 
ã°_cb
, &
ã°_°©e
);

143 i‡(
èsk
 =
NULL
) {

144 
	`¥ötf
("[FAILED]\n");

145 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

146 
ªt
 = -1;

147 
föished
;

149 
ã°_°©e
.
èsk
 =Åask;

150 
ã°_°©e
.
föished
 = 0;

151 
ã°_°©e
.
°©us
 = 0;

152 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
	`¥ötf
("[OK]\n");

165 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

167 
föished
:

168 
loˇl_iscsi_queue_pdu
 = 
NULL
;

169 
	`iscsi_logout_sync
(
iscsi
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

171  
ªt
;

172 
	}
}

	@test-tool/1010_datasn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	g˛amp_d©a¢
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

29 
uöt32_t
 
d©a¢
;

31 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

34 
˛amp_d©a¢
) {

37 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 0);

41 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 27);

45 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], -1);

49 
d©a¢
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[36]);

50 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 1 - 
d©a¢
);

54 
	}
}

56 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

57 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

59 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

60 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

62 
°©e
->
föished
 = 1;

63 
°©e
->
°©us
 = status;

65 i‡(
°©us
) {

66 
èsk
->
°©us
 = status;

68 
	}
}

71 
	$T1010_d©a¢_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

73 
iscsi_c⁄ãxt
 *
iscsi
;

74 
scsi_èsk
 *
èsk
;

75 
ªt
, 
lun
;

76 
d©a
[4096 * 2];

77 
iscsi_async_°©e
 
ã°_°©e
;

79 
	`¥ötf
("1010_datasn_invalid:\n");

80 
	`¥ötf
("==================\n");

81 i‡(
show_öfo
) {

82 
	`¥ötf
("Test sending commands with invalid datasn values.\n");

83 
	`¥ötf
("1, TestÅhat 2 DATA-IN with DATASN==0 isánÉrror\n");

84 
	`¥ötf
("2, TestÅhat 2 DATA-IN with DATASN==27 isánÉrror\n");

85 
	`¥ötf
("3, TestÅhat 2 DATA-IN with DATASN==-1 isánÉrror\n");

86 
	`¥ötf
("4, TestÅhat 2 DATA-IN with DATASN inÑeverse order (1,0) isánÉrror\n");

87 
	`¥ötf
("\n");

91 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

92 i‡(
iscsi
 =
NULL
) {

93 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

97 i‡(!
d©a_loss
) {

98 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

99 
ªt
 = -2;

100 
föished
;

104 
ªt
 = 0;

106 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

107 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

108 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

110 
	`¥ötf
("Write 2 DATA-IN with DATASN == 0 ... ");

114 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

116 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

118 
ã°_cb
, &
ã°_°©e
);

119 i‡(
èsk
 =
NULL
) {

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

122 
ªt
 = -1;

123 
föished
;

125 
˛amp_d©a¢
 = 1;

126 
ã°_°©e
.
èsk
 =Åask;

127 
ã°_°©e
.
föished
 = 0;

128 
ã°_°©e
.
°©us
 = 0;

129 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

130 
˛amp_d©a¢
 = 0;

131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
	`¥ötf
("[OK]\n");

143 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

144 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

145 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

147 
	`¥ötf
("Write 2 DATA-IN with DATASN == 27 ... ");

151 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

153 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

155 
ã°_cb
, &
ã°_°©e
);

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 
˛amp_d©a¢
 = 2;

163 
ã°_°©e
.
èsk
 =Åask;

164 
ã°_°©e
.
föished
 = 0;

165 
ã°_°©e
.
°©us
 = 0;

166 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

167 
˛amp_d©a¢
 = 0;

168 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

169 
	`¥ötf
("[FAILED]\n");

170 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

171 
ªt
 = -1;

172 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
föished
;

175 
	`scsi_‰ì_scsi_èsk
(
èsk
);

176 
	`¥ötf
("[OK]\n");

180 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

181 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

182 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

184 
	`¥ötf
("Write 2 DATA-IN with DATASN == -1 ... ");

188 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

190 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

192 
ã°_cb
, &
ã°_°©e
);

193 i‡(
èsk
 =
NULL
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
föished
;

199 
˛amp_d©a¢
 = 3;

200 
ã°_°©e
.
èsk
 =Åask;

201 
ã°_°©e
.
föished
 = 0;

202 
ã°_°©e
.
°©us
 = 0;

203 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

204 
˛amp_d©a¢
 = 0;

205 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
	`¥ötf
("[OK]\n");

217 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

220 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

221 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

222 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

224 
	`¥ötf
("Write 2 DATA-IN with DATASN inÑeverse order (1, 0) ... ");

228 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

230 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

232 
ã°_cb
, &
ã°_°©e
);

233 i‡(
èsk
 =
NULL
) {

234 
	`¥ötf
("[FAILED]\n");

235 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

236 
ªt
 = -1;

237 
föished
;

239 
˛amp_d©a¢
 = 4;

240 
ã°_°©e
.
èsk
 =Åask;

241 
ã°_°©e
.
föished
 = 0;

242 
ã°_°©e
.
°©us
 = 0;

243 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

244 
˛amp_d©a¢
 = 0;

245 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

246 
	`¥ötf
("[FAILED]\n");

247 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

248 
ªt
 = -1;

249 
	`scsi_‰ì_scsi_èsk
(
èsk
);

250 
föished
;

252 
	`scsi_‰ì_scsi_èsk
(
èsk
);

253 
	`¥ötf
("[OK]\n");

257 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

260 
föished
:

262 
loˇl_iscsi_queue_pdu
 = 
NULL
;

263 
	`iscsi_logout_sync
(
iscsi
);

264 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

265  
ªt
;

266 
	}
}

	@test-tool/1020_bufferoffset_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	gch™ge_buf„roff£t
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

29 
uöt32_t
 
buf„r_off£t
;

31 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

34 
buf„r_off£t
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[40]);

35 
ch™ge_buf„roff£t
) {

38 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„r_off£t
 + 1024*1024);

42 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„r_off£t
 - 
block_size
);

46 
	}
}

48 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

49 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

51 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

52 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

54 
°©e
->
föished
 = 1;

55 
°©e
->
°©us
 = status;

57 i‡(
°©us
) {

58 
èsk
->
°©us
 = status;

60 
	}
}

63 
	$T1020_buf„roff£t_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

65 
iscsi_c⁄ãxt
 *
iscsi
;

66 
scsi_èsk
 *
èsk
;

67 
ªt
, 
lun
;

68 
d©a
[4096 * 256];

69 
iscsi_async_°©e
 
ã°_°©e
;

71 
	`¥ötf
("1020_bufferoffset_invalid:\n");

72 
	`¥ötf
("==========================\n");

73 i‡(
show_öfo
) {

74 
	`¥ötf
("Test sending commands with invalid bufferoffset values.\n");

75 
	`¥ötf
("WeÇegotiate both DataPDUInOrderánd DataSequenceInOrder so BufferOffset must be in sequence both withinándácross multiple sequences\n");

76 
	`¥ötf
("1, TestÅhat BufferOffset==1MÅoo high isánÉrror\n");

77 
	`¥ötf
("2, TestÅhat BufferOffset==-'block_size' isánÉrror\n");

78 
	`¥ötf
("\n");

82 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

83 i‡(
iscsi
 =
NULL
) {

84 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

89 i‡(!
d©a_loss
) {

90 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

91 
ªt
 = -2;

92 
föished
;

96 
ªt
 = 0;

98 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

99 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

100 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

102 
	`¥ötf
("Write 2 DATA-IN with BUFFEROFFSET 1MÅoo high ... ");

106 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

108 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

110 
ã°_cb
, &
ã°_°©e
);

111 i‡(
èsk
 =
NULL
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
föished
;

117 
ch™ge_buf„roff£t
 = 1;

118 
ã°_°©e
.
èsk
 =Åask;

119 
ã°_°©e
.
föished
 = 0;

120 
ã°_°©e
.
°©us
 = 0;

121 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

122 
ch™ge_buf„roff£t
 = 0;

123 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

126 
ªt
 = -1;

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
föished
;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
	`¥ötf
("[OK]\n");

135 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

136 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

137 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

139 
	`¥ötf
("Wrôê2 DATA-IN wôh BUFFEROFFSET==-%zu ... ", 
block_size
);

143 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

145 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

147 
ã°_cb
, &
ã°_°©e
);

148 i‡(
èsk
 =
NULL
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
föished
;

154 
ch™ge_buf„roff£t
 = 2;

155 
ã°_°©e
.
èsk
 =Åask;

156 
ã°_°©e
.
föished
 = 0;

157 
ã°_°©e
.
°©us
 = 0;

158 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

159 
ch™ge_buf„roff£t
 = 0;

160 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
	`¥ötf
("[OK]\n");

172 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

173 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

174 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

176 
föished
:

177 
loˇl_iscsi_queue_pdu
 = 
NULL
;

178 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

179  
ªt
;

180 
	}
}

	@test-tool/1030_unsolicited_data_overflow.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<¨∑/öë.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

27 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

29 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

30 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

32 
°©e
->
föished
 = 1;

33 
°©e
->
°©us
 = status;

35 i‡(
°©us
) {

36 
èsk
->
°©us
 = status;

38 
	}
}

40 
	$T1030_unsﬁicôed_d©a_ovîÊow
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
;

43 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

44 
scsi_èsk
 *
èsk
;

45 
ªt
, 
lun
;

46 *
buf
 = 
NULL
;

47 
iscsi_async_°©e
 
ã°_°©e
;

49 
	`¥ötf
("1030_unsolicited_data_overflow:\n");

50 
	`¥ötf
("===============================\n");

51 i‡(
show_öfo
) {

52 
	`¥ötf
("Test sending command with way more unsolicited dataÅhanÅheÅarget supports\n");

53 
	`¥ötf
("1, Send HUGE unsolicited dataÅoÅheÅarget.\n");

54 
	`¥ötf
("2, VerifyÅheÅarget is stillálive\n");

55 
	`¥ötf
("\n");

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

65 i‡(!
d©a_loss
) {

66 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

67 
ªt
 = -2;

68 
föished
;

72 
ªt
 = 0;

74 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

77 
iscsi
->
fú°_bur°_Àngth
 *= 16;

78 
buf
 = 
	`mÆloc
(
iscsi
->
fú°_bur°_Àngth
);

80 
	`¥ötf
("WriteÅoo much unsolicited data ... ");

84 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

87 
èsk
 = 
	`iscsi_wrôe16_èsk
(
iscsi
, 
lun
, 0, 
buf
,

88 
iscsi
->
fú°_bur°_Àngth
, 
block_size
,

90 
ã°_cb
, &
ã°_°©e
);

91 i‡(
èsk
 =
NULL
) {

92 
	`¥ötf
("[FAILED]\n");

93 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

94 
ªt
 = -1;

95 
föished
;

98 
ã°_°©e
.
èsk
 =Åask;

99 
ã°_°©e
.
föished
 = 0;

100 
ã°_°©e
.
°©us
 = 0;

101 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

102 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("VerifyÅheÅarget is stillálive ... ");

106 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

107 i‡(
iscsi2
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("Target is dead?\n");

110 
ªt
 = -1;

111 
föished
;

113 
	`¥ötf
("[OK]\n");

115 
föished
:

116 
	`‰ì
(
buf
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

119  
ªt
;

120 
	}
}

	@test-tool/1031_unsolicited_data_out.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<¨∑/öë.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°.h
"

28 
	$my_iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_d©a
 *
d©a
,

29 *
d±r
, 
dsize
, 
pduÆignmít
)

31 
Àn
, 
Æig√d
;

32 *
buf
;

34 i‡(
dsize
 == 0) {

35 
	`¥ötf
("TryingÅoáppend zero size dataÅo iscsi_data");

39 
Àn
 = 
d©a
->
size
 + 
dsize
;

40 
Æig√d
 = 
Àn
;

41 i‡(
pduÆignmít
) {

42 
Æig√d
 = (aligned+3)&0xfffffffc;

44 
buf
 = 
	`mÆloc
(
Æig√d
);

45 i‡(
buf
 =
NULL
) {

46 
	`¥ötf
("ÁûedÅÿÆloˇã buf„∏f‹ %d byãs", 
Àn
);

50 i‡(
d©a
->
size
 > 0) {

51 
	`mem˝y
(
buf
, 
d©a
->d©a, d©a->
size
);

53 
	`mem˝y
(
buf
 + 
d©a
->
size
, 
d±r
, 
dsize
);

54 i‡(
Àn
 !
Æig√d
) {

56 
	`mem£t
(
buf
+
Àn
, 0, 
Æig√d
-len);

59 
	`‰ì
(
d©a
->data);

61 
d©a
->d©®
buf
;

62 
d©a
->
size
 = 
Àn
;

65 
	}
}

68 
	$my_iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

69 *
d±r
, 
dsize
)

71 i‡(
	`my_iscsi_add_d©a
(
iscsi
, &
pdu
->
outd©a
, 
d±r
, 
dsize
, 1) != 0) {

72 
	`¥ötf
("failedÅoádd dataÅoÖdu buffer");

77 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->outd©a.
size
 - 
ISCSI_HEADER_SIZE
);

80 
	}
}

83 
	$my_iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
)

85 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[16], 
ôt
);

86 
	}
}

89 
	$my_iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
)

91 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[28], 
exp°©¢¢
);

92 
	}
}

95 
	$my_iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
)

97 
pdu
->
outd©a
.
d©a
[1] = 
Êags
;

98 
	}
}

101 
	$my_iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
)

103 
pdu
->
outd©a
.
d©a
[8] = 
lun
 >> 8;

104 
pdu
->
outd©a
.
d©a
[9] = 
lun
 & 0xff;

105 
	}
}

107 
iscsi_pdu
 *

108 
	$my_iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

109 
iscsi_›code
 
ª•⁄£_›code
, 
uöt32_t
 
ôt
, uöt32_à
Êags
)

111 
iscsi_pdu
 *
pdu
;

113 
pdu
 = 
	`mÆloc
((
iscsi_pdu
));

114 i‡(
pdu
 =
NULL
) {

115 
	`¥ötf
("failedÅoállocateÖdu");

116  
NULL
;

118 
	`mem£t
(
pdu
, 0, (
iscsi_pdu
));

120 
pdu
->
outd©a
.
size
 = 
ISCSI_HEADER_SIZE
;

121 
pdu
->
outd©a
.
d©a
 = 
	`mÆloc
’du->outd©a.
size
);

123 i‡(
pdu
->
outd©a
.
d©a
 =
NULL
) {

124 
	`¥ötf
("failedÅoállocateÖdu header");

125 
	`‰ì
(
pdu
);

126  
NULL
;

128 
	`mem£t
(
pdu
->
outd©a
.
d©a
, 0,Ödu->outd©a.
size
);

131 
pdu
->
outd©a
.
d©a
[0] = 
›code
;

132 
pdu
->
ª•⁄£_›code
 =Ñesponse_opcode;

135 i‡(
›code
 =
ISCSI_PDU_LOGIN_REQUEST
) {

136 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[8], &
iscsi
->
isid
[0], 6);

140 
	`my_iscsi_pdu_£t_ôt
(
pdu
, 
ôt
);

141 
pdu
->
ôt
 = itt;

144 
pdu
->
Êags
 = flags;

146  
pdu
;

147 
	}
}

149 
	$T1031_unsﬁicôed_d©a_out
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

151 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
;

152 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

153 
i
, 
ªt
, 
lun
;

154 
buf
[1024];

156 
	`¥ötf
("1031_unsolicited_data_out:\n");

157 
	`¥ötf
("==========================\n");

158 i‡(
show_öfo
) {

159 
	`¥ötf
("Test sending unsolicited DATA-OUTÅhatáreÇotássociated withány SCSI-command.\n");

160 
	`¥ötf
("1, Send 100 DATA-OUT PDUs\n");

161 
	`¥ötf
("2, VerifyÅheÅarget is stillálive\n");

162 
	`¥ötf
("\n");

166 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

167 i‡(
iscsi
 =
NULL
) {

168 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

173 
ªt
 = 0;

175 
	`¥ötf
("Send unsolicited DATA-OUT PDUs ... ");

176 
i
 = 0; i < 100; i++) {

177 
iscsi_pdu
 *
pdu
;

179 
pdu
 = 
	`my_iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_DATA_OUT
,

180 
ISCSI_PDU_NO_PDU
,

181 
i
 + 0x1000,

182 
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

183 i‡(
pdu
 =
NULL
) {

184 
	`¥ötf
("FailedÅoállocated PDU. Aborting\n");

185 
ªt
 = -2;

186 
föished
;

188 
	`my_iscsi_pdu_£t_pduÊags
(
pdu
, 
ISCSI_PDU_SCSI_FINAL
);

189 
	`my_iscsi_pdu_£t_lun
(
pdu
, 
lun
);

190 
	`my_iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

191 i‡(
	`my_iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, 
buf
, (buf)) != 0) {

192 
	`¥ötf
("FailedÅoádd dataÅo PDU. Aborting\n");

193 
ªt
 = -2;

194 
föished
;

196 
pdu
->
ˇŒback
 = 
NULL
;

197 
pdu
->
¥iv©e_d©a
 = 
NULL
;

198 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

199 
	`¥ötf
("FailedÅo queue PDU. Aborting\n");

200 
ªt
 = -2;

201 
föished
;

204 
	`¥ötf
("[OK]\n");

209 
	`¥ötf
("Sendá TESTUNITREADYánd flushÅx queue.\n");

210 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

211 i‡(
ªt
 != 0) {

212 
föished
;

216 
	`¥ötf
("VerifyÅheÅarget is stillálive ... ");

217 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

218 i‡(
iscsi2
 =
NULL
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("Target is dead?\n");

221 
ªt
 = -1;

222 
föished
;

224 
	`¥ötf
("[OK]\n");

227 
föished
:

228 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

229 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

230  
ªt
;

231 
	}
}

	@test-tool/1040_saturate_maxcmdsn.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gnum_cmds_ö_Êight
;

28 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

29 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

31 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

33 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

34 
°©e
->
°©us
 = status;

37 i‡(--
num_cmds_ö_Êight
 == 0) {

38 
°©e
->
föished
 = 1;

40 
	}
}

42 
	#T1040_NO_OF_WRITES
 (1024)

	)

44 
	$T1040_ßtuøã_maxcmd¢
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

46 
iscsi_c⁄ãxt
 *
iscsi
;

47 
scsi_èsk
 *
èsk
;

48 
i
, 
ªt
, 
lun
;

49 *
d©a
 = 
NULL
;

50 
iscsi_async_°©e
 
ã°_°©e
;

52 
	`¥ötf
("1040_saturate_maxcmdsn:\n");

53 
	`¥ötf
("=======================\n");

54 i‡(
show_öfo
) {

55 
	`¥ötf
("Test sending so many commands we saturate maxcmdsn we doÑecoverÉventually\n");

56 
	`¥ötf
("1, Send 1024 commands in one goánd make sure weÉventually finishÅhe queue of commands in flight\n");

57 
	`¥ötf
("\n");

61 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

62 i‡(
iscsi
 =
NULL
) {

63 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

67 i‡(
T1040_NO_OF_WRITES
*2*
iscsi
->
fú°_bur°_Àngth
 > 
block_size
 * 
num_blocks
) {

68 
	`¥ötf
("èrgë i†toÿsmÆ»f‹Åhi†ã°.áàÀa° %u byã†¨êªquúed\n",
T1040_NO_OF_WRITES
*2*
iscsi
->
fú°_bur°_Àngth
);

69 
ªt
 = -1;

70 
föished
;

74 i‡(!
d©a_loss
) {

75 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

76 
ªt
 = -2;

77 
föished
;

81 
ªt
 = 0;

86 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

88 
d©a
 = 
	`mÆloc
(2*
iscsi
->
fú°_bur°_Àngth
);

89 i‡(
d©a
 =
NULL
) {

90 
	`¥ötf
("failedÅo malloc data buffer\n");

91 
ªt
 = -1;

92 
föished
;

95 
run
=0;

98 i‡(
run
 || 
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
) {

99 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

100 
	`¥ötf
("Síd %d Wrôe†w/ ISCSI_IMMEDIATE_DATA_NOÉachÇìdögá R2T sÿth© wêßtuøãÅhêmaxcmd¢ queuê... ",
T1040_NO_OF_WRITES
);

102 
	`¥ötf
("Síd %d Wrôe†w/ ISCSI_IMMEDIATE_DATA_YESÉachÇìdögá R2T sÿth© wêßtuøãÅhêmaxcmd¢ queuê... ",
T1040_NO_OF_WRITES
);

105 
i
 = 0; i < 
T1040_NO_OF_WRITES
; i++) {

106 
num_cmds_ö_Êight
++;

107 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 2 * iscsi->
fú°_bur°_Àngth
 * 
i
 / 
block_size
, 
d©a
, 2 * iscsi->first_burst_length, block_size,

109 
ã°_cb
, &
ã°_°©e
);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

118 
ã°_°©e
.
èsk
 =Åask;

119 
ã°_°©e
.
föished
 = 0;

120 
ã°_°©e
.
°©us
 = 0;

121 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

122 i‡(
num_cmds_ö_Êight
 != 0) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("DidÇot completeáll I/O before deadline.\n");

125 
ªt
 = -1;

126 
föished
;

127 } i‡(
ã°_°©e
.
°©us
 != 0) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("Notáll I/O commands succeeded.\n");

130 
ªt
 = -1;

131 
föished
;

133 
	`¥ötf
("[OK]\n");

134 
run
++;

135 } 
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_YES
);

138 
föished
:

139 
	`‰ì
(
d©a
);

140 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

141  
ªt
;

142 
	}
}

	@test-tool/1041_unsolicited_immediate_data.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gpdu_was_vÆid
;

31 
	$my_queue_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

33 
pdu_was_vÆid
 = 1;

35 i‡(!(
pdu
->
outd©a
.
d©a
[1] & 0x80)) {

36 
	`¥ötf
("SCSI-Command PDU with immediate data didÇot haveÅhe F-flag set.\n");

37 
pdu_was_vÆid
 = 0;

40 i‡–(
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]Ë& 0x00ffffffË!
block_size
) {

41 
	`¥ötf
("SCSI-Command PDU didÇot have one block of immediate data.\n");

42 
pdu_was_vÆid
 = 0;

46 
	}
}

48 
	$T1041_unsﬁicôed_immedüã_d©a
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

50 
iscsi_c⁄ãxt
 *
iscsi
;

51 
scsi_èsk
 *
èsk
;

52 
ªt
, 
lun
;

53 
iscsi_uæ
 *iscsi_url;

54 
d©a
[4096];

56 
	`¥ötf
("1041_unsolicited_immediate_data:\n");

57 
	`¥ötf
("================================\n");

58 i‡(
show_öfo
) {

59 
	`¥ötf
("Test we can send unsolicited dataÅoÅheÅarget\n");

60 
	`¥ötf
("1, LoginÅoÅarget with IMMEDIATE_DATA=YESánd INITIAL_R2T=YES.\n");

61 
	`¥ötf
("2, Write one blockÅoÅheÅargetás immediate data.\n");

62 
	`¥ötf
("3, VerifyÅhatÅhe PDU sent hasÅhe F-flag set.\n");

63 
	`¥ötf
("4, VerifyÅhatÅhe PDU sent has <block-size> of immediate data.\n");

64 
	`¥ötf
("\n");

68 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

69 i‡(
iscsi
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

75 i‡(
iscsi_uæ
 =
NULL
) {

76 
	`¥ötf
("FailedÅoÖarse iscsi url\n");

81 i‡(!
d©a_loss
) {

82 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

83 
ªt
 = -2;

84 
föished
;

88 
ªt
 = 0;

94 
	`¥ötf
("LoginÅoÅarget with IMMEDIATE_DATA=YESánd INITIAL_R2T=YES ... ");

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96 
iscsi_uæ
->
iscsi
 = 
NULL
;

97 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

98 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

99 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

100 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

101 
	`iscsi_£t_immedüã_d©a
(
iscsi
, 
ISCSI_IMMEDIATE_DATA_YES
);

102 
	`iscsi_£t_öôül_r2t
(
iscsi
, 
ISCSI_INITIAL_R2T_YES
);

103 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
lun
) != 0) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë wôh IMMEDIATE_DATA=YESánd INITIAL_R2T=YES %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
ªt
 = -1;

107 
föished
;

109 i‡(
iscsi
->
u£_immedüã_d©a
 !
ISCSI_IMMEDIATE_DATA_YES
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("FailedÅoÇegotiate IMMEDIATE_DATA==YES withÅarget\n");

112 
ªt
 = -1;

113 
föished
;

115 i‡(
iscsi
->
u£_öôül_r2t
 !
ISCSI_INITIAL_R2T_YES
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FailedÅoÇegotiate INITIAL_R2T==YES withÅarget\n");

118 
ªt
 = -1;

119 
föished
;

121 
	`¥ötf
("[OK]\n");

125 
	`¥ötf
("Write one blockás immediate data ... ");

126 
loˇl_iscsi_queue_pdu
 = 
my_queue_immedüã_d©a
;

127 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

128 
loˇl_iscsi_queue_pdu
 = 
NULL
;

132 i‡(
pdu_was_vÆid
 == 0) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("PDUÅo send was invalid.\n");

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
 =
NULL
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
	`¥ötf
("[OK]\n");

157 
föished
:

158 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

161  
ªt
;

162 
	}
}

	@test-tool/1042_unsolicited_nonimmediate_data.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gpdu_was_vÆid
 = 1;

31 
	$my_queue_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

34 i‡((
pdu
->
outd©a
.
d©a
[0] & 0x3fË=
ISCSI_PDU_SCSI_REQUEST
) {

35 i‡(
pdu
->
outd©a
.
d©a
[1] & 0x80) {

36 
	`¥ötf
("SCSI-Command PDU with immediate data hadÅhe F-flag set.\n");

37 
pdu_was_vÆid
 = 0;

40 i‡–
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]) & 0x00ffffff ) {

41 
	`¥ötf
("SCSI-Command PDU hadÇon-zero datasegmentsize.\n");

42 
pdu_was_vÆid
 = 0;

47 i‡((
pdu
->
outd©a
.
d©a
[0] & 0x3fË=
ISCSI_PDU_DATA_OUT
) {

48 i‡(!(
pdu
->
outd©a
.
d©a
[1] & 0x80)) {

49 
	`¥ötf
("The DATA-OUT PDU didÇot haveÅhe F-flag set.\n");

50 
pdu_was_vÆid
 = 0;

53 i‡–(
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]Ë& 0x00ffffffË!
block_size
) {

54 
	`¥ötf
("The DATA-OUT PDU didÇot carryá full block.\n");

55 
pdu_was_vÆid
 = 0;

62 
	}
}

64 
	$T1042_unsﬁicôed_n⁄immedüã_d©a
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

66 
iscsi_c⁄ãxt
 *
iscsi
;

67 
scsi_èsk
 *
èsk
;

68 
ªt
, 
lun
;

69 
iscsi_uæ
 *iscsi_url;

70 
d©a
[4096];

72 
	`¥ötf
("1042_unsolicited_nonimmediate_data:\n");

73 
	`¥ötf
("================================\n");

74 i‡(
show_öfo
) {

75 
	`¥ötf
("Test we can send unsolicitedÇonimmediate dataÅoÅheÅarget\n");

76 
	`¥ötf
("1, LoginÅoÅarget with IMMEDIATE_DATA=NOánd INITIAL_R2T=NO.\n");

77 
	`¥ötf
("2, Write one blockÅoÅheÅarget.\n");

78 
	`¥ötf
("3, VerifyÅhatÅhe COMMAND PDU doesÇot haveÅhe F-flag set.\n");

79 
	`¥ötf
("4, VerifyÅhatÅhe COMMAND PDU sent hasÇo immediate data.\n");

80 
	`¥ötf
("5, VerifyÅhatÅhe DATA-OUT PDU hasÅhe F-flag set.\n");

81 
	`¥ötf
("6, VerifyÅhatÅhe DATA-OUT PDU has one block of data.\n");

82 
	`¥ötf
("\n");

86 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

87 i‡(
iscsi
 =
NULL
) {

88 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

92 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

93 i‡(
iscsi_uæ
 =
NULL
) {

94 
	`¥ötf
("FailedÅoÖarse iscsi url\n");

98 i‡(!
d©a_loss
) {

99 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

100 
ªt
 = -2;

101 
föished
;

105 
ªt
 = 0;

111 
	`¥ötf
("LoginÅoÅarget with IMMEDIATE_DATA=NOánd INITIAL_R2T=NO ... ");

112 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

113 
iscsi_uæ
->
iscsi
 = 
NULL
;

114 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

115 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

116 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

117 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

118 
	`iscsi_£t_immedüã_d©a
(
iscsi
, 
ISCSI_IMMEDIATE_DATA_NO
);

119 
	`iscsi_£t_öôül_r2t
(
iscsi
, 
ISCSI_INITIAL_R2T_NO
);

120 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
lun
) != 0) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë wôh IMMEDIATE_DATA=NOánd INITIAL_R2T=NO %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
iscsi
->
u£_immedüã_d©a
 !
ISCSI_IMMEDIATE_DATA_NO
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FailedÅoÇegotiate IMMEDIATE_DATA==NO withÅarget\n");

129 
ªt
 = -1;

130 
föished
;

133 i‡(
iscsi
->
u£_öôül_r2t
 !
ISCSI_INITIAL_R2T_NO
) {

134 
	`¥ötf
("[SKIPPED]\n");

135 
	`¥ötf
("Target doesÇotállow INITIAL_R2T==NO. SkippingÅest\n");

136 
ªt
 = -2;

137 
föished
;

139 
	`¥ötf
("[OK]\n");

143 
	`¥ötf
("Write one blockás unsolicited data-out ... ");

144 
loˇl_iscsi_queue_pdu
 = 
my_queue_immedüã_d©a
;

145 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

146 
loˇl_iscsi_queue_pdu
 = 
NULL
;

150 i‡(
pdu_was_vÆid
 == 0) {

151 
	`¥ötf
("[FAILED]\n");

152 
	`¥ötf
("PDUÅo send was invalid.\n");

153 
ªt
 = -1;

154 
föished
;

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
	`¥ötf
("[OK]\n");

175 
föished
:

176 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

177 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

179  
ªt
;

180 
	}
}

	@test-tool/1100_persistent_reserve_in_read_keys_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
, 
Æ
;

30 
	`¥ötf
("1100_persistent_reserve_in_read_keys_simple:\n");

31 
	`¥ötf
("============================================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic PERSISTENT_RESERVE_IN/READ_KEYS functionality.\n");

34 
	`¥ötf
("1, VerifyÅhat READ_KEYS works.\n"),

35 
	`¥ötf
("2, VerifyÅhat DATA-IN isátÜeast 8 bytes.\n");

36 
	`¥ötf
("3, VerifyÅhat ADDITIONAL_LENGTH matches DATA-IN size.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Send PERSISTENT_RESERVE_IN/READ_KEYS ... ");

51 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

52 
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


61 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


62 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

63 
	`¥ötf
("[SKIPPED]\n");

64 
	`¥ötf
("PERSISTENT_RESERVE_IN Not Supported\n");

65 
ªt
 = -2;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
föished
;

76 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("VerifyÅhat DATA-IN isátÜeast 8 bytes ... ");

81 i‡(
èsk
->
d©aö
.
size
 < 8) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("DATA-INÑeturnedÜessÅhan 8 bytes\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("VerifyÅhat ADDITIONAL_LENGTH matches DATA-IN size ... ");

93 
Æ
 = 
	`scsi_gë_uöt32
(&
èsk
->
d©aö
.
d©a
[4]);

94 i‡(
Æ
 !
èsk
->
d©aö
.
size
 - 8) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("ADDITIONAL_LENGTH was %d bytes but %d wasÉxpected.\n",

97 
Æ
, 
èsk
->
d©aö
.
size
 - 8);

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
föished
:

108 
	`iscsi_logout_sync
(
iscsi
);

109 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

110  
ªt
;

111 
	}
}

	@test-tool/1110_persistent_reserve_in_serviceaction_range.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
, 
i
;

30 
	`¥ötf
("1110_persistent_reserve_in_serviceaction_range:\n");

31 
	`¥ötf
("============================================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅheÑange for PERSISTENT_RESERVE_IN serviceáctions.\n");

34 
	`¥ötf
("1, VerifyÅhat PERSISTENT_RESERVE_IN works.\n"),

35 
	`¥ötf
("2, VerifyÅhat SERVICE ACTIONS 0 - 3 works.\n");

36 
	`¥ötf
("3, VerifyÅhat SERVICE ACTIONS > 3 fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Verify PERSISTENT_RESERVE_IN works ... ");

51 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

52 
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


61 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


62 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

63 
	`¥ötf
("[SKIPPED]\n");

64 
	`¥ötf
("PERSISTENT_RESERVE_IN Not Supported\n");

65 
ªt
 = -2;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
föished
;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
	`¥ötf
("[OK]\n");

81 
	`¥ötf
("VerifyÅhat SERVICE ACTIONS 0 - 3 works ... ");

82 
i
 = 0; i < 4; i ++) {

83 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

84 
i
,

86 i‡(
èsk
 =
NULL
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("PERSISTENT_RESERVE_IN wôh sîvi˚a˘i⁄:%d faûed wôh sí£. %s\n", 
i
, 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
föished
;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
	`¥ötf
("[OK]\n");

104 
	`¥ötf
("VerifyÅhat SERVICE ACTIONS > 3 fails ... ");

105 
i
 = 4; i < 0x20; i ++) {

106 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

107 
i
,

109 i‡(
èsk
 =
NULL
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

112 
ªt
 = -1;

113 
föished
;

115 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d suc˚ssfu»f‹ invÆid Sîvi˚A˘i⁄: %d\n", 
i
);

118 
ªt
 = -1;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
föished
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

124 
	`¥ötf
("[OK]\n");

128 
föished
:

129 
	`iscsi_logout_sync
(
iscsi
);

130 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

131  
ªt
;

132 
	}
}

	@test-tool/1120_persistent_register_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

28 
	$T1120_≥rsi°ít_ªgi°î_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
;

31 
ªt
, 
lun
;

32 c⁄° 
key
 = 
	`ønd_key
();

35 
	`¥ötf
("1120_persistent_register_simple:\n");

36 
	`¥ötf
("============================================\n");

37 i‡(
show_öfo
) {

38 
	`¥ötf
("Test basic PERSISTENT_RESERVE_OUT/REGISTER functionality.\n");

39 
	`¥ötf
("1, Register witháÅarget using REGISTER_AND_IGNORE.\n");

40 
	`¥ötf
("2, Make sure READ_KEYS seesÅheÑegistration.\n");

41 
	`¥ötf
("3, Make sure we cannot REGISTERágain\n");

42 
	`¥ötf
("4, RemoveÅheÑegistration using REGISTER\n");

43 
	`¥ötf
("5, Make sure READ_KEYS showsÅheÑegistration is gone.\n");

44 
	`¥ötf
("\n");

48 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

49 i‡(
iscsi
 =
NULL
) {

50 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 i‡(!
d©a_loss
) {

55 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

56 
ªt
 = -2;

57 
föished
;

60 
ªt
 = 0;

63 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

64 i‡(
ªt
 != 0) {

65 
föished
;

69 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsi
, 
lun
, 
key
, 1);

70 i‡(
ªt
 != 0) {

71 
föished
;

75 
ªt
 = 
	`¥out_ªªgi°î_key_Áûs
(
iscsi
, 
lun
, 
key
+1);

76 i‡(
ªt
 != 0) {

77 
föished
;

81 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

82 i‡(
ªt
 != 0) {

83 
föished
;

88 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsi
, 
lun
, 
key
, 0);

89 i‡(
ªt
 != 0) {

90 
föished
;

93 
föished
:

94 
	`iscsi_logout_sync
(
iscsi
);

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96  
ªt
;

97 
	}
}

	@test-tool/1130_persistent_reserve_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

30 
scsi_≥rsi°ít_out_ty≥
 
	g¥_ty≥s_to_ã°
[] = {

31 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

32 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

33 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

34 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

35 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

40 
	$T1130_≥rsi°ít_ª£rve_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
ªt
;

44 
lun
;

45 c⁄° 
key
 = 
	`ønd_key
();

46 
i
;

48 
	`¥ötf
("1130_persistent_reserve_simple:\n");

49 
	`¥ötf
("=========================================\n");

50 i‡(
show_öfo
) {

51 
idx
 = 1;

53 
	`¥ötf
("TestÅhat we can useÉachÅype of Persistent Reservation,\n");

54 
	`¥ötf
("ándÅhat we canÑeleaseÉachÅype,ás well\n");

55 
	`¥ötf
("%d, Wêˇ¿ªgi°îá key\n", 
idx
++);

56 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

57 
	`¥ötf
("%d, C™Ñe£rvê%s\n", 
idx
++,

58 
	`scsi_¥_ty≥_°r
(
¥_ty≥s_to_ã°
[
i
]));

59 
	`¥ötf
("%d, C™ÑódÑe£rv©i⁄\n", 
idx
++);

60 
	`¥ötf
("%d, C™Ññó£Ñe£rv©i⁄\n", 
idx
++);

62 
	`¥ötf
("%d, C™ uƒegi°î\n", 
idx
++);

66 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

67 i‡(
iscsi
 =
NULL
) {

68 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

78 
ªt
 = 0;

81 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

82 i‡(
ªt
 != 0)

83 
föished
;

86 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

87 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 = 
¥_ty≥s_to_ã°
[
i
];

90 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

91 i‡(
ªt
 != 0)

92 
föished
;

95 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

96 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

97 
¥_ty≥
);

98 i‡(
ªt
 != 0)

99 
föished
;

102 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

103 i‡(
ªt
 != 0)

104 
föished
;

108 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

109 i‡(
ªt
 != 0)

110 
föished
;

112 
föished
:

114 
	`iscsi_logout_sync
(
iscsi
);

115 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

116  
ªt
;

117 
	}
}

	@test-tool/1140_persistent_reserve_access_check_ea.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1140_persistent_reserve_access_check_ea:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1141_persistent_reserve_access_check_we.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1141_≥rsi°ít_ª£rve_ac˚ss_check_we
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1141_persistent_reserve_access_check_we:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1142_persistent_reserve_access_check_earo.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1142_persistent_reserve_access_check_earo:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1143_persistent_reserve_access_check_wero.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1143_persistent_reserve_access_check_wero:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1144_persistent_reserve_access_check_eaar.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1144_persistent_reserve_access_check_eaar:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1145_persistent_reserve_access_check_wear.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1145_persistent_reserve_access_check_wear:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/iscsi-support.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°d¨g.h
>

28 
	~<öây≥s.h
>

29 
	~<°rög.h
>

30 
	~<pﬁl.h
>

31 
	~<‚m©ch.h
>

32 
	~"¶i°.h
"

33 
	~"iscsi.h
"

34 
	~"scsi-lowÀvñ.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"iscsi-suµ‹t.h
"

42 c⁄° *
	göôüt‹«me1
 =

44 c⁄° *
	göôüt‹«me2
 =

47 c⁄° *
	gtgt_uæ
;

49 
scsi_öquúy_°™d¨d
 *
	göq
;

50 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
	göq_lbp
;

51 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
	göq_bdc
;

52 
scsi_öquúy_block_limôs
 *
	göq_bl
;

53 
scsi_ªadˇ∑côy16
 *
	grc16
;

54 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
	grs›
;

56 
size_t
 
	gblock_size
;

57 
uöt64_t
 
	gnum_blocks
;

58 
	glbµb
;

59 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
	gdevi˚_ty≥
;

60 
	gd©a_loss
;

61 
	gÆlow_ßnôize
;

62 
	gªad⁄ly
;

63 
	gsbc3_suµ‹t
;

64 
	gmaximum_å™s„r_Àngth
;

66 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

68 
	$loggög
(
Àvñ
, c⁄° *
f‹m©
, ...)

70 
va_li°
 
≠
;

71 
mesßge
[1024];

72 
ªt
;

74 i‡(
logÀvñ
 < 
Àvñ
) {

78 i‡(
	`°∫cmp
(
LOG_BLANK_LINE
, 
f‹m©
, 
LOG_BLANK_LINE_CMP_LEN
)==0) {

79 
	`¥ötf
("\n");

83 
	`va_°¨t
(
≠
, 
f‹m©
);

84 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

85 
	`va_íd
(
≠
);

87 i‡(
ªt
 < 0) {

91 
	`¥ötf
(" %s\n", 
mesßge
);

92 
	}
}

94 
iscsi_c⁄ãxt
 *

95 
	$iscsi_c⁄ãxt_logö
(c⁄° *
öôüt‹«me
, c⁄° *
uæ
, *
lun
)

97 
iscsi_c⁄ãxt
 *
iscsi
;

98 
iscsi_uæ
 *iscsi_url;

100 
	`¥ötf
(" %d", *
lun
);

101 
	`¥ötf
(" %s", 
uæ
);

103 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹«me
);

104 i‡(
iscsi
 =
NULL
) {

105 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

106  
NULL
;

109 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

118 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

119 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

121 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

122 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

123 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

124 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

125 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

126  
NULL
;

136 i‡(
lun
 !
NULL
) {

137 *
lun
 = 
iscsi_uæ
->lun;

140 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

141  
iscsi
;

142 
	}
}

145 
	$waô_u¡û_ã°_föished
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_async_°©e
 *
°©e
)

147 
pﬁlfd
 
pfd
;

148 
cou¡
 = 0;

149 
ªt
;

151 
°©e
->
föished
 == 0) {

152 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

153 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

155 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

156 i‡(
ªt
 < 0) {

157 
	`¥ötf
("Poll failed");

158 
	`exô
(10);

160 i‡(
ªt
 == 0) {

161 i‡(
cou¡
++ > 5) {

162 
iscsi_pdu
 *
pdu
;

164 
°©e
->
föished
 = 1;

165 
°©e
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

166 
°©e
->
èsk
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

168 (
pdu
 = 
iscsi
->
outqueue
)) {

169 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

171 (
pdu
 = 
iscsi
->
waôpdu
)) {

172 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

178 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

179 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
	}
}

186 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

188 i‡(
loˇl_iscsi_queue_pdu
 !
NULL
) {

189 
	`loˇl_iscsi_queue_pdu
(
iscsi
, 
pdu
);

191  
	`ªÆ_iscsi_queue_pdu
(
iscsi
, 
pdu
);

192 
	}
}

195 
	$‹wrôe
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

196 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

197 
dpo
, 
fua
, 
fua_nv
, 
group
,

198 *
d©a
)

200 
scsi_èsk
 *
èsk
;

202 
	`loggög
(
LOG_VERBOSE
, "Síd ORWRITE LBA:%" 
PRIu64
 " blocks:%d "

204 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

205 
dpo
, 
fua
, 
fua_nv
, 
group
);

207 i‡(!
d©a_loss
) {

208 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

212 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
,

213 
d©a
, 
d©Æí
, 
blocksize
,

214 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

215 i‡(
èsk
 =
NULL
) {

216 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

217 
	`iscsi_gë_îr‹
(
iscsi
));

220 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


221 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


222 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

224 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

227 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

228 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE command: "

229 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned SUCCESS.");

237 
	}
}

240 
	$‹wrôe_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

241 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

242 
dpo
, 
fua
, 
fua_nv
, 
group
,

243 *
d©a
)

245 
scsi_èsk
 *
èsk
;

247 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting INVALID_FIELD_IN_CDB) "

248 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

250 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

251 
dpo
, 
fua
, 
fua_nv
, 
group
);

253 i‡(!
d©a_loss
) {

254 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

258 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

259 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

260 i‡(
èsk
 =
NULL
) {

261 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

262 
	`iscsi_gë_îr‹
(
iscsi
));

265 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


266 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


267 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

268 
	`scsi_‰ì_scsi_èsk
(
èsk
);

269 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

272 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

273 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

275 
	`scsi_‰ì_scsi_èsk
(
èsk
);

278 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


279 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


280 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

281 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

284 
	`iscsi_gë_îr‹
(
iscsi
));

285 
	`scsi_‰ì_scsi_èsk
(
èsk
);

289 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

292 
	}
}

295 
	$‹wrôe_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

296 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

297 
dpo
, 
fua
, 
fua_nv
, 
group
,

298 *
d©a
)

300 
scsi_èsk
 *
èsk
;

302 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting LBA_OUT_OF_RANGE) "

303 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

305 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

306 
dpo
, 
fua
, 
fua_nv
, 
group
);

308 i‡(!
d©a_loss
) {

309 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

313 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

314 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

315 i‡(
èsk
 =
NULL
) {

316 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

317 
	`iscsi_gë_îr‹
(
iscsi
));

320 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


321 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


322 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

323 
	`scsi_‰ì_scsi_èsk
(
èsk
);

324 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

327 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

328 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

330 
	`scsi_‰ì_scsi_èsk
(
èsk
);

333 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


334 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


335 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

336 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

338 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

339 
	`scsi_‰ì_scsi_èsk
(
èsk
);

343 
	`scsi_‰ì_scsi_èsk
(
èsk
);

344 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

346 
	}
}

349 
	$‹wrôe_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

350 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

351 
dpo
, 
fua
, 
fua_nv
, 
group
,

352 *
d©a
)

354 
scsi_èsk
 *
èsk
;

356 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting WRITE_PROTECTED) "

357 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

359 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

360 
dpo
, 
fua
, 
fua_nv
, 
group
);

362 i‡(!
d©a_loss
) {

363 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

367 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

368 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

369 i‡(
èsk
 =
NULL
) {

370 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

371 
	`iscsi_gë_îr‹
(
iscsi
));

374 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


375 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


376 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

377 
	`scsi_‰ì_scsi_èsk
(
èsk
);

378 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

381 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

382 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

387 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


388 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


389 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

390 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

393 
	`iscsi_gë_îr‹
(
iscsi
));

394 
	`scsi_‰ì_scsi_èsk
(
èsk
);

398 
	`scsi_‰ì_scsi_èsk
(
èsk
);

399 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

401 
	}
}

404 
	$‹wrôe_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

405 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

406 
dpo
, 
fua
, 
fua_nv
, 
group
,

407 *
d©a
)

409 
scsi_èsk
 *
èsk
;

411 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting MEDIUM_NOT_PRESENT) "

412 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

414 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

415 
dpo
, 
fua
, 
fua_nv
, 
group
);

417 i‡(!
d©a_loss
) {

418 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

422 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

423 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

424 i‡(
èsk
 =
NULL
) {

425 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

426 
	`iscsi_gë_îr‹
(
iscsi
));

429 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


430 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


431 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

432 
	`scsi_‰ì_scsi_èsk
(
èsk
);

433 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

436 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

437 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

438 
	`scsi_‰ì_scsi_èsk
(
èsk
);

441 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


442 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


443 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


444 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


445 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

446 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE Should have failed "

448 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

449 
	`scsi_‰ì_scsi_èsk
(
èsk
);

453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned MEDIUM_NOT_PRESENT.");

456 
	}
}

459 
	$¥ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
£rvi˚_a˘i⁄
,

460 
suc˚ss_ex≥˘ed
)

462 c⁄° 
buf_sz
 = 16384;

463 
scsi_èsk
 *
èsk
;

464 
ªt
 = 0;

467 
	`loggög
(
LOG_VERBOSE
, "Síd PRIN/SA=0x%02x,Éx≥˘ %s", 
£rvi˚_a˘i⁄
,

468 
suc˚ss_ex≥˘ed
 ? "success" : "failure");

470 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

471 
£rvi˚_a˘i⁄
, 
buf_sz
);

472 i‡(
èsk
 =
NULL
) {

473 
	`loggög
(
LOG_NORMAL
,

475 
	`iscsi_gë_îr‹
(
iscsi
));

478 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


479 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


480 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

481 
	`scsi_‰ì_scsi_èsk
(
èsk
);

482 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

486 i‡(
suc˚ss_ex≥˘ed
) {

487 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

488 
	`loggög
(
LOG_NORMAL
,

490 
£rvi˚_a˘i⁄
, 
	`iscsi_gë_îr‹
(
iscsi
));

491 
ªt
 = -1;

494 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

495 
	`loggög
(
LOG_NORMAL
,

497 
£rvi˚_a˘i⁄
);

498 
ªt
 = -1;

502 
	`scsi_‰ì_scsi_èsk
(
èsk
);

503 
èsk
 = 
NULL
;

505  
ªt
;

506 
	}
}

509 
	$¥ö_ªad_keys
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
scsi_èsk
 **
ç
,

510 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 **
rkp
)

512 c⁄° 
buf_sz
 = 16384;

513 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

516 
	`loggög
(
LOG_VERBOSE
, "Send PRIN/READ_KEYS");

518 *
ç
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

519 
SCSI_PERSISTENT_RESERVE_READ_KEYS
, 
buf_sz
);

520 i‡(*
ç
 =
NULL
) {

521 
	`loggög
(
LOG_NORMAL
,

523 
	`iscsi_gë_îr‹
(
iscsi
));

526 i‡((*
ç
)->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


527 && (*
ç
)->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


528 && (*
ç
)->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

529 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

532 i‡((*
ç
)->
°©us
 !
SCSI_STATUS_GOOD
) {

533 
	`loggög
(
LOG_NORMAL
,

535 
	`iscsi_gë_îr‹
(
iscsi
));

539 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(*
ç
);

540 i‡(
rk
 =
NULL
) {

541 
	`loggög
(
LOG_NORMAL
,

543 
	`iscsi_gë_îr‹
(
iscsi
));

546 i‡(
rkp
 !
NULL
)

547 *
rkp
 = 
rk
;

550 
	}
}

553 
	$¥out_ªgi°î_™d_ign‹e
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

554 
ßrk
)

556 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

557 
scsi_èsk
 *
èsk
;

558 
ªt
 = 0;

562 
	`loggög
(
LOG_VERBOSE
,

564 
iscsi
->
öôüt‹_«me
);

566 i‡(!
d©a_loss
) {

567 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

571 
	`mem£t
(&
poc
, 0,  (poc));

572 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

573 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

574 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
,

575 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

576 i‡(
èsk
 =
NULL
) {

577 
	`loggög
(
LOG_NORMAL
,

579 
	`iscsi_gë_îr‹
(
iscsi
));

582 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

583 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

584 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

585 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PROUT Not Supported");

586 
ªt
 = -2;

587 
dun
;

589 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

590 
	`loggög
(
LOG_NORMAL
,

592 
	`iscsi_gë_îr‹
(
iscsi
));

593 
ªt
 = -1;

596 
dun
:

597 
	`scsi_‰ì_scsi_èsk
(
èsk
);

598  
ªt
;

599 
	}
}

602 
	$¥out_ªgi°î_key
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

603 
ßrk
, 
rk
)

605 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

606 
scsi_èsk
 *
èsk
;

607 
ªt
 = 0;

612 
	`loggög
(
LOG_VERBOSE
, "Send PROUT/REGISTERÅo %s init=%s",

613 
ßrk
 != 0 ? "register" : "unregister",

614 
iscsi
->
öôüt‹_«me
);

616 i‡(!
d©a_loss
) {

617 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

621 
	`mem£t
(&
poc
, 0,  (poc));

622 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

623 
poc
.
ª£rv©i⁄_key
 = 
rk
;

624 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

625 
SCSI_PERSISTENT_RESERVE_REGISTER
,

626 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

627 i‡(
èsk
 =
NULL
) {

628 
	`loggög
(
LOG_NORMAL
,

630 
	`iscsi_gë_îr‹
(
iscsi
));

633 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


634 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


635 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

636 
	`scsi_‰ì_scsi_èsk
(
èsk
);

637 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

640 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

641 
	`loggög
(
LOG_NORMAL
,

643 
	`iscsi_gë_îr‹
(
iscsi
));

644 
ªt
 = -1;

647 
	`scsi_‰ì_scsi_èsk
(
èsk
);

649  
ªt
;

650 
	}
}

653 
	$¥ö_vîify_key_¥e£n˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

654 
key
, 
¥e£¡
)

656 
scsi_èsk
 *
èsk
;

657 c⁄° 
buf_sz
 = 16384;

658 
i
;

659 
key_found
;

660 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

661 
ªt
 = 0;

664 
	`loggög
(
LOG_VERBOSE
,

666 
¥e£¡
 ? "present" : "absent",

667 
iscsi
->
öôüt‹_«me
);

669 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

670 
SCSI_PERSISTENT_RESERVE_READ_KEYS
, 
buf_sz
);

671 i‡(
èsk
 =
NULL
) {

672 
	`loggög
(
LOG_NORMAL
,

674 
	`iscsi_gë_îr‹
(
iscsi
));

677 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


678 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


679 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

680 
	`scsi_‰ì_scsi_èsk
(
èsk
);

681 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

685 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

686 
	`loggög
(
LOG_NORMAL
,

688 
	`iscsi_gë_îr‹
(
iscsi
));

689 
ªt
 = -1;

690 
dun
;

693 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

694 i‡(
rk
 =
NULL
) {

695 
	`loggög
(
LOG_NORMAL
,

697 
	`iscsi_gë_îr‹
(
iscsi
));

698 
ªt
 = -1;

699 
dun
;

702 
key_found
 = 0;

703 
i
 = 0; i < 
rk
->
num_keys
; i++) {

704 i‡(
rk
->
keys
[
i
] =
key
)

705 
key_found
 = 1;

708 i‡((
¥e£¡
 && !
key_found
) || (!present && key_found)) {

709 i‡(
¥e£¡
)

710 
	`loggög
(
LOG_NORMAL
,

713 
	`loggög
(
LOG_NORMAL
,

715 
ªt
 = -1;

718 
dun
:

719 
	`scsi_‰ì_scsi_èsk
(
èsk
);

720  
ªt
;

721 
	}
}

724 
	$¥out_ªªgi°î_key_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

725 
ßrk
)

727 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

728 
scsi_èsk
 *
èsk
;

729 
ªt
 = 0;

732 
	`loggög
(
LOG_VERBOSE
,

734 
iscsi
->
öôüt‹_«me
);

736 i‡(!
d©a_loss
) {

737 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

741 
	`mem£t
(&
poc
, 0,  (poc));

742 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

743 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

744 
SCSI_PERSISTENT_RESERVE_REGISTER
,

745 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

746 i‡(
èsk
 =
NULL
) {

747 
	`loggög
(
LOG_NORMAL
,

749 
	`iscsi_gë_îr‹
(
iscsi
));

752 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


753 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


754 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

755 
	`scsi_‰ì_scsi_èsk
(
èsk
);

756 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

760 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

761 
	`loggög
(
LOG_NORMAL
,

763 
ªt
 = -1;

766 
	`scsi_‰ì_scsi_èsk
(
èsk
);

767  
ªt
;

768 
	}
}

771 
	$¥out_ª£rve
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

772 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

774 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

775 
scsi_èsk
 *
èsk
;

776 
ªt
 = 0;

780 
	`loggög
(
LOG_VERBOSE
,

782 
¥_ty≥
, 
	`scsi_¥_ty≥_°r
(pr_type),

783 
iscsi
->
öôüt‹_«me
);

785 i‡(!
d©a_loss
) {

786 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

790 
	`mem£t
(&
poc
, 0,  (poc));

791 
poc
.
ª£rv©i⁄_key
 = 
key
;

792 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

793 
SCSI_PERSISTENT_RESERVE_RESERVE
,

794 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

795 
¥_ty≥
, &
poc
);

796 i‡(
èsk
 =
NULL
) {

797 
	`loggög
(
LOG_NORMAL
,

799 
	`iscsi_gë_îr‹
(
iscsi
));

802 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


803 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


804 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

805 
	`scsi_‰ì_scsi_èsk
(
èsk
);

806 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

810 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

811 
	`loggög
(
LOG_NORMAL
,

813 
	`iscsi_gë_îr‹
(
iscsi
));

814 
ªt
 = -1;

817 
	`scsi_‰ì_scsi_èsk
(
èsk
);

818  
ªt
;

819 
	}
}

822 
	$¥out_ªÀa£
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

823 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

825 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

826 
scsi_èsk
 *
èsk
;

827 
ªt
 = 0;

830 
	`loggög
(
LOG_VERBOSE
,

832 
¥_ty≥
, 
iscsi
->
öôüt‹_«me
);

834 i‡(!
d©a_loss
) {

835 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

839 
	`mem£t
(&
poc
, 0,  (poc));

840 
poc
.
ª£rv©i⁄_key
 = 
key
;

841 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

842 
SCSI_PERSISTENT_RESERVE_RELEASE
,

843 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

844 
¥_ty≥
, &
poc
);

845 i‡(
èsk
 =
NULL
) {

846 
	`loggög
(
LOG_NORMAL
,

848 
	`iscsi_gë_îr‹
(
iscsi
));

851 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


852 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


853 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

854 
	`scsi_‰ì_scsi_èsk
(
èsk
);

855 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

859 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

860 
	`loggög
(
LOG_NORMAL
,

862 
	`iscsi_gë_îr‹
(
iscsi
));

863 
ªt
 = -1;

866 
	`scsi_‰ì_scsi_èsk
(
èsk
);

867  
ªt
;

868 
	}
}

871 
	$¥ö_vîify_ª£rved_as
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

872 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

874 
scsi_èsk
 *
èsk
;

875 c⁄° 
buf_sz
 = 16384;

876 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

877 
ªt
 = 0;

880 
	`loggög
(
LOG_VERBOSE
,

882 
¥_ty≥
, 
iscsi
->
öôüt‹_«me
);

884 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

885 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

886 i‡(
èsk
 =
NULL
) {

887 
	`loggög
(
LOG_NORMAL
,

889 
	`iscsi_gë_îr‹
(
iscsi
));

892 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


893 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


894 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

895 
	`scsi_‰ì_scsi_èsk
(
èsk
);

896 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

900 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

901 
	`loggög
(
LOG_NORMAL
,

903 
	`iscsi_gë_îr‹
(
iscsi
));

904 
ªt
 = -1;

905 
dun
;

907 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

908 i‡(
º
 =
NULL
) {

909 
	`loggög
(
LOG_NORMAL
,

911 
	`iscsi_gë_îr‹
(
iscsi
));

912 
ªt
 = -1;

913 
dun
;

915 i‡(!
º
->
ª£rved
) {

916 
	`loggög
(
LOG_NORMAL
,

918 
ªt
 = -1;

919 
dun
;

921 i‡(
º
->
ª£rv©i⁄_key
 !
key
) {

922 
	`loggög
(
LOG_NORMAL
,

924 
PRIu64
 ".",

925 
key
, 
º
->
ª£rv©i⁄_key
);

926 
ªt
 = -1;

927 
dun
;

929 i‡(
º
->
¥_ty≥
 !=Ör_type) {

930 
	`loggög
(
LOG_NORMAL
,

932 
¥_ty≥
, 
º
->pr_type);

934 
ªt
 = -1;

935 
dun
;

938 
dun
:

940 
	`scsi_‰ì_scsi_èsk
(
èsk
);

941  
ªt
;

942 
	}
}

945 
	$¥ö_vîify_nŸ_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

947 
scsi_èsk
 *
èsk
;

948 c⁄° 
buf_sz
 = 16384;

949 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

950 
ªt
 = 0;

953 
	`loggög
(
LOG_VERBOSE
,

955 
iscsi
->
öôüt‹_«me
);

957 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

958 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

959 i‡(
èsk
 =
NULL
) {

960 
	`loggög
(
LOG_NORMAL
,

962 
	`iscsi_gë_îr‹
(
iscsi
));

965 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


966 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


967 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

968 
	`scsi_‰ì_scsi_èsk
(
èsk
);

969 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

973 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

974 
	`loggög
(
LOG_NORMAL
,

976 
	`iscsi_gë_îr‹
(
iscsi
));

977 
ªt
 = -1;

978 
dun
;

980 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

981 i‡(
º
 =
NULL
) {

982 
	`loggög
(
LOG_NORMAL
,

984 
	`iscsi_gë_îr‹
(
iscsi
));

985 
ªt
 = -1;

986 
dun
;

988 i‡(
º
->
ª£rved
) {

989 
	`loggög
(
LOG_NORMAL
,

991 
ªt
 = -1;

992 
dun
;

995 
dun
:

997 
	`scsi_‰ì_scsi_èsk
(
èsk
);

998  
ªt
;

999 
	}
}

1002 
	$vîify_ªad_w‹ks
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1004 
scsi_èsk
 *
èsk
;

1005 c⁄° 
uöt32_t
 
lba
 = 1;

1006 c⁄° 
blksize
 = 512;

1007 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1008 
ªt
 = 0;

1015 
	`loggög
(
LOG_VERBOSE
, "Send READ10Åo verify READ works init=%s",

1016 
iscsi
->
öôüt‹_«me
);

1018 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blksize
,

1020 i‡(
èsk
 =
NULL
) {

1021 
	`loggög
(
LOG_NORMAL
,

1023 
	`iscsi_gë_îr‹
(
iscsi
));

1027 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1028 
	`loggög
(
LOG_NORMAL
,

1030 
	`iscsi_gë_îr‹
(
iscsi
));

1031 
ªt
 = -1;

1032 
dun
;

1034 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1036 
dun
:

1037 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1038  
ªt
;

1039 
	}
}

1042 
	$vîify_wrôe_w‹ks
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1044 
scsi_èsk
 *
èsk
;

1045 c⁄° 
uöt32_t
 
lba
 = 1;

1046 c⁄° 
blksize
 = 512;

1047 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1048 
ªt
 = 0;

1055 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10Åo verify WRITE works init=%s",

1056 
iscsi
->
öôüt‹_«me
);

1058 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
buf
, 
d©Æí
, 
blksize
,

1060 i‡(
èsk
 =
NULL
) {

1061 
	`loggög
(
LOG_NORMAL
,

1063 
	`iscsi_gë_îr‹
(
iscsi
));

1066 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1067 
	`loggög
(
LOG_NORMAL
,

1069 
	`iscsi_gë_îr‹
(
iscsi
));

1070 
ªt
 = -1;

1072 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1073  
ªt
;

1074 
	}
}

1077 
	$vîify_ªad_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1079 
scsi_èsk
 *
èsk
;

1080 c⁄° 
uöt32_t
 
lba
 = 1;

1081 c⁄° 
blksize
 = 512;

1082 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1083 
ªt
 = 0;

1090 
	`loggög
(
LOG_VERBOSE
,

1092 
iscsi
->
öôüt‹_«me
);

1094 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blksize
,

1096 i‡(
èsk
 =
NULL
) {

1097 
	`loggög
(
LOG_NORMAL
,

1099 
	`iscsi_gë_îr‹
(
iscsi
));

1103 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1104 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1105 
	`loggög
(
LOG_NORMAL
,

1107 
ªt
 = -1;

1108 
dun
;

1115 
dun
:

1116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1117  
ªt
;

1118 
	}
}

1121 
	$vîify_wrôe_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1123 
scsi_èsk
 *
èsk
;

1124 c⁄° 
uöt32_t
 
lba
 = 1;

1125 c⁄° 
blksize
 = 512;

1126 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1127 
ªt
 = 0;

1134 
	`loggög
(
LOG_VERBOSE
,

1136 
iscsi
->
öôüt‹_«me
);

1138 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
buf
, 
d©Æí
, 
blksize
,

1140 i‡(
èsk
 =
NULL
) {

1141 
	`loggög
(
LOG_NORMAL
,

1143 
	`iscsi_gë_îr‹
(
iscsi
));

1147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1148 
	`loggög
(
LOG_NORMAL
,

1150 
ªt
 = -1;

1151 
dun
;

1158 
dun
:

1159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1160  
ªt
;

1161 
	}
}

1164 
	$synchr⁄izeˇche10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1166 
scsi_èsk
 *
èsk
;

1168 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE10 LBA:%d blocks:%d"

1170 
lba
, 
num
, 
sync_nv
, 
immed
);

1172 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1173 
sync_nv
, 
immed
);

1174 i‡(
èsk
 =
NULL
) {

1175 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE10 command: %s",

1176 
	`iscsi_gë_îr‹
(
iscsi
));

1179 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1180 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1181 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1182 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE10 isÇot implemented onÅarget");

1183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1186 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1187 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE10 command: "

1188 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1193 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1194 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE10Ñeturned SUCCESS.");

1196 
	}
}

1199 
	$synchr⁄izeˇche10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1201 
scsi_èsk
 *
èsk
;

1203 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE10 (Expecting MEDIUM_NOT_PRESENT) LBA:%d blocks:%d"

1205 
lba
, 
num
, 
sync_nv
, 
immed
);

1207 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1208 
sync_nv
, 
immed
);

1209 i‡(
èsk
 =
NULL
) {

1210 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE10 command: %s",

1211 
	`iscsi_gë_îr‹
(
iscsi
));

1214 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1215 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1216 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1217 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE10 isÇot implemented onÅarget");

1218 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1221 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1222 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1226 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1227 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1228 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1229 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1230 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1231 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECAHCE10 Should have failed "

1233 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1239 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE10Ñeturned MEDIUM_NOT_PRESENT.");

1241 
	}
}

1244 
	$synchr⁄izeˇche16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1246 
scsi_èsk
 *
èsk
;

1248 
	`loggög
(
LOG_VERBOSE
, "Síd SYNCHRONIZECACHE16 LBA:%" 
PRIu64
 " blocks:%d"

1250 
lba
, 
num
, 
sync_nv
, 
immed
);

1252 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1253 
sync_nv
, 
immed
);

1254 i‡(
èsk
 =
NULL
) {

1255 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE16 command: %s",

1256 
	`iscsi_gë_îr‹
(
iscsi
));

1259 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1260 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1261 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1262 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE16 isÇot implemented onÅarget");

1263 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1266 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1267 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 command: "

1268 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1273 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1274 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE16Ñeturned SUCCESS.");

1276 
	}
}

1279 
	$synchr⁄izeˇche16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1281 
scsi_èsk
 *
èsk
;

1283 
	`loggög
(
LOG_VERBOSE
, "Síd SYNCHRONIZECACHE16 (Ex≥˘ög MEDIUM_NOT_PRESENTËLBA:%" 
PRIu64
 " blocks:%d"

1285 
lba
, 
num
, 
sync_nv
, 
immed
);

1287 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1288 
sync_nv
, 
immed
);

1289 i‡(
èsk
 =
NULL
) {

1290 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE16 command: %s",

1291 
	`iscsi_gë_îr‹
(
iscsi
));

1294 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1295 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1296 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1297 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE16 isÇot implemented onÅarget");

1298 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1301 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1302 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1303 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1306 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1307 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1308 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1309 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1310 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1311 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 Should have failed "

1313 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1314 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1318 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1319 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE16Ñeturned MEDIUM_NOT_PRESENT.");

1321 
	}
}

1323 
	$ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1325 
scsi_èsk
 *
èsk
;

1327 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE IMMED:%d AUSE:%d SA:%d "

1329 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1331 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1332 
d©a
);

1333 i‡(
èsk
 =
NULL
) {

1334 
	`loggög
(
LOG_NORMAL
,

1336 
	`iscsi_gë_îr‹
(
iscsi
));

1339 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1340 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1341 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1342 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

1344 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1347 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1348 
	`loggög
(
LOG_NORMAL
,

1350 
	`iscsi_gë_îr‹
(
iscsi
));

1351 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1354 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1355 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned SUCCESS.");

1357 
	}
}

1359 
	$ßnôize_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1361 
scsi_èsk
 *
èsk
;

1363 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting INVALID_FIELD_IN_CDB) "

1366 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1368 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1369 
d©a
);

1370 i‡(
èsk
 =
NULL
) {

1371 
	`loggög
(
LOG_NORMAL
,

1373 
	`iscsi_gë_îr‹
(
iscsi
));

1376 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1377 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1378 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1379 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

1381 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1384 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1385 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE successful but should "

1387 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1390 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1391 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1392 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

1393 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE failed with wrong "

1396 
	`iscsi_gë_îr‹
(
iscsi
));

1397 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1402 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned ILLEGAL_REQUEST/"

1405 
	}
}

1407 
	$ßnôize_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1409 
scsi_èsk
 *
èsk
;

1411 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting RESERVATION_CONFLICT) "

1414 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1416 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1417 
d©a
);

1418 i‡(
èsk
 =
NULL
) {

1419 
	`loggög
(
LOG_NORMAL
,

1421 
	`iscsi_gë_îr‹
(
iscsi
));

1424 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1425 
	`loggög
(
LOG_NORMAL
,

1427 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1431 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

1432 
	`loggög
(
LOG_NORMAL
, "[FAILED] Expected RESERVATION CONFLICT. "

1433 "Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1437 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1438 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned RESERVATION_CONFLICT.");

1440 
	}
}

1442 
	$ßnôize_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1444 
scsi_èsk
 *
èsk
;

1446 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting WRITE_PROTECTED) "

1449 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1451 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1452 
d©a
);

1453 i‡(
èsk
 =
NULL
) {

1454 
	`loggög
(
LOG_NORMAL
,

1456 
	`iscsi_gë_îr‹
(
iscsi
));

1459 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1460 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE successful but should "

1462 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1465 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1466 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


1467 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

1468 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE failed with wrong "

1471 
	`iscsi_gë_îr‹
(
iscsi
));

1472 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1477 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

1479 
	}
}

1481 
	$°¨t°›unô
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1483 
scsi_èsk
 *
èsk
;

1485 
	`loggög
(
LOG_VERBOSE
, "Síd STARTSTOPUNIT IMMED:%d PCM:%d PC:%d NO_FLUSH:%d LOEJ:%d START:%d", 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1486 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1487 
l€j
, 
°¨t
);

1488 i‡(
èsk
 =
NULL
) {

1489 
	`loggög
(
LOG_NORMAL
,

1491 
	`iscsi_gë_îr‹
(
iscsi
));

1494 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1495 
	`loggög
(
LOG_NORMAL
,

1497 
	`iscsi_gë_îr‹
(
iscsi
));

1498 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1501 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1502 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned SUCCESS.");

1504 
	}
}

1506 
	$°¨t°›unô_¥evíåemovÆ
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1508 
scsi_èsk
 *
èsk
;

1510 
	`loggög
(
LOG_VERBOSE
, "Send STARTSTOPUNIT (Expecting MEDIUM_REMOVAL_PREVENTED) "

1512 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1514 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1515 
l€j
, 
°¨t
);

1516 i‡(
èsk
 =
NULL
) {

1517 
	`loggög
(
LOG_NORMAL
,

1519 
	`iscsi_gë_îr‹
(
iscsi
));

1522 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1523 
	`loggög
(
LOG_NORMAL
,

1525 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1528 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1529 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1530 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

1531 
	`loggög
(
LOG_NORMAL
, "[FAILED] STARTSTOPUNIT Should have failed "

1533 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1534 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1537 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1538 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned MEDIUM_REMOVAL_PREVENTED.");

1540 
	}
}

1542 
	$°¨t°›unô_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1544 
scsi_èsk
 *
èsk
;

1546 
	`loggög
(
LOG_VERBOSE
, "Send STARTSTOPUNIT (Expecting SANITIZE_IN_PROGRESS) "

1548 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1550 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1551 
l€j
, 
°¨t
);

1552 i‡(
èsk
 =
NULL
) {

1553 
	`loggög
(
LOG_NORMAL
,

1555 
	`iscsi_gë_îr‹
(
iscsi
));

1558 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1559 
	`loggög
(
LOG_NORMAL
,

1561 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1564 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1565 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1566 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

1567 
	`loggög
(
LOG_NORMAL
, "[FAILED] STARTSTOPUNIT Should have failed "

1569 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1570 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1573 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1574 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned SANITIZE_IN_PROGRESS.");

1576 
	}
}

1579 
	$ã°unôªady
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1581 
scsi_èsk
 *
èsk
;

1583 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY");

1584 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1585 i‡(
èsk
 =
NULL
) {

1586 
	`loggög
(
LOG_NORMAL
,

1588 
	`iscsi_gë_îr‹
(
iscsi
));

1591 i‡(
èsk
->
°©us
 =
SCSI_STATUS_TIMEOUT
) {

1592 
	`loggög
(
LOG_NORMAL
,

1594 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1597 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1598 
	`loggög
(
LOG_NORMAL
,

1600 
	`iscsi_gë_îr‹
(
iscsi
));

1601 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1604 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1605 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned SUCCESS.");

1607 
	}
}

1610 
	$ã°unôªady_˛ór_ua
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1612 
scsi_èsk
 *
èsk
;

1613 
ªt
 = -1;

1615 
	`loggög
(
LOG_VERBOSE
,

1617 
iscsi
->
öôüt‹_«me
);

1619 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1620 i‡(
èsk
 =
NULL
) {

1621 
	`loggög
(
LOG_NORMAL
,

1623 
	`iscsi_gë_îr‹
(
iscsi
));

1624 
out
;

1626 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1627 
	`loggög
(
LOG_NORMAL
,

1629 
	`iscsi_gë_îr‹
(
iscsi
));

1630 
out
;

1632 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADY doesÇotÑeturn unit "

1634 
ªt
 = 0;

1636 
out
:

1637 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1638  
ªt
;

1639 
	}
}

1642 
	$ã°unôªady_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1644 
scsi_èsk
 *
èsk
;

1646 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting MEDIUM_NOT_PRESENT)");

1647 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1648 i‡(
èsk
 =
NULL
) {

1649 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1650 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1653 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1654 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1655 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1658 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1659 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1660 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1661 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1662 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1663 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY Should have failed "

1665 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1666 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1669 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1670 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned MEDIUM_NOT_PRESENT.");

1672 
	}
}

1675 
	$ã°unôªady_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1677 
scsi_èsk
 *
èsk
;

1679 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting SANITIZE_IN_PROGRESS)");

1680 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1681 i‡(
èsk
 =
NULL
) {

1682 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1683 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1686 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1687 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY command successful. But should have failed with NOT_READY/SANITIZE_IN_PROGRESS");

1688 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1691 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1692 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1693 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

1694 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY Should have failed "

1696 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1697 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1700 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1701 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned SANITIZE_IN_PROGRESS.");

1703 
	}
}

1706 
	$ã°unôªady_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1708 
scsi_èsk
 *
èsk
;

1710 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting RESERVATION_CONFLICT)");

1711 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1712 i‡(
èsk
 =
NULL
) {

1713 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1714 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1717 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

1718 
	`loggög
(
LOG_NORMAL
, "[FAILED] Expected RESERVATION CONFLICT");

1721 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1722 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned RESERVATION_CONFLICT.");

1724 
	}
}

1726 
	$com∑ª™dwrôe
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1727 *
d©a
, 
uöt32_t
 
Àn
, 
blocksize
,

1728 
wΩrŸe˘
, 
dpo
,

1729 
fua
, 
group_numbî
)

1731 
scsi_èsk
 *
èsk
;

1733 
	`loggög
(
LOG_VERBOSE
, "Síd COMPARE_AND_WRITE LBA:%" 
PRIu64


1735 
lba
, 
Àn
, 
wΩrŸe˘
);

1737 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
lba
,

1738 
d©a
, 
Àn
, 
blocksize
,

1739 
wΩrŸe˘
, 
dpo
, 
fua
, 0, 
group_numbî
);

1740 i‡(
èsk
 =
NULL
) {

1741 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send COMPARE_AND_WRITE "

1743 
	`iscsi_gë_îr‹
(
iscsi
));

1746 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1747 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1748 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1749 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] COMPARE_AND_WRITE isÇot "

1751 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1754 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1755 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE command: "

1756 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1757 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1761 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1762 
	`loggög
(
LOG_VERBOSE
, "[OK] COMPARE_AND_WRITEÑeturned SUCCESS.");

1764 
	}
}

1766 
	$com∑ª™dwrôe_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1767 
uöt64_t
 
lba
, *
d©a
,

1768 
uöt32_t
 
Àn
, 
blocksize
,

1769 
wΩrŸe˘
, 
dpo
,

1770 
fua
, 
group_numbî
)

1772 
scsi_èsk
 *
èsk
;

1774 
	`loggög
(
LOG_VERBOSE
, "Síd COMPARE_AND_WRITE LBA:%" 
PRIu64


1776 
lba
, 
Àn
, 
wΩrŸe˘
);

1778 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
lba
,

1779 
d©a
, 
Àn
, 
blocksize
,

1780 
wΩrŸe˘
, 
dpo
, 
fua
, 0, 
group_numbî
);

1781 i‡(
èsk
 =
NULL
) {

1782 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send COMPARE_AND_WRITE "

1784 
	`iscsi_gë_îr‹
(
iscsi
));

1787 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1788 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1789 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1790 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] COMPARE_AND_WRITE isÇot "

1792 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1795 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1796 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE successful "

1798 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1802 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1803 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


1804 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

1805 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE failed with "

1808 "£n£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1809 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1813 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1814 
	`loggög
(
LOG_VERBOSE
, "[OK] COMPARE_AND_WRITEÑeturned MISCOMPARE.");

1816 
	}
}

1818 
scsi_èsk
 *
	$gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1820 
scsi_èsk
 *
èsk
;

1822 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS LBA:%" 
PRIu64
 "álloc_len:%d",

1823 
lba
, 
Àn
);

1825 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1826 i‡(
èsk
 =
NULL
) {

1827 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1829 
	`iscsi_gë_îr‹
(
iscsi
));

1830  
NULL
;

1832 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1833 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1834 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1835 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1837 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1838  
NULL
;

1841 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned SUCCESS.");

1842  
èsk
;

1843 
	}
}

1845 
	$gë_lba_°©us
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1847 
scsi_èsk
 *
èsk
;

1849 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS LBA:%" 
PRIu64
 "álloc_len:%d",

1850 
lba
, 
Àn
);

1852 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1853 i‡(
èsk
 =
NULL
) {

1854 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1856 
	`iscsi_gë_îr‹
(
iscsi
));

1859 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1860 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1861 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1862 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1864 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1867 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1868 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS command: "

1869 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1870 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1874 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1875 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned SUCCESS.");

1877 
	}
}

1879 
	$gë_lba_°©us_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1881 
scsi_èsk
 *
èsk
;

1883 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS (Ex≥˘ög LBA_OUT_OF_RANGEËLBA:%" 
PRIu64
 "álloc_len:%d",

1884 
lba
, 
Àn
);

1886 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1887 i‡(
èsk
 =
NULL
) {

1888 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1890 
	`iscsi_gë_îr‹
(
iscsi
));

1893 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1894 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1895 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1896 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1898 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1901 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1902 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUSÑeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

1903 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1906 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1907 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1908 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

1909 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1910 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1914 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1915 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

1917 
	}
}

1919 
	$gë_lba_°©us_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1921 
scsi_èsk
 *
èsk
;

1923 
	`loggög
(
LOG_VERBOSE
, "Send GET_LBA_STATUS (Expecting MEDIUM_NOT_PRESENT) "

1924 "LBA:%" 
PRIu64
 "álloc_len:%d",

1925 
lba
, 
Àn
);

1927 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1928 i‡(
èsk
 =
NULL
) {

1929 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1931 
	`iscsi_gë_îr‹
(
iscsi
));

1934 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1935 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1936 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1937 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1939 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1942 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1943 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUSÑeturned SUCCESS. Should have failed with MEDIUM_NOT_PRESENT.");

1944 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1947 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1948 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1949 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1950 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1951 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1952 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1953 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1957 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1958 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned MEDIUM_NOT_PRESENT.");

1960 
	}
}

1963 
	$¥e„tch10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
immed
, 
group
)

1965 
scsi_èsk
 *
èsk
;

1967 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 LBA:%d blocks:%d"

1969 
lba
, 
num
, 
immed
, 
group
);

1971 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

1972 i‡(
èsk
 =
NULL
) {

1973 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

1974 
	`iscsi_gë_îr‹
(
iscsi
));

1977 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1978 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1979 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1980 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

1981 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1984 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1985 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 command: "

1986 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1987 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1991 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1992 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned SUCCESS.");

1994 
	}
}

1997 
	$¥e„tch10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1998 
num
, 
immed
, 
group
)

2000 
scsi_èsk
 *
èsk
;

2002 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 (Expecting LBA_OUT_OF_RANGE) "

2004 
lba
, 
num
, 
immed
, 
group
);

2006 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2007 i‡(
èsk
 =
NULL
) {

2008 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

2009 
	`iscsi_gë_îr‹
(
iscsi
));

2012 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2013 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2014 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2015 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

2016 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2019 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2020 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10Ñeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2021 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2024 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2025 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2026 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2027 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2028 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2032 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2033 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2035 
	}
}

2038 
	$¥e„tch10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2039 
num
, 
immed
, 
group
)

2041 
scsi_èsk
 *
èsk
;

2043 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 (Expecting MEDIUM_NOT_PRESENT) "

2045 
lba
, 
num
, 
immed
, 
group
);

2047 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2048 i‡(
èsk
 =
NULL
) {

2049 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

2050 
	`iscsi_gë_îr‹
(
iscsi
));

2054 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2055 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2056 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2057 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

2058 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2061 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2062 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10Ñeturned SUCCESS. Should have failed with NOT_READY/MEDIUM_NOT_PRESENT.");

2063 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2066 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2067 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2068 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2069 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2070 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2071 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2072 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2076 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2077 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned MEDIUM_NOT_PRESENT.");

2079 
	}
}

2082 
	$¥e„tch16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
immed
, 
group
)

2084 
scsi_èsk
 *
èsk
;

2086 
	`loggög
(
LOG_VERBOSE
, "Síd PREFETCH16 LBA:%" 
PRIu64
 " blocks:%d"

2088 
lba
, 
num
, 
immed
, 
group
);

2090 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2091 i‡(
èsk
 =
NULL
) {

2092 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2093 
	`iscsi_gë_îr‹
(
iscsi
));

2096 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2097 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2098 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2099 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2103 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2104 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 command: "

2105 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2111 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned SUCCESS.");

2113 
	}
}

2116 
	$¥e„tch16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2117 
num
, 
immed
, 
group
)

2119 
scsi_èsk
 *
èsk
;

2121 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH16 (Expecting LBA_OUT_OF_RANGE) "

2122 "LBA:%" 
PRIu64
 " blocks:%d immed:%d group:%d",

2123 
lba
, 
num
, 
immed
, 
group
);

2125 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2126 i‡(
èsk
 =
NULL
) {

2127 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2128 
	`iscsi_gë_îr‹
(
iscsi
));

2131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2132 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2133 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2134 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2138 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2139 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16Ñeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2143 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2144 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2145 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2146 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2152 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2154 
	}
}

2157 
	$¥e„tch16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2158 
num
, 
immed
, 
group
)

2160 
scsi_èsk
 *
èsk
;

2162 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH16 (Expecting MEDIUM_NOT_PRESENT) "

2163 "LBA:%" 
PRIu64
 " blocks:%d immed:%d group:%d",

2164 
lba
, 
num
, 
immed
, 
group
);

2166 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2167 i‡(
èsk
 =
NULL
) {

2168 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2169 
	`iscsi_gë_îr‹
(
iscsi
));

2173 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2174 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2175 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2176 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2180 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2181 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16Ñeturned SUCCESS. Should have failed with NOT_READY/MEDIUM_NOT_PRESENT.");

2182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2185 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2186 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2187 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2188 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2189 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2190 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2196 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned MEDIUM_NOT_PRESENT.");

2198 
	}
}

2201 
	$¥evíèŒow
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
¥evít
)

2203 
scsi_èsk
 *
èsk
;

2205 
	`loggög
(
LOG_VERBOSE
, "Síd PREVENTALLOWÖªvít:%d", 
¥evít
);

2206 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 
¥evít
);

2207 i‡(
èsk
 =
NULL
) {

2208 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREVENTALLOW "

2209 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2212 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2213 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2214 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2215 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREVENTALLOW isÇot implemented onÅarget");

2216 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2219 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2220 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREVENTALLOW command: "

2221 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2222 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2227 
	`loggög
(
LOG_VERBOSE
, "[OK] PREVENTALLOWÑeturned SUCCESS.");

2229 
	}
}

2232 
	$ªad6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2233 
uöt32_t
 
d©Æí
, 
blocksize
,

2234 *
d©a
)

2236 
scsi_èsk
 *
èsk
;

2238 
	`loggög
(
LOG_VERBOSE
, "Send READ6 LBA:%d blocks:%d",

2239 
lba
, 
d©Æí
 / 
blocksize
);

2241 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
);

2242 i‡(
èsk
 =
NULL
) {

2243 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ6 command: %s",

2244 
	`iscsi_gë_îr‹
(
iscsi
));

2247 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2248 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2249 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2250 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2251 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

2254 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2255 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 command: "

2256 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2257 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2261 i‡(
d©a
 !
NULL
) {

2262 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2265 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2266 
	`loggög
(
LOG_VERBOSE
, "[OK] READ6Ñeturned SUCCESS.");

2268 
	}
}

2271 
	$ªad6_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2272 
uöt32_t
 
d©Æí
, 
blocksize
,

2273 *
d©a
)

2275 
scsi_èsk
 *
èsk
;

2277 
	`loggög
(
LOG_VERBOSE
, "Send READ6 (Expecting LBA_OUT_OF_RANGE) "

2279 
lba
, 
d©Æí
 / 
blocksize
);

2281 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
);

2282 i‡(
èsk
 =
NULL
) {

2283 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ6 command: %s",

2284 
	`iscsi_gë_îr‹
(
iscsi
));

2287 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2288 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2289 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2290 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2291 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

2294 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2295 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 successful but should "

2297 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2300 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2301 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2302 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2303 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 failed with wrong sense. "

2305 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2306 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2310 i‡(
d©a
 !
NULL
) {

2311 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2314 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2315 
	`loggög
(
LOG_VERBOSE
, "[OK] READ6Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2317 
	}
}

2319 
scsi_èsk
*

2320 
	$ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2321 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2322 
dpo
, 
fua
, 
fua_nv
, 
group
,

2323 *
d©a
)

2325 
scsi_èsk
 *
èsk
;

2327 
	`loggög
(
LOG_VERBOSE
, "Send READ10 LBA:%d blocks:%dÑdprotect:%d "

2329 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2330 
dpo
, 
fua
, 
fua_nv
, 
group
);

2332 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2333 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2334 i‡(
èsk
 =
NULL
) {

2335 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2336 
	`iscsi_gë_îr‹
(
iscsi
));

2337  
NULL
;

2340 i‡(
d©a
 !
NULL
) {

2341 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2344 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned SUCCESS.");

2345  
èsk
;

2346 
	}
}

2349 
	$ªad10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2350 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2351 
dpo
, 
fua
, 
fua_nv
, 
group
,

2352 *
d©a
)

2354 
scsi_èsk
 *
èsk
;

2356 
	`loggög
(
LOG_VERBOSE
, "Send READ10 LBA:%d blocks:%dÑdprotect:%d "

2358 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2359 
dpo
, 
fua
, 
fua_nv
, 
group
);

2361 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2362 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2363 i‡(
èsk
 =
NULL
) {

2364 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2365 
	`iscsi_gë_îr‹
(
iscsi
));

2368 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2369 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 command: "

2370 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2371 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2375 i‡(
d©a
 !
NULL
) {

2376 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2379 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2380 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned SUCCESS.");

2382 
	}
}

2385 
	$ªad10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2386 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2387 
dpo
, 
fua
, 
fua_nv
, 
group
,

2388 *
d©a
)

2390 
scsi_èsk
 *
èsk
;

2392 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting INVALID_FIELD_IN_CDB) "

2395 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2396 
dpo
, 
fua
, 
fua_nv
, 
group
);

2398 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2399 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2400 i‡(
èsk
 =
NULL
) {

2401 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2402 
	`iscsi_gë_îr‹
(
iscsi
));

2405 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2406 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2408 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2411 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2412 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2413 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2414 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 failed with wrong sense. "

2417 
	`iscsi_gë_îr‹
(
iscsi
));

2418 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2422 i‡(
d©a
 !
NULL
) {

2423 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2426 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2427 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2429 
	}
}

2432 
	$ªad10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2433 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2434 
dpo
, 
fua
, 
fua_nv
, 
group
,

2435 *
d©a
)

2437 
scsi_èsk
 *
èsk
;

2439 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting LBA_OUT_OF_RANGE) "

2442 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2443 
dpo
, 
fua
, 
fua_nv
, 
group
);

2445 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2446 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2447 i‡(
èsk
 =
NULL
) {

2448 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2449 
	`iscsi_gë_îr‹
(
iscsi
));

2452 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2453 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2455 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2458 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2459 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2460 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2461 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 failed with wrong sense. "

2463 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2464 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2468 i‡(
d©a
 !
NULL
) {

2469 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2472 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2473 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2475 
	}
}

2478 
	$ªad10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2479 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2480 
dpo
, 
fua
, 
fua_nv
, 
group
,

2481 *
d©a
)

2483 
scsi_èsk
 *
èsk
;

2485 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting MEDIUM_NOT_PRESENT) "

2488 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2489 
dpo
, 
fua
, 
fua_nv
, 
group
);

2491 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2492 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2493 i‡(
èsk
 =
NULL
) {

2494 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2495 
	`iscsi_gë_îr‹
(
iscsi
));

2498 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2499 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2501 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2504 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2505 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2506 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2507 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2508 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2509 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 Should have failed "

2511 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2512 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2516 i‡(
d©a
 !
NULL
) {

2517 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2520 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2521 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned MEDIUM_NOT_PRESENT.");

2523 
	}
}

2526 
	$ªad12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2527 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2528 
dpo
, 
fua
, 
fua_nv
, 
group
,

2529 *
d©a
)

2531 
scsi_èsk
 *
èsk
;

2533 
	`loggög
(
LOG_VERBOSE
, "Send READ12 LBA:%d blocks:%dÑdprotect:%d "

2535 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2536 
dpo
, 
fua
, 
fua_nv
, 
group
);

2538 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2539 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2540 i‡(
èsk
 =
NULL
) {

2541 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2542 
	`iscsi_gë_îr‹
(
iscsi
));

2545 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2546 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2547 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2548 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2549 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2552 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2553 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 command: "

2554 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2555 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2559 i‡(
d©a
 !
NULL
) {

2560 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2563 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2564 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned SUCCESS.");

2566 
	}
}

2569 
	$ªad12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2570 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2571 
dpo
, 
fua
, 
fua_nv
, 
group
,

2572 *
d©a
)

2574 
scsi_èsk
 *
èsk
;

2576 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting INVALID_FIELD_IN_CDB) "

2579 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2580 
dpo
, 
fua
, 
fua_nv
, 
group
);

2582 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2583 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2584 i‡(
èsk
 =
NULL
) {

2585 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2586 
	`iscsi_gë_îr‹
(
iscsi
));

2589 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2590 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2591 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2592 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2593 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2596 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2597 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2599 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2602 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2603 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2604 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2605 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 failed with wrong sense. "

2608 
	`iscsi_gë_îr‹
(
iscsi
));

2609 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2613 i‡(
d©a
 !
NULL
) {

2614 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2617 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2618 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2620 
	}
}

2623 
	$ªad12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2624 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2625 
dpo
, 
fua
, 
fua_nv
, 
group
,

2626 *
d©a
)

2628 
scsi_èsk
 *
èsk
;

2630 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting LBA_OUT_OF_RANGE) "

2633 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2634 
dpo
, 
fua
, 
fua_nv
, 
group
);

2636 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2637 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2638 i‡(
èsk
 =
NULL
) {

2639 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2640 
	`iscsi_gë_îr‹
(
iscsi
));

2643 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2644 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2645 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2646 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2647 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2650 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2651 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2653 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2656 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2657 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2658 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2659 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 failed with wrong sense. "

2661 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2662 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2666 i‡(
d©a
 !
NULL
) {

2667 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2670 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2671 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2673 
	}
}

2676 
	$ªad12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2677 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2678 
dpo
, 
fua
, 
fua_nv
, 
group
,

2679 *
d©a
)

2681 
scsi_èsk
 *
èsk
;

2683 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting MEDIUM_NOT_PRESENT) "

2686 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2687 
dpo
, 
fua
, 
fua_nv
, 
group
);

2689 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2690 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2691 i‡(
èsk
 =
NULL
) {

2692 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2693 
	`iscsi_gë_îr‹
(
iscsi
));

2696 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2697 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2698 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2699 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2700 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2703 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2704 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2706 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2709 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2710 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2711 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2712 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2713 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2714 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 Should have failed "

2716 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2717 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2721 i‡(
d©a
 !
NULL
) {

2722 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2725 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2726 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned MEDIUM_NOT_PRESENT*.");

2728 
	}
}

2731 
	$ªad16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2732 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2733 
dpo
, 
fua
, 
fua_nv
, 
group
,

2734 *
d©a
)

2736 
scsi_èsk
 *
èsk
;

2738 
	`loggög
(
LOG_VERBOSE
, "Síd READ16 LBA:%" 
PRId64
 " blocks:%d "

2740 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2741 
dpo
, 
fua
, 
fua_nv
, 
group
);

2743 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2744 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2745 i‡(
èsk
 =
NULL
) {

2746 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2747 
	`iscsi_gë_îr‹
(
iscsi
));

2750 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2751 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2752 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2753 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2754 i‡(
sbc3_suµ‹t
) {

2755 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2758 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2762 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2763 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 command: "

2764 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2765 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2769 i‡(
d©a
 !
NULL
) {

2770 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2773 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2774 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned SUCCESS.");

2776 
	}
}

2779 
	$ªad16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2780 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2781 
dpo
, 
fua
, 
fua_nv
, 
group
,

2782 *
d©a
)

2784 
scsi_èsk
 *
èsk
;

2786 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting INVALID_FIELD_IN_CDB) "

2787 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2789 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2790 
dpo
, 
fua
, 
fua_nv
, 
group
);

2792 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2793 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2794 i‡(
èsk
 =
NULL
) {

2795 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2796 
	`iscsi_gë_îr‹
(
iscsi
));

2799 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2800 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2801 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2802 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2803 i‡(
sbc3_suµ‹t
) {

2804 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2807 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2811 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2812 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2814 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2817 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2818 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2819 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2820 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 failed with wrong sense. "

2823 
	`iscsi_gë_îr‹
(
iscsi
));

2824 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2828 i‡(
d©a
 !
NULL
) {

2829 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2832 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2833 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2835 
	}
}

2838 
	$ªad16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2839 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2840 
dpo
, 
fua
, 
fua_nv
, 
group
,

2841 *
d©a
)

2843 
scsi_èsk
 *
èsk
;

2845 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting LBA_OUT_OF_RANGE) "

2846 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2848 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2849 
dpo
, 
fua
, 
fua_nv
, 
group
);

2851 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2852 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2853 i‡(
èsk
 =
NULL
) {

2854 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2855 
	`iscsi_gë_îr‹
(
iscsi
));

2858 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2859 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2860 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2861 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2862 i‡(
sbc3_suµ‹t
) {

2863 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2866 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2870 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2871 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2873 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2876 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2877 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2878 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2879 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 failed with wrong sense. "

2881 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2882 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2886 i‡(
d©a
 !
NULL
) {

2887 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2890 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2891 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2893 
	}
}

2896 
	$ªad16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2897 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2898 
dpo
, 
fua
, 
fua_nv
, 
group
,

2899 *
d©a
)

2901 
scsi_èsk
 *
èsk
;

2903 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting MEDIUM_NOT_PRESENT) "

2904 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2906 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2907 
dpo
, 
fua
, 
fua_nv
, 
group
);

2909 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2910 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2911 i‡(
èsk
 =
NULL
) {

2912 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2913 
	`iscsi_gë_îr‹
(
iscsi
));

2916 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2917 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2918 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2919 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2920 i‡(
sbc3_suµ‹t
) {

2921 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2924 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2928 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2929 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2931 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2934 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2935 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2936 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2937 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2938 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2939 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 Should have failed "

2941 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2942 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2946 i‡(
d©a
 !
NULL
) {

2947 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2950 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2951 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned MEDIUM_NOT_PRESENT.");

2953 
	}
}

2956 
	$ªad16_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2957 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2958 
dpo
, 
fua
, 
fua_nv
, 
group
,

2959 *
d©a
)

2961 
scsi_èsk
 *
èsk
;

2963 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting SANITIZE_IN_PROGRESS) "

2964 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2966 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2967 
dpo
, 
fua
, 
fua_nv
, 
group
);

2969 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2970 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2971 i‡(
èsk
 =
NULL
) {

2972 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2973 
	`iscsi_gë_îr‹
(
iscsi
));

2976 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2977 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2979 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2982 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2983 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2984 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

2985 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 Should have failed "

2987 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2988 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2992 i‡(
d©a
 !
NULL
) {

2993 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2996 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2997 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned SANITIZE_IN_PROGRESS");

2999 
	}
}

3002 
	$ªadˇ∑côy10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
pmi
)

3004 
scsi_èsk
 *
èsk
;

3006 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY10 LBA:%dÖmi:%d",

3007 
lba
, 
pmi
);

3009 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 
lba
, 
pmi
);

3010 i‡(
èsk
 =
NULL
) {

3011 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY10 command: %s",

3012 
	`iscsi_gë_îr‹
(
iscsi
));

3015 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3016 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 command: "

3017 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3018 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3022 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3023 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY10Ñeturned SUCCESS.");

3025 
	}
}

3028 
	$ªadˇ∑côy10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
pmi
)

3030 
scsi_èsk
 *
èsk
;

3032 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY10 (Expecting MEDIUM_NOT_PRESENT) "

3034 
lba
, 
pmi
);

3036 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 
lba
, 
pmi
);

3037 i‡(
èsk
 =
NULL
) {

3038 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY10 command: %s",

3039 
	`iscsi_gë_îr‹
(
iscsi
));

3042 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3043 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3044 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3047 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3048 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3049 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3050 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3051 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3052 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 Should have failed "

3054 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3055 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3059 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3060 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY10Ñeturned MEDIUM_NOT_PRESENT.");

3062 
	}
}

3065 
	$ªadˇ∑côy16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
Æloc_Àn
)

3067 
scsi_èsk
 *
èsk
;

3070 
	`loggög
(
LOG_VERBOSE
, "Síd READCAPACITY16áŒoc_Àn:%d", 
Æloc_Àn
);

3072 
èsk
 = 
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 
Æloc_Àn
);

3073 i‡(
èsk
 =
NULL
) {

3074 
	`loggög
(
LOG_NORMAL
, "Out-of-memory: FailedÅo create "

3078 
èsk
 = 
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
,Åask, 
NULL
);

3079 i‡(
èsk
 =
NULL
) {

3080 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3081 
	`iscsi_gë_îr‹
(
iscsi
));

3084 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3085 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3086 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3087 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3088 i‡(
öq
->
¥Ÿe˘
) {

3089 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇot "

3095 i‡(
sbc3_suµ‹t
) {

3096 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

3099 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implementedánd SBC-3 isÇot claimed.");

3103 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3104 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 command: "

3105 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3111 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY16Ñeturned SUCCESS.");

3113 
	}
}

3116 
	$ªadˇ∑côy16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
Æloc_Àn
)

3118 
scsi_èsk
 *
èsk
;

3120 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY16 (Expecting MEDIUM_NOT_PRESENT) "

3121 "Æloc_Àn:%d", 
Æloc_Àn
);

3123 
èsk
 = 
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 
Æloc_Àn
);

3124 i‡(
èsk
 =
NULL
) {

3125 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3126 
	`iscsi_gë_îr‹
(
iscsi
));

3129 
èsk
 = 
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
,Åask, 
NULL
);

3130 i‡(
èsk
 =
NULL
) {

3131 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3132 
	`iscsi_gë_îr‹
(
iscsi
));

3135 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3136 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3137 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3139 i‡(
sbc3_suµ‹t
) {

3140 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

3143 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implementedánd SBC-3 isÇot claimed.");

3147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3148 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3152 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3153 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3154 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3155 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3156 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3157 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 Should have failed "

3159 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3165 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY16Ñeturned MEDIUM_NOT_PRESENT.");

3167 
	}
}

3170 
	$ªÀa£6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3172 
scsi_èsk
 *
èsk
;

3173 
i
, 
ªs
 = 0;

3175 
	`loggög
(
LOG_VERBOSE
, "Send RELEASE6");

3177 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3178 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

3179 i‡(
èsk
 =
NULL
) {

3180 
	`loggög
(
LOG_NORMAL
,

3182 
	`iscsi_gë_îr‹
(
iscsi
));

3183 
ªs
 = -1;

3186 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

3187 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3188 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3189 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3190 
	`loggög
(
LOG_NORMAL
, "[FAILED] RELEASE6 command: "

3192 
	`iscsi_gë_îr‹
(
iscsi
));

3193 
ªs
 = -1;

3195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3198 i‡(
ªs
 == 0)

3199 
	`loggög
(
LOG_VERBOSE
, "[OK] RELEASE6Ñeturned SUCCESS.");

3200  
ªs
;

3201 
	}
}

3203 
	$ªp‹t_suµ‹ãd_›codes
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_èsk
 **
ßve_èsk
)

3205 
scsi_èsk
 *
èsk
;

3207 
	`loggög
(
LOG_VERBOSE
, "Send REPORT_SUPPORTED_OPCODE RCTD:%d OPTIONS:%d "

3209 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3211 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

3212 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3213 i‡(
èsk
 =
NULL
) {

3214 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send "

3216 
	`iscsi_gë_îr‹
(
iscsi
));

3219 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3220 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3221 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3222 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] REPORT_SUPPORTED_OPCODES isÇot "

3224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3227 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3228 
	`loggög
(
LOG_NORMAL
, "[FAILED] REPORT_SUPPORTED_OPCODES "

3230 
	`iscsi_gë_îr‹
(
iscsi
));

3231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3235 i‡(
ßve_èsk
 !
NULL
) {

3236 *
ßve_èsk
 = 
èsk
;

3238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3241 
	`loggög
(
LOG_VERBOSE
, "[OK] REPORT_SUPPORTED_OPCODESÑeturned SUCCESS.");

3243 
	}
}

3245 
	$ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_èsk
 **
ßve_èsk
)

3247 
scsi_èsk
 *
èsk
;

3249 
	`loggög
(
LOG_VERBOSE
, "Send REPORT_SUPPORTED_OPCODE (expecting INVALID_FIELD_IN_CDB) RCTD:%d OPTIONS:%d "

3251 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3253 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

3254 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3255 i‡(
èsk
 =
NULL
) {

3256 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send "

3258 
	`iscsi_gë_îr‹
(
iscsi
));

3261 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3262 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3263 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3264 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] REPORT_SUPPORTED_OPCODES isÇot "

3266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3269 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3270 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3271 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3272 
	`loggög
(
LOG_NORMAL
, "[FAILED] REPORT_SUPPORTED_OPCODES should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3273 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3277 i‡(
ßve_èsk
 !
NULL
) {

3278 *
ßve_èsk
 = 
èsk
;

3280 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3283 
	`loggög
(
LOG_VERBOSE
, "[OK] REPORT_SUPPORTED_OPCODESÑeturned "

3286 
	}
}

3289 
	$ª£rve6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3291 
scsi_èsk
 *
èsk
;

3292 
i
, 
ªs
 = 0;

3294 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6");

3296 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3297 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

3298 i‡(
èsk
 =
NULL
) {

3299 
	`loggög
(
LOG_NORMAL
,

3301 
	`iscsi_gë_îr‹
(
iscsi
));

3302 
ªs
 = -1;

3305 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3306 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3307 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3308 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot "

3310 
ªs
 = -2;

3311 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

3312 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3313 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3314 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3315 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

3317 
	`iscsi_gë_îr‹
(
iscsi
));

3318 
ªs
 = -1;

3320 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3323 i‡(
ªs
 == 0)

3324 
	`loggög
(
LOG_VERBOSE
, "[OK] RESERVE6Ñeturned SUCCESS.");

3325  
ªs
;

3326 
	}
}

3329 
	$ª£rve6_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3331 
scsi_èsk
 *
èsk
;

3332 
i
, 
ªs
 = 0;

3334 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6 (Expecting RESERVATION_CONFLICT)");

3336 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3337 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

3338 i‡(
èsk
 =
NULL
) {

3339 
	`loggög
(
LOG_NORMAL
,

3341 
	`iscsi_gë_îr‹
(
iscsi
));

3342 
ªs
 = -1;

3345 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3346 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3347 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3348 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot"

3350 
ªs
 = -2;

3351 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
 &&

3352 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3353 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3354 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3355 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

3357 
ªs
 = -1;

3359 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3362 i‡(
ªs
 == 0)

3363 
	`loggög
(
LOG_VERBOSE
,

3365  
ªs
;

3366 
	}
}

3369 
	$unm≠
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3371 
scsi_èsk
 *
èsk
;

3373 
	`loggög
(
LOG_VERBOSE
, "Síd UNMAPÜi°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3374 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3375 i‡(
èsk
 =
NULL
) {

3376 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3377 
	`iscsi_gë_îr‹
(
iscsi
));

3380 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3381 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3382 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3383 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3387 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3388 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3389 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3393 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3394 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned SUCCESS.");

3396 
	}
}

3399 
	$unm≠_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3401 
scsi_èsk
 *
èsk
;

3403 
	`loggög
(
LOG_VERBOSE
, "Send UNMAP (Expecting WRITE_PROTECTED) "

3404 "li°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3406 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3407 i‡(
èsk
 =
NULL
) {

3408 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3409 
	`iscsi_gë_îr‹
(
iscsi
));

3412 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3413 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3414 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3415 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3416 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3419 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3420 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP successful but should "

3422 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3425 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3426 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


3427 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

3428 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP failed with wrong sense. "

3431 
	`iscsi_gë_îr‹
(
iscsi
));

3432 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3436 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3437 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

3439 
	}
}

3442 
	$unm≠_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3444 
scsi_èsk
 *
èsk
;

3446 
	`loggög
(
LOG_VERBOSE
, "Send UNMAP (Expecting MEDIUM_NOT_PRESENT) "

3447 "li°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3449 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3450 i‡(
èsk
 =
NULL
) {

3451 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3452 
	`iscsi_gë_îr‹
(
iscsi
));

3455 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3456 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3457 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3458 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3459 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3462 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3463 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP successful but should "

3465 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3468 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3469 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3470 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3471 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3472 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3473 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP Should have failed "

3475 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3480 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3481 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned MEDIUM_NOT_PRESENT.");

3483 
	}
}

3486 
	$vîify10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3488 
scsi_èsk
 *
èsk
;

3490 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY10 LBA:%d blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3491 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3492 i‡(
èsk
 =
NULL
) {

3493 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3494 
	`iscsi_gë_îr‹
(
iscsi
));

3497 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3498 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3499 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3500 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3501 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3504 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3505 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3506 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3510 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3511 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned SUCCESS.");

3513 
	}
}

3516 
	$vîify10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3518 
scsi_èsk
 *
èsk
;

3520 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting MEDIUM_NOT_PRESENT) "

3522 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3524 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3525 i‡(
èsk
 =
NULL
) {

3526 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3527 
	`iscsi_gë_îr‹
(
iscsi
));

3530 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3531 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3532 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3533 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3534 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3537 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3538 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3539 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3542 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3543 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3544 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3545 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3546 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3547 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3548 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3552 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3553 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned MEDIUM_NOT_PRESENT.");

3555 
	}
}

3558 
	$vîify10_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3560 
scsi_èsk
 *
èsk
;

3562 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting MISCOMPARE) "

3564 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3566 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3567 i‡(
èsk
 =
NULL
) {

3568 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3569 
	`iscsi_gë_îr‹
(
iscsi
));

3572 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3573 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3574 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3575 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3576 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3579 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3580 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with MISCOMPARE");

3581 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3584 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3585 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3586 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3590 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3591 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned MISCOMPARE.");

3593 
	}
}

3596 
	$vîify10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3598 
scsi_èsk
 *
èsk
;

3600 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting LBA_OUT_OF_RANGE) "

3602 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3604 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3605 i‡(
èsk
 =
NULL
) {

3606 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3607 
	`iscsi_gë_îr‹
(
iscsi
));

3610 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3611 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3612 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3613 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3614 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3617 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3618 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with LBA_OUT_OF_RANGE");

3619 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3622 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3623 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3624 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

3625 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3626 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3630 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3631 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned LBA_OUT_OF_RANGE.");

3633 
	}
}

3636 
	$vîify10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3638 
scsi_èsk
 *
èsk
;

3640 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting INVALID_FIELD_IN_CDB) "

3642 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3644 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3645 i‡(
èsk
 =
NULL
) {

3646 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3647 
	`iscsi_gë_îr‹
(
iscsi
));

3650 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3651 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3652 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3653 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3654 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3657 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3658 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with LBA_OUT_OF_RANGE");

3659 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3662 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3663 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3664 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3665 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3666 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3670 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3671 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned INVALID_FIELD_IN_CDB.");

3673 
	}
}

3676 
	$vîify12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3678 
scsi_èsk
 *
èsk
;

3680 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY12 LBA:%d blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3681 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3682 i‡(
èsk
 =
NULL
) {

3683 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3684 
	`iscsi_gë_îr‹
(
iscsi
));

3687 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3688 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3689 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3690 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3691 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3694 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3695 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3696 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3700 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3701 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned SUCCESS.");

3703 
	}
}

3706 
	$vîify12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3708 
scsi_èsk
 *
èsk
;

3710 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting MEDIUM_NOT_PRESENT) "

3712 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3714 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3715 i‡(
èsk
 =
NULL
) {

3716 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3717 
	`iscsi_gë_îr‹
(
iscsi
));

3720 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3721 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3722 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3723 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3724 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3727 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3728 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3729 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3732 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3733 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3734 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3735 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3736 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3737 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3738 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3742 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3743 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned MEDIUM_NOT_PRESENT.");

3745 
	}
}

3748 
	$vîify12_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3750 
scsi_èsk
 *
èsk
;

3752 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (expecting MISCOMPARE) "

3754 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3756 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3757 i‡(
èsk
 =
NULL
) {

3758 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3759 
	`iscsi_gë_îr‹
(
iscsi
));

3762 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3763 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3764 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3765 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3766 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3769 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3770 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with MISCOMPARE");

3771 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3774 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3775 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3776 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3780 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3781 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned MISCOMPARE.");

3783 
	}
}

3786 
	$vîify12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3788 
scsi_èsk
 *
èsk
;

3790 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting LBA_OUT_OF_RANGE) "

3792 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3794 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3795 i‡(
èsk
 =
NULL
) {

3796 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3797 
	`iscsi_gë_îr‹
(
iscsi
));

3800 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3801 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3802 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3803 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3804 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3807 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3808 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with LBA_OUT_OF_RANGE");

3809 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3812 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3813 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3814 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

3815 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3816 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3820 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3821 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned LBA_OUT_OF_RANGE.");

3823 
	}
}

3826 
	$vîify12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3828 
scsi_èsk
 *
èsk
;

3830 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting INVALID_FIELD_IN_CDB) "

3832 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3834 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3835 i‡(
èsk
 =
NULL
) {

3836 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3837 
	`iscsi_gë_îr‹
(
iscsi
));

3840 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3841 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3842 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3843 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3844 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3847 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3848 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with LBA_OUT_OF_RANGE");

3849 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3852 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3853 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3854 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3855 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3856 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3860 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3861 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned INVALID_FIELD_IN_CDB.");

3863 
	}
}

3866 
	$vîify16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3868 
scsi_èsk
 *
èsk
;

3870 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY16 LBA:%" 
PRIu64
 " blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3871 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3872 i‡(
èsk
 =
NULL
) {

3873 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3874 
	`iscsi_gë_îr‹
(
iscsi
));

3877 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3878 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3879 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3880 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3881 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3884 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3885 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3886 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3890 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3891 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned SUCCESS.");

3893 
	}
}

3896 
	$vîify16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3898 
scsi_èsk
 *
èsk
;

3900 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting MEDIUM_NOT_PRESENT) "

3901 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3902 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3904 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3905 i‡(
èsk
 =
NULL
) {

3906 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3907 
	`iscsi_gë_îr‹
(
iscsi
));

3910 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3911 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3912 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3913 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3914 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3917 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3918 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3919 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3922 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3923 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3924 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3925 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3926 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3927 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3928 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3932 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3933 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned NOT_MEDIUM_NOT_PRESENT.");

3935 
	}
}

3938 
	$vîify16_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3940 
scsi_èsk
 *
èsk
;

3942 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting MISCOMPARE) "

3943 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3944 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3946 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3947 i‡(
èsk
 =
NULL
) {

3948 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3949 
	`iscsi_gë_îr‹
(
iscsi
));

3952 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3953 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3954 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3955 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3956 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3959 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3960 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with MISCOMPARE");

3961 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3964 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3965 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3966 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3970 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3971 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned MISCOMPARE.");

3973 
	}
}

3976 
	$vîify16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3978 
scsi_èsk
 *
èsk
;

3980 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting LBA_OUT_OF_RANGE) "

3981 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3982 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3984 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3985 i‡(
èsk
 =
NULL
) {

3986 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3987 
	`iscsi_gë_îr‹
(
iscsi
));

3990 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3991 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3992 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3993 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3994 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3997 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3998 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with LBA_OUT_OF_RANGE");

3999 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4002 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4003 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4004 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4005 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

4006 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4010 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4011 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned LBA_OUT_OF_RANGE.");

4013 
	}
}

4016 
	$vîify16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

4018 
scsi_èsk
 *
èsk
;

4020 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting INVALID_FIELD_IN_CDB) "

4021 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

4022 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

4024 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

4025 i‡(
èsk
 =
NULL
) {

4026 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

4027 
	`iscsi_gë_îr‹
(
iscsi
));

4030 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4031 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4032 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4033 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

4034 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4037 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4038 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with LBA_OUT_OF_RANGE");

4039 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4042 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4043 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4044 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4045 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

4046 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4050 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4051 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned INVALID_FIELD_IN_CDB.");

4053 
	}
}

4056 
	$wrôe10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4057 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4058 
dpo
, 
fua
, 
fua_nv
, 
group
,

4059 *
d©a
)

4061 
scsi_èsk
 *
èsk
;

4063 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 LBA:%d blocks:%d "

4065 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4066 
dpo
, 
fua
, 
fua_nv
, 
group
);

4068 i‡(!
d©a_loss
) {

4069 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4073 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
,

4074 
d©a
, 
d©Æí
, 
blocksize
,

4075 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4076 i‡(
èsk
 =
NULL
) {

4077 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4078 
	`iscsi_gë_îr‹
(
iscsi
));

4081 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4082 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4083 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4084 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4085 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4088 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4089 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 command: "

4090 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4091 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4095 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4096 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned SUCCESS.");

4098 
	}
}

4101 
	$wrôe10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4102 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4103 
dpo
, 
fua
, 
fua_nv
, 
group
,

4104 *
d©a
)

4106 
scsi_èsk
 *
èsk
;

4108 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting INVALID_FIELD_IN_CDB) "

4111 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4112 
dpo
, 
fua
, 
fua_nv
, 
group
);

4114 i‡(!
d©a_loss
) {

4115 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4119 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4120 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4121 i‡(
èsk
 =
NULL
) {

4122 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4123 
	`iscsi_gë_îr‹
(
iscsi
));

4126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4127 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4128 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4130 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4133 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4134 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4139 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4140 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4141 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4142 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4145 
	`iscsi_gë_îr‹
(
iscsi
));

4146 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4151 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4153 
	}
}

4156 
	$wrôe10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4157 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4158 
dpo
, 
fua
, 
fua_nv
, 
group
,

4159 *
d©a
)

4161 
scsi_èsk
 *
èsk
;

4163 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting LBA_OUT_OF_RANGE) "

4166 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4167 
dpo
, 
fua
, 
fua_nv
, 
group
);

4169 i‡(!
d©a_loss
) {

4170 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4174 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4175 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4176 i‡(
èsk
 =
NULL
) {

4177 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4178 
	`iscsi_gë_îr‹
(
iscsi
));

4181 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4182 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4183 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4185 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4188 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4189 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4194 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4195 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4196 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4197 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4199 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4205 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4207 
	}
}

4210 
	$wrôe10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4211 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4212 
dpo
, 
fua
, 
fua_nv
, 
group
,

4213 *
d©a
)

4215 
scsi_èsk
 *
èsk
;

4217 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting WRITE_PROTECTED) "

4220 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4221 
dpo
, 
fua
, 
fua_nv
, 
group
);

4223 i‡(!
d©a_loss
) {

4224 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4228 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4229 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4230 i‡(
èsk
 =
NULL
) {

4231 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4232 
	`iscsi_gë_îr‹
(
iscsi
));

4235 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4236 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4237 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4239 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4242 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4243 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4245 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4248 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4249 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4250 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4251 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4254 
	`iscsi_gë_îr‹
(
iscsi
));

4255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4259 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4260 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4262 
	}
}

4265 
	$wrôe10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4266 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4267 
dpo
, 
fua
, 
fua_nv
, 
group
,

4268 *
d©a
)

4270 
scsi_èsk
 *
èsk
;

4272 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting MEDIUM_NOT_PRESENT) "

4275 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4276 
dpo
, 
fua
, 
fua_nv
, 
group
);

4278 i‡(!
d©a_loss
) {

4279 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4283 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4284 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4285 i‡(
èsk
 =
NULL
) {

4286 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4287 
	`iscsi_gë_îr‹
(
iscsi
));

4290 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4291 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4292 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4293 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4294 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4297 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4298 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4300 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4303 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4304 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4305 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4306 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4307 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4308 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 Should have failed "

4310 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4311 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4315 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4316 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned MEDIUM_NOT_PRESENT.");

4318 
	}
}

4321 
	$wrôe12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4322 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4323 
dpo
, 
fua
, 
fua_nv
, 
group
,

4324 *
d©a
)

4326 
scsi_èsk
 *
èsk
;

4328 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 LBA:%d blocks:%d "

4330 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4331 
dpo
, 
fua
, 
fua_nv
, 
group
);

4333 i‡(!
d©a_loss
) {

4334 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4338 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
,

4339 
d©a
, 
d©Æí
, 
blocksize
,

4340 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4341 i‡(
èsk
 =
NULL
) {

4342 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4343 
	`iscsi_gë_îr‹
(
iscsi
));

4346 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4347 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4348 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4349 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4350 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4353 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4354 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 command: "

4355 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4356 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4360 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4361 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned SUCCESS.");

4363 
	}
}

4366 
	$wrôe12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4367 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4368 
dpo
, 
fua
, 
fua_nv
, 
group
,

4369 *
d©a
)

4371 
scsi_èsk
 *
èsk
;

4373 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting INVALID_FIELD_IN_CDB) "

4376 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4377 
dpo
, 
fua
, 
fua_nv
, 
group
);

4379 i‡(!
d©a_loss
) {

4380 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4384 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4385 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4386 i‡(
èsk
 =
NULL
) {

4387 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4388 
	`iscsi_gë_îr‹
(
iscsi
));

4391 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4392 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4393 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4394 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4395 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4398 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4399 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4404 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4405 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4406 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4407 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4410 
	`iscsi_gë_îr‹
(
iscsi
));

4411 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4415 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4416 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4418 
	}
}

4421 
	$wrôe12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4422 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4423 
dpo
, 
fua
, 
fua_nv
, 
group
,

4424 *
d©a
)

4426 
scsi_èsk
 *
èsk
;

4428 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting LBA_OUT_OF_RANGE) "

4431 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4432 
dpo
, 
fua
, 
fua_nv
, 
group
);

4434 i‡(!
d©a_loss
) {

4435 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4439 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4440 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4441 i‡(
èsk
 =
NULL
) {

4442 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4443 
	`iscsi_gë_îr‹
(
iscsi
));

4446 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4447 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4448 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4449 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4450 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4453 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4454 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4456 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4459 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4460 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4461 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4462 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4464 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4465 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4469 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4470 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4472 
	}
}

4475 
	$wrôe12_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4476 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4477 
dpo
, 
fua
, 
fua_nv
, 
group
,

4478 *
d©a
)

4480 
scsi_èsk
 *
èsk
;

4482 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting WRITE_PROTECTED) "

4485 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4486 
dpo
, 
fua
, 
fua_nv
, 
group
);

4488 i‡(!
d©a_loss
) {

4489 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4493 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4494 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4495 i‡(
èsk
 =
NULL
) {

4496 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4497 
	`iscsi_gë_îr‹
(
iscsi
));

4500 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4501 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4502 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4503 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4504 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4507 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4508 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4510 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4513 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4514 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4515 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4516 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4519 
	`iscsi_gë_îr‹
(
iscsi
));

4520 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4524 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4525 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4527 
	}
}

4530 
	$wrôe12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4531 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4532 
dpo
, 
fua
, 
fua_nv
, 
group
,

4533 *
d©a
)

4535 
scsi_èsk
 *
èsk
;

4537 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting MEDIUM_NOT_PRESENT) "

4540 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4541 
dpo
, 
fua
, 
fua_nv
, 
group
);

4543 i‡(!
d©a_loss
) {

4544 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4548 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4549 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4550 i‡(
èsk
 =
NULL
) {

4551 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4552 
	`iscsi_gë_îr‹
(
iscsi
));

4555 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4556 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4557 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4558 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4559 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4562 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4563 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4565 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4568 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4569 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4570 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4571 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4572 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4573 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 Should have failed "

4575 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4576 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4580 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4581 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned MEDIUM_NOT_PRESENT.");

4583 
	}
}

4586 
	$wrôe16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4587 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4588 
dpo
, 
fua
, 
fua_nv
, 
group
,

4589 *
d©a
)

4591 
scsi_èsk
 *
èsk
;

4593 
	`loggög
(
LOG_VERBOSE
, "Síd WRITE16 LBA:%" 
PRId64
 " blocks:%d "

4595 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4596 
dpo
, 
fua
, 
fua_nv
, 
group
);

4598 i‡(!
d©a_loss
) {

4599 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4603 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
,

4604 
d©a
, 
d©Æí
, 
blocksize
,

4605 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4606 i‡(
èsk
 =
NULL
) {

4607 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4608 
	`iscsi_gë_îr‹
(
iscsi
));

4611 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4612 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4613 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4614 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4615 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4618 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4619 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 command: "

4620 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4621 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4625 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4626 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned SUCCESS.");

4628 
	}
}

4631 
	$wrôe16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4632 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4633 
dpo
, 
fua
, 
fua_nv
, 
group
,

4634 *
d©a
)

4636 
scsi_èsk
 *
èsk
;

4638 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting INVALID_FIELD_IN_CDB) "

4639 "LBA:%" 
PRId64
 " blocks:%d wrprotect:%d "

4641 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4642 
dpo
, 
fua
, 
fua_nv
, 
group
);

4644 i‡(!
d©a_loss
) {

4645 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4649 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4650 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4651 i‡(
èsk
 =
NULL
) {

4652 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4653 
	`iscsi_gë_îr‹
(
iscsi
));

4656 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4657 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4658 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4659 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4660 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4663 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4664 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4666 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4669 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4670 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4671 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4672 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4675 
	`iscsi_gë_îr‹
(
iscsi
));

4676 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4680 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4681 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4683 
	}
}

4686 
	$wrôe16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4687 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4688 
dpo
, 
fua
, 
fua_nv
, 
group
,

4689 *
d©a
)

4691 
scsi_èsk
 *
èsk
;

4693 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting LBA_OUT_OF_RANGE) "

4694 "LBA:%" 
PRId64
 " blocks:%d wrprotect:%d "

4696 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4697 
dpo
, 
fua
, 
fua_nv
, 
group
);

4699 i‡(!
d©a_loss
) {

4700 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4704 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4705 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4706 i‡(
èsk
 =
NULL
) {

4707 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4708 
	`iscsi_gë_îr‹
(
iscsi
));

4711 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4712 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4713 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4714 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4715 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4718 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4719 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4721 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4724 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4725 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4726 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4727 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4729 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4730 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4734 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4735 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4737 
	}
}

4740 
	$wrôe16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4741 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4742 
dpo
, 
fua
, 
fua_nv
, 
group
,

4743 *
d©a
)

4745 
scsi_èsk
 *
èsk
;

4747 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting WRITE_PROTECTED) "

4748 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

4750 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4751 
dpo
, 
fua
, 
fua_nv
, 
group
);

4753 i‡(!
d©a_loss
) {

4754 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4758 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4759 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4760 i‡(
èsk
 =
NULL
) {

4761 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4762 
	`iscsi_gë_îr‹
(
iscsi
));

4765 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4766 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4768 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4771 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4772 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4773 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4774 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4775 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4778 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4779 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4780 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4781 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4784 
	`iscsi_gë_îr‹
(
iscsi
));

4785 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4789 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4790 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4792 
	}
}

4795 
	$wrôe16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4796 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4797 
dpo
, 
fua
, 
fua_nv
, 
group
,

4798 *
d©a
)

4800 
scsi_èsk
 *
èsk
;

4802 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting MEDIUM_NOT_PRESENT) "

4803 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

4805 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4806 
dpo
, 
fua
, 
fua_nv
, 
group
);

4808 i‡(!
d©a_loss
) {

4809 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4813 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4814 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4815 i‡(
èsk
 =
NULL
) {

4816 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4817 
	`iscsi_gë_îr‹
(
iscsi
));

4820 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4821 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4823 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4826 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4827 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4828 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4829 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4830 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4833 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4834 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4835 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4836 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4837 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4838 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 Should have failed "

4840 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4841 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4845 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4846 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned MEDIUM_NOT_PRESENT.");

4848 
	}
}

4851 
	$wrôeßme10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4853 
scsi_èsk
 *
èsk
;

4854 
uöt64_t
 
ªÆd©Æí
;

4856 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 LBA:%d blocks:%d "

4858 
lba
, 
num
, 
wΩrŸe˘
,

4859 
™ch‹
, 
unm≠_Êag
, 
group
);

4861 i‡(!
d©a_loss
) {

4862 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4866 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4867 
d©a
, 
d©Æí
, 
num
,

4868 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4869 i‡(
èsk
 =
NULL
) {

4870 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4871 
	`iscsi_gë_îr‹
(
iscsi
));

4874 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4875 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4876 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4877 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4878 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4881 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4882 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4883 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4884 i‡(
öq_bl
->
w¢z
 =1 && 
d©Æí
 == 0) {

4885 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Target doesÇot support WRITESAME10 with NUMBER OF LOGICAL BLOCKS == 0");

4886 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4890 i‡(
d©Æí
 == 0) {

4891 
ªÆd©Æí
 = 
num_blocks
;

4893 
ªÆd©Æí
 = 
d©Æí
;

4895 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
ªÆd©Æí
 > inq_bl->max_ws_len) {

4896 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Number of WRITESAME10Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

4897 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4901 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4902 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 command: "

4903 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4904 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4908 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4909 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned SUCCESS.");

4911 
	}
}

4914 
	$wrôeßme10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4916 
scsi_èsk
 *
èsk
;

4918 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting LBA_OUT_OF_RANGE) "

4921 
lba
, 
num
, 
wΩrŸe˘
,

4922 
™ch‹
, 
unm≠_Êag
, 
group
);

4924 i‡(!
d©a_loss
) {

4925 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4929 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4930 
d©a
, 
d©Æí
, 
num
,

4931 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4932 i‡(
èsk
 =
NULL
) {

4933 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4934 
	`iscsi_gë_îr‹
(
iscsi
));

4937 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4938 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4939 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4940 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4941 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4944 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4945 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

4947 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4950 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4951 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4952 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4953 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

4955 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4956 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4960 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4961 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4963 
	}
}

4966 
	$wrôeßme10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4968 
scsi_èsk
 *
èsk
;

4970 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting INVALID_FIELD_IN_CDB) "

4973 
lba
, 
num
, 
wΩrŸe˘
,

4974 
™ch‹
, 
unm≠_Êag
, 
group
);

4976 i‡(!
d©a_loss
) {

4977 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4981 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4982 
d©a
, 
d©Æí
, 
num
,

4983 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4984 i‡(
èsk
 =
NULL
) {

4985 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4986 
	`iscsi_gë_îr‹
(
iscsi
));

4989 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4990 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4991 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4992 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4993 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4996 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4997 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

4999 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5002 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5003 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5004 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5005 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

5008 
	`iscsi_gë_îr‹
(
iscsi
));

5009 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5013 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5014 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.");

5016 
	}
}

5019 
	$wrôeßme10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5021 
scsi_èsk
 *
èsk
;

5023 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting WRITE_PROTECTED) "

5026 
lba
, 
num
, 
wΩrŸe˘
,

5027 
™ch‹
, 
unm≠_Êag
, 
group
);

5029 i‡(!
d©a_loss
) {

5030 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5034 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

5035 
d©a
, 
d©Æí
, 
num
,

5036 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5037 i‡(
èsk
 =
NULL
) {

5038 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

5039 
	`iscsi_gë_îr‹
(
iscsi
));

5042 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5043 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5044 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5045 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

5046 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5049 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5050 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

5052 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5055 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5056 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5057 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5058 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

5060 "WRITE_PROTECTED. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5061 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5065 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5066 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5068 
	}
}

5071 
	$wrôeßme10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5073 
scsi_èsk
 *
èsk
;

5075 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting MEDIUM_NOT_PRESENT) "

5078 
lba
, 
num
, 
wΩrŸe˘
,

5079 
™ch‹
, 
unm≠_Êag
, 
group
);

5081 i‡(!
d©a_loss
) {

5082 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5086 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

5087 
d©a
, 
d©Æí
, 
num
,

5088 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5089 i‡(
èsk
 =
NULL
) {

5090 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

5091 
	`iscsi_gë_îr‹
(
iscsi
));

5094 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5095 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5096 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5097 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

5098 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5101 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5102 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

5103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5107 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5108 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5109 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5110 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5111 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 Should have failed "

5113 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5119 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned MEDIUM_NOT_PRESENT.");

5121 
	}
}

5124 
	$wrôeßme16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5126 
scsi_èsk
 *
èsk
;

5127 
uöt64_t
 
ªÆd©Æí
;

5129 
	`loggög
(
LOG_VERBOSE
, "Síd WRITESAME16 LBA:%" 
PRIu64
 " blocks:%d "

5131 
lba
, 
num
, 
wΩrŸe˘
,

5132 
™ch‹
, 
unm≠_Êag
, 
group
);

5134 i‡(!
d©a_loss
) {

5135 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5139 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5140 
d©a
, 
d©Æí
, 
num
,

5141 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5142 i‡(
èsk
 =
NULL
) {

5143 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5144 
	`iscsi_gë_îr‹
(
iscsi
));

5147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5148 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5149 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5150 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5154 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5155 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5156 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5157 i‡(
öq_bl
->
w¢z
 =1 && 
d©Æí
 == 0) {

5158 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Target doesÇot support WRITESAME16 with NUMBER OF LOGICAL BLOCKS == 0");

5159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5163 i‡(
d©Æí
 == 0) {

5164 
ªÆd©Æí
 = 
num_blocks
;

5166 
ªÆd©Æí
 = 
d©Æí
;

5168 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
ªÆd©Æí
 > inq_bl->max_ws_len) {

5169 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Number of WRITESAME16Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

5170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5174 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5175 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 command: "

5176 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5181 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5182 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned SUCCESS.");

5184 
	}
}

5187 
	$wrôeßme16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5189 
scsi_èsk
 *
èsk
;

5191 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting LBA_OUT_OF_RANGE) "

5192 "LBA:%" 
PRIu64
 " blocks:%d "

5194 
lba
, 
num
, 
wΩrŸe˘
,

5195 
™ch‹
, 
unm≠_Êag
, 
group
);

5197 i‡(!
d©a_loss
) {

5198 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5202 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5203 
d©a
, 
d©Æí
, 
num
,

5204 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5205 i‡(
èsk
 =
NULL
) {

5206 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5207 
	`iscsi_gë_îr‹
(
iscsi
));

5210 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5211 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5212 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5213 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5214 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5217 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5218 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5220 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5223 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5224 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5225 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5226 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5228 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5229 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5233 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5234 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5236 
	}
}

5239 
	$wrôeßme16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5241 
scsi_èsk
 *
èsk
;

5243 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting INVALID_FIELD_IN_CDB) "

5244 "LBA:%" 
PRIu64
 " blocks:%d "

5246 
lba
, 
num
, 
wΩrŸe˘
,

5247 
™ch‹
, 
unm≠_Êag
, 
group
);

5249 i‡(!
d©a_loss
) {

5250 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5254 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5255 
d©a
, 
d©Æí
, 
num
,

5256 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5257 i‡(
èsk
 =
NULL
) {

5258 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5259 
	`iscsi_gë_îr‹
(
iscsi
));

5262 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5263 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5264 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5265 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5269 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5270 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5272 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5275 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5276 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5277 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5278 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5281 
	`iscsi_gë_îr‹
(
iscsi
));

5282 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5287 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.");

5289 
	}
}

5292 
	$wrôeßme16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5294 
scsi_èsk
 *
èsk
;

5296 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting WRITE_PROTECTED) "

5297 "LBA:%" 
PRIu64
 " blocks:%d "

5299 
lba
, 
num
, 
wΩrŸe˘
,

5300 
™ch‹
, 
unm≠_Êag
, 
group
);

5302 i‡(!
d©a_loss
) {

5303 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5307 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5308 
d©a
, 
d©Æí
, 
num
,

5309 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5310 i‡(
èsk
 =
NULL
) {

5311 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5312 
	`iscsi_gë_îr‹
(
iscsi
));

5315 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5316 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5317 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5318 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5319 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5322 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5323 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5325 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5328 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5329 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5330 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5331 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5333 "WRITE_PROTECTED. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5334 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5338 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5339 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5341 
	}
}

5344 
	$wrôeßme16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5346 
scsi_èsk
 *
èsk
;

5348 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting MEDIUM_NOT_PRESENT) "

5349 "LBA:%" 
PRIu64
 " blocks:%d "

5351 
lba
, 
num
, 
wΩrŸe˘
,

5352 
™ch‹
, 
unm≠_Êag
, 
group
);

5354 i‡(!
d©a_loss
) {

5355 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5359 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5360 
d©a
, 
d©Æí
, 
num
,

5361 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5362 i‡(
èsk
 =
NULL
) {

5363 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5364 
	`iscsi_gë_îr‹
(
iscsi
));

5367 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5368 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5369 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5370 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5371 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5374 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5375 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

5376 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5379 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5380 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5381 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5382 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5383 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5384 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 Should have failed "

5386 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5387 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5391 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5392 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned MEDIUM_NOT_PRESENT.");

5394 
	}
}

5397 
	$wrôevîify10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5398 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5399 
dpo
, 
bytchk
, 
group
,

5400 *
d©a
)

5402 
scsi_èsk
 *
èsk
;

5404 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 LBA:%d blocks:%d "

5406 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5407 
dpo
, 
bytchk
, 
group
);

5409 i‡(!
d©a_loss
) {

5410 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5414 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
,

5415 
d©a
, 
d©Æí
, 
blocksize
,

5416 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5417 i‡(
èsk
 =
NULL
) {

5418 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5419 
	`iscsi_gë_îr‹
(
iscsi
));

5422 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5423 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5424 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5425 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5426 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5429 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5430 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 command: "

5431 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5432 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5436 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5437 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned SUCCESS.");

5439 
	}
}

5442 
	$wrôevîify10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5443 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5444 
dpo
, 
bytchk
, 
group
,

5445 *
d©a
)

5447 
scsi_èsk
 *
èsk
;

5449 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting INVALID_FIELD_IN_CDB) "

5452 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5453 
dpo
, 
bytchk
, 
group
);

5455 i‡(!
d©a_loss
) {

5456 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5460 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5461 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5462 i‡(
èsk
 =
NULL
) {

5463 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5464 
	`iscsi_gë_îr‹
(
iscsi
));

5467 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5468 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5469 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5470 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5471 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5474 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5475 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5477 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5480 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5481 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5482 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5483 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5486 
	`iscsi_gë_îr‹
(
iscsi
));

5487 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5491 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5492 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

5494 
	}
}

5497 
	$wrôevîify10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5498 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5499 
dpo
, 
bytchk
, 
group
,

5500 *
d©a
)

5502 
scsi_èsk
 *
èsk
;

5504 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting LBA_OUT_OF_RANGE) "

5507 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5508 
dpo
, 
bytchk
, 
group
);

5510 i‡(!
d©a_loss
) {

5511 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5515 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5516 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5517 i‡(
èsk
 =
NULL
) {

5518 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5519 
	`iscsi_gë_îr‹
(
iscsi
));

5522 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5523 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5524 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5525 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5526 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5529 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5530 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5532 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5535 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5536 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5537 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5538 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5540 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5541 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5545 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5546 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5548 
	}
}

5551 
	$wrôevîify10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5552 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5553 
dpo
, 
bytchk
, 
group
,

5554 *
d©a
)

5556 
scsi_èsk
 *
èsk
;

5558 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting WRITE_PROTECTED) "

5561 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5562 
dpo
, 
bytchk
, 
group
);

5564 i‡(!
d©a_loss
) {

5565 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5569 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5570 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5571 i‡(
èsk
 =
NULL
) {

5572 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5573 
	`iscsi_gë_îr‹
(
iscsi
));

5576 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5577 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5578 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5579 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5580 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5583 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5584 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5586 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5589 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5590 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5591 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5592 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5595 
	`iscsi_gë_îr‹
(
iscsi
));

5596 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5600 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5601 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5603 
	}
}

5606 
	$wrôevîify10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5607 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5608 
dpo
, 
bytchk
, 
group
,

5609 *
d©a
)

5611 
scsi_èsk
 *
èsk
;

5613 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting MEDIUM_NOT_PRESENT) "

5616 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5617 
dpo
, 
bytchk
, 
group
);

5619 i‡(!
d©a_loss
) {

5620 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5624 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5625 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5626 i‡(
èsk
 =
NULL
) {

5627 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5628 
	`iscsi_gë_îr‹
(
iscsi
));

5631 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5632 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5633 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5634 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5635 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5638 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5639 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5641 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5644 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5645 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5646 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5647 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5648 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5649 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 Should have failed "

5651 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5652 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5656 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5657 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned MEDIUM_NOT_PRESENT.");

5659 
	}
}

5662 
	$wrôevîify12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5663 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5664 
dpo
, 
bytchk
, 
group
,

5665 *
d©a
)

5667 
scsi_èsk
 *
èsk
;

5669 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 LBA:%d blocks:%d "

5671 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5672 
dpo
, 
bytchk
, 
group
);

5674 i‡(!
d©a_loss
) {

5675 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5679 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
,

5680 
d©a
, 
d©Æí
, 
blocksize
,

5681 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5682 i‡(
èsk
 =
NULL
) {

5683 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5684 
	`iscsi_gë_îr‹
(
iscsi
));

5687 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5688 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5689 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5690 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5691 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5694 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5695 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 command: "

5696 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5697 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5701 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5702 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned SUCCESS.");

5704 
	}
}

5707 
	$wrôevîify12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5708 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5709 
dpo
, 
bytchk
, 
group
,

5710 *
d©a
)

5712 
scsi_èsk
 *
èsk
;

5714 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting INVALID_FIELD_IN_CDB) "

5717 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5718 
dpo
, 
bytchk
, 
group
);

5720 i‡(!
d©a_loss
) {

5721 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5725 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5726 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5727 i‡(
èsk
 =
NULL
) {

5728 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5729 
	`iscsi_gë_îr‹
(
iscsi
));

5732 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5733 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5734 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5735 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5736 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5739 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5740 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5742 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5745 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5746 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5747 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5748 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5751 
	`iscsi_gë_îr‹
(
iscsi
));

5752 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5756 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5757 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

5759 
	}
}

5762 
	$wrôevîify12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5763 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5764 
dpo
, 
bytchk
, 
group
,

5765 *
d©a
)

5767 
scsi_èsk
 *
èsk
;

5769 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting LBA_OUT_OF_RANGE) "

5772 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5773 
dpo
, 
bytchk
, 
group
);

5775 i‡(!
d©a_loss
) {

5776 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5780 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5781 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5782 i‡(
èsk
 =
NULL
) {

5783 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5784 
	`iscsi_gë_îr‹
(
iscsi
));

5787 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5788 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5789 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5790 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5791 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5794 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5795 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5797 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5800 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5801 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5802 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5803 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5805 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5806 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5810 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5811 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5813 
	}
}

5816 
	$wrôevîify12_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5817 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5818 
dpo
, 
bytchk
, 
group
,

5819 *
d©a
)

5821 
scsi_èsk
 *
èsk
;

5823 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting WRITE_PROTECTED) "

5826 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5827 
dpo
, 
bytchk
, 
group
);

5829 i‡(!
d©a_loss
) {

5830 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5834 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5835 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5836 i‡(
èsk
 =
NULL
) {

5837 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5838 
	`iscsi_gë_îr‹
(
iscsi
));

5841 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5842 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5843 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5844 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5845 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5848 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5849 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5851 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5854 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5855 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5856 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5857 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5860 
	`iscsi_gë_îr‹
(
iscsi
));

5861 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5865 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5866 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5868 
	}
}

5871 
	$wrôevîify12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5872 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5873 
dpo
, 
bytchk
, 
group
,

5874 *
d©a
)

5876 
scsi_èsk
 *
èsk
;

5878 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting MEDIUM_NOT_PRESENT) "

5881 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5882 
dpo
, 
bytchk
, 
group
);

5884 i‡(!
d©a_loss
) {

5885 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5889 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5890 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5891 i‡(
èsk
 =
NULL
) {

5892 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5893 
	`iscsi_gë_îr‹
(
iscsi
));

5896 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5897 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5898 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5899 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5900 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5903 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5904 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5906 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5909 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5910 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5911 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5912 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5913 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5914 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 Should have failed "

5916 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5917 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5921 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5922 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned MEDIUM_NOT_PRESENT.");

5924 
	}
}

5927 
	$wrôevîify16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

5928 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5929 
dpo
, 
bytchk
, 
group
,

5930 *
d©a
)

5932 
scsi_èsk
 *
èsk
;

5934 
	`loggög
(
LOG_VERBOSE
, "Síd WRITEVERIFY16 LBA:%" 
PRIu64
 " blocks:%d "

5936 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5937 
dpo
, 
bytchk
, 
group
);

5939 i‡(!
d©a_loss
) {

5940 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5944 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
,

5945 
d©a
, 
d©Æí
, 
blocksize
,

5946 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5947 i‡(
èsk
 =
NULL
) {

5948 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

5949 
	`iscsi_gë_îr‹
(
iscsi
));

5952 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5953 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5954 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5955 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5956 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

5959 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5960 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 command: "

5961 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5962 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5966 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5967 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned SUCCESS.");

5969 
	}
}

5972 
	$wrôevîify16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

5973 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5974 
dpo
, 
bytchk
, 
group
,

5975 *
d©a
)

5977 
scsi_èsk
 *
èsk
;

5979 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting INVALID_FIELD_IN_CDB) "

5980 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

5982 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5983 
dpo
, 
bytchk
, 
group
);

5985 i‡(!
d©a_loss
) {

5986 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5990 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5991 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5992 i‡(
èsk
 =
NULL
) {

5993 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

5994 
	`iscsi_gë_îr‹
(
iscsi
));

5997 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5998 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5999 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6000 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6001 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6004 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6005 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6007 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6010 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6011 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6012 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

6013 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6016 
	`iscsi_gë_îr‹
(
iscsi
));

6017 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6021 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6022 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

6024 
	}
}

6027 
	$wrôevîify16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6028 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6029 
dpo
, 
bytchk
, 
group
,

6030 *
d©a
)

6032 
scsi_èsk
 *
èsk
;

6034 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting LBA_OUT_OF_RANGE) "

6035 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6037 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6038 
dpo
, 
bytchk
, 
group
);

6040 i‡(!
d©a_loss
) {

6041 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6045 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6046 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6047 i‡(
èsk
 =
NULL
) {

6048 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6049 
	`iscsi_gë_îr‹
(
iscsi
));

6052 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6053 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6054 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6055 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6056 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6059 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6060 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6062 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6065 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6066 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6067 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

6068 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6070 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

6071 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6075 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6076 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

6078 
	}
}

6081 
	$wrôevîify16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6082 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6083 
dpo
, 
bytchk
, 
group
,

6084 *
d©a
)

6086 
scsi_èsk
 *
èsk
;

6088 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting WRITE_PROTECTED) "

6089 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6091 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6092 
dpo
, 
bytchk
, 
group
);

6094 i‡(!
d©a_loss
) {

6095 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6099 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6100 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6101 i‡(
èsk
 =
NULL
) {

6102 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6103 
	`iscsi_gë_îr‹
(
iscsi
));

6106 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6107 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6108 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6109 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6110 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6113 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6114 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6119 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6120 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


6121 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

6122 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6125 
	`iscsi_gë_îr‹
(
iscsi
));

6126 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6131 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

6133 
	}
}

6136 
	$wrôevîify16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6137 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6138 
dpo
, 
bytchk
, 
group
,

6139 *
d©a
)

6141 
scsi_èsk
 *
èsk
;

6143 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting MEDIUM_NOT_PRESENT) "

6144 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6146 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6147 
dpo
, 
bytchk
, 
group
);

6149 i‡(!
d©a_loss
) {

6150 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6154 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6155 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6156 i‡(
èsk
 =
NULL
) {

6157 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6158 
	`iscsi_gë_îr‹
(
iscsi
));

6161 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6162 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6163 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6165 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6168 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6169 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6174 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6175 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


6176 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


6177 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


6178 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

6179 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 Should have failed "

6181 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

6182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6187 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned MEDIUM_NOT_PRESENT.");

6189 
	}
}

6192 
	$öquúy
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
, 
scsi_èsk
 **
ßve_èsk
)

6194 
scsi_èsk
 *
èsk
;

6196 
	`loggög
(
LOG_VERBOSE
, "Send INQUIRYÉvpd:%dÖage_code:%02xálloc_len:%d",

6197 
evpd
, 
∑ge_code
, 
maxsize
);

6198 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
);

6199 i‡(
èsk
 =
NULL
) {

6200 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send INQUIRY command: "

6201 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

6204 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6205 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY command: failed with "

6206 "£n£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

6207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6211 i‡(
ßve_èsk
 !
NULL
) {

6212 *
ßve_èsk
 = 
èsk
;

6214 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6217 
	`loggög
(
LOG_VERBOSE
, "[OK] INQUIRYÑeturned SUCCESS.");

6219 
	}
}

6222 
	$öquúy_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
)

6224 
scsi_èsk
 *
èsk
;

6226 
	`loggög
(
LOG_VERBOSE
, "Send INQUIRY (Expecting INVALID_FIELD_IN_CDB)Évpd:%dÖage_code:%02xálloc_len:%d",

6227 
evpd
, 
∑ge_code
, 
maxsize
);

6228 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
);

6229 i‡(
èsk
 =
NULL
) {

6230 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send INQUIRY command: "

6231 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

6234 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6235 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY successful but should "

6237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6241 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6242 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6243 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

6244 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY failed with wrong sense. "

6247 
	`iscsi_gë_îr‹
(
iscsi
));

6248 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6252 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6253 
	`loggög
(
LOG_VERBOSE
, "[OK] INQUIRYÑeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

6255 
	}
}

6257 
scsi_comm™d_des¸ùt‹
 *

6258 
	$gë_comm™d_des¸ùt‹
(
›code
, 
ß
)

6260 
i
;

6262 i‡(
rs›
 =
NULL
) {

6263  
NULL
;

6266 
i
 = 0; i < 
rs›
->
num_des¸ùt‹s
; i++) {

6267 i‡(
rs›
->
des¸ùt‹s
[
i
].
›code
 == opcode

6268 && 
rs›
->
des¸ùt‹s
[
i
].
ß
 == sa) {

6269  &
rs›
->
des¸ùt‹s
[
i
];

6273  
NULL
;

6274 
	}
}

6276 
	$£t_swp
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

6278 
ªt
 = 0;

6279 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

6280 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

6281 
scsi_mode_£n£
 *
ms
;

6282 
scsi_mode_∑ge
 *
mp
;

6284 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

6285 
£n£_èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
,

6286 1, 
SCSI_MODESENSE_PC_CURRENT
,

6287 
SCSI_MODEPAGE_CONTROL
,

6289 i‡(
£n£_èsk
 =
NULL
) {

6290 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SENSE6 command: %s",

6291 
	`iscsi_gë_îr‹
(
iscsi
));

6292 
ªt
 = -1;

6293 
föished
;

6295 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6296 
	`loggög
(
LOG_NORMAL
, "MODE_SENSE6 failed: %s",

6297 
	`iscsi_gë_îr‹
(
iscsi
));

6298 
ªt
 = -1;

6299 
föished
;

6301 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

6302 i‡(
ms
 =
NULL
) {

6303 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

6305 
ªt
 = -1;

6306 
föished
;

6308 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

6309 i‡(
mp
 =
NULL
) {

6310 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

6311 
ªt
 = -1;

6312 
föished
;

6315 
	`loggög
(
LOG_VERBOSE
, "Turn SWP ON");

6316 
mp
->
c⁄åﬁ
.
swp
 = 1;

6318 
£À˘_èsk
 = 
	`iscsi_mode£À˘6_sync
(
iscsi
, 
lun
,

6319 1, 0, 
mp
);

6320 i‡(
£À˘_èsk
 =
NULL
) {

6321 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SELECT6 command: %s",

6322 
	`iscsi_gë_îr‹
(
iscsi
));

6323 
ªt
 = -1;

6324 
föished
;

6326 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6327 
	`loggög
(
LOG_NORMAL
, "MODE_SELECT6 failed: %s",

6328 
	`iscsi_gë_îr‹
(
iscsi
));

6329 
ªt
 = -1;

6330 
föished
;

6333 
föished
:

6334 i‡(
£n£_èsk
 !
NULL
) {

6335 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

6337 i‡(
£À˘_èsk
 !
NULL
) {

6338 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

6340  
ªt
;

6341 
	}
}

6343 
	$˛ór_swp
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

6345 
ªt
 = 0;

6346 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

6347 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

6348 
scsi_mode_£n£
 *
ms
;

6349 
scsi_mode_∑ge
 *
mp
;

6351 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

6352 
£n£_èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
,

6353 1, 
SCSI_MODESENSE_PC_CURRENT
,

6354 
SCSI_MODEPAGE_CONTROL
,

6356 i‡(
£n£_èsk
 =
NULL
) {

6357 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SENSE6 command: %s",

6358 
	`iscsi_gë_îr‹
(
iscsi
));

6359 
ªt
 = -1;

6360 
föished
;

6362 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6363 
	`loggög
(
LOG_NORMAL
, "MODE_SENSE6 failed: %s",

6364 
	`iscsi_gë_îr‹
(
iscsi
));

6365 
ªt
 = -1;

6366 
föished
;

6368 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

6369 i‡(
ms
 =
NULL
) {

6370 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

6372 
ªt
 = -1;

6373 
föished
;

6375 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

6376 i‡(
mp
 =
NULL
) {

6377 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

6378 
ªt
 = -1;

6379 
föished
;

6382 
	`loggög
(
LOG_VERBOSE
, "Turn SWP OFF");

6383 
mp
->
c⁄åﬁ
.
swp
 = 0;

6385 
£À˘_èsk
 = 
	`iscsi_mode£À˘6_sync
(
iscsi
, 
lun
,

6386 1, 0, 
mp
);

6387 i‡(
£À˘_èsk
 =
NULL
) {

6388 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SELECT6 command: %s",

6389 
	`iscsi_gë_îr‹
(
iscsi
));

6390 
ªt
 = -1;

6391 
föished
;

6393 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6394 
	`loggög
(
LOG_NORMAL
, "MODE_SELECT6 failed: %s",

6395 
	`iscsi_gë_îr‹
(
iscsi
));

6396 
ªt
 = -1;

6397 
föished
;

6400 
föished
:

6401 i‡(
£n£_èsk
 !
NULL
) {

6402 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

6404 i‡(
£À˘_èsk
 !
NULL
) {

6405 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

6407  
ªt
;

6408 
	}
}

	@test-tool/iscsi-test-cu.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<uni°d.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~<‚m©ch.h
>

32 
	~<CUnô/CUnô.h
>

33 
	~<CUnô/Basic.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

37 
	~"iscsi-¥iv©e.h
"

39 
	~"iscsi-suµ‹t.h
"

40 
	~"iscsi-ã°-cu.h
"

44 #i‚de‡
disˇrd_c⁄°


45 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

48 
	#PROG
 "iscsi-ã°-cu"

	)

50 
	glogÀvñ
 = 
LOG_NORMAL
;

56 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

63 
CU_Te°Info
 
ã°s_com∑ª™dwrôe
[] = {

64 { (*)"Sim∂e", 
ã°_com∑ª™dwrôe_sim∂e
 },

65 { (*)"Miscom∑ª", 
ã°_com∑ª™dwrôe_miscom∑ª
 },

66 
CU_TEST_INFO_NULL


67 
	}
};

69 
CU_Te°Info
 
	gã°s_gë_lba_°©us
[] = {

70 { (*)"Sim∂e", 
ã°_gë_lba_°©us_sim∂e
 },

71 { (*)"Bey⁄dEﬁ", 
ã°_gë_lba_°©us_bey⁄d_eﬁ
 },

72 
CU_TEST_INFO_NULL


75 
CU_Te°Info
 
	gã°s_öquúy
[] = {

76 { (*)"Sènd¨d", 
ã°_öquúy_°™d¨d
 },

77 { (*)"AŒocLígth", 
ã°_öquúy_Æloc_Àngth
},

78 { (*)"EVPD", 
ã°_öquúy_evpd
},

79 { (*)"BlockLimôs", 
ã°_öquúy_block_limôs
},

80 { (*)"M™d©‹yVPDSBC", 
ã°_öquúy_m™d©‹y_vpd_sbc
},

81 { (*)"Suµ‹ãdVPD", 
ã°_öquúy_suµ‹ãd_vpd
},

82 { (*)"Vîsi⁄Des¸ùt‹s", 
ã°_öquúy_vîsi⁄_des¸ùt‹s
},

83 
CU_TEST_INFO_NULL


86 
CU_Te°Info
 
	gã°s_m™d©‹y
[] = {

87 { (*)"M™d©‹ySBC", 
ã°_m™d©‹y_sbc
 },

88 
CU_TEST_INFO_NULL


91 
CU_Te°Info
 
	gã°s_mode£n£6
[] = {

92 { (*)"AŒPages", 
ã°_mode£n£6_Æl_∑ges
 },

93 { (*)"ResiduÆs", 
ã°_mode£n£6_ªsiduÆs
 },

94 
CU_TEST_INFO_NULL


97 
CU_Te°Info
 
	gã°s_nomedü
[] = {

98 { (*)"NoMedüSBC", 
ã°_nomedü_sbc
 },

99 
CU_TEST_INFO_NULL


102 
CU_Te°Info
 
	gã°s_‹wrôe
[] = {

103 { (*)"Sim∂e", 
ã°_‹wrôe_sim∂e
 },

104 { (*)"Bey⁄dEﬁ", 
ã°_‹wrôe_bey⁄d_eﬁ
 },

105 { (*)"ZîoBlocks", 
ã°_‹wrôe_0blocks
 },

106 { (*)"PrŸe˘", 
ã°_‹wrôe_wΩrŸe˘
 },

107 { (*)"Fœgs", 
ã°_‹wrôe_Êags
 },

108 { (*)"Vîify", 
ã°_‹wrôe_vîify
 },

109 
CU_TEST_INFO_NULL


112 
CU_Te°Info
 
	gã°s_¥e„tch10
[] = {

113 { (*)"Sim∂e", 
ã°_¥e„tch10_sim∂e
 },

114 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch10_bey⁄d_eﬁ
 },

115 { (*)"ZîoBlocks", 
ã°_¥e„tch10_0blocks
 },

116 { (*)"Fœgs", 
ã°_¥e„tch10_Êags
 },

117 
CU_TEST_INFO_NULL


120 
CU_Te°Info
 
	gã°s_¥e„tch16
[] = {

121 { (*)"Sim∂e", 
ã°_¥e„tch16_sim∂e
 },

122 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch16_bey⁄d_eﬁ
 },

123 { (*)"ZîoBlocks", 
ã°_¥e„tch16_0blocks
 },

124 { (*)"Fœgs", 
ã°_¥e„tch16_Êags
 },

125 
CU_TEST_INFO_NULL


128 
CU_Te°Info
 
	gã°s_¥evíèŒow
[] = {

129 { (*)"Sim∂e", 
ã°_¥evíèŒow_sim∂e
 },

130 { (*)"Eje˘", 
ã°_¥evíèŒow_eje˘
 },

131 { (*)"ITNexusLoss", 
ã°_¥evíèŒow_ô√xus_loss
 },

132 { (*)"Logout", 
ã°_¥evíèŒow_logout
 },

133 { (*)"W¨mRe£t", 
ã°_¥evíèŒow_w¨m_ª£t
 },

134 { (*)"CﬁdRe£t", 
ã°_¥evíèŒow_cﬁd_ª£t
 },

135 { (*)"LUNRe£t", 
ã°_¥evíèŒow_lun_ª£t
 },

136 { (*)"2ITNexu£s", 
ã°_¥evíèŒow_2_ô√xu£s
 },

137 
CU_TEST_INFO_NULL


140 
CU_Te°Info
 
	gã°s_¥ö_ªad_keys
[] = {

141 { (*)"Sim∂e", 
ã°_¥ö_ªad_keys_sim∂e
 },

142 
CU_TEST_INFO_NULL


145 
CU_Te°Info
 
	gã°s_¥out_ªgi°î
[] = {

146 { (*)"Sim∂e", 
ã°_¥out_ªgi°î_sim∂e
 },

147 
CU_TEST_INFO_NULL


150 
CU_Te°Info
 
	gã°s_¥out_ª£rve
[] = {

152 
ã°_¥out_ª£rve_sim∂e
 },

154 
ã°_¥out_ª£rve_ac˚ss_ó
 },

156 
ã°_¥out_ª£rve_ac˚ss_we
 },

158 
ã°_¥out_ª£rve_ac˚ss_óro
 },

160 
ã°_¥out_ª£rve_ac˚ss_wîo
 },

162 
ã°_¥out_ª£rve_ac˚ss_ó¨
 },

164 
ã°_¥out_ª£rve_ac˚ss_wór
 },

166 
ã°_¥out_ª£rve_ow√rshù_ó
 },

168 
ã°_¥out_ª£rve_ow√rshù_we
 },

170 
ã°_¥out_ª£rve_ow√rshù_óro
 },

172 
ã°_¥out_ª£rve_ow√rshù_wîo
 },

174 
ã°_¥out_ª£rve_ow√rshù_ó¨
 },

176 
ã°_¥out_ª£rve_ow√rshù_wór
 },

177 
CU_TEST_INFO_NULL


180 
CU_Te°Info
 
	gã°s_¥ö_£rvi˚a˘i⁄_ønge
[] = {

181 { (*)"R™ge", 
ã°_¥ö_£rvi˚a˘i⁄_ønge
 },

182 
CU_TEST_INFO_NULL


185 
CU_Te°Info
 
	gã°s_ªad6
[] = {

186 { (*)"Sim∂e", 
ã°_ªad6_sim∂e
 },

187 { (*)"Bey⁄dEﬁ", 
ã°_ªad6_bey⁄d_eﬁ
 },

188 
CU_TEST_INFO_NULL


191 
CU_Te°Info
 
	gã°s_ªad10
[] = {

192 { (*)"Sim∂e", 
ã°_ªad10_sim∂e
 },

193 { (*)"Bey⁄dEﬁ", 
ã°_ªad10_bey⁄d_eﬁ
 },

194 { (*)"ZîoBlocks", 
ã°_ªad10_0blocks
 },

195 { (*)"RódPrŸe˘", 
ã°_ªad10_rd¥Ÿe˘
 },

196 { (*)"Fœgs", 
ã°_ªad10_Êags
 },

197 
CU_TEST_INFO_NULL


200 
CU_Te°Info
 
	gã°s_ªad12
[] = {

201 { (*)"Sim∂e", 
ã°_ªad12_sim∂e
 },

202 { (*)"Bey⁄dEﬁ", 
ã°_ªad12_bey⁄d_eﬁ
 },

203 { (*)"ZîoBlocks", 
ã°_ªad12_0blocks
 },

204 { (*)"RódPrŸe˘", 
ã°_ªad12_rd¥Ÿe˘
 },

205 { (*)"Fœgs", 
ã°_ªad12_Êags
 },

206 
CU_TEST_INFO_NULL


209 
CU_Te°Info
 
	gã°s_ªad16
[] = {

210 { (*)"Sim∂e", 
ã°_ªad16_sim∂e
 },

211 { (*)"Bey⁄dEﬁ", 
ã°_ªad16_bey⁄d_eﬁ
 },

212 { (*)"ZîoBlocks", 
ã°_ªad16_0blocks
 },

213 { (*)"RódPrŸe˘", 
ã°_ªad16_rd¥Ÿe˘
 },

214 { (*)"Fœgs", 
ã°_ªad16_Êags
 },

215 
CU_TEST_INFO_NULL


218 
CU_Te°Info
 
	gã°s_ªadˇ∑côy10
[] = {

219 { (*)"Sim∂e", 
ã°_ªadˇ∑côy10_sim∂e
 },

220 
CU_TEST_INFO_NULL


223 
CU_Te°Info
 
	gã°s_ªadˇ∑côy16
[] = {

224 { (*)"Sim∂e", 
ã°_ªadˇ∑côy16_sim∂e
 },

225 { (*)"AŒo˛í", 
ã°_ªadˇ∑côy16_Ælo˛í
 },

226 { (*)"PI", 
ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
 },

227 
CU_TEST_INFO_NULL


230 
CU_Te°Info
 
	gã°s_ªad⁄ly
[] = {

231 { (*)"RódO∆ySBC", 
ã°_ªad⁄ly_sbc
 },

232 
CU_TEST_INFO_NULL


235 
CU_Te°Info
 
	gã°s_ßnôize
[] = {

236 { (*)"BlockEø£", 
ã°_ßnôize_block_îa£
 },

237 { (*)"BlockEø£Re£rved", 
ã°_ßnôize_block_îa£_ª£rved
 },

238 { (*)"Cry±oEø£", 
ã°_ßnôize_¸y±o_îa£
 },

239 { (*)"Cry±oEø£Re£rved", 
ã°_ßnôize_¸y±o_îa£_ª£rved
 },

240 { (*)"ExôFaûuªMode", 
ã°_ßnôize_exô_Áûuª_mode
 },

241 { (*)"InvÆidSîvi˚A˘i⁄", 
ã°_ßnôize_övÆid_£rvi˚a˘i⁄
 },

242 { (*)"Ovîwrôe", 
ã°_ßnôize_ovîwrôe
 },

243 { (*)"OvîwrôeRe£rved", 
ã°_ßnôize_ovîwrôe_ª£rved
 },

244 { (*)"Ród⁄ly", 
ã°_ßnôize_ªad⁄ly
 },

245 { (*)"Re£rv©i⁄s", 
ã°_ßnôize_ª£rv©i⁄s
 },

246 { (*)"Re£t", 
ã°_ßnôize_ª£t
 },

247 
CU_TEST_INFO_NULL


250 
CU_Te°Info
 
	gã°s_ªp‹t_suµ‹ãd_›codes
[] = {

251 { (*)"Sim∂e", 
ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
 },

252 { (*)"O√Comm™d", 
ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
 },

253 { (*)"RCTD", 
ã°_ªp‹t_suµ‹ãd_›codes_r˘d
 },

254 { (*)"SERVACTV", 
ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
 },

255 
CU_TEST_INFO_NULL


258 
CU_Te°Info
 
	gã°s_ª£rve6
[] = {

259 { (*)"Sim∂e", 
ã°_ª£rve6_sim∂e
 },

260 { (*)"2Inôüt‹s", 
ã°_ª£rve6_2öôüt‹s
 },

261 { (*)"Logout", 
ã°_ª£rve6_logout
 },

262 { (*)"ITNexusLoss", 
ã°_ª£rve6_ô√xus_loss
 },

263 { (*)"T¨gëCﬁdRe£t", 
ã°_ª£rve6_èrgë_cﬁd_ª£t
 },

264 { (*)"T¨gëW¨mRe£t", 
ã°_ª£rve6_èrgë_w¨m_ª£t
 },

265 { (*)"LUNRe£t", 
ã°_ª£rve6_lun_ª£t
 },

266 
CU_TEST_INFO_NULL


269 
CU_Te°Info
 
	gã°s_ã°unôªady
[] = {

270 { (*)"Sim∂e", 
ã°_ã°unôªady_sim∂e
 },

271 
CU_TEST_INFO_NULL


274 
CU_Te°Info
 
	gã°s_°¨t°›unô
[] = {

275 { (*)"Sim∂e", 
ã°_°¨t°›unô_sim∂e
 },

276 { (*)"PwrCnd", 
ã°_°¨t°›unô_pwr˙d
 },

277 { (*)"NoL€j", 
ã°_°¨t°›unô_nﬁ€j
 },

278 
CU_TEST_INFO_NULL


281 
CU_Te°Info
 
	gã°s_unm≠
[] = {

282 { (*)"Sim∂e", 
ã°_unm≠_sim∂e
 },

283 { (*)"VPD", 
ã°_unm≠_vpd
 },

284 { (*)"ZîoBlocks", 
ã°_unm≠_0blocks
 },

285 
CU_TEST_INFO_NULL


288 
CU_Te°Info
 
	gã°s_vîify10
[] = {

289 { (*)"Sim∂e", 
ã°_vîify10_sim∂e
 },

290 { (*)"Bey⁄dEﬁ", 
ã°_vîify10_bey⁄d_eﬁ
 },

291 { (*)"ZîoBlocks", 
ã°_vîify10_0blocks
 },

292 { (*)"VîifyPrŸe˘", 
ã°_vîify10_vΩrŸe˘
 },

293 { (*)"Fœgs", 
ã°_vîify10_Êags
 },

294 { (*)"Mism©ch", 
ã°_vîify10_mism©ch
 },

295 { (*)"Mism©chNoCmp", 
ã°_vîify10_mism©ch_no_cmp
 },

296 
CU_TEST_INFO_NULL


299 
CU_Te°Info
 
	gã°s_vîify12
[] = {

300 { (*)"Sim∂e", 
ã°_vîify12_sim∂e
 },

301 { (*)"Bey⁄dEﬁ", 
ã°_vîify12_bey⁄d_eﬁ
 },

302 { (*)"ZîoBlocks", 
ã°_vîify12_0blocks
 },

303 { (*)"VîifyPrŸe˘", 
ã°_vîify12_vΩrŸe˘
 },

304 { (*)"Fœgs", 
ã°_vîify12_Êags
 },

305 { (*)"Mism©ch", 
ã°_vîify12_mism©ch
 },

306 { (*)"Mism©chNoCmp", 
ã°_vîify12_mism©ch_no_cmp
 },

307 
CU_TEST_INFO_NULL


310 
CU_Te°Info
 
	gã°s_vîify16
[] = {

311 { (*)"Sim∂e", 
ã°_vîify16_sim∂e
 },

312 { (*)"Bey⁄dEﬁ", 
ã°_vîify16_bey⁄d_eﬁ
 },

313 { (*)"ZîoBlocks", 
ã°_vîify16_0blocks
 },

314 { (*)"VîifyPrŸe˘", 
ã°_vîify16_vΩrŸe˘
 },

315 { (*)"Fœgs", 
ã°_vîify16_Êags
 },

316 { (*)"Mism©ch", 
ã°_vîify16_mism©ch
 },

317 { (*)"Mism©chNoCmp", 
ã°_vîify16_mism©ch_no_cmp
 },

318 
CU_TEST_INFO_NULL


321 
CU_Te°Info
 
	gã°s_wrôe10
[] = {

322 { (*)"Sim∂e", 
ã°_wrôe10_sim∂e
 },

323 { (*)"Bey⁄dEﬁ", 
ã°_wrôe10_bey⁄d_eﬁ
 },

324 { (*)"ZîoBlocks", 
ã°_wrôe10_0blocks
 },

325 { (*)"WrôePrŸe˘", 
ã°_wrôe10_wΩrŸe˘
 },

326 { (*)"Fœgs", 
ã°_wrôe10_Êags
 },

327 
CU_TEST_INFO_NULL


330 
CU_Te°Info
 
	gã°s_wrôe12
[] = {

331 { (*)"Sim∂e", 
ã°_wrôe12_sim∂e
 },

332 { (*)"Bey⁄dEﬁ", 
ã°_wrôe12_bey⁄d_eﬁ
 },

333 { (*)"ZîoBlocks", 
ã°_wrôe12_0blocks
 },

334 { (*)"WrôePrŸe˘", 
ã°_wrôe12_wΩrŸe˘
 },

335 { (*)"Fœgs", 
ã°_wrôe12_Êags
 },

336 
CU_TEST_INFO_NULL


339 
CU_Te°Info
 
	gã°s_wrôe16
[] = {

340 { (*)"Sim∂e", 
ã°_wrôe16_sim∂e
 },

341 { (*)"Bey⁄dEﬁ", 
ã°_wrôe16_bey⁄d_eﬁ
 },

342 { (*)"ZîoBlocks", 
ã°_wrôe16_0blocks
 },

343 { (*)"WrôePrŸe˘", 
ã°_wrôe16_wΩrŸe˘
 },

344 { (*)"Fœgs", 
ã°_wrôe16_Êags
 },

345 
CU_TEST_INFO_NULL


348 
CU_Te°Info
 
	gã°s_wrôeßme10
[] = {

349 { (*)"Sim∂e", 
ã°_wrôeßme10_sim∂e
 },

350 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme10_bey⁄d_eﬁ
 },

351 { (*)"ZîoBlocks", 
ã°_wrôeßme10_0blocks
 },

352 { (*)"WrôePrŸe˘", 
ã°_wrôeßme10_wΩrŸe˘
 },

353 { (*)"Unm≠", 
ã°_wrôeßme10_unm≠
 },

354 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme10_unm≠_u«lig√d
 },

355 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme10_unm≠_u¡û_íd
 },

356 { (*)"Unm≠VPD", 
ã°_wrôeßme10_unm≠_vpd
 },

357 
CU_TEST_INFO_NULL


360 
CU_Te°Info
 
	gã°s_wrôeßme16
[] = {

361 { (*)"Sim∂e", 
ã°_wrôeßme16_sim∂e
 },

362 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme16_bey⁄d_eﬁ
 },

363 { (*)"ZîoBlocks", 
ã°_wrôeßme16_0blocks
 },

364 { (*)"WrôePrŸe˘", 
ã°_wrôeßme16_wΩrŸe˘
 },

365 { (*)"Unm≠", 
ã°_wrôeßme16_unm≠
 },

366 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme16_unm≠_u«lig√d
 },

367 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme16_unm≠_u¡û_íd
 },

368 { (*)"Unm≠VPD", 
ã°_wrôeßme16_unm≠_vpd
 },

369 
CU_TEST_INFO_NULL


372 
CU_Te°Info
 
	gã°s_wrôevîify10
[] = {

373 { (*)"Sim∂e", 
ã°_wrôevîify10_sim∂e
 },

374 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify10_bey⁄d_eﬁ
 },

375 { (*)"ZîoBlocks", 
ã°_wrôevîify10_0blocks
 },

376 { (*)"WrôePrŸe˘", 
ã°_wrôevîify10_wΩrŸe˘
 },

377 { (*)"Fœgs", 
ã°_wrôevîify10_Êags
 },

378 
CU_TEST_INFO_NULL


381 
CU_Te°Info
 
	gã°s_wrôevîify12
[] = {

382 { (*)"Sim∂e", 
ã°_wrôevîify12_sim∂e
 },

383 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify12_bey⁄d_eﬁ
 },

384 { (*)"ZîoBlocks", 
ã°_wrôevîify12_0blocks
 },

385 { (*)"WrôePrŸe˘", 
ã°_wrôevîify12_wΩrŸe˘
 },

386 { (*)"Fœgs", 
ã°_wrôevîify12_Êags
 },

387 
CU_TEST_INFO_NULL


390 
CU_Te°Info
 
	gã°s_wrôevîify16
[] = {

391 { (*)"Sim∂e", 
ã°_wrôevîify16_sim∂e
 },

392 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify16_bey⁄d_eﬁ
 },

393 { (*)"ZîoBlocks", 
ã°_wrôevîify16_0blocks
 },

394 { (*)"WrôePrŸe˘", 
ã°_wrôevîify16_wΩrŸe˘
 },

395 { (*)"Fœgs", 
ã°_wrôevîify16_Êags
 },

396 
CU_TEST_INFO_NULL


399 
	slibiscsi_suôe_öfo
 {

400 c⁄° *
	mpName
;

401 
CU_InôülizeFunc
 
	mpInôFunc
;

402 
CU_CÀ™upFunc
 
	mpCÀ™upFunc
;

403 
CU_SëUpFunc
 
	mpSëUpFunc
;

404 
CU_TórDownFunc
 
	mpTórDownFunc
;

405 
CU_Te°Info
 *
	mpTe°s
;

406 } 
	tlibiscsi_suôe_öfo
;

408 
	#NON_PGR_FUNCS
 
suôe_öô
, 
suôe_˛ónup
, 
ã°_£tup
, 
ã°_ã¨down


	)

409 
	#PGR_FUNCS
 
suôe_öô_pgr
, 
suôe_˛ónup_pgr
, 
ã°_£tup
, 
ã°_ã¨down


	)

412 
libiscsi_suôe_öfo
 
	gscsi_suôes
[] = {

413 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

414 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

415 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

416 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

417 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

418 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

419 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

420 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

421 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

422 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

423 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

424 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
, 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

425 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

426 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

427 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

428 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

429 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

430 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

431 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

432 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

433 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

434 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

435 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

436 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

437 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

438 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

439 { "UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

440 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

441 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

442 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

443 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

444 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

445 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

446 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

447 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

448 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

449 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

450 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

451 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

452 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

455 
CU_Te°Info
 
	gã°s_iscsi_cmd¢
[] = {

456 { (*)"iSCSICmdSnTooHigh", 
ã°_iscsi_cmd¢_toohigh
 },

457 { (*)"iSCSICmdSnTooLow", 
ã°_iscsi_cmd¢_toﬁow
 },

458 
CU_TEST_INFO_NULL


461 
CU_Te°Info
 
	gã°s_iscsi_d©a¢
[] = {

462 { (*)"iSCSID©aSnInvÆid", 
ã°_iscsi_d©a¢_övÆid
 },

463 
CU_TEST_INFO_NULL


466 
CU_Te°Info
 
	gã°s_iscsi_ªsiduÆs
[] = {

467 { (*)"Ród10InvÆid", 
ã°_ªad10_övÆid
 },

468 { (*)"Ród10ResiduÆs", 
ã°_ªad10_ªsiduÆs
 },

469 { (*)"Ród12ResiduÆs", 
ã°_ªad12_ªsiduÆs
 },

470 { (*)"Ród16ResiduÆs", 
ã°_ªad16_ªsiduÆs
 },

471 { (*)"Wrôe10ResiduÆs", 
ã°_wrôe10_ªsiduÆs
 },

472 { (*)"Wrôe12ResiduÆs", 
ã°_wrôe12_ªsiduÆs
 },

473 { (*)"Wrôe16ResiduÆs", 
ã°_wrôe16_ªsiduÆs
 },

474 { (*)"WrôeVîify10ResiduÆs", 
ã°_wrôevîify10_ªsiduÆs
 },

475 { (*)"WrôeVîify12ResiduÆs", 
ã°_wrôevîify12_ªsiduÆs
 },

476 { (*)"WrôeVîify16ResiduÆs", 
ã°_wrôevîify16_ªsiduÆs
 },

477 
CU_TEST_INFO_NULL


481 
libiscsi_suôe_öfo
 
	giscsi_suôes
[] = {

482 { "iSCSIcmd¢", 
NON_PGR_FUNCS
,

483 
ã°s_iscsi_cmd¢
 },

484 { "iSCSId©a¢", 
NON_PGR_FUNCS
,

485 
ã°s_iscsi_d©a¢
 },

486 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
,

487 
ã°s_iscsi_ªsiduÆs
 },

488 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

492 
libiscsi_suôe_öfo
 
	gÆl_suôes
[] = {

493 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

494 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

495 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

496 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

497 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

498 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

499 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

500 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

501 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

502 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

503 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

504 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
,

505 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

506 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

507 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

508 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

509 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

510 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

511 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

512 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

513 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

514 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

515 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

516 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

517 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

518 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

519 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

520 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

521 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

522 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

523 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

524 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

525 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

526 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

527 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

528 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

529 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

530 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

531 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

532 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

533 { "iSCSIcmd¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_cmd¢
 },

534 { "iSCSId©a¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_d©a¢
 },

535 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
, 
ã°s_iscsi_ªsiduÆs
 },

536 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

539 
libiscsi_suôe_öfo
 
	gscsi_usb_sbc_suôes
[] = {

540 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

541 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

542 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

543 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

544 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

545 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

546 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

547 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

548 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

549 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
,

550 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

551 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

552 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

553 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

554 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

555 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

556 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

557 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

558 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

559 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

560 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

561 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

562 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

563 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

564 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

565 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

566 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

567 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

568 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

569 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

570 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

571 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

572 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

573 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

574 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

575 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

576 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

579 
	sã°_Ámûy
 {

580 c⁄° *
	m«me
;

581 
libiscsi_suôe_öfo
 *
	msuôes
;

584 
ã°_Ámûy
 
	gÁmûõs
[] = {

585 { "ALL", 
Æl_suôes
 },

586 { "SCSI", 
scsi_suôes
 },

587 { "iSCSI", 
iscsi_suôes
 },

588 { "SCSI-USB-SBC", 
scsi_usb_sbc_suôes
 },

589 { 
NULL
, NULL}

595 
	gtgt_lun
;

596 
iscsi_c⁄ãxt
 *
	giscsic
;

597 
scsi_èsk
 *
	gèsk
;

598 
	gtgt_lun2
;

599 
iscsi_c⁄ãxt
 *
	giscsic2
;

600 *
	gªad_wrôe_buf
;

604 
	$¥öt_ußge
()

606 
	`Ârötf
(
°dîr
,

608 
PROG
);

609 
	`Ârötf
(
°dîr
,

610 "‹ %†[OPTIONS] <iscsi-uæ>\n", 
PROG
);

611 
	`Ârötf
(
°dîr
,

613 
	`Ârötf
(
°dîr
,

615 
öôüt‹«me1
);

616 
	`Ârötf
(
°dîr
,

618 
öôüt‹«me2
);

619 
	`Ârötf
(
°dîr
,

621 
	`Ârötf
(
°dîr
,

623 
	`Ârötf
(
°dîr
,

625 
	`Ârötf
(
°dîr
,

627 
	`Ârötf
(
°dîr
,

629 
	`Ârötf
(
°dîr
,

631 
	`Ârötf
(
°dîr
,

633 
	`Ârötf
(
°dîr
,

636 
	`Ârötf
(
°dîr
,

638 
	`Ârötf
(
°dîr
,

640 
	`Ârötf
(
°dîr
,

642 
	`Ârötf
(
°dîr
,

644 
	`Ârötf
(
°dîr
, "\n");

645 
	`Ârötf
(
°dîr
,

646 "Whîê<iscsi-uæ> iSCSI URL f‹m© is: %s\n", 
ISCSI_URL_SYNTAX
);

647 
	`Ârötf
(
°dîr
, "\n");

648 
	`Ârötf
(
°dîr
,

650 
	`Ârötf
(
°dîr
,

652 
	`Ârötf
(
°dîr
,

654 
	`Ârötf
(
°dîr
,

656 
	`Ârötf
(
°dîr
, "\n");

657 
	`Ârötf
(
°dîr
,

659 
	`Ârötf
(
°dîr
, "\n");

660 
	}
}

663 
	$ã°_£tup
()

665 
èsk
 = 
NULL
;

666 
ªad_wrôe_buf
 = 
NULL
;

667 
	}
}

670 
	$ã°_ã¨down
()

672 
	`‰ì
(
ªad_wrôe_buf
);

673 
ªad_wrôe_buf
 = 
NULL
;

674 
	`scsi_‰ì_scsi_èsk
(
èsk
);

675 
èsk
 = 
NULL
;

676 
	}
}

679 
	$suôe_öô
()

681 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

682 i‡(
iscsic
 =
NULL
) {

683 
	`Ârötf
(
°dîr
,

687 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


689 
	`ã°_£tup
();

692 
	}
}

695 
	$suôe_˛ónup
()

697 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


699 
	`ã°_ã¨down
();

701 i‡(
iscsic
) {

702 
	`iscsi_logout_sync
(
iscsic
);

703 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

704 
iscsic
 = 
NULL
;

707 
	}
}

710 
	$suôe_öô_pgr
()

712 
	`suôe_öô
();

713 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun2
);

714 i‡(
iscsic2
 =
NULL
) {

715 
	`Ârötf
(
°dîr
,

717 
	`suôe_˛ónup
();

721 
	}
}

724 
	$suôe_˛ónup_pgr
()

726 i‡(
iscsic2
) {

727 
	`iscsi_logout_sync
(
iscsic2
);

728 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

729 
iscsic2
 = 
NULL
;

731 
	`suôe_˛ónup
();

733 
	}
}

736 
	$li°_Æl_ã°s
()

738 
ã°_Ámûy
 *
Â
;

739 
libiscsi_suôe_öfo
 *
•
;

740 
CU_Te°Info
 *
ç
;

742 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

743 
	`¥ötf
("%s\n", 
Â
->
«me
);

744 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

745 
	`¥ötf
("%s.%s\n", 
Â
->
«me
,
•
->
pName
);

746 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

747 
	`¥ötf
("%s.%s.%s\n", 
Â
->
«me
,
•
->
pName
,

748 
ç
->
pName
);

752 
	}
}

755 
CU_Eº‹Code


756 
	$add_ã°s
(c⁄° *
ã°«me_ª
)

758 *
Ámûy_ª
 = 
NULL
;

759 *
suôe_ª
 = 
NULL
;

760 *
ã°_ª
 = 
NULL
;

761 *
˝
;

762 
ã°_Ámûy
 *
Â
;

763 
libiscsi_suôe_öfo
 *
•
;

764 
CU_Te°Info
 *
ç
;

768 i‡(!
ã°«me_ª
) {

769 
Ámûy_ª
 = 
	`°rdup
("*");

770 
suôe_ª
 = 
	`°rdup
("*");

771 
ã°_ª
 = 
	`°rdup
("*");

778 
Ámûy_ª
 = 
	`°rdup
(
ã°«me_ª
);

779 i‡((
˝
 = 
	`°rchr
(
Ámûy_ª
, '.')Ë!
NULL
) {

780 *
˝
++ = 0;

781 
suôe_ª
 = 
	`°rdup
(
˝
);

782 i‡((
˝
 = 
	`°rchr
(
suôe_ª
, '.')Ë!
NULL
) {

783 *
˝
++ = 0;

784 
ã°_ª
 = 
	`°rdup
(
˝
);

787 i‡(!
suôe_ª
)

788 
suôe_ª
 = 
	`°rdup
("*");

789 i‡(!
ã°_ª
)

790 
ã°_ª
 = 
	`°rdup
("*");

791 i‡(!
Ámûy_ª
) {

792 
	`Ârötf
(
°dîr
,

794 
Ámûy_ª
);

795  
CUE_NOTEST
;

803 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

804 i‡(
	`‚m©ch
(
Ámûy_ª
, 
Â
->
«me
, 0) != 0)

807 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

808 
suôe_added
 = 0;

809 
CU_pSuôe
 
pSuôe
 = 
NULL
;

811 i‡(
	`‚m©ch
(
suôe_ª
, 
•
->
pName
, 0) != 0)

814 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

815 i‡(
	`‚m©ch
(
ã°_ª
, 
ç
->
pName
, 0) != 0) {

818 i‡(!
suôe_added
) {

819 
suôe_added
++;

820 #ifde‡
HAVE_CU_SUITEINFO_PSETUPFUNC


821 
pSuôe
 = 
	`CU_add_suôe_wôh_£tup_™d_ã¨down
(
•
->
pName
,

822 
•
->
pInôFunc
, sp->
pCÀ™upFunc
,

823 
•
->
pSëUpFunc
, sp->
pTórDownFunc
);

825 
pSuôe
 = 
	`CU_add_suôe
(
•
->
pName
,

826 
•
->
pInôFunc
, sp->
pCÀ™upFunc
);

829 
	`CU_add_ã°
(
pSuôe
, 
ç
->
pName
,Åp->
pTe°Func
);

835 
	`‰ì
(
Ámûy_ª
);

836 
	`‰ì
(
suôe_ª
);

837 
	`‰ì
(
ã°_ª
);

839  
CUE_SUCCESS
;

840 
	}
}

844 
	$maö
(
¨gc
, *
¨gv
[])

846 *
ã°«me_ª
 = 
NULL
;

847 
lun
;

848 
CU_BasicRunMode
 
mode
 = 
CU_BRM_VERBOSE
;

849 
CU_Eº‹A˘i⁄
 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

850 
ªs
;

851 
scsi_ªadˇ∑côy10
 *
rc10
;

852 
scsi_èsk
 *
öq_èsk
 = 
NULL
;

853 
scsi_èsk
 *
öq_lbp_èsk
 = 
NULL
;

854 
scsi_èsk
 *
öq_bdc_èsk
 = 
NULL
;

855 
scsi_èsk
 *
öq_bl_èsk
 = 
NULL
;

856 
scsi_èsk
 *
rc16_èsk
 = 
NULL
;

857 
scsi_èsk
 *
rs›_èsk
 = 
NULL
;

858 
fuŒ_size
;

859 
is_usb
 = 0;

860 
›ti⁄
 
l⁄g_›ts
[] = {

861 { "hñp", 
no_¨gumít
, 0, '?' },

862 { "li°", 
no_¨gumít
, 0, 'l' },

863 { "öôüt‹-«me", 
ªquúed_¨gumít
, 0, 'i' },

864 { "öôüt‹-«me-2", 
ªquúed_¨gumít
, 0, 'I' },

865 { "ã°", 
ªquúed_¨gumít
, 0, 't' },

866 { "d©Æoss", 
no_¨gumít
, 0, 'd' },

867 { "Ælow-ßnôize", 
no_¨gumít
, 0, 'S' },

868 { "ign‹e", 
no_¨gumít
, 0, 'g' },

869 { "Áû", 
no_¨gumít
, 0, 'f' },

870 { "ab‹t", 
no_¨gumít
, 0, 'A' },

871 { "sûít", 
no_¨gumít
, 0, 's' },

872 { "n‹mÆ", 
no_¨gumít
, 0, 'n' },

873 { "usb", 
no_¨gumít
, 0, 'u' },

874 { "vîbo£", 
no_¨gumít
, 0, 'v' },

875 { "Vîbo£-scsi", 
no_¨gumít
, 0, 'V' },

876 { 
NULL
, 0, 0, 0 }

878 
i
, 
c
;

879 
›t_idx
 = 0;

881 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "?hli:I:t:sdgfAsSnuvV", 
l⁄g_›ts
,

882 &
›t_idx
)) > 0) {

883 
c
) {

886 
	`¥öt_ußge
();

889 
	`li°_Æl_ã°s
();

892 
öôüt‹«me1
 = 
	`°rdup
(
›èrg
);

895 
öôüt‹«me2
 = 
	`°rdup
(
›èrg
);

898 
ã°«me_ª
 = 
	`°rdup
(
›èrg
);

901 
d©a_loss
++;

904 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

907 
îr‹_a˘i⁄
 = 
CUEA_FAIL
;

910 
îr‹_a˘i⁄
 = 
CUEA_ABORT
;

913 
mode
 = 
CU_BRM_SILENT
;

916 
Ælow_ßnôize
 = 1;

919 
mode
 = 
CU_BRM_NORMAL
;

922 
is_usb
 = 1;

925 
mode
 = 
CU_BRM_VERBOSE
;

928 
logÀvñ
 = 
LOG_VERBOSE
;

931 
	`Ârötf
(
°dîr
,

933 
c
, 
¨gv
[
›töd
]);

938 i‡(
›töd
 < 
¨gc
) {

939 
tgt_uæ
 = 
	`°rdup
(
¨gv
[
›töd
++]);

941 i‡(
›töd
 < 
¨gc
) {

942 
	`Ârötf
(
°dîr
, "error:Åoo manyárguments\n");

943 
	`¥öt_ußge
();

948 
ªÆ_iscsi_queue_pdu
 = 
	`dlsym
(
RTLD_NEXT
, "iscsi_queue_pdu");

950 i‡(
tgt_uæ
 =
NULL
) {

951 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

952 
	`¥öt_ußge
();

953 i‡(
ã°«me_ª
)

954 
	`‰ì
(
ã°«me_ª
);

958 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
lun
);

959 i‡(
iscsic
 =
NULL
) {

960 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

969 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsic
, 
lun
, 0, 0);

970 i‡(
èsk
 =
NULL
) {

971 
	`¥ötf
("FailedÅo send READCAPACITY10 command: %s\n",

972 
	`iscsi_gë_îr‹
(
iscsic
));

973 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

976 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

977 
	`¥ötf
("READCAPACITY10 command: failed with sense. %s\n",

978 
	`iscsi_gë_îr‹
(
iscsic
));

979 
	`scsi_‰ì_scsi_èsk
(
èsk
);

980 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

983 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

984 i‡(
rc10
 =
NULL
) {

985 
	`¥ötf
("failedÅo unmarshall READCAPACITY10 data. %s\n",

986 
	`iscsi_gë_îr‹
(
iscsic
));

987 
	`scsi_‰ì_scsi_èsk
(
èsk
);

988 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

991 
block_size
 = 
rc10
->block_size;

992 
num_blocks
 = 
rc10
->
lba
 + 1;

993 
	`scsi_‰ì_scsi_èsk
(
èsk
);

995 
rc16_èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsic
, 
lun
);

996 i‡(
rc16_èsk
 =
NULL
) {

997 
	`¥ötf
("FailedÅo send READCAPACITY16 command: %s\n",

998 
	`iscsi_gë_îr‹
(
iscsic
));

999 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1002 i‡(
rc16_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1003 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
rc16_èsk
);

1004 i‡(
rc16
 =
NULL
) {

1005 
	`¥ötf
("failedÅo unmarshall READCAPACITY16 data. %s\n",

1006 
	`iscsi_gë_îr‹
(
iscsic
));

1007 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1008 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1011 
block_size
 = 
rc16
->
block_Àngth
;

1012 
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

1013 
lbµb
 = 1 << 
rc16
->
lbµbe
;

1016 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 0, 0, 64);

1017 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1018 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1021 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

1022 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

1023 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1026 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 0, 0, 
fuŒ_size
);

1027 i‡(
öq_èsk
 =
NULL
) {

1028 
	`¥ötf
("Inquiry command failed : %s\n",

1029 
	`iscsi_gë_îr‹
(
iscsic
));

1033 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

1034 i‡(
öq
 =
NULL
) {

1035 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1036 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1040 
sbc3_suµ‹t
 = 0;

1041 
i
 = 0; i < 8; i++) {

1042 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0x04C0) {

1043 
sbc3_suµ‹t
 = 1;

1048 
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 64);

1049 i‡(
öq_bl_èsk
 && inq_bl_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1050 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1051 
öq_bl_èsk
 = 
NULL
;

1053 i‡(
öq_bl_èsk
) {

1054 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_bl_èsk
);

1055 i‡(
fuŒ_size
 > 
öq_bl_èsk
->
d©aö
.
size
) {

1056 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1058 i‡((
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 
fuŒ_size
)Ë=
NULL
) {

1059 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1064 
öq_bl
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bl_èsk
);

1065 i‡(
öq_bl
 =
NULL
) {

1066 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1072 
öq_bdc_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
, 255);

1073 i‡(
öq_bdc_èsk
 =
NULL
) {

1074 
	`¥ötf
("FailedÅoÑead Block Device CharacteristicsÖage\n");

1076 i‡(
öq_bdc_èsk
) {

1077 
öq_bdc
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bdc_èsk
);

1078 i‡(
öq_bdc
 =
NULL
) {

1079 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1085 i‡(
rc16
 &&Ñc16->
lbpme
 != 0){

1086 
öq_lbp_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

1087 i‡(
öq_lbp_èsk
 =
NULL
 || inq_lbp_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1088 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1091 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_lbp_èsk
);

1092 i‡(
fuŒ_size
 > 
öq_lbp_èsk
->
d©aö
.
size
) {

1093 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1096 i‡((
öq_lbp_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

1097 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1102 
öq_lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_lbp_èsk
);

1103 i‡(
öq_lbp
 =
NULL
) {

1104 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1109 
rs›_èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsic
, 
lun
,

1110 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0, 65535);

1111 i‡(
rs›_èsk
 =
NULL
) {

1112 
	`¥ötf
("FailedÅo send REPORT_SUPPORTED_OPCODES command: %s\n",

1113 
	`iscsi_gë_îr‹
(
iscsic
));

1114 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1117 i‡(
rs›_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1118 
rs›
 = 
	`scsi_d©aö_unm¨shÆl
(
rs›_èsk
);

1119 i‡(
rs›
 =
NULL
) {

1120 
	`¥ötf
("failedÅo unmarshall REPORT_SUPPORTED_OPCODES "

1122 
	`iscsi_gë_îr‹
(
iscsic
));

1123 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1128 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

1129 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

1131 i‡(
èsk
 =
NULL
) {

1132 
	`¥ötf
("FailedÅo send MODE_SENSE6 command: %s\n",

1133 
	`iscsi_gë_îr‹
(
iscsic
));

1134 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1138 
scsi_mode_£n£
 *
ms
;

1140 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1141 i‡(
ms
 =
NULL
) {

1142 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

1143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1146 
ªad⁄ly
 = !!(
ms
->
devi˚_•ecific_∑ømëî
 & 0x80);

1148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1150 
	`iscsi_logout_sync
(
iscsic
);

1151 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1153 i‡(
is_usb
) {

1154 
	`¥ötf
("USB device. Clamping maximumÅransferÜengthÅo 120k\n");

1155 
maximum_å™s„r_Àngth
 = 120 *1024 / 
block_size
;

1158 i‡(
	`CU_öôülize_ªgi°ry
() != 0) {

1159 
	`Ârötf
(
°dîr
, "error: unableÅo initializeÅestÑegistry\n");

1162 i‡(
	`CU_is_ã°_ru¬ög
()) {

1163 
	`Ârötf
(
°dîr
, "error:Åest suite(s)álreadyÑunning!?\n");

1164 
	`exô
(1);

1167 i‡(
	`add_ã°s
(
ã°«me_ª
Ë!
CUE_SUCCESS
) {

1168 
	`Ârötf
(
°dîr
, "error: suiteÑegistration failed: %s\n",

1169 
	`CU_gë_îr‹_msg
());

1170 
	`exô
(1);

1172 
	`CU_basic_£t_mode
(
mode
);

1173 
	`CU_£t_îr‹_a˘i⁄
(
îr‹_a˘i⁄
);

1174 
	`¥ötf
("\n");

1179 
ªs
 = 
	`CU_basic_run_ã°s
();

1181 
	`¥ötf
("Te°†com∂ëed wôhÑëu∫ vÆue: %d\n", 
ªs
);

1183 
	`CU_˛ónup_ªgi°ry
();

1184 i‡(
ã°«me_ª
)

1185 
	`‰ì
(
ã°«me_ª
);

1186 
	`‰ì
(
	`disˇrd_c⁄°
(
tgt_uæ
));

1188 i‡(
öq_èsk
 !
NULL
) {

1189 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1191 i‡(
öq_bl_èsk
 !
NULL
) {

1192 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1194 i‡(
öq_lbp_èsk
 !
NULL
) {

1195 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1197 i‡(
öq_bdc_èsk
 !
NULL
) {

1198 
	`scsi_‰ì_scsi_èsk
(
öq_bdc_èsk
);

1200 i‡(
rc16_èsk
 !
NULL
) {

1201 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1203 i‡(
rs›_èsk
 !
NULL
) {

1204 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1208 
	}
}

	@test-tool/iscsi-test.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<öây≥s.h
>

28 
	~<°rög.h
>

29 
	~<pﬁl.h
>

30 
	~<gë›t.h
>

31 
	~<‚m©ch.h
>

32 
	~"¶i°.h
"

33 
	~"iscsi.h
"

34 
	~"scsi-lowÀvñ.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"iscsi-ã°.h
"

37 
	~"iscsi-suµ‹t.h
"

39 #i‚de‡
disˇrd_c⁄°


40 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

43 
	glogÀvñ
 = 
LOG_VERBOSE
;

45 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

48 
show_öfo
;

50 
	sscsi_ã°
 {

51 c⁄° *
«me
;

52 (*
ã°
)(c⁄° *
öôüt‹
, c⁄° *
uæ
);

55 
scsi_ã°
 
ã°s
[] = {

59 { "T0000_ã°unôªady_sim∂e", 
T0000_ã°unôªady_sim∂e
 },

62 { "T0100_ªad10_sim∂e", 
T0100_ªad10_sim∂e
 },

63 { "T0101_ªad10_bey⁄d_eﬁ", 
T0101_ªad10_bey⁄d_eﬁ
 },

64 { "T0102_ªad10_0blocks", 
T0102_ªad10_0blocks
 },

65 { "T0103_ªad10_rd¥Ÿe˘", 
T0103_ªad10_rd¥Ÿe˘
 },

66 { "T0104_ªad10_Êags", 
T0104_ªad10_Êags
 },

67 { "T0105_ªad10_övÆid", 
T0105_ªad10_övÆid
 },

70 { "T0110_ªadˇ∑côy10_sim∂e", 
T0110_ªadˇ∑côy10_sim∂e
 },

73 { "T0120_ªad6_sim∂e", 
T0120_ªad6_sim∂e
 },

74 { "T0121_ªad6_bey⁄d_eﬁ", 
T0121_ªad6_bey⁄d_eﬁ
 },

75 { "T0122_ªad6_övÆid", 
T0122_ªad6_övÆid
 },

78 { "T0130_vîify10_sim∂e", 
T0130_vîify10_sim∂e
 },

79 { "T0131_vîify10_mism©ch", 
T0131_vîify10_mism©ch
 },

80 { "T0132_vîify10_mism©ch_no_cmp", 
T0132_vîify10_mism©ch_no_cmp
 },

81 { "T0133_vîify10_bey⁄deﬁ", 
T0133_vîify10_bey⁄deﬁ
 },

84 { "T0160_ªadˇ∑côy16_sim∂e", 
T0160_ªadˇ∑côy16_sim∂e
 },

85 { "T0161_ªadˇ∑côy16_Ælo˛í", 
T0161_ªadˇ∑côy16_Ælo˛í
 },

88 { "T0170_unm≠_sim∂e", 
T0170_unm≠_sim∂e
 },

89 { "T0171_unm≠_zîo", 
T0171_unm≠_zîo
 },

92 { "T0180_wrôeßme10_unm≠", 
T0180_wrôeßme10_unm≠
 },

93 { "T0181_wrôeßme10_unm≠_u«lig√d", 
T0181_wrôeßme10_unm≠_u«lig√d
 },

94 { "T0182_wrôeßme10_bey⁄deﬁ", 
T0182_wrôeßme10_bey⁄deﬁ
 },

95 { "T0183_wrôeßme10_wΩrŸe˘", 
T0183_wrôeßme10_wΩrŸe˘
 },

96 { "T0184_wrôeßme10_0blocks", 
T0184_wrôeßme10_0blocks
 },

99 { "T0190_wrôeßme16_unm≠", 
T0190_wrôeßme16_unm≠
 },

100 { "T0191_wrôeßme16_unm≠_u«lig√d", 
T0191_wrôeßme16_unm≠_u«lig√d
 },

101 { "T0192_wrôeßme16_bey⁄deﬁ", 
T0192_wrôeßme16_bey⁄deﬁ
 },

102 { "T0193_wrôeßme16_wΩrŸe˘", 
T0193_wrôeßme16_wΩrŸe˘
 },

103 { "T0194_wrôeßme16_0blocks", 
T0194_wrôeßme16_0blocks
 },

106 { "T0200_ªad16_sim∂e", 
T0200_ªad16_sim∂e
 },

107 { "T0201_ªad16_rd¥Ÿe˘", 
T0201_ªad16_rd¥Ÿe˘
 },

108 { "T0202_ªad16_Êags", 
T0202_ªad16_Êags
 },

109 { "T0203_ªad16_0blocks", 
T0203_ªad16_0blocks
 },

110 { "T0204_ªad16_bey⁄deﬁ", 
T0204_ªad16_bey⁄deﬁ
 },

113 { "T0210_ªad12_sim∂e", 
T0210_ªad12_sim∂e
 },

114 { "T0211_ªad12_rd¥Ÿe˘", 
T0211_ªad12_rd¥Ÿe˘
 },

115 { "T0212_ªad12_Êags", 
T0212_ªad12_Êags
 },

116 { "T0213_ªad12_0blocks", 
T0213_ªad12_0blocks
 },

117 { "T0214_ªad12_bey⁄deﬁ", 
T0214_ªad12_bey⁄deﬁ
 },

120 { "T0220_wrôe16_sim∂e", 
T0220_wrôe16_sim∂e
 },

121 { "T0221_wrôe16_wΩrŸe˘", 
T0221_wrôe16_wΩrŸe˘
 },

122 { "T0222_wrôe16_Êags", 
T0222_wrôe16_Êags
 },

123 { "T0223_wrôe16_0blocks", 
T0223_wrôe16_0blocks
 },

124 { "T0224_wrôe16_bey⁄deﬁ", 
T0224_wrôe16_bey⁄deﬁ
 },

127 { "T0230_wrôe12_sim∂e", 
T0230_wrôe12_sim∂e
 },

128 { "T0231_wrôe12_wΩrŸe˘", 
T0231_wrôe12_wΩrŸe˘
 },

129 { "T0232_wrôe12_Êags", 
T0232_wrôe12_Êags
 },

130 { "T0233_wrôe12_0blocks", 
T0233_wrôe12_0blocks
 },

131 { "T0234_wrôe12_bey⁄deﬁ", 
T0234_wrôe12_bey⁄deﬁ
 },

134 { "T0240_¥e„tch10_sim∂e", 
T0240_¥e„tch10_sim∂e
 },

135 { "T0241_¥e„tch10_Êags", 
T0241_¥e„tch10_Êags
 },

136 { "T0242_¥e„tch10_bey⁄deﬁ", 
T0242_¥e„tch10_bey⁄deﬁ
 },

137 { "T0243_¥e„tch10_0blocks", 
T0243_¥e„tch10_0blocks
 },

140 { "T0250_¥e„tch16_sim∂e", 
T0250_¥e„tch16_sim∂e
 },

141 { "T0251_¥e„tch16_Êags", 
T0251_¥e„tch16_Êags
 },

142 { "T0252_¥e„tch16_bey⁄deﬁ", 
T0252_¥e„tch16_bey⁄deﬁ
 },

143 { "T0253_¥e„tch16_0blocks", 
T0253_¥e„tch16_0blocks
 },

146 { "T0260_gë_lba_°©us_sim∂e", 
T0260_gë_lba_°©us_sim∂e
 },

147 { "T0264_gë_lba_°©us_bey⁄deﬁ", 
T0264_gë_lba_°©us_bey⁄deﬁ
 },

150 { "T0270_vîify16_sim∂e", 
T0270_vîify16_sim∂e
 },

151 { "T0271_vîify16_mism©ch", 
T0271_vîify16_mism©ch
 },

152 { "T0272_vîify16_mism©ch_no_cmp", 
T0272_vîify16_mism©ch_no_cmp
 },

153 { "T0273_vîify16_bey⁄deﬁ", 
T0273_vîify16_bey⁄deﬁ
 },

156 { "T0280_vîify12_sim∂e", 
T0280_vîify12_sim∂e
 },

157 { "T0281_vîify12_mism©ch", 
T0281_vîify12_mism©ch
 },

158 { "T0282_vîify12_mism©ch_no_cmp", 
T0282_vîify12_mism©ch_no_cmp
 },

159 { "T0283_vîify12_bey⁄deﬁ", 
T0283_vîify12_bey⁄deﬁ
 },

162 { "T0290_wrôe10_sim∂e", 
T0290_wrôe10_sim∂e
 },

163 { "T0291_wrôe10_wΩrŸe˘", 
T0291_wrôe10_wΩrŸe˘
 },

164 { "T0292_wrôe10_Êags", 
T0292_wrôe10_Êags
 },

165 { "T0293_wrôe10_0blocks", 
T0293_wrôe10_0blocks
 },

166 { "T0294_wrôe10_bey⁄deﬁ", 
T0294_wrôe10_bey⁄deﬁ
 },

169 { "T0300_ªad⁄ly", 
T0300_ªad⁄ly
 },

172 { "T0310_wrôevîify10_sim∂e", 
T0310_wrôevîify10_sim∂e
 },

173 { "T0311_wrôevîify10_wΩrŸe˘", 
T0311_wrôevîify10_wΩrŸe˘
 },

174 { "T0314_wrôevîify10_bey⁄deﬁ", 
T0314_wrôevîify10_bey⁄deﬁ
 },

177 { "T0320_wrôevîify12_sim∂e", 
T0320_wrôevîify12_sim∂e
 },

178 { "T0321_wrôevîify12_wΩrŸe˘", 
T0321_wrôevîify12_wΩrŸe˘
 },

179 { "T0324_wrôevîify12_bey⁄deﬁ", 
T0324_wrôevîify12_bey⁄deﬁ
 },

182 { "T0330_wrôevîify16_sim∂e", 
T0330_wrôevîify16_sim∂e
 },

183 { "T0331_wrôevîify16_wΩrŸe˘", 
T0331_wrôevîify16_wΩrŸe˘
 },

184 { "T0334_wrôevîify16_bey⁄deﬁ", 
T0334_wrôevîify16_bey⁄deﬁ
 },

187 { "T0340_com∑ª™dwrôe_sim∂e", 
T0340_com∑ª™dwrôe_sim∂e
 },

188 { "T0341_com∑ª™dwrôe_mism©ch", 
T0341_com∑ª™dwrôe_mism©ch
 },

189 { "T0343_com∑ª™dwrôe_bey⁄deﬁ", 
T0343_com∑ª™dwrôe_bey⁄deﬁ
 },

192 { "T0350_‹wrôe_sim∂e", 
T0350_‹wrôe_sim∂e
 },

193 { "T0351_‹wrôe_wΩrŸe˘", 
T0351_‹wrôe_wΩrŸe˘
 },

194 { "T0354_‹wrôe_beyödeﬁ", 
T0354_‹wrôe_bey⁄deﬁ
 },

197 { "T0360_°¨t°›unô_sim∂e", 
T0360_°¨t°›unô_sim∂e
 },

198 { "T0361_°¨t°›unô_pwr˙d", 
T0361_°¨t°›unô_pwr˙d
 },

199 { "T0362_°¨t°›unô_nﬁ€j", 
T0362_°¨t°›unô_nﬁ€j
 },

202 { "T0370_nomedü", 
T0370_nomedü
 },

205 { "T0380_¥evíèŒow_sim∂e", 
T0380_¥evíèŒow_sim∂e
 },

206 { "T0381_¥evíèŒow_eje˘", 
T0381_¥evíèŒow_eje˘
 },

207 { "T0382_¥evíèŒow_ô√xus_loss", 
T0382_¥evíèŒow_ô√xus_loss
 },

208 { "T0383_¥evíèŒow_èrgë_w¨m_ª£t", 
T0383_¥evíèŒow_èrgë_w¨m_ª£t
 },

209 { "T0384_¥evíèŒow_èrgë_cﬁd_ª£t", 
T0384_¥evíèŒow_èrgë_cﬁd_ª£t
 },

210 { "T0385_¥evíèŒow_lun_ª£t", 
T0385_¥evíèŒow_lun_ª£t
 },

211 { "T0386_¥evíèŒow_2_ôl_√xu£s", 
T0386_¥evíèŒow_2_ôl_√xu£s
 },

214 { "T0390_m™d©‹y_›codes_sbc", 
T0390_m™d©‹y_›codes_sbc
 },

217 { "T0400_öquúy_basic", 
T0400_öquúy_basic
 },

218 { "T0401_öquúy_Ælo˛í", 
T0401_öquúy_Ælo˛í
 },

219 { "T0402_öquúy_evpd", 
T0402_öquúy_evpd
 },

220 { "T0403_öquúy_suµ‹ãd_vpd", 
T0403_öquúy_suµ‹ãd_vpd
 },

221 { "T0404_öquúy_Æl_ªp‹ãd_vpd", 
T0404_öquúy_Æl_ªp‹ãd_vpd
 },

224 { "T0410_ªadtoc_basic", 
T0410_ªadtoc_basic
 },

227 { "T0420_ª£rve6_sim∂e", 
T0420_ª£rve6_sim∂e
 },

228 { "T0421_ª£rve6_lun_ª£t", 
T0421_ª£rve6_lun_ª£t
 },

229 { "T0422_ª£rve6_logout", 
T0422_ª£rve6_logout
 },

230 { "T0423_ª£rve6_£ssi⁄loss", 
T0423_ª£rve6_£ssi⁄loss
 },

231 { "T0424_ª£rve6_èrgë_ª£t", 
T0424_ª£rve6_èrgë_ª£t
 },

234 { "T0430_ªp‹t_Æl_suµ‹ãd_›s", 
T0430_ªp‹t_Æl_suµ‹ãd_›s
 },

239 { "T1000_cmd¢_övÆid", 
T1000_cmd¢_övÆid
 },

242 { "T1010_d©a¢_övÆid", 
T1010_d©a¢_övÆid
 },

245 { "T1020_buf„roff£t_övÆid", 
T1020_buf„roff£t_övÆid
 },

248 { "T1030_unsﬁicôed_d©a_ovîÊow", 
T1030_unsﬁicôed_d©a_ovîÊow
 },

249 { "T1031_unsﬁicôed_d©a_out", 
T1031_unsﬁicôed_d©a_out
 },

254 { "T1040_ßtuøã_maxcmd¢", 
T1040_ßtuøã_maxcmd¢
 },

256 { "T1041_unsﬁicôed_immedüã_d©a", 
T1041_unsﬁicôed_immedüã_d©a
 },

257 { "T1042_unsﬁicôed_n⁄immedüã_d©a",
T1042_unsﬁicôed_n⁄immedüã_d©a
 },

260 { "T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e", 
T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e
 },

261 { "T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge", 
T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge
 },

262 { "T1120_≥rsi°ít_ªgi°î_sim∂e", 
T1120_≥rsi°ít_ªgi°î_sim∂e
 },

263 { "T1130_≥rsi°ít_ª£rve_sim∂e", 
T1130_≥rsi°ít_ª£rve_sim∂e
 },

264 { "T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó", 
T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó
 },

265 { "T1141_≥rsi°ít_ª£rve_ac˚ss_check_we", 
T1141_≥rsi°ít_ª£rve_ac˚ss_check_we
 },

266 { "T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro", 
T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro
 },

267 { "T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo", 
T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo
 },

268 { "T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨", 
T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨
 },

269 { "T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór", 
T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór
 },

271 { 
NULL
, NULL }

272 
	}
};

275 
	$¥öt_ußge
()

277 
	`Ârötf
(
°dîr
, "Usage: iscsi-test [-?] [-?|--help] [--usage] [-t|--test=<test>] [-s|--skip=<test>]\n"

280 
	}
}

282 
	$¥öt_hñp
()

284 
	`Ârötf
(
°dîr
, "Usage: iscsi-test [OPTION...] <iscsi-url>\n");

285 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

286 
	`Ârötf
(
°dîr
, " -I, --initiator-name-2=iqn-name Second initiatornameÅo use\n");

287 
	`Ârötf
(
°dîr
, " -t, --test=test-name WhichÅestÅoÑun. Default isÅoÑunállÅests.\n");

288 
	`Ârötf
(
°dîr
, " -s, --skip=test-name WhichÅestÅo skip. Default isÅoÑunállÅests.\n");

289 
	`Ârötf
(
°dîr
, " -l, --list ListállÅests.\n");

290 
	`Ârötf
(
°dîr
, " --info, PrintÉxtra infoáboutáÅest.\n");

291 
	`Ârötf
(
°dîr
, " --dataloss Allow destructiveÅests.\n");

292 
	`Ârötf
(
°dîr
, "\n");

293 
	`Ârötf
(
°dîr
, "Help options:\n");

294 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

295 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

296 
	`Ârötf
(
°dîr
, "\n");

297 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

298 
	`Ârötf
(
°dîr
, "\n");

299 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

300 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

301 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

302 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

303 
	}
}

306 
	$maö
(
¨gc
, *
¨gv
[])

308 c⁄° *
uæ
 = 
NULL
;

309 
show_hñp
 = 0, 
show_ußge
 = 0, 
li°_ã°s
 = 0;

310 
ªs
, 
num_Áûed
, 
num_skù≥d
;

311 
scsi_ã°
 *
ã°
;

312 *
ã°«me
 = 
NULL
;

313 *
skù«me
 = 
NULL
;

314 
lun
;

315 
iscsi_c⁄ãxt
 *
iscsi
;

316 
scsi_èsk
 *
èsk
;

317 
scsi_èsk
 *
öq_èsk
;

318 
scsi_èsk
 *
öq_bl_èsk
;

319 
scsi_èsk
 *
rc16_èsk
;

320 
scsi_ªadˇ∑côy10
 *
rc10
;

321 
fuŒ_size
;

322 
c
;

324 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

325 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

326 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

327 {"d©Æoss", 
no_¨gumít
, 
NULL
, 'D'},

328 {"öfo", 
no_¨gumít
, 
NULL
, 'X'},

329 {"li°", 
no_¨gumít
, 
NULL
, 'l'},

330 {"ã°", 
ªquúed_¨gumít
, 
NULL
, 't'},

331 {"skù", 
ªquúed_¨gumít
, 
NULL
, 's'},

332 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

333 {"öôüt‹_«me-2", 
ªquúed_¨gumít
, 
NULL
, 'I'},

334 {"LUN", 
ªquúed_¨gumít
, 
NULL
, 'L'},

337 
›ti⁄_ödex
;

339 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?ui:I:ls:t:", 
l⁄g_›ti⁄s
,

340 &
›ti⁄_ödex
)) != -1) {

341 
c
) {

344 
show_hñp
 = 1;

347 
show_ußge
 = 1;

350 
li°_ã°s
 = 1;

353 
d©a_loss
 = 1;

356 
show_öfo
 = 1;

359 
skù«me
 = 
›èrg
;

362 
ã°«me
 = 
›èrg
;

365 
öôüt‹«me1
 = 
›èrg
;

368 
öôüt‹«me2
 = 
›èrg
;

371 
lun
 = 
	`©oi
(
›èrg
);

374 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

375 
	`¥öt_hñp
();

376 
	`exô
(0);

381 
ªÆ_iscsi_queue_pdu
 = 
	`dlsym
(
RTLD_NEXT
, "iscsi_queue_pdu");

384 i‡(
show_hñp
 != 0) {

385 
	`¥öt_hñp
();

386 
	`exô
(0);

389 i‡(
show_ußge
 != 0) {

390 
	`¥öt_ußge
();

391 
	`exô
(0);

394 i‡(
li°_ã°s
 != 0) {

395 
ã°
 = &
ã°s
[0];Åe°->
«me
;Åest++) {

396 
	`¥ötf
("%s\n", 
ã°
->
«me
);

397 i‡(
show_öfo
) {

398 
ã°
->
	`ã°
(
öôüt‹«me1
, 
uæ
);

401 
	`exô
(0);

404 i‡(
¨gv
[
›töd
] !
NULL
) {

405 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

407 i‡(
uæ
 =
NULL
) {

408 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

409 
	`¥öt_ußge
();

410 
	`exô
(10);

414 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
uæ
, &
lun
);

415 i‡(
iscsi
 =
NULL
) {

416 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

424 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

425 i‡(
èsk
 =
NULL
) {

426 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

427 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

430 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

431 
	`¥ötf
("READCAPACITY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

432 
	`scsi_‰ì_scsi_èsk
(
èsk
);

433 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

436 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

437 i‡(
rc10
 =
NULL
) {

438 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

439 
	`scsi_‰ì_scsi_èsk
(
èsk
);

440 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

443 
block_size
 = 
rc10
->block_size;

444 
num_blocks
 = 
rc10
->
lba
;

445 
	`scsi_‰ì_scsi_èsk
(
èsk
);

447 
rc16_èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

448 i‡(
rc16_èsk
 =
NULL
) {

449 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

450 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

453 i‡(
rc16_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

454 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
rc16_èsk
);

455 i‡(
rc16
 =
NULL
) {

456 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY16 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

457 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

458 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

461 
block_size
 = 
rc16
->
block_Àngth
;

462 
num_blocks
 = 
rc16
->
ªtu∫ed_lba
;

463 
lbµb
 = 1 << 
rc16
->
lbµbe
;

467 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

468 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

469 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

472 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

473 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

474 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

477 i‡((
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

478 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

482 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

483 i‡(
öq
 =
NULL
) {

484 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

485 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

490 
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 64);

491 i‡(
öq_bl_èsk
 && inq_bl_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

492 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

493 
öq_bl_èsk
 = 
NULL
;

495 i‡(
öq_bl_èsk
) {

496 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_bl_èsk
);

497 i‡(
fuŒ_size
 > 
öq_bl_èsk
->
d©aö
.
size
) {

498 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

500 i‡((
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 
fuŒ_size
)Ë=
NULL
) {

501 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

506 
öq_bl
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bl_èsk
);

507 i‡(
öq_bl
 =
NULL
) {

508 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

514 
num_Áûed
 = 
num_skù≥d
 = 0;

515 
ã°
 = &
ã°s
[0];Åe°->
«me
;Åest++) {

516 i‡(
ã°«me
 !
NULL
 && 
	`‚m©ch
—e°«me, 
ã°
->
«me
, 0)) {

520 i‡(
skù«me
 !
NULL
) {

521 * 
pchr
 = 
skù«me
;

522 * 
pchr2
 = 
NULL
;

523 
skù
 = 0;

525 
pchr2
 = 
	`°rchr
(
pchr
,',');

526 i‡(
pchr2
)Öchr2[0]=0x00;

527 i‡(!
	`‚m©ch
(
pchr
, 
ã°
->
«me
, 0)) {

528 
skù
 = 1;

530 i‡(
pchr2
Ë{pchr2[0]=',';
pchr
=pchr2+1;}

531 } 
pchr2
);

532 i‡(
skù
) ;

535 
ªs
 = 
ã°
->
	`ã°
(
öôüt‹«me1
, 
uæ
);

536 i‡(
ªs
 == 0) {

537 
	`¥ötf
("TEST %†[OK]\n", 
ã°
->
«me
);

538 } i‡(
ªs
 == -2) {

539 
	`¥ötf
("TEST %†[SKIPPED]\n", 
ã°
->
«me
);

540 
num_skù≥d
++;

542 
	`¥ötf
("TEST %†[FAILED]\n", 
ã°
->
«me
);

543 
num_Áûed
++;

545 
	`¥ötf
("\n");

548 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

549 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

550 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

551 
	`iscsi_logout_sync
(
iscsi
);

552 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

554 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

556  
num_Áûed
 ?Çum_Áûed : 
num_skù≥d
 ? 77 : 0;

557 
	}
}

	@test-tool/test_compareandwrite_miscompare.c

18 
	~<°dio.h
>

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_com∑ª™dwrôe_miscom∑ª
()

33 
i
, 
ªt
;

34 
j
;

35 *
buf
 = 
	`Æloˇ
(2 * 256 * 
block_size
);

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

43 
i
 = 1; i < 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

45 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

46 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

49 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

50 
block_size
, 0, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

53 
	`CU_PASS
("WRITE16 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

60 
buf
[
i
 * 
block_size
 - 27] = 'C';

63 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

65 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

66 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

67 
ªt
 = 
	`com∑ª™dwrôe_miscom∑ª
(
iscsic
, 
tgt_lun
, 0,

68 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

69 i‡(
ªt
 == -2) {

70 
	`CU_PASS
("[SKIPPED] Target doesÇot support "

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

77 "theyáª stû»unch™gedá†'A'", 
i
);

78 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
j
 = 0; j < 
i
 * 
block_size
; j++) {

83 i‡(
buf
[
j
] != 'A') {

84 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

86 
	`CU_FAIL
("Block was writtenÅo");

93 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

95 
i
 = 1; i < 256; i++) {

96 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

97 
i
, 
num_blocks
 - i);

98 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

99 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

102 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

103 
block_size
, 0, 0, 0, 0, 0, 
buf
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

106 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

107 
buf
[
i
 * 
block_size
 - 27] = 'C';

110 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

112 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

113 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

114 
i
, 
num_blocks
 - i);

115 
ªt
 = 
	`com∑ª™dwrôe_miscom∑ª
(
iscsic
, 
tgt_lun
,

116 
num_blocks
 - 
i
,

117 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

118 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

120 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


122 
i
, 
num_blocks
 - i);

123 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

124 
block_size
, 0, 0, 0, 0, 0, 
buf
);

125 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

127 
j
 = 0; j < 
i
 * 
block_size
; j++) {

128 i‡(
buf
[
j
] != 'A') {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

131 
	`CU_FAIL
("Block was writtenÅo");

136 
	}
}

	@test-tool/test_compareandwrite_simple.c

18 
	~<°dio.h
>

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_com∑ª™dwrôe_sim∂e
()

33 
i
, 
ªt
;

34 
j
;

35 *
buf
 = 
	`Æloˇ
(2 * 256 * 
block_size
);

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

43 
i
 = 1; i < 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

45 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

46 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

49 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

50 
block_size
, 0, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

53 
	`CU_PASS
("WRITE16 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

60 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

61 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

62 
ªt
 = 
	`com∑ª™dwrôe
(
iscsic
, 
tgt_lun
, 0,

63 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

64 i‡(
ªt
 == -2) {

65 
	`CU_PASS
("[SKIPPED] Target doesÇot support "

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

72 "theyáªáŒ 'B'", 
i
);

73 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

74 
block_size
, 0, 0, 0, 0, 0, 
buf
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
j
 = 0; j < 
i
 * 
block_size
; j++) {

78 i‡(
buf
[
j
] != 'B') {

79 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

81 
	`CU_FAIL
("Block wasÇot written correctly");

88 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

90 
i
 = 1; i < 256; i++) {

91 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

92 
i
, 
num_blocks
 - i);

93 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

94 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

97 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

98 
block_size
, 0, 0, 0, 0, 0, 
buf
);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

101 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

103 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

104 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

105 
i
, 
num_blocks
 - i);

106 
ªt
 = 
	`com∑ª™dwrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

107 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

108 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

110 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


112 
i
, 
num_blocks
 - i);

113 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

114 
block_size
, 0, 0, 0, 0, 0, 
buf
);

115 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

117 
j
 = 0; j < 
i
 * 
block_size
; j++) {

118 i‡(
buf
[
j
] != 'B') {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

121 
	`CU_FAIL
("Block wasÇot written correctly");

126 
	}
}

	@test-tool/test_get_lba_status_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_gë_lba_°©us_bey⁄d_eﬁ
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS one block beyondÅheÉnd ofÅhe LUN");

36 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 24);

37 i‡(
ªt
 == -2) {

38 
	`CU_PASS
("[SKIPPED] Target doesÇot support GET_LBA_STATUS. SkippingÅest");

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUSát LBA 2^63");

45 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 24);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUSát LBA -1");

50 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0xffffffffffffffff, 24);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	}
}

	@test-tool/test_get_lba_status_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_gë_lba_°©us_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`gë_lba_°©us
(
iscsic
, 
tgt_lun
, 0, 24);

37 i‡(
ªt
 == -2) {

38 
	`CU_PASS
("[SKIPPED] Target doesÇot support GET_LBA_STATUS. SkippingÅest");

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS of 1-256 blocksátÅheÉnd ofÅhe LUN");

46 
i
 = 1; i <= 256; i++) {

47 
ªt
 = 
	`gë_lba_°©us
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, 24);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	}
}

	@test-tool/test_inquiry_alloc_length.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_Æloc_Àngth
()

30 
ªt
, 
i
;

31 
scsi_öquúy_°™d¨d
 *
°d_öq
;

32 
scsi_èsk
 *
èsk2
 = 
NULL
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRYállocationÜength");

38 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage withállocÜength from 0-255");

39 
i
 = 0; i < 256 ; i++) {

40 i‡(
èsk
 !
NULL
) {

41 
	`scsi_‰ì_scsi_èsk
(
èsk
);

42 
èsk
 = 
NULL
;

44 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 
i
, &
èsk
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data whenÑeading withállocÜength 255");

48 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

50 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

51 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

52 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

53 i‡(
°d_öq
 =
NULL
) {

54 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

59 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

60 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "If version is SPC-3 orÜater INQUIRY supports 16-bitállocationÜengths");

70 
°d_öq
->
vîsi⁄
) {

75 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] This device doesÇot claim "

77 
	`CU_PASS
("[SKIPPED] Not SPC-3 orÜater");

78 
föished
;

81 
	`loggög
(
LOG_VERBOSE
, "Version is SPC-3 orÜater. Read INQUIRY data using 16-bitállocationÜength");

82 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 511 (low order byte is 0xff)");

83 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 511, &
èsk
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 512 (low order byte is 0x00)");

87 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 512, &
èsk2
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "INQUIRY data should beÅhe same whenállocationÜength is 511ánd 512 bytes");

91 
ªt
 = 
èsk
->
d©aö
.
size
 !
èsk2
->datain.size;

92 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
ªt
 = 
	`memcmp
(
èsk
->
d©aö
.
d©a
, 
èsk2
->d©aö.d©a,Åask->d©aö.
size
);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
föished
:

98 i‡(
èsk
 !
NULL
) {

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
èsk
 = 
NULL
;

102 i‡(
èsk2
 !
NULL
) {

103 
	`scsi_‰ì_scsi_èsk
(
èsk2
);

104 
èsk2
 = 
NULL
;

106 
	}
}

	@test-tool/test_inquiry_block_limits.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_block_limôs
()

30 
ªt
;

31 
scsi_öquúy_block_limôs
 *
bl
;

32 
scsi_èsk
 *
bl_èsk
 = 
NULL
;

33 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
 = 
NULL
;

34 
scsi_èsk
 *
lbp_èsk
 = 
NULL
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY Block Limits");

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, "Block device. VerifyÅhat we canÑead Block Limits VPD");

42 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

43 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
,

44 64, &
bl_èsk
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 i‡(
ªt
 != 0) {

47 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo send inquiry.");

48 
föished
;

51 
bl
 = 
	`scsi_d©aö_unm¨shÆl
(
bl_èsk
);

52 i‡(
bl
 =
NULL
) {

53 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall inquiry "

55 
	`CU_FAIL
("[FAILURE] failedÅo unmarshall inquiry "

57 
föished
;

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches up withÅhe size ofÅhe DATA-IN buffer.");

61 
	`CU_ASSERT_EQUAL
(
bl_èsk
->
d©aö
.
size
, bl_èsk->d©aö.
d©a
[3] + 4);

62 i‡(
bl_èsk
->
d©aö
.
size
 !bl_èsk->d©aö.
d©a
[3] + 4) {

63 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLengthÑeturned. "

65 
bl_èsk
->
d©aö
.
d©a
[3], bl_èsk->d©aö.
size
 - 4);

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PageLength matches DataIn buffer size");

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches SCSI-level.");

72 i‡(
sbc3_suµ‹t
) {

73 
	`loggög
(
LOG_VERBOSE
, "Device claims SBC-3. VerifyÅhat " "PageLength == 0x3C");

75 
	`loggög
(
LOG_VERBOSE
, "Device isÇot SBC-3. VerifyÅhat "

79 
bl_èsk
->
d©aö
.
d©a
[3]) {

82 i‡(!
sbc3_suµ‹t
) {

83 
	`loggög
(
LOG_NORMAL
, "[WARNING] SBC-3Öagelength (0x3C) "

90 i‡(!
sbc3_suµ‹t
) {

95 
	`CU_FAIL
("[FAILED] InvalidÖagelengthÑeturned");

96 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLengthÑeturned.");

100 i‡(
bl_èsk
->
d©aö
.
d©a
[3] != 0x3c) {

101 
föished
;

109 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅheÜogical blockÖrovisioning VPD");

110 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

111 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
,

112 64, &
lbp_èsk
);

113 i‡(
ªt
 == 0) {

114 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
lbp_èsk
);

115 i‡(
lbp
 =
NULL
) {

116 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall "

121 i‡(
lbp
 &&Übp->
lbpu
) {

129 
	`loggög
(
LOG_VERBOSE
, "Device claims UNMAP support via LBPU");

130 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

132 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠
, 0);

134 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

136 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
 >(1U << 
rc16
->
lbµbe
), 1);

138 i‡(
bl
->
max_unm≠
 != 0xffffffff) {

139 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA "

141 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠
 <= 1024*1024);

144 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

146 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

147 i‡(
bl
->
max_unm≠_bdc
 != 0xffffffff) {

148 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP "

150 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠_bdc
 <= 1024*1024);

153 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot claim UNMAP support via "

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

157 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
, 0);

159 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

161 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

166 
föished
:

167 i‡(
bl_èsk
 !
NULL
) {

168 
	`scsi_‰ì_scsi_èsk
(
bl_èsk
);

170 i‡(
lbp_èsk
 !
NULL
) {

171 
	`scsi_‰ì_scsi_èsk
(
lbp_èsk
);

173 
	}
}

	@test-tool/test_inquiry_evpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_evpd
()

30 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY EVPD bit");

35 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY with EVPD==0ánd PC!=0 isánÉrror");

36 
ªt
 = 
	`öquúy_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 1, 256);

37 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

38 
	}
}

	@test-tool/test_inquiry_mandatory_vpd_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_m™d©‹y_vpd_sbc
()

30 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY support for mandatory SBC VPD");

35 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "SUPPORTED_VPD_PAGES is mandatory for SBC devices. Verify we canÑead it.");

39 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

40 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

41 255, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	`loggög
(
LOG_VERBOSE
, "DEVICE_IDENTIFICATION is mandatory for SBC devices. Verify we canÑead it.");

45 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

46 1, 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
,

47 255, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	}
}

	@test-tool/test_inquiry_standard.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_°™d¨d
()

30 
ªt
, 
i
;

31 
scsi_öquúy_°™d¨d
 *
°d_öq
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe standard INQUIRYÖage");

36 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage");

38 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 260, &
èsk
);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

41 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data");

42 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

44 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

45 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

46 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

47 i‡(
°d_öq
 =
NULL
) {

48 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

53 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

54 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Verify version field isÉither 0x4, 0x5 or 0x6");

57 
°d_öq
->
vîsi⁄
) {

59 
	`loggög
(
LOG_NORMAL
, "[WARNING] Standard INQUIRY data claims "

69 
	`loggög
(
LOG_NORMAL
, "[FAILED] Invalid version in standard "

71 "0x4,0x4,0x6áª vÆid.", 
°d_öq
->
vîsi⁄
);

72 
	`CU_FAIL
("Invalid version in INQUIRY data");

75 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesponse-data-format is 2 "

77 i‡(
°d_öq
->
ª•⁄£_d©a_f‹m©
 != 2) {

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] Response data format is "

80 
°d_öq
->
ª•⁄£_d©a_f‹m©
);

82 
	`CU_ASSERT_EQUAL
(
°d_öq
->
ª•⁄£_d©a_f‹m©
, 2);

84 
	`loggög
(
LOG_VERBOSE
, "Verifyádditional-length is correct");

85 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 !
èsk
->
d©aö
.
size
 - 5) {

86 
	`loggög
(
LOG_NORMAL
, "[FAILED] BadádditionalÜength "

88 
èsk
->
d©aö
.
size
 - 5,

89 
°d_öq
->
addôi⁄Æ_Àngth
);

91 
	`CU_ASSERT_EQUAL
(
°d_öq
->
addôi⁄Æ_Àngth
, 
èsk
->
d©aö
.
size
 - 5);

93 
	`loggög
(
LOG_VERBOSE
, "Verify VENDOR_IDENTIFICATION is in ASCII");

94 
i
 = 8; i < 16; i++) {

96 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

99 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

103 
	`loggög
(
LOG_NORMAL
, "[FAILED] VENDOR_IDENTIFICATION contains "

105 
	`CU_FAIL
("Invalid characters in VENDOR_IDENTIFICATION");

109 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_IDENTIFICATION is in ASCII");

110 
i
 = 16; i < 32; i++) {

112 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

115 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

119 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_IDENTIFICATION contains "

121 
	`CU_FAIL
("Invalid characters in PRODUCT_IDENTIFICATION");

125 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_REVISION_LEVEL is in ASCII");

126 
i
 = 32; i < 36; i++) {

128 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

131 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

135 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_REVISON_LEVEL contains "

137 
	`CU_FAIL
("Invalid characters in PRODUCT_REVISON_LEVEL");

141 
	`loggög
(
LOG_VERBOSE
, "Verify AERC is clear in SPC-3ándÜater");

142 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x80 && 
°d_öq
->
vîsi⁄
 >= 5) {

143 
	`loggög
(
LOG_NORMAL
, "[FAILED] AERC is set butÅhis device "

145 
	`CU_FAIL
("AERC is set but SPC-3+ is claimed");

148 
	`loggög
(
LOG_VERBOSE
, "Verify TRMTSK is clear in SPC-2ándÜater");

149 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x40 && 
°d_öq
->
vîsi⁄
 >= 4) {

150 
	`loggög
(
LOG_NORMAL
, "[FAILED] TRMTSK is set butÅhis device "

152 
	`CU_FAIL
("TRMTSK is set but SPC-2+ is claimed");

155 i‡(
èsk
 !
NULL
) {

156 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
èsk
 = 
NULL
;

159 
	}
}

	@test-tool/test_inquiry_supported_vpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_suµ‹ãd_vpd
()

30 
ªt
, 
i
;

31 
scsi_öquúy_suµ‹ãd_∑ges
 *
sup_öq
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY supported VPDÖages");

36 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÅhe SUPPORTED VPDÖage");

37 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

38 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

39 255, &
èsk
);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 4 bytes of data");

43 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 4);

45 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

46 
sup_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

47 
	`CU_ASSERT_NOT_EQUAL
(
sup_öq
, 
NULL
);

48 i‡(
sup_öq
 =
NULL
) {

49 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

54 
	`loggög
(
LOG_VERBOSE
, "Verify weÑeadállÅhe supportedÖages");

55 
i
 = 0; i < 
sup_öq
->
num_∑ges
; i++) {

56 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÖage 0x%02x",

57 
sup_öq
->
∑ges
[
i
]);

59 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

60 1, 
sup_öq
->
∑ges
[
i
],

61 255, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 i‡(
èsk
 !
NULL
) {

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
èsk
 = 
NULL
;

69 
	}
}

	@test-tool/test_inquiry_version_descriptors.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_vîsi⁄_des¸ùt‹s
()

30 
i
, 
˛aimed_ok
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY version descriptors");

35 
öq
->
devi˚_ty≥
) {

36 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

37 
	`loggög
(
LOG_VERBOSE
, "Device isá block device");

39 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SPC");

40 
˛aimed_ok
 = 0;

41 
i
 = 0; i < 8; i++) {

42 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

43 
SCSI_VERSION_DESCRIPTOR_SPC
:

44 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

45 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

46 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

47 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

48 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

49 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

50 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

51 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

52 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

53 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

54 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

55 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

56 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

57 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

58 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

59 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

60 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

61 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

62 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

63 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

64 
˛aimed_ok
 = 1;

68 
	`CU_ASSERT_EQUAL
(
˛aimed_ok
, 1);

69 i‡(
˛aimed_ok
 == 0) {

70 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] Block device "

73 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

77 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SBC");

78 
˛aimed_ok
 = 0;

79 
i
 = 0; i < 8; i++) {

80 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

81 
SCSI_VERSION_DESCRIPTOR_SBC
:

82 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

83 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

84 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

85 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

86 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

87 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

88 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

89 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

90 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

91 
˛aimed_ok
 = 1;

95 
	`CU_ASSERT_EQUAL
(
˛aimed_ok
, 1);

96 i‡(
˛aimed_ok
 == 0) {

97 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] Block device "

100 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

105 
	`loggög
(
LOG_VERBOSE
, "No version descriptorÅests for device"

106 "Åy≥ %d yë.", 
öq
->
devi˚_ty≥
);

108 
	}
}

	@test-tool/test_iscsi_cmdsn_toohigh.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_cmd¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_cmd¢
) {

34 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
maxcmd¢
 + 1);

38 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

42 
ch™ge_cmd¢
 = 0;

44 
	}
}

46 
	$ã°_iscsi_cmd¢_toohigh
()

48 
ªt
;

50 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

51 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

52 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

54 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN > MAXCMDSN must be silently ignored byÅheÅarget");

55 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == MAXCMDSN+1. Should be ignored byÅheÅarget.");

57 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

58 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

59 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

60 
ch™ge_cmd¢
 = 1;

64 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

65 
	`iscsi_£t_timeout
(
iscsic
, 3);

67 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, -1);

69 i‡(
ªt
 == -1) {

70 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

72 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

78 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	}
}

	@test-tool/test_iscsi_cmdsn_toolow.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_cmd¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_cmd¢
) {

34 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
expcmd¢
 - 1);

38 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

42 
ch™ge_cmd¢
 = 0;

44 
	}
}

46 
	$ã°_iscsi_cmd¢_toﬁow
()

48 
ªt
;

50 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

51 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

52 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

54 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN < EXPCMDSN must be silently ignored byÅheÅarget");

55 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN-1. Should be ignored byÅheÅarget.");

57 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

58 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

59 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

60 
ch™ge_cmd¢
 = 1;

64 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

65 
	`iscsi_£t_timeout
(
iscsic
, 3);

67 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, -1);

69 i‡(
ªt
 == -1) {

70 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

72 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

77 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

78 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

79 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_iscsi_datasn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_d©a¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

31 
uöt32_t
 
d©a¢
;

33 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

36 
ch™ge_d©a¢
) {

39 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 0);

43 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 27);

47 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], -1);

51 
d©a¢
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[36]);

52 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 1 - 
d©a¢
);

56 
	}
}

58 
	$ã°_iscsi_d©a¢_övÆid
()

60 
ªt
;

61 *
buf
 = 
	`Æloˇ
(2 * 
block_size
);

63 
CHECK_FOR_DATALOSS
;

65 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

66 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI DATASN");

69 
	`loggög
(
LOG_VERBOSE
, "Send 2 DATAIN with DATASN==0. Should fail.");

70 
ch™ge_d©a¢
 = 1;

72 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

73 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

74 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

75 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

76 
	`iscsi_£t_timeout
(
iscsic
, 3);

78 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 2 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 0, 
buf
);

80 i‡(
ªt
 == -2) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

82 
	`CU_PASS
("WRITE10 isÇot implemented.");

85 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

87 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN with DATASN==27. Should fail");

91 
ch™ge_d©a¢
 = 2;

93 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

94 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

95 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

96 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

97 
	`iscsi_£t_timeout
(
iscsic
, 3);

99 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
buf
);

101 i‡(
ªt
 == -2) {

102 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

103 
	`CU_PASS
("WRITE10 isÇot implemented.");

106 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

108 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

111 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN with DATASN==-1. Should fail");

112 
ch™ge_d©a¢
 = 3;

114 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

115 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

116 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

117 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

118 
	`iscsi_£t_timeout
(
iscsic
, 3);

120 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 
block_size
,

121 
block_size
, 0, 0, 0, 0, 0, 
buf
);

122 i‡(
ªt
 == -2) {

123 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

124 
	`CU_PASS
("WRITE10 isÇot implemented.");

127 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

129 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

133 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN inÑeverse order (datasn == 1,0). Should fail");

134 
ch™ge_d©a¢
 = 4;

136 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

137 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

138 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

139 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

140 
	`iscsi_£t_timeout
(
iscsic
, 3);

142 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 2 * 
block_size
,

143 
block_size
, 0, 0, 0, 0, 0, 
buf
);

144 i‡(
ªt
 == -2) {

145 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

146 
	`CU_PASS
("WRITE10 isÇot implemented.");

149 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

151 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

152 
	}
}

	@test-tool/test_mandatory_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_m™d©‹y_sbc
()

30 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test support foráll mandatory opcodes on SBC devices");

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY.");

40 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 255, 
NULL
);

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10.");

44 
ªt
 = 
	`ªadˇ∑côy10
(
iscsic
, 
tgt_lun
, 0, 0);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 i‡(
sbc3_suµ‹t
) {

48 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16. The device claims SBC-3 support.");

49 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 15);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ10.");

54 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

55 0, 0, 0, 0, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 i‡(
sbc3_suµ‹t
) {

59 
	`loggög
(
LOG_VERBOSE
, "Test READ16.Åhe device claims SBC-3 support.");

60 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

61 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY.");

66 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_modesense6_all_pages.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_mode£n£6_Æl_∑ges
()

30 
scsi_mode_£n£
 *
ms
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 AllPages");

36 i‡(
èsk
 !
NULL
) {

37 
	`scsi_‰ì_scsi_èsk
(
èsk
);

38 
èsk
 = 
NULL
;

41 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 commandÅo fetch AllPages");

42 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

43 
SCSI_MODESENSE_PC_CURRENT
,

44 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

46 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

47 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

49 
	`iscsi_gë_îr‹
(
iscsic
));

50 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

53 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

56 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

57 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

58 i‡(
ms
 =
NULL
) {

59 
	`loggög
(
LOG_VERBOSE
, "[FAILED] failedÅo unmarshall mode sense "

61 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
èsk
 = 
NULL
;

66 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat mode dataÜength is >= 3");

70 i‡(
ms
->
mode_d©a_Àngth
 >= 3) {

71 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode dataÜength is >= 3");

73 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Mode dataÜength is < 3");

75 
	`CU_ASSERT_TRUE
(
ms
->
mode_d©a_Àngth
 >= 3);

78 i‡(
èsk
 !
NULL
) {

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
èsk
 = 
NULL
;

82 
	}
}

	@test-tool/test_modesense6_residuals.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_mode£n£6_ªsiduÆs
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 Residuals");

33 
	`loggög
(
LOG_VERBOSE
, "MODESENSE6 command shouldÇotÑesult inány "

37 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 4 bytes of "

39 i‡(
èsk
 !
NULL
) {

40 
	`scsi_‰ì_scsi_èsk
(
èsk
);

41 
èsk
 = 
NULL
;

43 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

44 
SCSI_MODESENSE_PC_CURRENT
,

45 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

47 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

48 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

50 
	`iscsi_gë_îr‹
(
iscsic
));

51 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

54 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

57 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we gotát most 4 bytes of DATA-IN");

58 i‡(
èsk
->
d©aö
.
size
 > 4) {

59 
	`loggög
(
LOG_NORMAL
, "[FAILED] got moreÅhan 4 bytes of "

62 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] <= 4 bytes of DATA-IN "

65 
	`CU_ASSERT_TRUE
(
èsk
->
d©aö
.
size
 <= 4);

68 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flagÇot set");

69 i‡(
èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_OVERFLOW
) {

70 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

73 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

77 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 255 bytes of "

79 i‡(
èsk
 !
NULL
) {

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
èsk
 = 
NULL
;

83 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

84 
SCSI_MODESENSE_PC_CURRENT
,

85 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

87 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

88 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

90 
	`iscsi_gë_îr‹
(
iscsic
));

91 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

94 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

97 i‡(
èsk
->
d©aö
.
size
 == 255) {

98 
	`loggög
(
LOG_VERBOSE
, "We gotáll 255 bytes of data back "

101 i‡(
èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_UNDERFLOW
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

105 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

108 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
ªsiduÆ_°©us
,

109 
SCSI_RESIDUAL_UNDERFLOW
);

111 
	`loggög
(
LOG_VERBOSE
, "We gotÜessÅhanÅheÑequested 255 bytes "

114 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

115 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set "

118 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

121 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
,

122 
SCSI_RESIDUAL_UNDERFLOW
);

126 i‡(
èsk
 !
NULL
) {

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
èsk
 = 
NULL
;

130 
	}
}

	@test-tool/test_nomedia_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_nomedü_sbc
()

30 
ªt
;

31 
buf
[4096];

32 
unm≠_li°
 
li°
[1];

34 
CHECK_FOR_SBC
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium commands fail when medium isÉjected on SBC devices");

39 i‡(!
öq
->
rmb
) {

40 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

45 
	`loggög
(
LOG_VERBOSE
, "EjectÅhe medium.");

46 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 0);

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY when medium isÉjected.");

50 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE10 when medium isÉjected.");

54 
ªt
 = 
	`synchr⁄izeˇche10_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 1);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE16 when medium isÉjected.");

63 
ªt
 = 
	`synchr⁄izeˇche16_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 1);

64 i‡(
ªt
 == -2) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ10 when medium isÉjected.");

72 
ªt
 = 
	`ªad10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

73 0, 0, 0, 0, 0, 
NULL
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "Test READ12 when medium isÉjected.");

77 
ªt
 = 
	`ªad12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

78 0, 0, 0, 0, 0, 
NULL
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	`loggög
(
LOG_VERBOSE
, "Test READ16 when medium isÉjected.");

82 
ªt
 = 
	`ªad16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

83 0, 0, 0, 0, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10 when medium isÉjected.");

87 
ªt
 = 
	`ªadˇ∑côy10_nomedium
(
iscsic
, 
tgt_lun
, 0, 0);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 when medium isÉjected.");

91 
ªt
 = 
	`ªadˇ∑côy16_nomedium
(
iscsic
, 
tgt_lun
, 15);

92 i‡(
ªt
 == -2) {

93 i‡(
sbc3_suµ‹t
) {

94 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

95 
	`CU_FAIL
("READCAPACITY16 failed butÅhe device claims SBC-3 support.");

97 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

100 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS when medium isÉjected.");

104 
ªt
 = 
	`gë_lba_°©us_nomedium
(
iscsic
, 
tgt_lun
, 0, 24);

105 i‡(
ªt
 == -2) {

106 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

109 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

112 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 when medium isÉjected.");

113 
ªt
 = 
	`¥e„tch10_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 0);

114 i‡(
ªt
 == -2) {

115 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

118 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

121 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 when medium isÉjected.");

122 
ªt
 = 
	`¥e„tch16_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 0);

123 i‡(
ªt
 == -2) {

124 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

130 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 when medium isÉjected.");

131 
ªt
 = 
	`vîify10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

132 0, 0, 1, 
buf
);

133 i‡(
ªt
 == -2) {

134 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

137 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

140 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 when medium isÉjected.");

141 
ªt
 = 
	`vîify12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

142 0, 0, 1, 
buf
);

143 i‡(
ªt
 == -2) {

144 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

147 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

150 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 when medium isÉjected.");

151 
ªt
 = 
	`vîify16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

152 0, 0, 1, 
buf
);

153 i‡(
ªt
 == -2) {

154 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

160 i‡(!
d©a_loss
) {

161 
	`loggög
(
LOG_VERBOSE
, "[SKIPPING] Dataloss flagÇot set. SkippingÅest for WRITE commands");

162 
föished
;

165 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 when medium isÉjected.");

166 
ªt
 = 
	`wrôe10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

167 0, 0, 0, 0, 0, 
buf
);

168 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

170 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 when medium isÉjected.");

171 
ªt
 = 
	`wrôe12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

172 0, 0, 0, 0, 0, 
buf
);

173 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

175 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 when medium isÉjected.");

176 
ªt
 = 
	`wrôe16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

177 0, 0, 0, 0, 0, 
buf
);

178 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

180 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 when medium isÉjected.");

181 
ªt
 = 
	`wrôevîify10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

182 0, 0, 0, 0, 
buf
);

183 i‡(
ªt
 == -2) {

184 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

187 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

190 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 when medium isÉjected.");

191 
ªt
 = 
	`wrôevîify12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

192 0, 0, 0, 0, 
buf
);

193 i‡(
ªt
 == -2) {

194 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

197 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

200 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 when medium isÉjected.");

201 
ªt
 = 
	`wrôevîify16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

202 0, 0, 0, 0, 
buf
);

203 i‡(
ªt
 == -2) {

204 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

207 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

210 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE when medium isÉjected.");

211 
ªt
 = 
	`‹wrôe_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

212 0, 0, 0, 0, 0, 
buf
);

213 i‡(
ªt
 == -2) {

214 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

217 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

220 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREWRITE when medium isÉjected.");

221 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] TestÇot implemented yet");

223 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 when medium isÉjected.");

224 
ªt
 = 
	`wrôeßme10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

225 1, 0, 0, 0, 0, 
buf
);

226 i‡(
ªt
 == -2) {

227 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

230 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

233 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 when medium isÉjected.");

234 
ªt
 = 
	`wrôeßme16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

235 1, 0, 0, 0, 0, 
buf
);

236 i‡(
ªt
 == -2) {

237 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

240 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP when medium isÉjected.");

244 
li°
[0].
lba
 = 0;

245 
li°
[0].
num
 = 
lbµb
;

246 
ªt
 = 
	`unm≠_nomedium
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

247 i‡(
ªt
 == -2) {

248 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

251 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

255 
föished
:

256 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain.");

257 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

258 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

259 
	}
}

	@test-tool/test_orwrite_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_‹wrôe_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==0");

36 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

37 0, 
block_size
,

38 0, 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

41 
	`CU_PASS
("ORWRITE isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocks one blockÖastÉnd-of-LUN");

47 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

48 0, 
block_size
,

49 0, 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==2^63");

54 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

55 0, 
block_size
,

56 0, 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==-1");

61 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_orwrite_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_‹wrôe_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

44 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size,

46 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

49 
	`CU_PASS
("ORWRITE isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==2^63");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

61 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

63 
i
 * 
block_size
, block_size,

64 0, 0, 0, 0, 0, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

76 
i
 * 
block_size
, block_size,

77 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

88 
num_blocks
 - 1,

89 
i
 * 
block_size
, block_size,

90 0, 0, 0, 0, 0, 
buf
);

91 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
	}
}

	@test-tool/test_orwrite_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE flags");

41 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1");

42 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

43 
block_size
, block_size,

44 0, 1, 0, 0, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_orwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

49 
	`CU_PASS
("ORWRITE isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_orwrite_verify.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_‹wrôe_vîify
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 *
ªadbuf
 = 
	`Æloˇ
(256 * 
block_size
);

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

49 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

50 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 0, 0, 0, 
buf
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

55 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

56 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

57 
block_size
, 0, 0, 0, 0, 0, 
buf
);

58 i‡(
ªt
 == -2) {

59 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

60 
	`CU_PASS
("ORWRITE isÇot implemented.");

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

66 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

67 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

71 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

75 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

76 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

81 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

82 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

83 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

86 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

87 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

92 
i
 = 1; i <= 256; i++) {

93 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

97 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

98 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

99 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
buf
);

101 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

104 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

105 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

106 
block_size
, 0, 0, 0, 0, 0, 
buf
);

107 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

110 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

111 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

112 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

115 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

116 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

118 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

119 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

120 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

121 
block_size
, 0, 0, 0, 0, 0, 
buf
);

122 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

124 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

125 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

126 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

130 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

131 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

132 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

134 
	}
}

	@test-tool/test_orwrite_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`‹wrôe_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

52 
	`CU_PASS
("ORWRITE isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_prefetch10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_¥e„tch10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==0");

33 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

37 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 i‡(
num_blocks
 > 0x80000000) {

43 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

47 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocks one blockÖastÉnd-of-LUN");

48 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==2^31");

54 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==-1");

60 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_prefetch10_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch10_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with PREFETCH10. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

41 
i
, 0, 0);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

44 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==2^31");

52 
i
 = 1; i <= 256; i++) {

53 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

54 
i
, 0, 0);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 
i
, 0, 0);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 2-256 blocksáll but one block beyondÅheÉnd");

68 
i
 = 2; i <= 256; i++) {

69 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

70 
i
, 0, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	}
}

	@test-tool/test_prefetch10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch10_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 flags");

36 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED==1");

37 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

41 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with GROUP==3");

47 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED=1ánd GROUP==3");

52 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_prefetch10_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch10_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0, 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i, 0, 0);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	}
}

	@test-tool/test_prefetch16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_¥e„tch16_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==0");

33 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

37 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==2^63");

49 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==-1");

55 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_prefetch16_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch16_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocks one block beyondÅheÉnd");

34 
i
 = 1; i <= 256; i++) {

35 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

36 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==2^63");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

49 
i
, 0, 0);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==-1");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

57 
i
, 0, 0);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 2-256 blocksáll but one block beyondÅheÉnd");

63 
i
 = 2; i <= 256; i++) {

64 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

65 
i
, 0, 0);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_prefetch16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch16_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 flags");

36 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED==1");

37 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

41 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with GROUP==3");

47 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED=1ánd GROUP==3");

52 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_prefetch16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch16_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0, 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i, 0, 0);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	}
}

	@test-tool/test_preventallow_2_itnexuses.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_2_ô√xu£s
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat PREVENT MEDIUM REMOVALáre seen on otherÇexusesás well");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

51 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

52 i‡(
iscsic2
 =
NULL
) {

53 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

57 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium onÅhe second connection");

58 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic2
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "LogoutÅhe second connection fromÅarget");

63 
	`iscsi_logout_sync
(
iscsic2
);

64 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

68 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

69 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

70 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

74 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	}
}

	@test-tool/test_preventallow_cold_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_cﬁd_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform coldÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

53 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

54 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_preventallow_eject.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_eje˘
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat we canÇotÉject medium when PREVENT isáctive");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

51 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

55 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

59 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

63 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "TryÅoÜoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENT flag");

71 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain");

75 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_preventallow_itnexus_loss.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_ô√xus_loss
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat IT-NexusÜoss clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

52 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

54 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

55 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

56 i‡(
iscsic
 =
NULL
) {

57 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

61 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

62 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

66 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

70 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

75 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

76 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

80 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	}
}

	@test-tool/test_preventallow_logout.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_logout
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat LogoutÜoss clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

52 
	`iscsi_logout_sync
(
iscsic
);

53 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

55 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

56 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

57 i‡(
iscsic
 =
NULL
) {

58 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

62 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

63 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

67 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

71 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

76 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

77 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

81 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

82 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

84 
	}
}

	@test-tool/test_preventallow_lun_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_lun_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform LUNÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

55 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_preventallow_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_sim∂e
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test PREVENTALLOW basics");

38 
	`loggög
(
LOG_VERBOSE
, "Test we can set PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

43 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	}
}

	@test-tool/test_preventallow_warm_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_w¨m_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform warmÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

55 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_prin_read_keys_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥ö_ªad_keys_sim∂e
()

32 
ªt
 = 0;

33 
Æ
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN READ_KEYS works.");

39 
ªt
 = 
	`¥ö_ªad_keys
(
iscsic
, 
tgt_lun
, &
èsk
, 
NULL
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE IN isÇot implemented.");

42 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Test DATA-IN isátÜeast 8 bytes.");

48 i‡(
èsk
->
d©aö
.
size
 < 8) {

49 
	`loggög
(
LOG_NORMAL
,

54 
	`loggög
(
LOG_VERBOSE
, "Test ADDITIONAL_LENGTH matches DATA_IN size.");

55 
Æ
 = 
	`scsi_gë_uöt32
(&
èsk
->
d©aö
.
d©a
[4]);

56 i‡(
Æ
 !
èsk
->
d©aö
.
size
 - 8) {

57 
	`loggög
(
LOG_NORMAL
,

59 
Æ
, 
èsk
->
d©aö
.
size
 - 8);

62 
	}
}

	@test-tool/test_prin_serviceaction_range.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥ö_£rvi˚a˘i⁄_ønge
()

32 
ªt
 = 0;

33 
i
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN ServiceactionÑange.");

40 
ªt
 = 
	`¥ö_ªad_keys
(
iscsic
, 
tgt_lun
, &
èsk
, 
NULL
);

41 i‡(
ªt
 == -2) {

42 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE IN isÇot implemented.");

43 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
i
 = 0; i < 4; i++) {

50 
ªt
 = 
	`¥ö_èsk
(
iscsic
, 
tgt_lun
, 
i
, 1);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
i
 = 4; i < 0x20; i++) {

56 
ªt
 = 
	`¥ö_èsk
(
iscsic
, 
tgt_lun
, 
i
, 0);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	}
}

	@test-tool/test_prout_register_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥out_ªgi°î_sim∂e
()

32 c⁄° 
key
 = 
	`ønd_key
();

33 
ªt
 = 0;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN REGISTER works.");

40 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsic
, 
tgt_lun
, 
key
);

41 i‡(
ªt
 == -2) {

42 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

43 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsic
, 
tgt_lun
, 
key
, 1);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
ªt
 = 
	`¥out_ªªgi°î_key_Áûs
(
iscsic
, 
tgt_lun
, 
key
+1);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsic
, 
tgt_lun
, 0, 
key
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsic
, 
tgt_lun
, 
key
, 0);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_prout_reserve_access.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsi_c⁄ãxt
 *
iscsi1
, 
lun1
,

29 
iscsi_c⁄ãxt
 *
iscsi2
, 
lun2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªg_i2_ˇn_ªad
,

32 
ªg_i2_ˇn_wrôe
,

33 
uƒeg_i2_ˇn_ªad
,

34 
uƒeg_i2_ˇn_wrôe
)

36 
ªt
;

37 c⁄° 
key
 = 
	`ønd_key
();

38 c⁄° 
key2
 = 
	`ønd_key
();

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
,

44 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

47 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi1
, 
lun1
);

48 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

51 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi1
, 
lun1
, 
key
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

54 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

57 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

58 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

59 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

62 
ªt
 = 
	`¥out_ª£rve
(
iscsi1
, 
lun1
, 
key
, 
¥_ty≥
);

63 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

66 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

67 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

68 
¥_ty≥
);

69 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

71 
ªad_wrôe_buf
 = 
	`mÆloc
(512);

72 
	`CU_ASSERT_PTR_NOT_NULL
(
ªad_wrôe_buf
);

75 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi1
, 
lun1
, 
ªad_wrôe_buf
);

76 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

79 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi1
, 
lun1
, 
ªad_wrôe_buf
);

80 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

83 i‡(
ªg_i2_ˇn_ªad
)

84 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

86 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

87 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

90 i‡(
ªg_i2_ˇn_wrôe
)

91 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

93 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

94 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

97 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

98 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

101 i‡(
uƒeg_i2_ˇn_ªad
)

102 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

104 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

105 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

108 i‡(
uƒeg_i2_ˇn_wrôe
)

109 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

111 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

112 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

115 
ªt
 = 
	`¥out_ªÀa£
(
iscsi1
, 
lun1
, 
key
, 
¥_ty≥
);

116 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

119 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi1
, 
lun1
, 0, 
key
);

120 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

121 
	}
}

124 
	$ã°_¥out_ª£rve_ac˚ss_ó
()

126 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

127 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

129 
	}
}

132 
	$ã°_¥out_ª£rve_ac˚ss_we
()

134 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

135 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

137 
	}
}

140 
	$ã°_¥out_ª£rve_ac˚ss_óro
()

142 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

143 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

145 
	}
}

148 
	$ã°_¥out_ª£rve_ac˚ss_wîo
()

150 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

151 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

153 
	}
}

156 
	$ã°_¥out_ª£rve_ac˚ss_ó¨
()

158 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

159 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

161 
	}
}

164 
	$ã°_¥out_ª£rve_ac˚ss_wór
()

166 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

167 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

169 
	}
}

	@test-tool/test_prout_reserve_ownership.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsi_c⁄ãxt
 *
iscsi1
, 
lun1
,

29 
iscsi_c⁄ãxt
 *
iscsi2
, 
lun2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªsvn_is_sh¨ed
)

33 
ªt
;

34 c⁄° 
key1
 = 
	`ønd_key
();

35 c⁄° 
key2
 = 
	`ønd_key
();

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
,

41 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

44 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi1
, 
lun1
);

45 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

48 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi1
, 
lun1
, 
key1
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

51 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

54 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

55 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

56 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

59 
ªt
 = 
	`¥out_ª£rve
(
iscsi1
, 
lun1
, 
key1
, 
¥_ty≥
);

60 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

63 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

64 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

65 
¥_ty≥
);

66 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

69 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi1
, 
lun1
, 0, 
key1
);

70 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

73 i‡(
ªsvn_is_sh¨ed
) {

75 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

76 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

77 
¥_ty≥
);

78 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

81 
ªt
 = 
	`¥out_ªÀa£
(
iscsi2
, 
lun2
, 
key2
, 
¥_ty≥
);

82 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

85 
ªt
 = 
	`¥ö_vîify_nŸ_ª£rved
(
iscsi1
, 
lun1
);

86 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

89 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

93 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key2
);

94 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

95 
	}
}

98 
	$ã°_¥out_ª£rve_ow√rshù_ó
()

100 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

101 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
, 0);

102 
	}
}

105 
	$ã°_¥out_ª£rve_ow√rshù_we
()

107 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

108 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
, 0);

109 
	}
}

112 
	$ã°_¥out_ª£rve_ow√rshù_óro
()

114 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

115 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
, 0);

116 
	}
}

119 
	$ã°_¥out_ª£rve_ow√rshù_wîo
()

121 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

122 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
, 0);

123 
	}
}

126 
	$ã°_¥out_ª£rve_ow√rshù_ó¨
()

128 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

129 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
, 1);

130 
	}
}

133 
	$ã°_¥out_ª£rve_ow√rshù_wór
()

135 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

136 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
, 1);

137 
	}
}

	@test-tool/test_prout_reserve_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

32 
scsi_≥rsi°ít_out_ty≥
 
	g¥_ty≥s_to_ã°
[] = {

33 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

34 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

35 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

37 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

38 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

44 
	$ã°_¥out_ª£rve_sim∂e
()

46 
ªt
 = 0;

47 
i
;

48 c⁄° 
key
 = 
	`ønd_key
();

51 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

52 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN RESERVE works.");

55 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsic
, 
tgt_lun
, 
key
);

56 i‡(
ªt
 == -2) {

57 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

58 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

65 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 = 
¥_ty≥s_to_ã°
[
i
];

68 
ªt
 = 
	`¥out_ª£rve
(
iscsic
, 
tgt_lun
, 
key
, 
¥_ty≥
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsic
, 
tgt_lun
,

73 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

74 
¥_ty≥
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
ªt
 = 
	`¥out_ªÀa£
(
iscsic
, 
tgt_lun
, 
key
, 
¥_ty≥
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsic
, 
tgt_lun
, 0, 
key
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_read10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==0");

33 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 0, 0, 0, 
NULL
);

35 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

37 i‡(
num_blocks
 > 0x80000000) {

38 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

42 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==2^31");

49 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0, 
block_size
,

50 0, 0, 0, 0, 0, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==-1");

55 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_read10_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad10_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ10. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

44 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
NULL
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==2^31");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

56 
i
 * 
block_size
, block_size,

57 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==-1");

63 
i
 = 1; i <= 256; i++) {

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

68 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test READ10 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size,

80 0, 0, 0, 0, 0, 
NULL
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	}
}

	@test-tool/test_read10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ10 flags");

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1");

39 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==1 FUA_NV==0");

46 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

47 
block_size
, block_size,

48 0, 0, 1, 0, 0, 
NULL
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==1 FUA_NV==1");

53 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 1, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==0 FUA_NV==1");

60 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 0, 1, 0, 
NULL
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1 FUA==1 FUA_NV==1");

67 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 1, 1, 1, 0, 
NULL
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	}
}

	@test-tool/test_read10_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_ªad10_övÆid
()

34 
iscsi_d©a
 
d©a
;

35 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
scsi_èsk
 *
èsk_ªt
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test invalid READ10 commands");

40 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

44 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

46 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

47 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

48 
èsk
->
cdb
[8] = 1;

49 
èsk
->
cdb_size
 = 10;

50 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

51 
èsk
->
expx„æí
 = 0;

57 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

60 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

62 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

63 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

64 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

66 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

69 
	`iscsi_gë_îr‹
(
iscsic
));

71 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

73 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

74 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

75 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

78 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

80 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

81 
block_size
);

82 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

83 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

85 
block_size
, 
èsk
->
ªsiduÆ
);

87 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
èsk
 = 
NULL
;

92 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

95 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

96 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

97 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

99 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

100 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

101 
èsk
->
cdb
[8] = 1;

102 
èsk
->
cdb_size
 = 10;

103 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

104 
èsk
->
expx„æí
 = 10000;

106 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

109 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

111 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

112 
	`iscsi_gë_îr‹
(
iscsic
));

114 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

116 
	`loggög
(
LOG_VERBOSE
, "Verify we gotá whole block back fromÅheÅarget");

117 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

119 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

120 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

124 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

126 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

127 10000 - 
block_size
);

128 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

131 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
èsk
 = 
NULL
;

139 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

140 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

141 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

143 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

144 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

145 
èsk
->
cdb
[8] = 1;

146 
èsk
->
cdb_size
 = 10;

147 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

148 
èsk
->
expx„æí
 = 200;

150 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

151 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

153 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

155 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

156 
	`iscsi_gë_îr‹
(
iscsic
));

158 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

160 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

161 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

164 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

168 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

170 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

171 
block_size
 - 200);

172 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

175 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

177 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

179 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
èsk
 = 
NULL
;

184 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

185 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

186 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

187 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

189 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

190 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

191 
èsk
->
cdb
[8] = 2;

192 
èsk
->
cdb_size
 = 10;

193 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

194 
èsk
->
expx„æí
 = 
block_size
;

196 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

197 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

199 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

200 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

201 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

202 
	`iscsi_gë_îr‹
(
iscsic
));

204 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

206 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

207 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

209 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

210 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

211 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

214 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

216 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

217 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

220 
block_size
, 
èsk
->
ªsiduÆ
);

222 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
èsk
 = 
NULL
;

229 
	`loggög
(
LOG_VERBOSE
, "Try READ10 for one block but flag itásá write onÅhe iSCSIÜayer.");

230 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

231 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

233 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

234 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

235 
èsk
->
cdb
[8] = 1;

236 
èsk
->
cdb_size
 = 10;

237 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

238 
èsk
->
expx„æí
 = 
block_size
;

240 
d©a
.
size
 = 
block_size
;

241 
d©a
.d©®(*)
buf
;

243 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

244 
	`iscsi_£t_timeout
(
iscsic
, 3);

245 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

246 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

247 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

249 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

250 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

251 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

252 
	`iscsi_gë_îr‹
(
iscsic
));

254 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

256 
èsk
 = 
NULL
;

258 
	}
}

	@test-tool/test_read10_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_rd¥Ÿe˘
()

31 
i
, 
ªt
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 withÇon-zero RDPROTECT");

40 
CHECK_FOR_SBC
;

42 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

43 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

44 
i
 = 1; i < 8; i++) {

45 
ªt
 = 
	`ªad10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

46 
block_size
, block_size,

47 
i
, 0, 0, 0, 0, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

54 
	}
}

	@test-tool/test_read10_residuals.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~<CUnô/CUnô.h
>

28 
	~"iscsi.h
"

29 
	~"iscsi-¥iv©e.h
"

30 
	~"scsi-lowÀvñ.h
"

31 
	~"iscsi-ã°-cu.h
"

35 
	$ã°_ªad10_ªsiduÆs
()

37 
scsi_èsk
 *
èsk_ªt
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test READ10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

45 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

47 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

48 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

49 
èsk
->
cdb
[8] = 1;

50 
èsk
->
cdb_size
 = 10;

51 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

52 
èsk
->
expx„æí
 = 0;

58 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

61 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

63 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

64 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

65 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

67 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

69 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

70 
	`iscsi_gë_îr‹
(
iscsic
));

72 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

74 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

75 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

76 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

79 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

81 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

82 
block_size
);

83 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

84 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

86 
block_size
, 
èsk
->
ªsiduÆ
);

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
èsk
 = 
NULL
;

93 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

96 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

97 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

98 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

100 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

101 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

102 
èsk
->
cdb
[8] = 1;

103 
èsk
->
cdb_size
 = 10;

104 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

105 
èsk
->
expx„æí
 = 10000;

107 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

108 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

110 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

111 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

112 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

113 
	`iscsi_gë_îr‹
(
iscsic
));

115 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

117 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

118 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

121 
èsk
->
d©aö
.
size
,
block_size
);

123 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

125 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

126 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

127 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

130 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

132 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

133 10000 - 
block_size
);

134 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

135 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

137 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

139 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
èsk
 = 
NULL
;

144 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

145 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

146 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

148 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

149 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

150 
èsk
->
cdb
[8] = 1;

151 
èsk
->
cdb_size
 = 10;

152 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

153 
èsk
->
expx„æí
 = 200;

155 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

156 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

158 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

159 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

160 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

161 
	`iscsi_gë_îr‹
(
iscsic
));

163 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

165 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

166 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

168 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

169 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

170 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

173 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

175 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

176 
block_size
 - 200);

177 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

178 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

180 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

182 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

185 
èsk
 = 
NULL
;

189 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

190 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

191 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

192 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

194 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

195 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

196 
èsk
->
cdb
[8] = 2;

197 
èsk
->
cdb_size
 = 10;

198 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

199 
èsk
->
expx„æí
 = 
block_size
;

201 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

204 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

207 
	`iscsi_gë_îr‹
(
iscsic
));

209 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

211 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

212 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

214 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

215 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

216 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

219 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

221 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

222 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

223 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

225 
block_size
, 
èsk
->
ªsiduÆ
);

227 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

229 
	`scsi_‰ì_scsi_èsk
(
èsk
);

230 
èsk
 = 
NULL
;

231 
	}
}

	@test-tool/test_read10_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

51 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

52 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_read12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad12_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==0");

33 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 0, 0, 0, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

37 
	`CU_PASS
("READ12 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 i‡(
num_blocks
 > 0x80000000) {

43 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

47 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocks one blockÖastÉnd-of-LUN");

48 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

49 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==2^31");

54 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0, 
block_size
,

55 0, 0, 0, 0, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==-1");

60 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

61 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_read12_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad12_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ12. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

44 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
NULL
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

48 
	`CU_PASS
("READ12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==2^31");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

61 
i
 * 
block_size
, block_size,

62 0, 0, 0, 0, 0, 
NULL
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==-1");

68 
i
 = 1; i <= 256; i++) {

69 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

72 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

73 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	`loggög
(
LOG_VERBOSE
, "Test READ12 2-256 blocksáll but one block beyondÅheÉnd");

79 
i
 = 2; i <= 256; i++) {

80 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

83 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

84 
i
 * 
block_size
, block_size,

85 0, 0, 0, 0, 0, 
NULL
);

86 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

88 
	}
}

	@test-tool/test_read12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ12 flags");

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1");

39 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

44 
	`CU_PASS
("READ12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==1 FUA_NV==0");

51 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

52 
block_size
, block_size,

53 0, 0, 1, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==1 FUA_NV==1");

58 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

59 
block_size
, block_size,

60 0, 0, 1, 1, 0, 
NULL
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==0 FUA_NV==1");

65 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

66 
block_size
, block_size,

67 0, 0, 0, 1, 0, 
NULL
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1 FUA==1 FUA_NV==1");

72 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

73 
block_size
, block_size,

74 0, 1, 1, 1, 0, 
NULL
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_read12_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_rd¥Ÿe˘
()

31 
i
, 
ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ12 withÇon-zero RDPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

49 
	`CU_PASS
("READ12 isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

58 
	}
}

	@test-tool/test_read12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ªad12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ12 commands withÑesiduals");

37 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

39 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

40 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

42 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

43 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

44 
èsk
->
cdb
[9] = 1;

45 
èsk
->
cdb_size
 = 12;

46 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

47 
èsk
->
expx„æí
 = 0;

53 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

56 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

58 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

59 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

60 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

62 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


63 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


64 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented onÅhisÅarget.");

66 
	`CU_PASS
("READ12 isÇot implemented.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

72 
	`iscsi_gë_îr‹
(
iscsic
));

74 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

77 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

83 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

84 
block_size
);

85 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

88 
block_size
, 
èsk
->
ªsiduÆ
);

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
èsk
 = 
NULL
;

95 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

102 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

103 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

104 
èsk
->
cdb
[9] = 1;

105 
èsk
->
cdb_size
 = 12;

106 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

107 
èsk
->
expx„æí
 = 10000;

109 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

110 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

112 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

115 
	`iscsi_gë_îr‹
(
iscsic
));

117 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

119 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

120 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

123 
èsk
->
d©aö
.
size
,
block_size
);

125 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

127 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

128 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

132 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

134 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

135 10000 - 
block_size
);

136 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

139 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
èsk
 = 
NULL
;

146 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

147 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

148 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

150 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

151 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

152 
èsk
->
cdb
[9] = 1;

153 
èsk
->
cdb_size
 = 12;

154 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

155 
èsk
->
expx„æí
 = 200;

157 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

160 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

162 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

163 
	`iscsi_gë_îr‹
(
iscsic
));

165 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

167 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

168 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

198 
èsk
->
cdb
[9] = 2;

199 
èsk
->
cdb_size
 = 12;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

204 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

206 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

207 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

208 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

209 
	`iscsi_gë_îr‹
(
iscsic
));

211 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

213 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

214 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

217 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

221 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

223 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

224 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

227 
block_size
, 
èsk
->
ªsiduÆ
);

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
èsk
 = 
NULL
;

233 
	}
}

	@test-tool/test_read12_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

44 
	`CU_PASS
("READ12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

52 
i
 = 1; i <= 256; i++) {

53 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

56 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	}
}

	@test-tool/test_read16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_SBC
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==0");

35 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

36 0, 0, 0, 0, 0, 
NULL
);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

39 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocks one blockÖastÉnd-of-LUN");

45 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

46 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==2^63");

51 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

52 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==-1");

57 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

58 0, 0, 0, 0, 0, 
NULL
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	}
}

	@test-tool/test_read16_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ûog2
(
size_t
 
i
)

29 
j
 = -1;

31 
i
) {

32 
i
 >>= 1;

33 
j
++;

35  
j
;

36 
	}
}

39 
	$ã°_ªad16_bey⁄d_eﬁ
()

41 
i
, 
ªt
;

43 
CHECK_FOR_SBC
;

45 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocks one block beyondÅheÉnd");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

52 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

53 
i
 * 
block_size
, block_size,

54 0, 0, 0, 0, 0, 
NULL
);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

57 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^63");

65 
i
 = 1; i <= 256; i++) {

66 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

70 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

71 
i
 * 
block_size
, block_size,

72 0, 0, 0, 0, 0, 
NULL
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

78 64 - 
	`ûog2
(
block_size
));

79 
i
 = 1; i <= 256; i++) {

80 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

84 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

85 1ULL << (64 - 
	`ûog2
(
block_size
)),

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
NULL
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

93 63 - 
	`ûog2
(
block_size
));

94 
i
 = 1; i <= 256; i++) {

95 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

99 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

100 1ULL << (63 - 
	`ûog2
(
block_size
)),

101 
i
 * 
block_size
, block_size,

102 0, 0, 0, 0, 0, 
NULL
);

103 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

107 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==-1");

108 
i
 = 1; i <= 256; i++) {

109 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

113 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

114 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

115 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

119 
	`loggög
(
LOG_VERBOSE
, "Test READ16 2-256 blocksáll but one block beyondÅheÉnd");

120 
i
 = 2; i <= 256; i++) {

121 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

125 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

126 
i
 * 
block_size
, block_size,

127 0, 0, 0, 0, 0, 
NULL
);

128 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

130 
	}
}

	@test-tool/test_read16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_Êags
()

31 
ªt
;

33 
CHECK_FOR_SBC
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 flags");

38 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1");

39 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

44 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==1 FUA_NV==0");

51 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

52 
block_size
, block_size,

53 0, 0, 1, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==1 FUA_NV==1");

58 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

59 
block_size
, block_size,

60 0, 0, 1, 1, 0, 
NULL
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==0 FUA_NV==1");

65 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

66 
block_size
, block_size,

67 0, 0, 0, 1, 0, 
NULL
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1 FUA==1 FUA_NV==1");

72 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

73 
block_size
, block_size,

74 0, 1, 1, 1, 0, 
NULL
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_read16_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_rd¥Ÿe˘
()

31 
i
, 
ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ16 withÇon-zero RDPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot imÜemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

49 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

57 
	}
}

	@test-tool/test_read16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ªad16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 commands withÑesiduals");

37 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

39 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

40 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

42 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

43 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

44 
èsk
->
cdb
[13] = 1;

45 
èsk
->
cdb_size
 = 16;

46 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

47 
èsk
->
expx„æí
 = 0;

53 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

56 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

58 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

59 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

60 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

62 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


63 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


64 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

66 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

72 
	`iscsi_gë_îr‹
(
iscsic
));

74 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

77 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

83 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

84 
block_size
);

85 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

88 
block_size
, 
èsk
->
ªsiduÆ
);

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
èsk
 = 
NULL
;

95 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

102 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

103 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

104 
èsk
->
cdb
[13] = 1;

105 
èsk
->
cdb_size
 = 16;

106 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

107 
èsk
->
expx„æí
 = 10000;

109 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

110 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

112 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

115 
	`iscsi_gë_îr‹
(
iscsic
));

117 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

119 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

120 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

123 
èsk
->
d©aö
.
size
,
block_size
);

125 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

127 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

128 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

132 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

134 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

135 10000 - 
block_size
);

136 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

139 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
èsk
 = 
NULL
;

146 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

147 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

148 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

150 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

151 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

152 
èsk
->
cdb
[13] = 1;

153 
èsk
->
cdb_size
 = 16;

154 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

155 
èsk
->
expx„æí
 = 200;

157 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

160 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

162 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

163 
	`iscsi_gë_îr‹
(
iscsic
));

165 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

167 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

168 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

198 
èsk
->
cdb
[13] = 2;

199 
èsk
->
cdb_size
 = 16;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

204 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

206 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

207 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

208 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

209 
	`iscsi_gë_îr‹
(
iscsic
));

211 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

213 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

214 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

217 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

221 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

223 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

224 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

227 
block_size
, 
èsk
->
ªsiduÆ
);

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
èsk
 = 
NULL
;

233 
	}
}

	@test-tool/test_read16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_sim∂e
()

31 
i
, 
ªt
;

33 
CHECK_FOR_SBC
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

42 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

43 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

46 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_read6_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad6_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x1fffff) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 255; i++) {

41 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

42 
i
 * 
block_size
, block_size,

43 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

46 
	`CU_PASS
("READ6 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocksát LBA==0x1fffff");

54 
i
 = 1; i <= 255; i++) {

55 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x1fffff,

56 
i
 * 
block_size
, block_size,

57 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test READ6 2-255 blocksáll but one block beyondÅheÉnd");

63 
i
 = 2; i <= 255; i++) {

64 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

65 
i
 * 
block_size
, block_size,

66 
NULL
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	}
}

	@test-tool/test_read6_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad6_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 255; i++) {

37 
ªt
 = 
	`ªad6
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

38 
block_size
, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

41 
	`CU_PASS
("READ6 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅheÉnd ofÅhe LUN");

49 i‡(
num_blocks
 >= 0x1fffff) {

50 
	`CU_PASS
("LUN isÅoo big forÑead-at-eolÅests with READ6. SkippingÅest.\n");

52 
i
 = 1; i <= 255; i++) {

53 
ªt
 = 
	`ªad6
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "TransferÜength == 0 means we wantÅoÅransfer "

62 
	`loggög
(
LOG_VERBOSE
, "Test sendingá READ6 withÅransferÜength == 0 "

65 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsic
, 
tgt_lun
, 0,

66 256 * 
block_size
, block_size);

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 command: "

69 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

71 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

73 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we did get 256 blocks of data back");

74 i‡(
èsk
->
d©aö
.
size
 =()(256 * 
block_size
)) {

75 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] TargetÑeturned 256 blocks of "

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] Target didÇotÑeturn 256 "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()(256 * 
block_size
));

82 
	}
}

	@test-tool/test_readcapacity10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy10_sim∂e
()

32 
ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test basic READCAPACITY10");

38 
ªt
 = 
	`ªadˇ∑côy10
(
iscsic
, 
tgt_lun
, 0, 0);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

40 
	}
}

	@test-tool/test_readcapacity16_alloclen.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_Ælo˛í
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 withálloc_len 0-15 isÇotánÉrror");

37 
i
 = 0; i < 16; i++) {

38 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 
i
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

41 
	`CU_PASS
("READCAPACITY16 isÇot implementedándÇo SBC-3 support claimed.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	}
}

	@test-tool/test_readcapacity16_protection.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
()

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 Protection Information");

34 
CHECK_FOR_SBC
;

36 i‡(
rc16
 =
NULL
) {

37 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅarget.");

38 
	`CU_PASS
("READCAPACITY16 isÇot implemented.");

42 i‡(!
öq
->
¥Ÿe˘
) {

43 
	`loggög
(
LOG_VERBOSE
, "This device doesÇot support PI. "

47 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat PROT_EN is 0");

48 i‡(
rc16
->
¥Ÿ_í
) {

49 
	`loggög
(
LOG_VERBOSE
, "[FAILED] PROT_EN is set but "

54 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PROT_EN is 0");

56 
	`CU_ASSERT_EQUAL
(
rc16
->
¥Ÿ_í
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

59 i‡(
rc16
->
p_ty≥
) {

60 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

65 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

67 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

70 i‡(
rc16
->
p_i_exp
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

76 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

78 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

83 
	`loggög
(
LOG_VERBOSE
, "This device supports PI. "

85 i‡(!
rc16
->
¥Ÿ_í
) {

86 
	`loggög
(
LOG_VERBOSE
, "Protection isÇotÉnabled. Verify "

89 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

90 i‡(
rc16
->
p_ty≥
) {

91 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

94 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

96 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

99 i‡(
rc16
->
p_i_exp
) {

100 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

103 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

105 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

110 
	`loggög
(
LOG_VERBOSE
, "Protection isÉnabled. Verify "

112 
rc16
->
p_ty≥
) {

118 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE is invalid. Must be "

119 "0,1,2 buàwa†%d", 
rc16
->
p_ty≥
);

120 
	`CU_FAIL
("P_TYPE is invalid");

122 
	}
}

	@test-tool/test_readcapacity16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_sim∂e
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 works");

37 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 16);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim support.");

40 
	`CU_PASS
("READCAPACITY16 isÇot implementedándÇo SBC-3 support claimed.");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	}
}

	@test-tool/test_readonly_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad⁄ly_sbc
()

31 
ªt
;

32 
buf
[4096];

33 
unm≠_li°
 
li°
[1];

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_READONLY
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium write commands fail for READ-ONLY SBC devices");

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 fails with WRITE_PROTECTED");

44 
ªt
 = 
	`wrôe10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
buf
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 fails with WRITE_PROTECTED");

49 
ªt
 = 
	`wrôe12_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

50 0, 0, 0, 0, 0, 
buf
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 fails with WRITE_PROTECTED");

54 
ªt
 = 
	`wrôe16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

55 0, 0, 0, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 fails with WRITE_PROTECTED");

59 
ªt
 = 
	`wrôeßme10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, 1,

60 0, 0, 0, 0, 
buf
);

61 i‡(
ªt
 == -2) {

62 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME10Çot supported onÅarget. Skipped.");

64 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 fails with WRITE_PROTECTED");

67 
ªt
 = 
	`wrôeßme16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, 1,

68 0, 0, 0, 0, 
buf
);

69 i‡(
ªt
 == -2) {

70 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME16Çot supported onÅarget. Skipped.");

72 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

74 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 UNMAP fails with WRITE_PROTECTED");

75 
ªt
 = 
	`wrôeßme10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

76 
block_size
, 1,

77 0, 1, 0, 0, 
NULL
);

78 i‡(
ªt
 == -2) {

79 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME10Çot supported onÅarget. Skipped.");

81 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

83 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 UNMAP fails with WRITE_PROTECTED");

84 
ªt
 = 
	`wrôeßme16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

85 
block_size
, 1,

86 0, 1, 0, 0, 
NULL
);

87 i‡(
ªt
 == -2) {

88 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME16Çot supported onÅarget. Skipped.");

90 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

92 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÖhysical block fails with WRITE_PROTECTED");

93 
li°
[0].
lba
 = 0;

94 
li°
[0].
num
 = 
lbµb
;

95 
ªt
 = 
	`unm≠_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

96 i‡(
ªt
 == -2) {

97 
	`loggög
(
LOG_VERBOSE
, "UNMAPÇot supported onÅarget. Skipped.");

99 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

101 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÜogical block fails with WRITE_PROTECTED");

102 
li°
[0].
lba
 = 0;

103 
li°
[0].
num
 = 1;

104 
ªt
 = 
	`unm≠_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

105 i‡(
ªt
 == -2) {

106 
	`loggög
(
LOG_VERBOSE
, "UNMAPÇot supported onÅarget. Skipped.");

108 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

110 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 fails with WRITE_PROTECTED");

111 
ªt
 = 
	`wrôevîify10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

112 
block_size
, block_size,

113 0, 0, 0, 0, 
buf
);

114 i‡(
ªt
 == -2) {

115 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY10Çot supported onÅarget. Skipped.");

117 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

119 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 fails with WRITE_PROTECTED");

120 
ªt
 = 
	`wrôevîify12_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

121 
block_size
, block_size,

122 0, 0, 0, 0, 
buf
);

123 i‡(
ªt
 == -2) {

124 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY12Çot supported onÅarget. Skipped.");

126 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

128 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 fails with WRITE_PROTECTED");

129 
ªt
 = 
	`wrôevîify16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

130 
block_size
, block_size,

131 0, 0, 0, 0, 
buf
);

132 i‡(
ªt
 == -2) {

133 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY16Çot supported onÅarget. Skipped.");

135 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

137 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE fails with WRITE_PROTECTED");

138 
ªt
 = 
	`‹wrôe_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

139 
block_size
, block_size,

140 0, 0, 0, 0, 0, 
buf
);

141 i‡(
ªt
 == -2) {

142 
	`loggög
(
LOG_VERBOSE
, "ORWRITEÇot supported onÅarget. Skipped.");

144 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

147 
	`loggög
(
LOG_VERBOSE
, "Test for COMPAREANDWRITEÇot implemented yet.");

148 
	}
}

	@test-tool/test_report_supported_opcodes_one_command.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_èsk
 *
⁄e_èsk
;

34 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeading one-command");

41 
	`loggög
(
LOG_VERBOSE
, "FetchÜist ofáll supported opcodes");

42 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

43 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

44 65535, &
rso_èsk
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

48 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 != 0) {

56 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

57 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

58 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

61 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command works foráll supported "

63 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

64 
	`loggög
(
LOG_VERBOSE
, "Check opcode:0x%02x ServiceAction:0x%02x",

65 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

66 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

67 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

68 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

70 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(

71 
iscsic
, 
tgt_lun
,

72 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

73 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

74 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

75 65535, 
NULL
);

77 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

80 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

81 
iscsic
, 
tgt_lun
,

82 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

83 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

84 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

85 65535, 
NULL
);

87 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

89 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

90 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

92 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

93 
iscsic
, 
tgt_lun
,

94 0, 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

95 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

96 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

97 65535, 
NULL
);

99 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

102 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(

103 
iscsic
, 
tgt_lun
,

104 0, 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

105 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

106 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

107 65535, 
NULL
);

109 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command CDBÜooks sane");

114 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

115 
	`loggög
(
LOG_VERBOSE
, "Check CDB for opcode:0x%02x "

117 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

118 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

119 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

120 
iscsic
, 
tgt_lun
,

122 
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 ?

123 
SCSI_REPORT_SUPPORTING_SERVICEACTION
 :

124 
SCSI_REPORT_SUPPORTING_OPCODE
,

125 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

126 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

127 65535, &
⁄e_èsk
);

129 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

130 
rsoc_⁄e
 = 
	`scsi_d©aö_unm¨shÆl
(
⁄e_èsk
);

131 
	`CU_ASSERT_NOT_EQUAL
(
rsoc_⁄e
, 
NULL
);

133 
	`loggög
(
LOG_VERBOSE
, "Verify CDBÜength isÇot 0");

134 
	`CU_ASSERT_NOT_EQUAL
(
rsoc_⁄e
->
cdb_Àngth
, 0);

135 i‡(
rsoc_⁄e
->
cdb_Àngth
 == 0) {

136 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDBÜength is 0");

139 
	`loggög
(
LOG_VERBOSE
, "Verify CDB[0] Usage Data == <opcode>");

140 
	`CU_ASSERT_EQUAL
(
rsoc_⁄e
->
cdb_ußge_d©a
[0],

141 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

142 i‡(
rsoc_⁄e
->
cdb_ußge_d©a
[0] !
rsoc
->
des¸ùt‹s
[
i
].
›code
) {

143 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDB[0] Usage Data was "

145 
rsoc_⁄e
->
cdb_ußge_d©a
[0],

146 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

147 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

150 
	`scsi_‰ì_scsi_èsk
(
⁄e_èsk
);

154 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

155 
	}
}

	@test-tool/test_report_supported_opcodes_rctd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_r˘d
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES RCTD flag");

39 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

41 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

42 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

43 65535, &
rso_èsk
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

47 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 i‡(
ªt
 != 0) {

55 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

56 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

57 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

62 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

63 i‡(
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

64 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor with "

66 
	`CU_FAIL
("[FAILED] Command descriptor with "

71 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

74 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

76 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

77 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

78 65535, &
rso_èsk
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 i‡(
ªt
 != 0) {

84 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

85 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

86 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

88 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

90 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

91 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

94 
	`CU_FAIL
("[FAILED] Command descriptor without "

99 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÅimeout descriptors haveÅhe "

101 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

102 i‡(
rsoc
->
des¸ùt‹s
[
i
].
to
.
des¸ùt‹_Àngth
 != 0x0a) {

103 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

105 
	`CU_FAIL
("[FAILED] Command descriptor with "

110 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

111 
	}
}

	@test-tool/test_report_supported_opcodes_servactv.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES SERVACTV flag");

39 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

40 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

41 65535, &
rso_èsk
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

45 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 i‡(
ªt
 != 0) {

53 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

54 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

55 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

58 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat when SERVACTV is clearÅhen "

60 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

61 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 &&Ñsoc->des¸ùt‹s[i].
ß
) {

62 
	`loggög
(
LOG_NORMAL
, "[FAILED] ServiceAction is "

64 
	`CU_FAIL
("[FAILED] ServiceAction is "

69 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

70 
	}
}

	@test-tool/test_report_supported_opcodes_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test basic READ_SUPPORTED_OPCODES");

36 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

37 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

38 1024, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

42 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	}
}

	@test-tool/test_reserve6_2initiators.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_2öôüt‹s
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test RESERVE6/RELEASE6ácrossÅwo initiators");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_NORMAL
, "VerifyÅhatÅhe first initiator canÑe-RESERVE6Åhe sameÑeservation");

49 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

54 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

55 i‡(
iscsic2
 =
NULL
) {

56 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

60 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

61 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_NORMAL
, "TryÅo RELEASE fromÅhe second initiator. Should beáÇop");

66 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_NORMAL
, "Test we can still TESTUNITREADY fromÅhe first initiator");

71 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_NORMAL
, "TESTUNITREADY should fail fromÅhe second initiator");

75 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should still fail");

80 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe first initiator");

84 
ªt
 = 
	`ªÀa£6
(
iscsic
, 
tgt_lun
);

85 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

87 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

88 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

92 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

93 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
	`iscsi_logout_sync
(
iscsic2
);

96 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

97 
iscsic2
 = 
NULL
;

98 
	}
}

	@test-tool/test_reserve6_itnexus_loss.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_ô√xus_loss
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased on it-nexusÜoss");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

49 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

50 i‡(
iscsic2
 =
NULL
) {

51 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

60 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

62 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

63 
	`¶ìp
(3);

65 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

66 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

67 i‡(
iscsic
 =
NULL
) {

68 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

69 
föished
;

72 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

73 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

77 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsic2
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

83 
iscsic2
 = 
NULL
;

84 
	}
}

	@test-tool/test_reserve6_logout.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_logout
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜogout");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

49 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

50 i‡(
iscsic2
 =
NULL
) {

51 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

60 
	`iscsi_logout_sync
(
iscsic
);

61 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

63 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

64 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

65 i‡(
iscsic
 =
NULL
) {

66 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

70 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

71 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

75 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	`iscsi_logout_sync
(
iscsic2
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

80 
iscsic2
 = 
NULL
;

81 
	}
}

	@test-tool/test_reserve6_lun_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_lun_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜunÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

49 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

59 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

60 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

61 i‡(
iscsic2
 =
NULL
) {

62 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

66 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

67 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

71 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`iscsi_logout_sync
(
iscsic2
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

76 
iscsic2
 = 
NULL
;

77 
	}
}

	@test-tool/test_reserve6_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_sim∂e
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test basic RESERVE6/RELEASE6 commands if supported");

37 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

40 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`ªÀa£6
(
iscsic
, 
tgt_lun
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	}
}

	@test-tool/test_reserve6_target_cold_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_èrgë_cﬁd_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget coldÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold ResetÅoÅheÅarget");

49 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "CﬁdÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

58 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

59 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

60 i‡(
iscsic2
 =
NULL
) {

61 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

65 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

66 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

70 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`iscsi_logout_sync
(
iscsic2
);

74 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

75 
iscsic2
 = 
NULL
;

76 
	}
}

	@test-tool/test_reserve6_target_warm_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_èrgë_w¨m_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget warmÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm ResetÅoÅheÅarget");

49 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "W¨mÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

59 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

60 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

61 i‡(
iscsic2
 =
NULL
) {

62 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

67 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

68 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

72 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`iscsi_logout_sync
(
iscsic2
);

76 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

77 
iscsic2
 = 
NULL
;

78 
	}
}

	@test-tool/test_sanitize_block_erase.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

22 
	~<öây≥s.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$check_wabîeq
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

36 
èsk_ªt
 = 
	`ªad10_èsk
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

37 0, 0, 0, 0, 0, 
NULL
);

38 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

39 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

41 
öq_bdc
->
wabîeq
) {

43 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

45 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

49 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==1. Reads fromÅhe "

51 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

52 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

58 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

62 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==2. Reads fromÅhe "

64 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


65 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


66 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

72 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

75 
	`CU_FAIL
("[FAILED] Read should have failed "

80 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==3. Reads fromÅhe "

82 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


83 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


84 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

85 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

90 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

93 
	`CU_FAIL
("[FAILED] Read should have failed "

99 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

100 
	}
}

103 
	$check_unm≠
()

105 
i
;

106 
scsi_èsk
 *
èsk_ªt
;

107 
scsi_gë_lba_°©us
 *
lbas
;

108 
uöt64_t
 
lba
;

110 
	`loggög
(
LOG_VERBOSE
, "Read LBA mapping fromÅheÅarget");

111 
èsk_ªt
 = 
	`gë_lba_°©us_èsk
(
iscsic
, 
tgt_lun
, 0, 256);

112 i‡(
èsk_ªt
 =
NULL
) {

113 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

115 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

119 i‡(
èsk_ªt
->
°©us
 !
SCSI_STATUS_GOOD
) {

120 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

122 
	`iscsi_gë_îr‹
(
iscsic
));

123 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

125 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

130 
	`loggög
(
LOG_VERBOSE
, "Unmarshall LBA mapping datain buffer");

131 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk_ªt
);

132 i‡(
lbas
 =
NULL
) {

133 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo unmarshall LBA "

135 
	`CU_FAIL
("[FAILED] FailedÅoÑead unmarshall LBA mapping");

136 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

140 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast one status descriptor "

142 i‡(
lbas
->
num_des¸ùt‹s
 < 1) {

143 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WrongÇumber of LBA status "

145 
lbas
->
num_des¸ùt‹s
);

146 
	`CU_FAIL
("[FAILED] WrongÇumber of LBA status descriptors.");

147 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

151 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll descriptorsáreÉither "

153 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

154 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

155 
PRIu64
 "Åhat it isÇot MAPPED",

156 
i
,

157 
lbas
->
des¸ùt‹s
[
i
].
lba
,

158 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

159 i‡(
lbas
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 =
SCSI_PROVISIONING_TYPE_MAPPED
) {

160 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Descriptor %d is MAPPED."

162 "‹ ANCHOREDá·î SANITIZE", 
i
);

163 
	`CU_FAIL
("[FAILED] LBA status descriptor is MAPPED.");

167 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe descriptors coverÅhe whole LUN");

168 
lba
 = 0;

169 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

170 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

171 
PRIu64
 "Åhat it is in order",

172 
i
,

173 
lbas
->
des¸ùt‹s
[
i
].
lba
,

174 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

175 i‡(
lba
 !
lbas
->
des¸ùt‹s
[
i
].lba) {

176 
	`loggög
(
LOG_VERBOSE
, "[FAILED] LBA status descriptors "

178 
	`CU_FAIL
("[FAILED] LBA status descriptorsÇot in order");

180 
lba
 +
lbas
->
des¸ùt‹s
[
i
].
num_blocks
;

182 i‡(
lba
 !
num_blocks
) {

183 
	`loggög
(
LOG_VERBOSE
, "[FAILED] The LUN isÇot fully"

185 
	`CU_FAIL
("[FAILED] The LUN isÇot fully"

189 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

190 
	}
}

193 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

195 
ªt
;

197 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

198 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

199 
block_size
, 0, 0, 0, 0, 0, 
buf
);

200 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

201 
	}
}

204 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

206 
ªt
;

207 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

209 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

210 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

211 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

213 i‡(
rc16
 =
NULL
) {

217 i‡(
rc16
->
lb¥z
) {

218 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

219 
	`mem£t
(
zbuf
, 0, 256 * 
block_size
);

221 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All blocks "

223 i‡(
	`memcmp
(
zbuf
, 
rbuf
, 256 * 
block_size
)) {

224 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

226 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

229 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

233 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==0 Blocks shouldÇotÑead backás "

235 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

236 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

237 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

239 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

242 
	}
}

245 
	$ã°_ßnôize_block_îa£
()

247 
ªt
;

248 
iscsi_d©a
 
d©a
;

249 
scsi_comm™d_des¸ùt‹
 *
cd
;

250 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

252 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

253 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK ERASE");

255 
CHECK_FOR_SANITIZE
;

256 
CHECK_FOR_DATALOSS
;

258 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE BLOCK_ERASE is supported "

260 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

261 
SCSI_SANITIZE_BLOCK_ERASE
);

262 i‡(
cd
 =
NULL
) {

263 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

265 i‡(
öq_bdc
 && inq_bdc->
wabîeq
) {

266 
	`loggög
(
LOG_NORMAL
, "[FAILED] WABEREQ isÇot 0 but "

268 
	`CU_FAIL
("[FAILED] WABEREQ isÇot 0 but BLOCK ERASE "

272 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

274 
	`CU_PASS
("SANITIZE isÇot implemented.");

278 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

280 i‡(
öq_bdc
 =
NULL
) {

281 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

284 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

288 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have READCAPACITY16");

289 i‡(!
rc16
) {

290 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

292 
	`CU_FAIL
("[FAILED] READCAPACITY16 is missing");

295 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÜogical blockÖrovisioning (LBPME) "

297 i‡(!
rc16
 || !‘c16->
lbpme
)) {

298 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

300 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE opcode is "

304 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

306 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 != 0) {

307 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

308 
	`loggög
(
LOG_NORMAL
, "[WARNING] SANITIZE BLOCK ERASE opcode is "

313 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

317 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

318 
	`öô_lun_wôh_d©a
(
buf
, 0);

319 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

320 
	`öô_lun_wôh_d©a
(
buf
, 
num_blocks
 - 256);

323 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic BLOCK ERASE SANITIZE");

324 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

325 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

326 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

328 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

329 
	`check_lun_is_wùed
(
buf
, 0);

330 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

331 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

333 
d©a
.
size
 = 8;

334 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

335 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

337 
	`loggög
(
LOG_VERBOSE
, "BLOCK_ERASEÖarameterÜistÜength must be 0");

338 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

340 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

341 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 8, &
d©a
);

342 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

344 i‡(
öq_bdc
) {

345 
	`loggög
(
LOG_VERBOSE
, "Check WABEREQ settingándÅhat READ "

347 
	`check_wabîeq
();

350 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll blocksáre unmappedáfter "

352 
	`check_unm≠
();

353 
	}
}

	@test-tool/test_sanitize_block_erase_reserved.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_num
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_num
) {

34 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

42 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

46 
ch™ge_num
 = 0;

48 
	}
}

50 
	$ã°_ßnôize_block_îa£_ª£rved
()

52 
i
, 
ªt
;

54 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE Reserved bits/bytes");

57 
CHECK_FOR_SANITIZE
;

58 
CHECK_FOR_DATALOSS
;

60 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

63 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

65 
ch™ge_num
 = 1;

66 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

67 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

68 i‡(
ªt
 == -2) {

69 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

71 
	`CU_PASS
("SANITIZE isÇot implemented.");

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
i
 = 2; i < 7; i++) {

78 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

79 "byã %d sëÅÿn⁄-zîo", 
i
);

80 
ch™ge_num
 = 
i
;

82 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

83 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_sanitize_crypto_erase.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$check_wa˚ªq
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

36 
èsk_ªt
 = 
	`ªad10_èsk
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

37 0, 0, 0, 0, 0, 
NULL
);

38 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

39 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

41 
öq_bdc
->
wabîeq
) {

43 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

45 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

49 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==1. Reads fromÅhe "

51 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

52 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

58 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

62 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==2. Reads fromÅhe "

64 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


65 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


66 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

72 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

75 
	`CU_FAIL
("[FAILED] Read should have failed "

80 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==3. Reads fromÅhe "

82 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


83 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


84 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

85 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

90 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

93 
	`CU_FAIL
("[FAILED] Read should have failed "

99 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

100 
	}
}

103 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

105 
ªt
;

107 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

108 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

109 
block_size
, 0, 0, 0, 0, 0, 
buf
);

110 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

111 
	}
}

114 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

116 
ªt
;

117 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

119 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

120 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

121 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

123 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

124 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

125 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

127 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

129 
	}
}

132 
	$ã°_ßnôize_¸y±o_îa£
()

134 
ªt
;

135 
iscsi_d©a
 
d©a
;

136 
scsi_comm™d_des¸ùt‹
 *
cd
;

137 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

139 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

140 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO ERASE");

142 
CHECK_FOR_SANITIZE
;

143 
CHECK_FOR_DATALOSS
;

145 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE CRYPTO_ERASE is supported "

147 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

148 
SCSI_SANITIZE_CRYPTO_ERASE
);

149 i‡(
cd
 =
NULL
) {

150 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

152 i‡(
öq_bdc
 && inq_bdc->
wa˚ªq
) {

153 
	`loggög
(
LOG_NORMAL
, "[FAILED] WACEREQ isÇot 0 but "

156 
	`CU_FAIL
("[FAILED] WACEREQ isÇot 0 but CRYPTO ERASE "

160 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

162 
	`CU_PASS
("SANITIZE isÇot implemented.");

166 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

168 i‡(
öq_bdc
 =
NULL
) {

169 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE CRYPTO ERASE opcode is "

172 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

177 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

178 
	`öô_lun_wôh_d©a
(
buf
, 0);

179 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

180 
	`öô_lun_wôh_d©a
(
buf
, 
num_blocks
 - 256);

183 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic CRYPTO ERASE SANITIZE");

184 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

185 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

186 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

188 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

189 
	`check_lun_is_wùed
(
buf
, 0);

190 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

191 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

195 
d©a
.
size
 = 8;

196 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

197 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

199 
	`loggög
(
LOG_VERBOSE
, "CRYPTO_ERASEÖarameterÜistÜength must be 0");

200 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

202 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

203 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 8, &
d©a
);

204 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

206 i‡(
öq_bdc
) {

207 
	`loggög
(
LOG_VERBOSE
, "Check WACEREQ settingándÅhat READ "

209 
	`check_wa˚ªq
();

211 
	}
}

	@test-tool/test_sanitize_crypto_erase_reserved.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_num
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_num
) {

34 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

42 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

46 
ch™ge_num
 = 0;

48 
	}
}

50 
	$ã°_ßnôize_¸y±o_îa£_ª£rved
()

52 
i
, 
ªt
;

54 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE Reserved bits/bytes");

57 
CHECK_FOR_SANITIZE
;

58 
CHECK_FOR_DATALOSS
;

60 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

63 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

65 
ch™ge_num
 = 1;

66 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

67 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

68 i‡(
ªt
 == -2) {

69 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

71 
	`CU_PASS
("SANITIZE isÇot implemented.");

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
i
 = 2; i < 7; i++) {

78 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

79 "byã %d sëÅÿn⁄-zîo", 
i
);

80 
ch™ge_num
 = 
i
;

82 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

83 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_sanitize_exit_failure_mode.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_exô_Áûuª_mode
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE EXIT FAILURE MODE");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE EXIT FAILURE MODE is "

44 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

45 
SCSI_SANITIZE_EXIT_FAILURE_MODE
);

46 i‡(
cd
 =
NULL
) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE EXIT FAILURE MODE is "

50 
	`CU_PASS
("SANITIZE isÇot implemented.");

54 
d©a
.
size
 = 8;

55 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

56 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

59 
	`loggög
(
LOG_VERBOSE
, "EXIT_FAILURE_MODEÖarameterÜistÜength must "

61 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

63 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

64 0, 0, 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 8, &
d©a
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	}
}

	@test-tool/test_sanitize_invalid_serviceaction.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_övÆid_£rvi˚a˘i⁄
()

32 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE for invalid serviceactions");

37 
CHECK_FOR_SANITIZE
;

40 
	`loggög
(
LOG_VERBOSE
, "Testáll invalid serviceáctionsánd make sure "

42 
i
 = 0; i <= 0x1f; i++) {

43 
i
) {

51 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat ServiceAction:0x%02d is "

52 "™Éº‹.", 
i
);

54 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

55 0, 0, 
i
, 0, 
NULL
);

56 i‡(
ªt
 == -2) {

57 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

59 
	`CU_PASS
("SANITIZE isÇot implemented.");

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_sanitize_overwrite.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$öô_lun_wôh_d©a
(
uöt64_t
 
lba
)

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

36 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

37 
block_size
, 0, 0, 0, 0, 0, 
buf
);

38 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

39 
	}
}

42 
	$check_lun_is_wùed
(
uöt64_t
 
lba
, 
c
)

44 
ªt
;

45 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

46 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

48 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

49 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`mem£t
(
zbuf
, 
c
, 256 * 
block_size
);

54 i‡(
	`memcmp
(
zbuf
, 
rbuf
, 256 * 
block_size
)) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

57 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

60 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

63 
	}
}

66 
	$ã°_ßnôize_ovîwrôe
()

68 
i
, 
ªt
;

69 
iscsi_d©a
 
d©a
;

70 
scsi_comm™d_des¸ùt‹
 *
cd
;

72 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

73 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE");

75 
CHECK_FOR_SANITIZE
;

76 
CHECK_FOR_DATALOSS
;

78 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE is supported "

80 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

81 
SCSI_SANITIZE_OVERWRITE
);

82 i‡(
cd
 =
NULL
) {

83 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

85 
	`CU_PASS
("SANITIZE isÇot implemented.");

89 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

91 i‡(
öq_bdc
 =
NULL
) {

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE OVERWRITE opcode is "

95 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

99 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

101 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 == 0) {

102 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

103 
	`loggög
(
LOG_NORMAL
, "[WARNING] SANITIZE OVERWRITE opcode is "

108 
	`loggög
(
LOG_NORMAL
, "This isá SSD device");

111 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

112 
	`öô_lun_wôh_d©a
(0);

113 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

114 
	`öô_lun_wôh_d©a
(
num_blocks
 - 256);

116 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one full block");

117 
d©a
.
size
 = 
block_size
 + 4;

118 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

119 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

121 
d©a
.data[0] = 0x01;

122 
d©a
.data[1] = 0x00;

123 
d©a
.d©a[2] = 
block_size
 >> 8;

124 
d©a
.d©a[3] = 
block_size
 & 0xff;

125 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

126 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

129 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

130 
	`check_lun_is_wùed
(0, 0xaa);

131 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

132 
	`check_lun_is_wùed
(
num_blocks
 - 256, 0xaa);

135 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one half block");

136 
d©a
.
size
 = 
block_size
 / 2 + 4;

138 
d©a
.d©a[2] = (
block_size
 / 2) >> 8;

139 
d©a
.d©a[3] = (
block_size
 / 2 ) & 0xff;

141 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

142 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

143 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

146 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of 4 bytes");

147 
d©a
.
size
 = 4 + 4;

149 
d©a
.data[2] = 0;

150 
d©a
.data[3] = 4;

152 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

153 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

154 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

156 
	`loggög
(
LOG_VERBOSE
, "OVERWRITEÖarameterÜistÜength must "

158 
i
 = 0; i < 5; i++) {

159 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%d isán "

160 "îr‹.", 
i
);

162 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

163 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
i
, &
d©a
);

164 i‡(
ªt
 == -2) {

165 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

167 
	`CU_PASS
("SANITIZE isÇot implemented.");

170 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

175 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%zd (blocksize+5) "

176 "i†™Éº‹.", 
block_size
 + 5);

178 
d©a
.
size
 = 
block_size
 + 8;

179 
d©a
.d©®
	`Æloˇ
(
block_size
 + 8);

180 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

181 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

182 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
block_size
 + 5, &
d©a
);

183 i‡(
ªt
 == -2) {

184 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

186 
	`CU_PASS
("SANITIZE isÇot implemented.");

189 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

193 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE COUNT == 0 isánÉrror");

194 
d©a
.
size
 = 
block_size
 + 4;

196 
d©a
.data[0] = 0x00;

197 
d©a
.data[1] = 0x00;

198 
d©a
.d©a[2] = 
block_size
 >> 8;

199 
d©a
.d©a[3] = 
block_size
 & 0xff;

200 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

201 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

202 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

205 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == 0 isán "

207 
d©a
.
size
 = 
block_size
 + 4;

209 
d©a
.data[0] = 0x00;

210 
d©a
.data[1] = 0x00;

211 
d©a
.data[2] = 0x00;

212 
d©a
.data[3] = 0x00;

213 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

214 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

215 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

218 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == %zd > %zd "

219 "(blocksizeËi†™Éº‹", 
block_size
 + 4, block_size);

221 
d©a
.
size
 = 
block_size
 + 4;

223 
d©a
.data[0] = 0x00;

224 
d©a
.data[1] = 0x00;

225 
d©a
.d©a[2] = (
block_size
 + 4) >> 8;

226 
d©a
.d©a[3] = (
block_size
 + 4) & 0xff;

227 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

228 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

229 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

230 
	}
}

	@test-tool/test_sanitize_overwrite_reserved.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_num
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_num
) {

35 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

43 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

47 
ch™ge_num
 = 0;

49 
	}
}

51 
	$ã°_ßnôize_ovîwrôe_ª£rved
()

53 
i
, 
ªt
;

54 
iscsi_d©a
 
d©a
;

56 
d©a
.
size
 = 
block_size
 + 4;

57 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

58 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

60 
d©a
.data[0] = 0x01;

61 
d©a
.data[1] = 0x00;

62 
d©a
.d©a[2] = 
block_size
 >> 8;

63 
d©a
.d©a[3] = 
block_size
 & 0xff;

65 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

66 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE Reserved bits/bytes");

68 
CHECK_FOR_SANITIZE
;

69 
CHECK_FOR_DATALOSS
;

71 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

73 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

75 
ch™ge_num
 = 1;

76 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

77 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

78 i‡(
ªt
 == -2) {

79 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

81 
	`CU_PASS
("SANITIZE isÇot implemented.");

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

87 
i
 = 2; i < 7; i++) {

88 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

89 "byã %d sëÅÿn⁄-zîo", 
i
);

90 
ch™ge_num
 = 
i
;

92 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

93 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

96 
	}
}

	@test-tool/test_sanitize_readonly.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_ªad⁄ly
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with READONLY devices");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

43 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

44 i‡(
iscsic2
 =
NULL
) {

45 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

49 
	`loggög
(
LOG_VERBOSE
, "Set Software Write Protect onÅhe second connection");

50 
ªt
 = 
	`£t_swp
(
iscsic2
, 
tgt_lun
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 != 0) {

56 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

58 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

59 
	`¶ìp
(1);

62 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

64 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

65 
SCSI_SANITIZE_OVERWRITE
);

66 i‡(
cd
 =
NULL
) {

67 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

70 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

72 
d©a
.
size
 = 
block_size
 + 4;

73 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

74 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

76 
d©a
.data[0] = 0x01;

77 
d©a
.data[1] = 0x00;

78 
d©a
.d©a[2] = 
block_size
 >> 8;

79 
d©a
.d©a[3] = 
block_size
 & 0xff;

80 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

81 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

82 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

88 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

89 
SCSI_SANITIZE_BLOCK_ERASE
);

90 i‡(
cd
 =
NULL
) {

91 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

94 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

95 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

96 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

97 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

100 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

102 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

103 
SCSI_SANITIZE_CRYPTO_ERASE
);

104 i‡(
cd
 =
NULL
) {

105 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

108 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

109 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

110 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

111 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

115 
	`loggög
(
LOG_VERBOSE
, "Clear Software Write Protect onÅhe second connection");

116 
ªt
 = 
	`˛ór_swp
(
iscsic2
, 
tgt_lun
);

118 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

120 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

121 
	`¶ìp
(1);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

125 
iscsic2
 = 
NULL
;

126 
	}
}

	@test-tool/test_sanitize_reservations.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_ª£rv©i⁄s
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with RESERVATIONS");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

43 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

44 i‡(
iscsic2
 =
NULL
) {

45 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

49 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe second "

51 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

57 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

58 
SCSI_SANITIZE_OVERWRITE
);

59 i‡(
cd
 =
NULL
) {

60 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

63 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

65 
d©a
.
size
 = 
block_size
 + 4;

66 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

67 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

69 
d©a
.data[0] = 0x01;

70 
d©a
.data[1] = 0x00;

71 
d©a
.d©a[2] = 
block_size
 >> 8;

72 
d©a
.d©a[3] = 
block_size
 & 0xff;

73 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

74 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

81 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

82 
SCSI_SANITIZE_BLOCK_ERASE
);

83 i‡(
cd
 =
NULL
) {

84 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

87 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

88 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

89 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

95 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

96 
SCSI_SANITIZE_CRYPTO_ERASE
);

97 i‡(
cd
 =
NULL
) {

98 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

101 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

102 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

103 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

108 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

109 
iscsic2
 = 
NULL
;

110 
	}
}

	@test-tool/test_sanitize_reset.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	$ßnôize_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

30 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
 _U_)

32 
	}
}

35 
	$ã°_ßnôize_ª£t
()

37 
ªt
;

38 
scsi_comm™d_des¸ùt‹
 *
cd
;

39 
scsi_èsk
 *
ßnôize_èsk
;

40 
scsi_èsk
 *
æ_èsk
;

41 
iscsi_d©a
 
d©a
;

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

44 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with Task/Lun/Target/SessionÑeset");

46 
CHECK_FOR_SANITIZE
;

47 
CHECK_FOR_DATALOSS
;

49 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE will continue "

51 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

52 
SCSI_SANITIZE_OVERWRITE
);

53 i‡(
cd
 =
NULL
) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

56 
	`CU_PASS
("SANITIZE isÇot implemented.");

60 
	`loggög
(
LOG_VERBOSE
, "Sendánásyncronous SANITIZEÅoÅheÅarget.");

61 
d©a
.
size
 = 
block_size
 + 4;

62 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

63 
	`mem£t
(&
d©a
.d©a[4], 0, 
block_size
);

65 
d©a
.data[0] = 0x01;

66 
d©a
.data[1] = 0x00;

67 
d©a
.d©a[2] = 
block_size
 >> 8;

68 
d©a
.d©a[3] = 
block_size
 & 0xff;

69 
ßnôize_èsk
 = 
	`iscsi_ßnôize_èsk
(
iscsic
, 
tgt_lun
,

70 0, 0, 
SCSI_SANITIZE_OVERWRITE
,

71 
d©a
.
size
, &data,

72 
ßnôize_cb
, 
NULL
);

73 
	`CU_ASSERT_NOT_EQUAL
(
ßnôize_èsk
, 
NULL
);

77 
æ_èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsic
, 0, 64);

78 i‡(
æ_èsk
) {

79 
	`scsi_‰ì_scsi_èsk
(
æ_èsk
);

83 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is "

85 
	`¶ìp
(3);

87 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE has startedándÅhat "

89 
ªt
 = 
	`ã°unôªady_ßnôize
(
iscsic
, 
tgt_lun
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat STARTSTOPUNIT fails with "

94 
ªt
 = 
	`°¨t°›unô_ßnôize
(
iscsic
, 
tgt_lun
, 1, 0, 1, 0, 1, 0);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat READ16 fails with "

99 
ªt
 = 
	`ªad16_ßnôize
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

101 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY is stillállowed while "

105 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 255, 
NULL
);

106 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK");

110 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsic
, 
ßnôize_èsk
);

111 i‡(
ªt
 != 0) {

112 
	`loggög
(
LOG_NORMAL
, "ABORT TASK failed. %s",

113 
	`iscsi_gë_îr‹
(
iscsic
));

116 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK SET");

117 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsic
, 
tgt_lun
);

118 i‡(
ªt
 != 0) {

119 
	`loggög
(
LOG_NORMAL
, "ABORT TASK SET failed. %s",

120 
	`iscsi_gë_îr‹
(
iscsic
));

123 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

124 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

125 i‡(
ªt
 != 0) {

126 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

129 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm Reset");

130 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

131 i‡(
ªt
 != 0) {

132 
	`loggög
(
LOG_NORMAL
, "W¨mÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

135 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold Reset");

136 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

137 i‡(
ªt
 != 0) {

138 
	`loggög
(
LOG_NORMAL
, "CﬁdÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

141 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

142 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

144 
	`loggög
(
LOG_VERBOSE
, "Sleep for one seconds incaseÅheÅarget is "

146 
	`¶ìp
(1);

148 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

149 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

150 i‡(
iscsic
 =
NULL
) {

151 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE is still going.");

156 
ªt
 = 
	`ã°unôªady_ßnôize
(
iscsic
, 
tgt_lun
);

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

159 
	`loggög
(
LOG_VERBOSE
, "Wait untilÅhe SANITIZE operation has finished");

160 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

161 
	`¶ìp
(60);

163 
	}
}

	@test-tool/test_startstopunit_noloej.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_nﬁ€j
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT LOEJ==0");

35 i‡(!
öq
->
rmb
) {

36 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

41 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==0");

42 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==1");

51 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

56 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==0");

60 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

65 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==1");

69 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

74 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==0");

78 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

83 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==1");

87 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

92 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

93 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==0");

96 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

98 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

100 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

101 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

102 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

104 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==1");

105 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

107 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

110 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

111 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

115 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

116 
	}
}

	@test-tool/test_startstopunit_pwrcnd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_pwr˙d
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT PowerCondition");

35 i‡(!
öq
->
rmb
) {

36 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

41 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when PC!=0");

42 
i
 = 1; i < 16; i++) {

43 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

44 1, 0, 
i
, 0, 1, 0);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

48 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

53 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

54 
	}
}

	@test-tool/test_startstopunit_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_sim∂e
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test basic STARTSTOPUNIT");

37 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

38 i‡(
öq
->
rmb
) {

39 
	`loggög
(
LOG_VERBOSE
, "Media isÑemovable. STARTSTOPUNIT should work");

41 
	`loggög
(
LOG_VERBOSE
, "Media isÇotÑemovable. STARTSTOPUNIT should fail");

44 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

46 i‡(!
öq
->
rmb
) {

47 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

54 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead fromÅhe media.");

64 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

70 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

76 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

81 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

83 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "Verify we canáccessÅhe mediaágain.");

86 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

87 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

88 
	}
}

	@test-tool/test_testunitready_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ã°unôªady_sim∂e
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY");

33 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

34 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

35 
	}
}

	@test-tool/test_unmap_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_unm≠_0blocks
()

32 
i
, 
ªt
;

33 
unm≠_li°
 
li°
[257];

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255ásá single descriptor");

41 
i
 = 0; i < 256; i++) {

42 
li°
[0].
lba
 = 
i
;

43 
li°
[0].
num
 = 0;

44 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255 with one descriptorÖer block");

49 
i
 = 0; i < 256; i++) {

50 
li°
[
i
].
lba
 = i;

51 
li°
[
i
].
num
 = 0;

52 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 
i
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksátÉnd-of-LUN");

57 
li°
[0].
lba
 = 
num_blocks
;

58 
li°
[0].
num
 = 0;

59 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255 with one descriptorÖer block,Öossibly \"overlapping\".");

64 
i
 = 0; i < 256; i++) {

65 
li°
[
i
].
lba
 = i/2;

66 
li°
[
i
].
num
 = 0;

68 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 256);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP withoutány descriptors.");

73 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_unmap_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

31 
ªt
;

33 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

34 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

35 
block_size
, 0, 0, 0, 0, 0, 
buf
);

36 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

37 
	}
}

40 
	$ã°_unm≠_sim∂e
()

42 
i
, 
ªt
;

43 
unm≠_li°
 
li°
[257];

44 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

45 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

47 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

48 
	`loggög
(
LOG_VERBOSE
, "Test basic UNMAP");

50 
CHECK_FOR_DATALOSS
;

51 
CHECK_FOR_THIN_PROVISIONING
;

52 
CHECK_FOR_SBC
;

55 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-256 blocksátÅhe start ofÅhe "

58 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

59 
	`öô_lun_wôh_d©a
(
buf
, 0);

61 
i
 = 1; i <= 256; i++) {

62 
	`loggög
(
LOG_VERBOSE
, "UNMAP block†0-%d", 
i
);

63 
li°
[0].
lba
 = 0;

64 
li°
[0].
num
 = 
i
;

65 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

69 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

70 
block_size
, 0, 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 i‡(
rc16
 &&Ñc16->
lb¥z
) {

74 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

76 i‡(
	`memcmp
(
buf
, 
zbuf
, 
i
 * 
block_size
)) {

77 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

79 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

82 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

88 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-256 blocksátÅhe start ofÅhe "

91 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

92 
	`öô_lun_wôh_d©a
(
buf
, 0);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
i
 = 0; i < 256; i++) {

96 
li°
[
i
].
lba
 = i;

97 
li°
[
i
].
num
 = 1;

98 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 
i
 + 1);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

101 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

102 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

103 
block_size
, 0, 0, 0, 0, 0, 
buf
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

106 i‡(
rc16
 &&Ñc16->
lb¥z
) {

107 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

109 i‡(
	`memcmp
(
buf
, 
zbuf
, 
i
 * 
block_size
)) {

110 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

112 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

115 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

120 
	}
}

	@test-tool/test_unmap_vpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_unm≠_vpd
()

31 
ªt
;

32 
unm≠_li°
 
li°
[1];

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test UNMAPávailability is consistent with VPD settings");

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, "Check if UNMAP isávailable.");

41 
li°
[0].
lba
 = 0;

42 
li°
[0].
num
 = 0;

43 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

45 i‡(
ªt
 != 0) {

46 
	`loggög
(
LOG_VERBOSE
, "UNMAP isÇotávailable. VerifyÅhat VPD "

49 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is clear.");

50 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

51 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP isÇot implemented "

53 
	`CU_FAIL
("[FAILED] UNMAP is unavailable but LBPU==1");

55 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is clear.");

58 
	`loggög
(
LOG_VERBOSE
, "UNMAP isávailable. VerifyÅhat VPD "

61 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

62 i‡(
rc16
 &&Ñc16->
lbpme
) {

63 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

65 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

67 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is set.");

71 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

72 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is set.");

74 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

76 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPU==0");

79 
	}
}

	@test-tool/test_verify10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==2^31");

49 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY10. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocks one block beyondÅheÉnd");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 1, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 1, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 1, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify10_flags.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify10_Êags
()

31 
ªt
;

32 *
buf
 = 
	`mÆloc
(
block_size
);

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 flags");

37 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

38 
block_size
, 0, 0, 0, 0, 0, 
buf
);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with DPO==1");

43 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

44 
block_size
, 0, 1, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

47 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

48 
	`‰ì
(
buf
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with BYTCHK==1");

55 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`‰ì
(
buf
);

59 
	}
}

	@test-tool/test_verify10_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 1, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify10_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_mism©ch_no_cmp
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 0, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

55 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <= 256; i++) {

63 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

69 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
buf
[
off£t
] ^= 'X';

74 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

76 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

77 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_verify10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 1, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify10_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 withÇon-zero VRPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
ªt
 = 
	`vîify10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

49 
block_size
, 
i
, 0, 1, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_verify12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify12_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==2^31");

49 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY12. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocks one block beyondÅheÉnd");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 1, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 1, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 1, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 flags");

38 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

39 
block_size
, 0, 0, 0, 0, 0, 
buf
);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with DPO==1");

44 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 1, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with BYTCHK==1");

55 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify12_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
buf
[
off£t
] ^= 'X';

48 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

50 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 1, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify12_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_mism©ch_no_cmp
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
buf
[
off£t
] ^= 'X';

48 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

50 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 0, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 1, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify12_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 withÇon-zero VRPROTECT");

38 
CHECK_FOR_SBC
;

40 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

41 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

42 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
ªt
 = 
	`vîify12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

48 
block_size
, 
i
, 0, 1, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

60 
	}
}

	@test-tool/test_verify16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify16_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==2^63");

49 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocks one block beyondÅheÉnd");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

42 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

43 
i
 * 
block_size
, block_size,

44 0, 0, 1, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

47 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==2^63");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

61 
i
 * 
block_size
, block_size,

62 0, 0, 1, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==-1");

68 
i
 = 1; i <= 256; i++) {

69 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

73 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

74 
block_size
, 0, 0, 1, 
buf
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

80 
i
 = 2; i <= 256; i++) {

81 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_Êags
()

33 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 flags");

39 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

40 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with DPO==1");

44 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 1, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with BYTCHK==1");

55 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify16_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 1, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

55 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <= 256; i++) {

63 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

69 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

70 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
buf
[
off£t
] ^= 'X';

75 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

77 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

78 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	}
}

	@test-tool/test_verify16_mismatch_no_cmp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_mism©ch_no_cmp
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK for blocks 1-255");

38 
i
 = 1; i <= 256; i++) {

39 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

49 
buf
[
off£t
] ^= 'X';

50 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

52 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

53 
block_size
, 0, 0, 0, 
buf
);

54 i‡(
ªt
 == -2) {

55 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

56 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

63 
i
 = 1; i <= 256; i++) {

64 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

66 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

70 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
buf
[
off£t
] ^= 'X';

76 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

78 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

79 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_verify16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

44 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 1, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify16_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 withÇon-zero VRPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
ªt
 = 
	`vîify16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

48 
block_size
, 
i
, 0, 1, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

60 
	}
}

	@test-tool/test_write10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==0");

35 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

36 0, 0, 0, 0, 0, 
NULL
);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

39 
	`CU_PASS
("WRITE10 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 i‡(
num_blocks
 >= 0x80000000) {

45 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE10. SkippingÅest.\n");

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

52 
	`CU_PASS
("WRITE10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_write10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1");

41 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

46 
	`CU_PASS
("WRITE10 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_write10_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe10_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

52 
èsk
->
cdb
[8] = 1;

53 
èsk
->
cdb_size
 = 10;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

73 
	`CU_PASS
("WRITE10 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

111 
èsk
->
cdb
[8] = 1;

112 
èsk
->
cdb_size
 = 10;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

153 
èsk
->
cdb
[8] = 1;

154 
èsk
->
cdb_size
 = 10;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

198 
èsk
->
cdb
[8] = 2;

199 
èsk
->
cdb_size
 = 10;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

236 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

238 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

239 
	`mem£t
(
buf
, 'a', 10000);

240 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

241 
block_size
, 0, 0, 0, 0, 0, 
buf
);

242 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

244 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

245 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

246 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

248 
	`mem£t
(
buf
, 'b', 10000);

250 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

251 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

252 
èsk
->
cdb
[8] = 1;

253 
èsk
->
cdb_size
 = 10;

254 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

255 
èsk
->
expx„æí
 = 2 * 
block_size
;

257 
d©a
.
size
 = 
èsk
->
expx„æí
;

258 
d©a
.d©®&
buf
[0];

259 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

260 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

262 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

263 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

264 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

265 
	`iscsi_gë_îr‹
(
iscsic
));

267 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

269 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

270 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

271 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

274 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

276 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

277 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

278 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

280 
block_size
, 
èsk
->
ªsiduÆ
);

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

283 
	`scsi_‰ì_scsi_èsk
(
èsk
);

284 
èsk
 = 
NULL
;

286 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

287 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

288 
block_size
, 0, 0, 0, 0, 0, 
buf
);

289 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

291 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

292 
i
 = 0; i < 
block_size
; i++) {

293 i‡(
buf
[
i
] != 'b') {

294 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

295 
	`CU_FAIL
("Block wasÇot written correctly");

300 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

301 
i
 = 
block_size
; i < 2 * block_size; i++) {

302 i‡(
buf
[
i
] != 'a') {

303 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

304 
	`CU_FAIL
("Second block was incorrectly overwritten");

310 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

312 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

313 
	`mem£t
(
buf
, 'a', 10000);

314 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

315 
block_size
, 0, 0, 0, 0, 0, 
buf
);

316 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

318 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

319 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

320 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

322 
	`mem£t
(
buf
, 'b', 10000);

324 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

325 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

326 
èsk
->
cdb
[8] = 2;

327 
èsk
->
cdb_size
 = 10;

328 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

329 
èsk
->
expx„æí
 = 
block_size
;

331 
d©a
.
size
 = 
èsk
->
expx„æí
;

332 
d©a
.d©®&
buf
[0];

333 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

334 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

336 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

337 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

338 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

339 
	`iscsi_gë_îr‹
(
iscsic
));

341 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

343 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

344 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

345 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

348 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

350 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

351 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

352 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

354 
block_size
, 
èsk
->
ªsiduÆ
);

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

357 
	`scsi_‰ì_scsi_èsk
(
èsk
);

358 
èsk
 = 
NULL
;

360 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

361 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

362 
block_size
, 0, 0, 0, 0, 0, 
buf
);

363 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

365 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

366 
i
 = 0; i < 
block_size
; i++) {

367 i‡(
buf
[
i
] != 'b') {

368 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

369 
	`CU_FAIL
("Block wasÇot written correctly");

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

375 
i
 = 
block_size
; i < 2 * block_size; i++) {

376 i‡(
buf
[
i
] != 'a') {

377 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

378 
	`CU_FAIL
("Second block was incorrectly overwritten");

382 
	}
}

	@test-tool/test_write10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

49 
	`CU_PASS
("WRITE10 isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôe10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

52 
	`CU_PASS
("WRITE10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_write12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe12_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE12. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

44 
	`CU_PASS
("WRITE12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

52 
	`CU_PASS
("WRITE12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_write12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1");

41 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

46 
	`CU_PASS
("WRITE12 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_write12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

52 
èsk
->
cdb
[9] = 1;

53 
èsk
->
cdb_size
 = 12;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

73 
	`CU_PASS
("WRITE12 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

111 
èsk
->
cdb
[9] = 1;

112 
èsk
->
cdb_size
 = 12;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

153 
èsk
->
cdb
[9] = 1;

154 
èsk
->
cdb_size
 = 12;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

198 
èsk
->
cdb
[9] = 2;

199 
èsk
->
cdb_size
 = 12;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

235 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

237 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

238 
	`mem£t
(
buf
, 'a', 10000);

239 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

240 
block_size
, 0, 0, 0, 0, 0, 
buf
);

241 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

247 
	`mem£t
(
buf
, 'b', 10000);

249 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

250 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

251 
èsk
->
cdb
[9] = 1;

252 
èsk
->
cdb_size
 = 12;

253 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

254 
èsk
->
expx„æí
 = 2 * 
block_size
;

256 
d©a
.
size
 = 
èsk
->
expx„æí
;

257 
d©a
.d©®&
buf
[0];

258 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

259 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

261 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

264 
	`iscsi_gë_îr‹
(
iscsic
));

266 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

268 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

269 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

270 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

273 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

275 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

276 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

277 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

279 
block_size
, 
èsk
->
ªsiduÆ
);

281 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

282 
	`scsi_‰ì_scsi_èsk
(
èsk
);

283 
èsk
 = 
NULL
;

285 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

286 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

287 
block_size
, 0, 0, 0, 0, 0, 
buf
);

288 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

290 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

291 
i
 = 0; i < 
block_size
; i++) {

292 i‡(
buf
[
i
] != 'b') {

293 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

294 
	`CU_FAIL
("Block wasÇot written correctly");

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

300 
i
 = 
block_size
; i < 2 * block_size; i++) {

301 i‡(
buf
[
i
] != 'a') {

302 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

303 
	`CU_FAIL
("Second block was incorrectly overwritten");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

311 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

312 
	`mem£t
(
buf
, 'a', 10000);

313 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

314 
block_size
, 0, 0, 0, 0, 0, 
buf
);

315 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

317 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

318 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

319 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

321 
	`mem£t
(
buf
, 'b', 10000);

323 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

324 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

325 
èsk
->
cdb
[9] = 2;

326 
èsk
->
cdb_size
 = 12;

327 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

328 
èsk
->
expx„æí
 = 
block_size
;

330 
d©a
.
size
 = 
èsk
->
expx„æí
;

331 
d©a
.d©®&
buf
[0];

332 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

333 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

335 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

336 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

337 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

338 
	`iscsi_gë_îr‹
(
iscsic
));

340 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

342 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

343 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

344 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

347 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

349 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

350 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

351 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

353 
block_size
, 
èsk
->
ªsiduÆ
);

355 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

356 
	`scsi_‰ì_scsi_èsk
(
èsk
);

357 
èsk
 = 
NULL
;

359 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

360 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

361 
block_size
, 0, 0, 0, 0, 0, 
buf
);

362 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

365 
i
 = 0; i < 
block_size
; i++) {

366 i‡(
buf
[
i
] != 'b') {

367 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

368 
	`CU_FAIL
("Block wasÇot written correctly");

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

374 
i
 = 
block_size
; i < 2 * block_size; i++) {

375 i‡(
buf
[
i
] != 'a') {

376 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

377 
	`CU_FAIL
("Second block was incorrectly overwritten");

381 
	}
}

	@test-tool/test_write12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

48 
	`CU_PASS
("WRITE12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_write12_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 withÇon-zero WRPROTECT");

42 
CHECK_FOR_DATALOSS
;

43 
CHECK_FOR_SBC
;

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôe12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, block_size,

50 
i
, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

53 
	`CU_PASS
("WRITE12 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_write16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

37 0, 0, 0, 0, 0, 
NULL
);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

40 
	`CU_PASS
("WRITE16 isÇot implemented.");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocks one blockÖastÉnd-of-LUN");

46 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

47 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==2^63");

52 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

53 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==-1");

58 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

59 0, 0, 0, 0, 0, 
NULL
);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	}
}

	@test-tool/test_write16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

50 
	`CU_PASS
("WRITE16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==2^63");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 0, 0, 0, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 0, 0, 0, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_write16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 flags");

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1");

42 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

43 
block_size
, block_size,

44 0, 1, 0, 0, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

47 
	`CU_PASS
("WRITE16 isÇot implemented.");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==0");

54 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

55 
block_size
, block_size,

56 0, 0, 1, 0, 0, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==1");

61 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

62 
block_size
, block_size,

63 0, 0, 1, 1, 0, 
buf
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==0 FUA_NV==1");

68 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

69 
block_size
, block_size,

70 0, 0, 0, 1, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1 FUA==1 FUA_NV==1");

75 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

76 
block_size
, block_size,

77 0, 1, 1, 1, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_write16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

52 
èsk
->
cdb
[13] = 1;

53 
èsk
->
cdb_size
 = 16;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

73 
	`CU_PASS
("WRITE16 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

111 
èsk
->
cdb
[13] = 1;

112 
èsk
->
cdb_size
 = 16;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

153 
èsk
->
cdb
[13] = 1;

154 
èsk
->
cdb_size
 = 16;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

198 
èsk
->
cdb
[13] = 2;

199 
èsk
->
cdb_size
 = 16;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

235 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

237 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

238 
	`mem£t
(
buf
, 'a', 10000);

239 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

240 
block_size
, 0, 0, 0, 0, 0, 
buf
);

241 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

247 
	`mem£t
(
buf
, 'b', 10000);

249 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

250 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

251 
èsk
->
cdb
[13] = 1;

252 
èsk
->
cdb_size
 = 16;

253 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

254 
èsk
->
expx„æí
 = 2 * 
block_size
;

256 
d©a
.
size
 = 
èsk
->
expx„æí
;

257 
d©a
.d©®&
buf
[0];

258 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

259 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

261 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

264 
	`iscsi_gë_îr‹
(
iscsic
));

266 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

268 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

269 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

270 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

273 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

275 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

276 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

277 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

279 
block_size
, 
èsk
->
ªsiduÆ
);

281 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

282 
	`scsi_‰ì_scsi_èsk
(
èsk
);

283 
èsk
 = 
NULL
;

285 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

286 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

287 
block_size
, 0, 0, 0, 0, 0, 
buf
);

288 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

290 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

291 
i
 = 0; i < 
block_size
; i++) {

292 i‡(
buf
[
i
] != 'b') {

293 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

294 
	`CU_FAIL
("Block wasÇot written correctly");

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

300 
i
 = 
block_size
; i < 2 * block_size; i++) {

301 i‡(
buf
[
i
] != 'a') {

302 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

303 
	`CU_FAIL
("Second block was incorrectly overwritten");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

311 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

312 
	`mem£t
(
buf
, 'a', 10000);

313 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

314 
block_size
, 0, 0, 0, 0, 0, 
buf
);

315 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

317 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

318 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

319 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

321 
	`mem£t
(
buf
, 'b', 10000);

323 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

324 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

325 
èsk
->
cdb
[13] = 2;

326 
èsk
->
cdb_size
 = 16;

327 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

328 
èsk
->
expx„æí
 = 
block_size
;

330 
d©a
.
size
 = 
èsk
->
expx„æí
;

331 
d©a
.d©®&
buf
[0];

332 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

333 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

335 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

336 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

337 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

338 
	`iscsi_gë_îr‹
(
iscsic
));

340 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

342 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

343 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

344 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

347 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

349 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

350 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

351 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

353 
block_size
, 
èsk
->
ªsiduÆ
);

355 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

356 
	`scsi_‰ì_scsi_èsk
(
èsk
);

357 
èsk
 = 
NULL
;

359 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

360 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

361 
block_size
, 0, 0, 0, 0, 0, 
buf
);

362 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

365 
i
 = 0; i < 
block_size
; i++) {

366 i‡(
buf
[
i
] != 'b') {

367 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

368 
	`CU_FAIL
("Block wasÇot written correctly");

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

374 
i
 = 
block_size
; i < 2 * block_size; i++) {

375 i‡(
buf
[
i
] != 'a') {

376 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

377 
	`CU_FAIL
("Second block was incorrectly overwritten");

381 
	}
}

	@test-tool/test_write16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
i
 = 1; i <= 256; i++) {

43 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

47 
block_size
, 0, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

50 
	`CU_PASS
("WRITE16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

61 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

62 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	}
}

	@test-tool/test_write16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôe16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

52 
	`CU_PASS
("WRITE16 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writesame10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôeßme10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==0");

41 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, 0,

43 0, 0, 0, 0, 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

47 } i‡(
ªt
 == -3) {

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10 with NUMBER OF LOGICAL BLOCKS == 0");

49 } i‡(
ªt
 == -4) {

50 
	`CU_PASS
("[SKIPPED] Number of WRITESAME10Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocks one blockÖastÉnd-of-LUN");

56 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

57 
block_size
, 0,

58 0, 0, 0, 0, 
NULL
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==2^31");

63 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

64 
block_size
, 0,

65 0, 0, 0, 0, 
NULL
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==-1");

70 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

71 
block_size
, 0,

72 0, 0, 0, 0, 
NULL
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	}
}

	@test-tool/test_writesame10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 i‡(
num_blocks
 >= 0x80000000) {

38 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

42 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocks one block beyondÅheÉnd");

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 
i
 = 1; i <= 256; i++) {

46 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
 + 1,

47 
block_size
, 
i
,

48 0, 0, 0, 0, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

60 
block_size
, 
i
,

61 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==-1");

67 
i
 = 1; i <= 256; i++) {

68 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

69 
block_size
, 
i
,

70 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 2-256 blocksáll but one block beyondÅheÉnd");

76 
i
 = 2; i <= 256; i++) {

77 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

78 
block_size
, 
i
,

79 0, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_writesame10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_sim∂e
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
	`mem£t
(
buf
, 0, 
block_size
);

43 
i
 = 1; i <= 256; i++) {

44 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, 
i
,

46 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
block_size
, 
i
,

58 0, 0, 0, 0, 
buf
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	}
}

	@test-tool/test_writesame10_unmap.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠
()

32 
i
, 
ªt
;

33 
j
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_THIN_PROVISIONING
;

38 
CHECK_FOR_LBPWS10
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start of "

44 
i
 = 1; i <= 256; i++) {

45 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

46 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

47 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

53 
	`mem£t
(
buf
, 0, 
block_size
);

54 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

55 
block_size
, 
i
,

56 0, 1, 0, 0, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 i‡(
rc16
->
lb¥z
) {

60 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

63 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

64 "¨ênow zîo", 
i
);

65 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

66 
i
 * 
block_size
, block_size,

67 0, 0, 0, 0, 0, 
buf
);

68 
j
 = 0; j < 
block_size
 * 
i
; j++) {

69 i‡(
buf
[
j
] != 0) {

70 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

74 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

80 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd of "

82 
i
 = 1; i <= 256; i++) {

83 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

84 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

85 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

91 
	`mem£t
(
buf
, 0, 
block_size
);

92 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

93 
block_size
, 
i
,

94 0, 1, 0, 0, 
buf
);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 i‡(
rc16
->
lb¥z
) {

98 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

101 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

102 "¨ênow zîo", 
i
);

103 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

104 
i
 * 
block_size
, block_size,

105 0, 0, 0, 0, 0, 
buf
);

106 
j
 = 0; j < 
block_size
 * 
i
; j++) {

107 i‡(
buf
[
j
] != 0) {

108 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

112 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

117 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME10 ANCHOR==1 + UNMAP==0 is "

119 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

120 
block_size
, 1,

121 1, 0, 0, 0, 
buf
);

122 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

126 i‡(
öq_lbp
->
™c_sup
) {

127 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0");

128 
	`mem£t
(
buf
, 0, 
block_size
);

129 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

130 
block_size
, 1,

131 1, 1, 0, 0, 
buf
);

133 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0Ço "

135 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

136 
block_size
, 1,

137 1, 1, 0, 0, 
buf
);

139 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

142 i‡(
öq_bl
 =
NULL
) {

143 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME10 works but "

145 
	`CU_FAIL
("[FAILED] WRITESAME10 works but "

150 
i
 = 256;

151 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

152 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

157 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

158 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

159 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

160 
i
 * 
block_size
, block_size,

161 0, 0, 0, 0, 0, 
buf
);

162 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

164 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

165 
	`mem£t
(
buf
, 0, 
block_size
);

166 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

167 
block_size
, 
i
,

168 0, 1, 0, 0, 
buf
);

169 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

171 i‡(
rc16
->
lb¥z
) {

172 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

175 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

176 "¨ênow zîo", 
i
);

177 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

178 
i
 * 
block_size
, block_size,

179 0, 0, 0, 0, 0, 
buf
);

180 
j
 = 0; j < 
block_size
 * 
i
; j++) {

181 i‡(
buf
[
j
] != 0) {

182 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

186 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

190 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

194 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

195 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

196 
block_size
, 
i
,

197 0, 1, 0, 0, 
buf
);

198 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

200 
	}
}

	@test-tool/test_writesame10_unmap_unaligned.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_unm≠_u«lig√d
()

31 
i
, 
ªt
;

33 
CHECK_FOR_DATALOSS
;

34 
CHECK_FOR_THIN_PROVISIONING
;

35 
CHECK_FOR_LBPWS10
;

36 
CHECK_FOR_LBPPB_GT_1
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME10 Unm≠ faûs. LBPPB==%d", 
lbµb
);

41 
i
 = 1; i < 
lbµb
; i++) {

42 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10áàLBA:%d", 
lbµb
 - 
i
, i);

43 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 
i
,

44 
block_size
, 
lbµb
 - 
i
,

45 0, 1, 0, 0, 
NULL
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	}
}

	@test-tool/test_writesame10_unmap_until_end.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_unm≠_u¡û_íd
()

31 
i
, 
ªt
;

32 
j
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS10
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

41 
i
 = 1; i <= 256; i++) {

42 *
buf
 = 
	`mÆloc
(
block_size
 * 
i
);

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

46 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

52 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

53 0, 
i
,

54 0, 1, 0, 0, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 i‡(
rc16
->
lb¥z
) {

58 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

61 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

62 "¨ênow zîo", 
i
);

63 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

64 
i
 * 
block_size
, block_size,

65 0, 0, 0, 0, 0, 
buf
);

66 
j
 = 0; j < 
block_size
 * 
i
; j++) {

67 i‡(
buf
[
j
] != 0) {

68 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

72 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

75 
	`‰ì
(
buf
);

77 
	}
}

	@test-tool/test_writesame10_unmap_vpd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠_vpd
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME10 can be used for UNMAP.");

43 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME10");

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

46 
block_size
, 1,

47 0, 1, 0, 0, 
buf
);

49 i‡(
ªt
 != 0) {

50 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isÇotávailable. "

53 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is clear.");

54 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP isÇot "

57 
	`CU_FAIL
("[FAILED] WRITESAME10 UNMAP is unavailable but "

60 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is clear.");

63 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isávailable. Verify "

66 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

67 i‡(
rc16
 &&Ñc16->
lbpme
) {

68 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

70 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

72 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

75 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is set.");

76 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

77 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is set.");

79 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

81 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS10==0");

84 
	}
}

	@test-tool/test_writesame10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, 1,

50 0, 0, 
i
, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented.");

53 
	`CU_PASS
("WRITESAME10 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_writesame16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôeßme16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

37 
block_size
, 0,

38 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

41 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

43 } i‡(
ªt
 == -3) {

44 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16 with NUMBER OF LOGICAL BLOCKS == 0");

45 } i‡(
ªt
 == -4) {

46 
	`CU_PASS
("[SKIPPED] Number of WRITESAME16Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocks one blockÖastÉnd-of-LUN");

52 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

53 
block_size
, 0,

54 0, 0, 0, 0, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==2^63");

59 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

60 
block_size
, 0,

61 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==-1");

66 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

67 
block_size
, 0,

68 0, 0, 0, 0, 
NULL
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	}
}

	@test-tool/test_writesame16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
buf
, 0, 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
 + 1,

42 
block_size
, 
i
,

43 0, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

46 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==2^63");

54 
i
 = 1; i <= 256; i++) {

55 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

56 
block_size
, 
i
,

57 0, 0, 0, 0, 
buf
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==-1");

63 
i
 = 1; i <= 256; i++) {

64 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

65 
block_size
, 
i
,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 2-256 blocksáll but one block beyondÅheÉnd");

72 
i
 = 2; i <= 256; i++) {

73 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

74 
block_size
, 
i
,

75 0, 0, 0, 0, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_writesame16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
	`mem£t
(
buf
, 0, 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

44 
block_size
, 
i
,

45 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
block_size
, 
i
,

58 0, 0, 0, 0, 
buf
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	}
}

	@test-tool/test_writesame16_unmap.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_unm≠
()

31 
i
, 
ªt
;

32 
j
;

33 *
buf
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_LBPWS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
buf
 = 
	`mÆloc
(65536 * 
block_size
);

43 
i
 = 1; i <= 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

50 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

51 
	`mem£t
(
buf
, 0, 
block_size
);

52 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, 
i
,

54 0, 1, 0, 0, 
buf
);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

57 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

58 
föished
;

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 i‡(
rc16
->
lb¥z
) {

63 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

65 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

66 "¨ênow zîo", 
i
);

67 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

68 
i
 * 
block_size
, block_size,

69 0, 0, 0, 0, 0, 
buf
);

70 
j
 = 0; j < 
block_size
 * 
i
; j++) {

71 i‡(
buf
[
j
] != 0) {

72 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

76 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

83 
i
 = 1; i <= 256; i++) {

84 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

85 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

86 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

87 
i
 * 
block_size
, block_size,

88 0, 0, 0, 0, 0, 
buf
);

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

92 
	`mem£t
(
buf
, 0, 
block_size
);

93 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

94 
block_size
, 
i
,

95 0, 1, 0, 0, 
buf
);

96 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

98 i‡(
rc16
->
lb¥z
) {

99 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

101 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

102 "¨ênow zîo", 
i
);

103 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

104 
i
 * 
block_size
, block_size,

105 0, 0, 0, 0, 0, 
buf
);

106 
j
 = 0; j < 
block_size
 * 
i
; j++) {

107 i‡(
buf
[
j
] != 0) {

108 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

112 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

117 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME16 ANCHOR==1 + UNMAP==0 is invalid");

118 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

119 
block_size
, 1,

120 1, 0, 0, 0, 
buf
);

121 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

125 i‡(
öq_lbp
->
™c_sup
) {

126 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0");

127 
	`mem£t
(
buf
, 0, 
block_size
);

128 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

129 
block_size
, 1,

130 1, 1, 0, 0, 
buf
);

132 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0Ço ANC_SUP soÉxpectingÅo fail");

133 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

134 
block_size
, 1,

135 1, 1, 0, 0, 
buf
);

138 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

141 i‡(
öq_bl
 =
NULL
) {

142 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME16 works but "

144 
	`CU_FAIL
("[FAILED] WRITESAME16 works but "

146 
föished
;

149 
i
 = 256;

150 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

151 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

156 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

157 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

158 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

159 
i
 * 
block_size
, block_size,

160 0, 0, 0, 0, 0, 
buf
);

161 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

163 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

164 
	`mem£t
(
buf
, 0, 
block_size
);

165 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

166 
block_size
, 
i
,

167 0, 1, 0, 0, 
buf
);

168 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

170 i‡(
rc16
->
lb¥z
) {

171 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

174 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

175 "¨ênow zîo", 
i
);

176 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

177 
i
 * 
block_size
, block_size,

178 0, 0, 0, 0, 0, 
buf
);

179 
j
 = 0; j < 
block_size
 * 
i
; j++) {

180 i‡(
buf
[
j
] != 0) {

181 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

185 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

189 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

193 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

194 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

195 
block_size
, 
i
,

196 0, 1, 0, 0, 
buf
);

197 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

201 
i
 = 65536;

202 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

203 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

208 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

209 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

210 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

211 
i
 * 
block_size
, block_size,

212 0, 0, 0, 0, 0, 
buf
);

213 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

215 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

216 
	`mem£t
(
buf
, 0, 
block_size
);

217 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

218 
block_size
, 
i
,

219 0, 1, 0, 0, 
buf
);

220 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

222 i‡(
rc16
->
lb¥z
) {

223 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

226 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

227 "¨ênow zîo", 
i
);

228 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

229 
i
 * 
block_size
, block_size,

230 0, 0, 0, 0, 0, 
buf
);

231 
j
 = 0; j < 
block_size
 * 
i
; j++) {

232 i‡(
buf
[
j
] != 0) {

233 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

237 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

241 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

245 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

246 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

247 
block_size
, 
i
,

248 0, 1, 0, 0, 
buf
);

249 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
föished
:

253 
	`‰ì
(
buf
);

254 
	}
}

	@test-tool/test_writesame16_unmap_unaligned.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_unm≠_u«lig√d
()

31 
i
, 
ªt
;

33 
CHECK_FOR_DATALOSS
;

34 
CHECK_FOR_THIN_PROVISIONING
;

35 
CHECK_FOR_LBPWS
;

36 
CHECK_FOR_LBPPB_GT_1
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME16 Unm≠ faûs. LBPPB==%d", 
lbµb
);

42 
i
 = 1; i < 
lbµb
; i++) {

43 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16áàLBA:%d", 
lbµb
 - 
i
, i);

44 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 
i
,

45 
block_size
, 
lbµb
 - 
i
,

46 0, 1, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	}
}

	@test-tool/test_writesame16_unmap_until_end.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠_u¡û_íd
()

32 
i
, 
ªt
;

33 
j
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_THIN_PROVISIONING
;

38 
CHECK_FOR_LBPWS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

43 
i
 = 1; i <= 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

50 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

51 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

52 0, 
i
,

53 0, 1, 0, 0, 
NULL
);

54 i‡(
ªt
 == -2) {

55 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

56 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 i‡(
rc16
->
lb¥z
) {

62 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

65 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

66 "¨ênow zîo", 
i
);

67 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size,

69 0, 0, 0, 0, 0, 
buf
);

70 
j
 = 0; j < 
block_size
 * 
i
; j++) {

71 i‡(
buf
[
j
] != 0) {

72 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

76 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

80 
	}
}

	@test-tool/test_writesame16_unmap_vpd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠_vpd
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME16 can be used for UNMAP.");

44 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME16");

45 
	`mem£t
(
buf
, 0, 
block_size
);

46 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

47 
block_size
, 1,

48 0, 1, 0, 0, 
buf
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isÇotávailable. "

54 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is clear.");

55 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP isÇot "

58 
	`CU_FAIL
("[FAILED] WRITESAME16 UNMAP is unavailable but "

61 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is clear.");

64 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isávailable. Verify "

67 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

68 i‡(
rc16
 &&Ñc16->
lbpme
) {

69 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

71 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

73 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is set.");

77 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

78 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is set.");

80 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

82 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS==0");

85 
	}
}

	@test-tool/test_writesame16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, 1,

50 0, 0, 
i
, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

53 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_writeverify10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

44 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_writeverify10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with DPO==1");

41 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify10_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify10_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY10. SkippingÅest");

55 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

56 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

60 
èsk
->
cdb
[8] = 1;

61 
èsk
->
cdb_size
 = 10;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

63 
èsk
->
expx„æí
 = 0;

69 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

71 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

73 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

74 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

75 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

81 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

84 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

87 
	`iscsi_gë_îr‹
(
iscsic
));

89 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

91 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

92 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

96 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

98 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

99 
block_size
);

100 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

103 
block_size
, 
èsk
->
ªsiduÆ
);

105 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
èsk
 = 
NULL
;

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

114 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

115 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

117 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

118 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

119 
èsk
->
cdb
[8] = 1;

120 
èsk
->
cdb_size
 = 10;

121 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

122 
èsk
->
expx„æí
 = 10000;

124 
d©a
.
size
 = 
èsk
->
expx„æí
;

125 
d©a
.d©®&
buf
[0];

126 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

127 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

130 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

132 
	`iscsi_gë_îr‹
(
iscsic
));

134 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

161 
èsk
->
cdb
[8] = 1;

162 
èsk
->
cdb_size
 = 10;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

164 
èsk
->
expx„æí
 = 200;

166 
d©a
.
size
 = 
èsk
->
expx„æí
;

167 
d©a
.d©®&
buf
[0];

168 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

169 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

172 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

174 
	`iscsi_gë_îr‹
(
iscsic
));

176 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

178 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

179 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

183 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

185 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

186 
block_size
 - 200);

187 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

190 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

192 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
èsk
 = 
NULL
;

199 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

200 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

204 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

205 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

206 
èsk
->
cdb
[8] = 2;

207 
èsk
->
cdb_size
 = 10;

208 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

209 
èsk
->
expx„æí
 = 
block_size
;

211 
d©a
.
size
 = 
èsk
->
expx„æí
;

212 
d©a
.d©®&
buf
[0];

213 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

214 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

217 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

219 
	`iscsi_gë_îr‹
(
iscsic
));

221 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

223 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

224 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

230 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

231 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

234 
block_size
, 
èsk
->
ªsiduÆ
);

236 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
èsk
 = 
NULL
;

244 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

246 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

247 
	`mem£t
(
buf
, 'a', 10000);

248 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

249 
block_size
, 0, 0, 0, 0, 0, 
buf
);

250 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

253 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

254 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

256 
	`mem£t
(
buf
, 'b', 10000);

258 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

259 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

260 
èsk
->
cdb
[8] = 1;

261 
èsk
->
cdb_size
 = 10;

262 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

263 
èsk
->
expx„æí
 = 2 * 
block_size
;

265 
d©a
.
size
 = 
èsk
->
expx„æí
;

266 
d©a
.d©®&
buf
[0];

267 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

268 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

270 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

271 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

273 
	`iscsi_gë_îr‹
(
iscsic
));

275 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

277 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

278 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

279 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

284 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

285 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

286 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

288 
block_size
, 
èsk
->
ªsiduÆ
);

290 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

292 
èsk
 = 
NULL
;

294 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

295 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

296 
block_size
, 0, 0, 0, 0, 0, 
buf
);

297 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

300 
i
 = 0; i < 
block_size
; i++) {

301 i‡(
buf
[
i
] != 'b') {

302 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

303 
	`CU_FAIL
("Block wasÇot written correctly");

308 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

309 
i
 = 
block_size
; i < 2 * block_size; i++) {

310 i‡(
buf
[
i
] != 'a') {

311 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

312 
	`CU_FAIL
("Second block was incorrectly overwritten");

318 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

320 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

321 
	`mem£t
(
buf
, 'a', 10000);

322 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

323 
block_size
, 0, 0, 0, 0, 0, 
buf
);

324 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

326 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

327 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

328 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

330 
	`mem£t
(
buf
, 'b', 10000);

332 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

333 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

334 
èsk
->
cdb
[8] = 2;

335 
èsk
->
cdb_size
 = 10;

336 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

337 
èsk
->
expx„æí
 = 
block_size
;

339 
d©a
.
size
 = 
èsk
->
expx„æí
;

340 
d©a
.d©®&
buf
[0];

341 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

342 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

344 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

345 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

346 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

347 
	`iscsi_gë_îr‹
(
iscsic
));

349 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

351 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

352 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

353 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

358 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

359 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

360 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

362 
block_size
, 
èsk
->
ªsiduÆ
);

364 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

365 
	`scsi_‰ì_scsi_èsk
(
èsk
);

366 
èsk
 = 
NULL
;

368 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

369 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

370 
block_size
, 0, 0, 0, 0, 0, 
buf
);

371 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

374 
i
 = 0; i < 
block_size
; i++) {

375 i‡(
buf
[
i
] != 'b') {

376 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

377 
	`CU_FAIL
("Block wasÇot written correctly");

382 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

383 
i
 = 
block_size
; i < 2 * block_size; i++) {

384 i‡(
buf
[
i
] != 'a') {

385 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

386 
	`CU_FAIL
("Second block was incorrectly overwritten");

390 
	}
}

	@test-tool/test_writeverify10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY10. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_writeverify10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôevîify10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writeverify12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify12_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

44 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_writeverify12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with DPO==1");

41 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY12. SkippingÅest");

55 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

56 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

60 
èsk
->
cdb
[9] = 1;

61 
èsk
->
cdb_size
 = 12;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

63 
èsk
->
expx„æí
 = 0;

69 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

71 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

73 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

74 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

75 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

81 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

84 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

87 
	`iscsi_gë_îr‹
(
iscsic
));

89 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

91 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

92 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

96 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

98 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

99 
block_size
);

100 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

103 
block_size
, 
èsk
->
ªsiduÆ
);

105 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
èsk
 = 
NULL
;

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

114 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

115 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

117 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

118 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

119 
èsk
->
cdb
[9] = 1;

120 
èsk
->
cdb_size
 = 12;

121 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

122 
èsk
->
expx„æí
 = 10000;

124 
d©a
.
size
 = 
èsk
->
expx„æí
;

125 
d©a
.d©®&
buf
[0];

126 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

127 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

130 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

132 
	`iscsi_gë_îr‹
(
iscsic
));

134 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

161 
èsk
->
cdb
[9] = 1;

162 
èsk
->
cdb_size
 = 12;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

164 
èsk
->
expx„æí
 = 200;

166 
d©a
.
size
 = 
èsk
->
expx„æí
;

167 
d©a
.d©®&
buf
[0];

168 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

169 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

172 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

174 
	`iscsi_gë_îr‹
(
iscsic
));

176 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

178 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

179 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

183 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

185 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

186 
block_size
 - 200);

187 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

190 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

192 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
èsk
 = 
NULL
;

199 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

200 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

204 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

205 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

206 
èsk
->
cdb
[9] = 2;

207 
èsk
->
cdb_size
 = 12;

208 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

209 
èsk
->
expx„æí
 = 
block_size
;

211 
d©a
.
size
 = 
èsk
->
expx„æí
;

212 
d©a
.d©®&
buf
[0];

213 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

214 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

217 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

219 
	`iscsi_gë_îr‹
(
iscsic
));

221 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

223 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

224 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

230 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

231 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

234 
block_size
, 
èsk
->
ªsiduÆ
);

236 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
èsk
 = 
NULL
;

244 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

246 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

247 
	`mem£t
(
buf
, 'a', 10000);

248 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

249 
block_size
, 0, 0, 0, 0, 0, 
buf
);

250 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

253 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

254 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

256 
	`mem£t
(
buf
, 'b', 10000);

258 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

259 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

260 
èsk
->
cdb
[9] = 1;

261 
èsk
->
cdb_size
 = 12;

262 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

263 
èsk
->
expx„æí
 = 2 * 
block_size
;

265 
d©a
.
size
 = 
èsk
->
expx„æí
;

266 
d©a
.d©®&
buf
[0];

267 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

268 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

270 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

271 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

273 
	`iscsi_gë_îr‹
(
iscsic
));

275 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

277 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

278 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

279 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

284 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

285 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

286 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

288 
block_size
, 
èsk
->
ªsiduÆ
);

290 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

292 
èsk
 = 
NULL
;

294 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

295 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

296 
block_size
, 0, 0, 0, 0, 0, 
buf
);

297 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

300 
i
 = 0; i < 
block_size
; i++) {

301 i‡(
buf
[
i
] != 'b') {

302 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

303 
	`CU_FAIL
("Block wasÇot written correctly");

308 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

309 
i
 = 
block_size
; i < 2 * block_size; i++) {

310 i‡(
buf
[
i
] != 'a') {

311 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

312 
	`CU_FAIL
("Second block was incorrectly overwritten");

318 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

320 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

321 
	`mem£t
(
buf
, 'a', 10000);

322 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

323 
block_size
, 0, 0, 0, 0, 0, 
buf
);

324 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

326 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

327 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

328 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

330 
	`mem£t
(
buf
, 'b', 10000);

332 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

333 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

334 
èsk
->
cdb
[9] = 2;

335 
èsk
->
cdb_size
 = 12;

336 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

337 
èsk
->
expx„æí
 = 
block_size
;

339 
d©a
.
size
 = 
èsk
->
expx„æí
;

340 
d©a
.d©®&
buf
[0];

341 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

342 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

344 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

345 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

346 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

347 
	`iscsi_gë_îr‹
(
iscsic
));

349 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

351 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

352 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

353 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

358 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

359 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

360 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

362 
block_size
, 
èsk
->
ªsiduÆ
);

364 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

365 
	`scsi_‰ì_scsi_èsk
(
èsk
);

366 
èsk
 = 
NULL
;

368 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

369 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

370 
block_size
, 0, 0, 0, 0, 0, 
buf
);

371 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

374 
i
 = 0; i < 
block_size
; i++) {

375 i‡(
buf
[
i
] != 'b') {

376 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

377 
	`CU_FAIL
("Block wasÇot written correctly");

382 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

383 
i
 = 
block_size
; i < 2 * block_size; i++) {

384 i‡(
buf
[
i
] != 'a') {

385 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

386 
	`CU_FAIL
("Second block was incorrectly overwritten");

390 
	}
}

	@test-tool/test_writeverify12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

48 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_writeverify12_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôevîify12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writeverify16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

37 0, 
block_size
,

38 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

41 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocks one blockÖastÉnd-of-LUN");

47 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

48 0, 
block_size
,

49 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==2^63");

54 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

55 0, 
block_size
,

56 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==-1");

61 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

45 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

50 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==2^63");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

63 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

77 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

79 
i
 * 
block_size
, block_size,

80 0, 0, 0, 0, 
buf
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

86 
i
 = 2; i <= 256; i++) {

87 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

91 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

92 
num_blocks
 - 1,

93 
i
 * 
block_size
, block_size,

94 0, 0, 0, 0, 
buf
);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
	}
}

	@test-tool/test_writeverify16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with DPO==1");

41 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY16. SkippingÅest");

56 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

57 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

59 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

60 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

61 
èsk
->
cdb
[13] = 1;

62 
èsk
->
cdb_size
 = 16;

63 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

64 
èsk
->
expx„æí
 = 0;

70 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

72 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

74 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

75 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

76 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

82 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

88 
	`iscsi_gë_îr‹
(
iscsic
));

90 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

93 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

99 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

100 
block_size
);

101 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

104 
block_size
, 
èsk
->
ªsiduÆ
);

106 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
èsk
 = 
NULL
;

111 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

120 
èsk
->
cdb
[13] = 1;

121 
èsk
->
cdb_size
 = 16;

122 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

123 
èsk
->
expx„æí
 = 10000;

125 
d©a
.
size
 = 
èsk
->
expx„æí
;

126 
d©a
.d©®&
buf
[0];

127 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

128 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

130 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

131 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

132 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

133 
	`iscsi_gë_îr‹
(
iscsic
));

135 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

137 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

138 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

139 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

144 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

145 10000 - 
block_size
);

146 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

147 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

149 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

151 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
èsk
 = 
NULL
;

156 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

157 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

160 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

161 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

162 
èsk
->
cdb
[13] = 1;

163 
èsk
->
cdb_size
 = 16;

164 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

165 
èsk
->
expx„æí
 = 200;

167 
d©a
.
size
 = 
èsk
->
expx„æí
;

168 
d©a
.d©®&
buf
[0];

169 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

170 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

172 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

173 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

174 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

175 
	`iscsi_gë_îr‹
(
iscsic
));

177 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

179 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

180 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

181 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

186 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

187 
block_size
 - 200);

188 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

189 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

191 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

193 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
NULL
;

200 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

201 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

202 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

203 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

205 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

206 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

207 
èsk
->
cdb
[13] = 2;

208 
èsk
->
cdb_size
 = 16;

209 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

210 
èsk
->
expx„æí
 = 
block_size
;

212 
d©a
.
size
 = 
èsk
->
expx„æí
;

213 
d©a
.d©®&
buf
[0];

214 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

215 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

217 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

219 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

220 
	`iscsi_gë_îr‹
(
iscsic
));

222 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

224 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

225 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

226 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

231 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

232 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

233 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

235 
block_size
, 
èsk
->
ªsiduÆ
);

237 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

240 
èsk
 = 
NULL
;

245 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

247 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

248 
	`mem£t
(
buf
, 'a', 10000);

249 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

250 
block_size
, 0, 0, 0, 0, 0, 
buf
);

251 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

253 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

254 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

255 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

257 
	`mem£t
(
buf
, 'b', 10000);

259 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

260 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

261 
èsk
->
cdb
[13] = 1;

262 
èsk
->
cdb_size
 = 16;

263 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

264 
èsk
->
expx„æí
 = 2 * 
block_size
;

266 
d©a
.
size
 = 
èsk
->
expx„æí
;

267 
d©a
.d©®&
buf
[0];

268 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

269 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

271 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

272 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

273 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

274 
	`iscsi_gë_îr‹
(
iscsic
));

276 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

278 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

279 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

280 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

283 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

285 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

286 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

287 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

289 
block_size
, 
èsk
->
ªsiduÆ
);

291 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
èsk
 = 
NULL
;

295 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

296 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

297 
block_size
, 0, 0, 0, 0, 0, 
buf
);

298 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

300 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

301 
i
 = 0; i < 
block_size
; i++) {

302 i‡(
buf
[
i
] != 'b') {

303 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

304 
	`CU_FAIL
("Block wasÇot written correctly");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

310 
i
 = 
block_size
; i < 2 * block_size; i++) {

311 i‡(
buf
[
i
] != 'a') {

312 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

313 
	`CU_FAIL
("Second block was incorrectly overwritten");

319 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

321 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

322 
	`mem£t
(
buf
, 'a', 10000);

323 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

324 
block_size
, 0, 0, 0, 0, 0, 
buf
);

325 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

327 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

328 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

329 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

331 
	`mem£t
(
buf
, 'b', 10000);

333 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

334 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

335 
èsk
->
cdb
[13] = 2;

336 
èsk
->
cdb_size
 = 16;

337 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

338 
èsk
->
expx„æí
 = 
block_size
;

340 
d©a
.
size
 = 
èsk
->
expx„æí
;

341 
d©a
.d©®&
buf
[0];

342 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

343 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

345 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

346 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

347 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

348 
	`iscsi_gë_îr‹
(
iscsic
));

350 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

352 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

353 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

354 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

357 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

359 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

360 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

361 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

363 
block_size
, 
èsk
->
ªsiduÆ
);

365 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

366 
	`scsi_‰ì_scsi_èsk
(
èsk
);

367 
èsk
 = 
NULL
;

369 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

370 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

371 
block_size
, 0, 0, 0, 0, 0, 
buf
);

372 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

375 
i
 = 0; i < 
block_size
; i++) {

376 i‡(
buf
[
i
] != 'b') {

377 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

378 
	`CU_FAIL
("Block wasÇot written correctly");

383 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

384 
i
 = 
block_size
; i < 2 * block_size; i++) {

385 i‡(
buf
[
i
] != 'a') {

386 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

387 
	`CU_FAIL
("Second block was incorrectly overwritten");

391 
	}
}

	@test-tool/test_writeverify16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

47 
block_size
, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

50 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	}
}

	@test-tool/test_writeverify16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_wΩrŸe˘
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 withÇon-zero WRPROTECT");

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

46 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

47 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

48 
i
 = 1; i < 8; i++) {

49 
ªt
 = 
	`wrôevîify16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

50 
block_size
, block_size,

51 
i
, 0, 0, 0, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

54 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

63 
	}
}

	@win32/win32_compat.c

24 #i‚de‡
WIN32


26 
dummy
 
ATTRIBUTE
((
unu£d
));

29 
	~"wö32_com∑t.h
"

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

32 
	~<Åime.h 
>

34 #unde‡
pﬁl


35 #unde‡
sockë


36 #unde‡
c⁄√˘


37 #unde‡
ac˚±


38 #unde‡
shutdown


39 #unde‡
gë≥î«me


40 #unde‡
¶ìp


41 #unde‡
öë_©⁄


42 #unde‡
gëtimeofday


43 #unde‡
°©


44 
	#as£π
(
a
)

	)

47 
	~<˘y≥.h
>

49 
	$wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
)

51 
sockaddr_ö
 
ß
;

52 
Àn
 = (
SOCKADDR
);

53 
ªt
 = -1;

54 
°rLí
 = 
	`°æí
(
§c
) + 1;

55 #ifde‡
UNICODE


56 
wch¨_t
 *
§cN⁄C⁄°
 = (wch¨_à*)
	`mÆloc
(
°rLí
*(wchar_t));

57 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

58 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
§c
, -1, 
§cN⁄C⁄°
, 
°rLí
);

60 *
§cN⁄C⁄°
 = (*)
	`mÆloc
(
°rLí
);

61 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

62 
	`°∫˝y
(
§cN⁄C⁄°
, 
§c
, 
°rLí
);

65 if–
	`WSASåögToAddªss
(
§cN⁄C⁄°
,
af
,
NULL
,(
LPSOCKADDR
)&
ß
,&
Àn
) == 0 )

67 
ªt
 = 1;

71 if–
	`WSAGëLa°Eº‹
(Ë=
WSAEINVAL
 )

73 
ªt
 = -1;

76 
	`‰ì
(
§cN⁄C⁄°
);

77 
	`mem˝y
(
d°
, &
ß
.
sö_addr
, (
ö_addr
));

78  
ªt
;

79 
	}
}

81 
	$wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

83 
timevÆ
 
timeout
, *
t›å
;

84 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

85 
i
;

86 
rc
;

89 
	`FD_ZERO
(&
ifds
);

90 
	`FD_ZERO
(&
ofds
);

91 
	`FD_ZERO
(&
efds
);

92 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

94 
fds
[
i
].
ªvíts
 = 0;

95 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

97 
ù
 = &
ifds
;

98 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

100 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

102 
›
 = &
ofds
;

103 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

105 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

109 if(
timo
 < 0)

111 
t›å
 = 0;

115 
t›å
 = &
timeout
;

116 
timeout
.
tv_£c
 = 
timo
 / 1000;

117 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

120 #ifde‡
DEBUG_POLL


121 
	`¥ötf
("Entering select() sec=%ld usec=%ld ip=%lx op=%lx\n",

122 ()
timeout
.
tv_£c
, (Èimeout.
tv_u£c
, ()
ù
, ()
›
);

124 
rc
 = 
	`£À˘
(0, 
ù
, 
›
, &
efds
, 
t›å
);

125 #ifde‡
DEBUG_POLL


126 
	`¥ötf
("Exôög sñe˘Ñc=%d\n", 
rc
);

129 if(
rc
 <= 0)

130  
rc
;

132 if(
rc
 > 0)

134 
i
 = 0; i < 
nfds
; ++i)

136 
fd
 = 
fds
[
i
].fd;

137 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

138 
fds
[
i
].
ªvíts
 |
POLLIN
;

139 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

140 
fds
[
i
].
ªvíts
 |
POLLOUT
;

141 if(
	`FD_ISSET
(
fd
, &
efds
))

142 
fds
[
i
].
ªvíts
 |
POLLHUP
;

143 #ifde‡
DEBUG_POLL


144 
	`¥ötf
("%d %d %dÑevent = %x\n",

145 
	`FD_ISSET
(
fd
, &
ifds
), FD_ISSET(fd, &
ofds
), FD_ISSET(fd, &
efds
),

146 
fds
[
i
].
ªvíts


151  
rc
;

152 
	}
}

154 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
_MSC_EXTENSIONS
)

155 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000U
i64


	)

157 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000ULL

	)

160 
	stimez⁄e


162 
	mtz_möuãswe°
;

163 
	mtz_d°time
;

166 
	$wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

168 
FILETIME
 
·
;

169 
__öt64
 
tm¥es
 = 0;

170 
tzÊag
;

172 i‡(
NULL
 !
tv
)

174 
	`GëSy°emTimeAsFûeTime
(&
·
);

176 
tm¥es
 |
·
.
dwHighD©eTime
;

177 
tm¥es
 <<= 32;

178 
tm¥es
 |
·
.
dwLowD©eTime
;

181 
tm¥es
 -
DELTA_EPOCH_IN_MICROSECS
;

182 
tm¥es
 /= 10;

183 
tv
->
tv_£c
 = ()(
tm¥es
 / 1000000UL);

184 
tv
->
tv_u£c
 = ()(
tm¥es
 % 1000000UL);

187 i‡(
NULL
 !
tz
)

189 i‡(!
tzÊag
)

191 
	`_tz£t
();

192 
tzÊag
++;

194 
tz
->
tz_möuãswe°
 = 
_timez⁄e
 / 60;

195 
tz
->
tz_d°time
 = 
_daylight
;

199 
	}
}

201 
ssize_t
 
	$wö32_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

203  
	`ªad
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

204 
	}
}

206 
ssize_t
 
	$wö32_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

208  
	`wrôe
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

209 
	}
}

	@/usr/include/arpa/inet.h

58 #i‚de‡
_ARPA_INET_H_


59 
	#_ARPA_INET_H_


	)

63 
	~<sys/cdefs.h
>

64 
	~<sys/_ty≥s.h
>

67 
	~<machöe/ídün.h
>

69 
	#INET_ADDRSTRLEN
 16

	)

70 
	#INET6_ADDRSTRLEN
 46

	)

72 #i‚de‡
_UINT16_T_DECLARED


73 
__uöt16_t
 
	tuöt16_t
;

74 
	#_UINT16_T_DECLARED


	)

77 #i‚de‡
_UINT32_T_DECLARED


78 
__uöt32_t
 
	tuöt32_t
;

79 
	#_UINT32_T_DECLARED


	)

82 #i‚de‡
_IN_ADDR_T_DECLARED


83 
uöt32_t
 
	tö_addr_t
;

84 
	#_IN_ADDR_T_DECLARED


	)

87 #i‚de‡
_IN_PORT_T_DECLARED


88 
uöt16_t
 
	tö_p‹t_t
;

89 
	#_IN_PORT_T_DECLARED


	)

92 #i‡
__BSD_VISIBLE


93 #i‚de‡
_SIZE_T_DECLARED


94 
__size_t
 
	tsize_t
;

95 
	#_SIZE_T_DECLARED


	)

103 #i‚de‡
_SOCKLEN_T_DECLARED


104 
__sockÀn_t
 
	tsockÀn_t
;

105 
	#_SOCKLEN_T_DECLARED


	)

108 #i‚de‡
_STRUCT_IN_ADDR_DECLARED


109 
	sö_addr
 {

110 
ö_addr_t
 
	ms_addr
;

112 
	#_STRUCT_IN_ADDR_DECLARED


	)

116 #i‡
__BSD_VISIBLE


117 
	#öë_addr
 
__öë_addr


	)

118 
	#öë_©⁄
 
__öë_©⁄


	)

119 
	#öë_ aof
 
__öë_ aof


	)

120 
	#öë_makóddr
 
__öë_makóddr


	)

121 
	#öë_√è
 
__öë_√è


	)

122 
	#öë_√tof
 
__öë_√tof


	)

123 
	#öë_√tw‹k
 
__öë_√tw‹k


	)

124 
	#öë_√t_¡›
 
__öë_√t_¡›


	)

125 
	#öë_√t_±⁄
 
__öë_√t_±⁄


	)

126 
	#öë_cidr_¡›
 
__öë_cidr_¡›


	)

127 
	#öë_cidr_±⁄
 
__öë_cidr_±⁄


	)

128 
	#öë_¡ﬂ
 
__öë_¡ﬂ


	)

129 
	#öë_¡ﬂ_r
 
__öë_¡ﬂ_r


	)

130 
	#öë_±⁄
 
__öë_±⁄


	)

131 
	#öë_¡›
 
__öë_¡›


	)

132 
	#öë_nßp_addr
 
__öë_nßp_addr


	)

133 
	#öë_nßp_¡ﬂ
 
__öë_nßp_¡ﬂ


	)

136 
	g__BEGIN_DECLS


137 #i‚de‡
_BYTEORDER_PROTOTYPED


138 
	#_BYTEORDER_PROTOTYPED


	)

139 
uöt32_t
 
ht⁄l
(uint32_t);

140 
uöt16_t
 
ht⁄s
(uint16_t);

141 
uöt32_t
 
¡ohl
(uint32_t);

142 
uöt16_t
 
¡ohs
(uint16_t);

145 
ö_addr_t
 
öë_addr
(const *);

146  *
öë_¡ﬂ
(
ö_addr
);

147 c⁄° *
öë_¡›
(, c⁄° * 
__ª°ri˘
, * __restrict,

148 
sockÀn_t
);

149 
öë_±⁄
(, c⁄° * 
__ª°ri˘
, * __restrict);

151 #i‡
__BSD_VISIBLE


152 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

153 
ö_addr_t
 
öë_ aof
(
ö_addr
);

154 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

155 * 
öë_√è
(
ö_addr_t
, *, 
size_t
);

156 
ö_addr_t
 
öë_√tof
(
ö_addr
);

157 
ö_addr_t
 
öë_√tw‹k
(const *);

158 *
öë_√t_¡›
(, c⁄° *, , *, 
size_t
);

159 
öë_√t_±⁄
(, c⁄° *, *, 
size_t
);

160 *
öë_¡ﬂ_r
(
ö_addr
, *
buf
, 
sockÀn_t
 
size
);

161 *
öë_cidr_¡›
(, c⁄° *, , *, 
size_t
);

162 
öë_cidr_±⁄
(, const *, *, *);

163 
öë_nßp_addr
(const *, *, );

164 *
öë_nßp_¡ﬂ
(, const *, *);

166 
	g__END_DECLS


168 #i‚de‡
_BYTEORDER_FUNC_DEFINED


169 
	#_BYTEORDER_FUNC_DEFINED


	)

170 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

171 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

172 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

173 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

	@/usr/include/assert.h

38 
	~<sys/cdefs.h
>

45 #unde‡
as£π


46 #unde‡
_as£π


48 #ifde‡
NDEBUG


49 
	#as£π
(
e
Ë(()0)

	)

50 
	#_as£π
(
e
Ë(()0)

	)

52 
	#_as£π
(
e
Ë
	`as£π
”)

	)

54 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π
(
__func__
, 
__FILE__
, \

55 
__LINE__
, #e))

	)

58 #i‚de‡
_ASSERT_H_


59 
	#_ASSERT_H_


	)

60 
__BEGIN_DECLS


61 
	$__as£π
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

62 
__END_DECLS


	@/usr/include/ctype.h

41 #i‚de‡
_CTYPE_H_


42 
	#_CTYPE_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/_ty≥s.h
>

46 
	~<_˘y≥.h
>

48 
__BEGIN_DECLS


49 
iß um
();

50 
ißÕha
();

51 
is˙ål
();

52 
isdigô
();

53 
isgøph
();

54 
i¶owî
();

55 
i•röt
();

56 
i•un˘
();

57 
is•a˚
();

58 
isuµî
();

59 
isxdigô
();

60 
tﬁowî
();

61 
touµî
();

63 #i‡
__XSI_VISIBLE


64 
ißscii
();

65 
tﬂscii
();

68 #i‡
__ISO_C_VISIBLE
 >= 1999

69 
isbœnk
();

72 #i‡
__BSD_VISIBLE


73 
digôtoöt
();

74 
ishexnumbî
();

75 
isideogøm
();

76 
i¢umbî
();

77 
i•h⁄ogøm
();

78 
i§u√
();

79 
is•ecül
();

82 #i‡
__POSIX_VISIBLE
 >200809 || 
deföed
(
_XLOCALE_H_
)

83 
	~<xloˇÀ/_˘y≥.h
>

85 
	g__END_DECLS


87 #i‚de‡
__˝lu•lus


88 
	#iß um
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
|
_CTYPE_D
)

	)

89 
	#ißÕha
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
)

	)

90 
	#is˙ål
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_C
)

	)

91 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_D
Ë

	)

92 
	#isgøph
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_G
)

	)

93 
	#i¶owî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_L
)

	)

94 
	#i•röt
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_R
)

	)

95 
	#i•un˘
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_P
)

	)

96 
	#is•a˚
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_S
)

	)

97 
	#isuµî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_U
)

	)

98 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_X
Ë

	)

99 
	#tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

100 
	#touµî
(
c
Ë
	`__sbtouµî
(c)

	)

103 #i‡
__XSI_VISIBLE


115 
	#_tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

116 
	#_touµî
(
c
Ë
	`__sbtouµî
(c)

	)

117 
	#ißscii
(
c
Ë(((cË& ~0x7FË=0)

	)

118 
	#tﬂscii
(
c
Ë((cË& 0x7F)

	)

121 #i‡
__ISO_C_VISIBLE
 >1999 && !
deföed
(
__˝lu•lus
)

122 
	#isbœnk
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_B
)

	)

125 #i‡
__BSD_VISIBLE


126 
	#digôtoöt
(
c
Ë
	`__sbmaskru√
((c), 0xFF)

	)

127 
	#ishexnumbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_X
)

	)

128 
	#isideogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_I
)

	)

129 
	#i¢umbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_D
)

	)

130 
	#i•h⁄ogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_Q
)

	)

131 
	#i§u√
(
c
Ë
	`__sbi°y≥
((c), 0xFFFFFF00L)

	)

132 
	#is•ecül
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_T
)

	)

	@/usr/include/dlfcn.h

32 #i‚de‡
_DLFCN_H_


33 
	#_DLFCN_H_


	)

35 
	~<sys/_ty≥s.h
>

40 
	#RTLD_LAZY
 1

	)

41 
	#RTLD_NOW
 2

	)

42 
	#RTLD_MODEMASK
 0x3

	)

43 
	#RTLD_GLOBAL
 0x100

	)

44 
	#RTLD_LOCAL
 0

	)

45 
	#RTLD_TRACE
 0x200

	)

46 
	#RTLD_NODELETE
 0x01000

	)

47 
	#RTLD_NOLOAD
 0x02000

	)

52 
	#RTLD_DI_LINKMAP
 2

	)

53 
	#RTLD_DI_SERINFO
 4

	)

54 
	#RTLD_DI_SERINFOSIZE
 5

	)

55 
	#RTLD_DI_ORIGIN
 6

	)

56 
	#RTLD_DI_MAX
 
RTLD_DI_ORIGIN


	)

61 
	#RTLD_NEXT
 ((*Ë-1Ë

	)

62 
	#RTLD_DEFAULT
 ((*Ë-2Ë

	)

63 
	#RTLD_SELF
 ((*Ë-3Ë

	)

65 #i‡
__BSD_VISIBLE


67 #i‚def 
_SIZE_T_DECLARED


68 
__size_t
 
	tsize_t
;

69 
	#_SIZE_T_DECLARED


	)

75 
	sdl_öfo
 {

76 c⁄° *
	mdli_‚ame
;

77 *
	mdli_fba£
;

78 c⁄° *
	mdli_¢ame
;

79 *
	mdli_ßddr
;

80 } 
	tDl_öfo
;

91 
	s__dlfunc_¨g
 {

92 
	m__dlfunc_dummy
;

95 (*
	tdlfunc_t
)(
	t__dlfunc_¨g
);

100 
	sdl_£Ω©h
 {

101 * 
dls_«me
;

102 
dls_Êags
;

103 } 
	tDl_£Ω©h
;

105 
	sdl_£röfo
 {

106 
size_t
 
dls_size
;

107 
dls_˙t
;

108 
Dl_£Ω©h
 
dls_£Ω©h
[1];

109 } 
	tDl_£röfo
;

113 
__BEGIN_DECLS


115 
	`dl˛o£
(*);

116 *
	`dÀº‹
();

117 *
	`dl›í
(const *, );

118 *
	`dlsym
(* 
__ª°ri˘
, const * __restrict);

120 #i‡
__BSD_VISIBLE


121 *
	`fdl›í
(, );

122 
	`dœddr
(c⁄° * 
__ª°ri˘
, 
Dl_öfo
 * __restrict);

123 
dlfunc_t
 
	`dlfunc
(* 
__ª°ri˘
, const * __restrict);

124 
	`dlöfo
(* 
__ª°ri˘
, , * __restrict);

125 
	`dŒocköô
(*
_c⁄ãxt
,

126 *(*
_lock_¸óã
)(*
_c⁄ãxt
),

127 (*
_æock_acquúe
)(*
_lock
),

128 (*
_wlock_acquúe
)(*
_lock
),

129 (*
_lock_ªÀa£
)(*
_lock
),

130 (*
_lock_de°roy
)(*
_lock
),

131 (*
_c⁄ãxt_de°roy
)(*
_c⁄ãxt
));

132 *
	`dlvsym
(* 
__ª°ri˘
, const * __restrict,

133 c⁄° * 
__ª°ri˘
);

135 
__END_DECLS


	@/usr/include/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

178 
	#ECAPMODE
 94

	)

179 
	#ENOTRECOVERABLE
 95

	)

182 #i‚de‡
_POSIX_SOURCE


183 
	#ELAST
 94

	)

186 #ifde‡
_KERNEL


188 
	#ERESTART
 (-1Ë

	)

189 
	#EJUSTRETURN
 (-2Ë

	)

190 
	#ENOIOCTL
 (-3Ë

	)

191 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__BSD_VISIBLE


100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

118 #i‡
__BSD_VISIBLE


119 
	#O_DIRECTORY
 0x00020000

	)

120 
	#O_EXEC
 0x00040000

	)

122 #ifdef 
_KERNEL


123 
	#FEXEC
 
O_EXEC


	)

126 #i‡
__POSIX_VISIBLE
 >= 200809

128 
	#O_TTY_INIT
 0x00080000

	)

130 
	#O_CLOEXEC
 0x00100000

	)

137 #ifde‡
_KERNEL


139 
	#FFLAGS
(
oÊags
Ë((oÊagsË+ 1)

	)

140 
	#OFLAGS
(
fÊags
Ë((fÊagsË- 1)

	)

143 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

145 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

147 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

148 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

154 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

155 #unde‡
FCNTLFLAGS


156 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

157 
O_DIRECT
)

	)

166 #i‡
__BSD_VISIBLE


167 
	#FAPPEND
 
O_APPEND


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FFSYNC
 
O_FSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

181 #i‡
__BSD_VISIBLE


183 
	#FRDAHEAD
 
O_CREAT


	)

187 #i‡
__BSD_VISIBLE


193 
	#AT_FDCWD
 -100

	)

198 
	#AT_EACCESS
 0x100

	)

199 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

200 
	#AT_SYMLINK_FOLLOW
 0x400

	)

201 
	#AT_REMOVEDIR
 0x800

	)

209 
	#F_DUPFD
 0

	)

210 
	#F_GETFD
 1

	)

211 
	#F_SETFD
 2

	)

212 
	#F_GETFL
 3

	)

213 
	#F_SETFL
 4

	)

214 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

215 
	#F_GETOWN
 5

	)

216 
	#F_SETOWN
 6

	)

218 #i‡
__BSD_VISIBLE


219 
	#F_OGETLK
 7

	)

220 
	#F_OSETLK
 8

	)

221 
	#F_OSETLKW
 9

	)

222 
	#F_DUP2FD
 10

	)

224 
	#F_GETLK
 11

	)

225 
	#F_SETLK
 12

	)

226 
	#F_SETLKW
 13

	)

227 #i‡
__BSD_VISIBLE


228 
	#F_SETLK_REMOTE
 14

	)

229 
	#F_READAHEAD
 15

	)

230 
	#F_RDAHEAD
 16

	)

232 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

233 
	#F_DUPFD_CLOEXEC
 17

	)

235 #i‡
__BSD_VISIBLE


236 
	#F_DUP2FD_CLOEXEC
 18

	)

240 
	#FD_CLOEXEC
 1

	)

243 
	#F_RDLCK
 1

	)

244 
	#F_UNLCK
 2

	)

245 
	#F_WRLCK
 3

	)

246 #i‡
__BSD_VISIBLE


247 
	#F_UNLCKSYS
 4

	)

248 
	#F_CANCEL
 5

	)

250 #ifde‡
_KERNEL


251 
	#F_WAIT
 0x010

	)

252 
	#F_FLOCK
 0x020

	)

253 
	#F_POSIX
 0x040

	)

254 
	#F_REMOTE
 0x080

	)

255 
	#F_NOINTR
 0x100

	)

262 
	sÊock
 {

263 
off_t
 
l_°¨t
;

264 
off_t
 
l_Àn
;

265 
pid_t
 
l_pid
;

266 
l_ty≥
;

267 
l_whí˚
;

268 
l_sysid
;

271 #i‡
__BSD_VISIBLE


276 
	s__oÊock
 {

277 
off_t
 
l_°¨t
;

278 
off_t
 
l_Àn
;

279 
pid_t
 
l_pid
;

280 
l_ty≥
;

281 
l_whí˚
;

285 #i‡
__BSD_VISIBLE


287 
	#LOCK_SH
 0x01

	)

288 
	#LOCK_EX
 0x02

	)

289 
	#LOCK_NB
 0x04

	)

290 
	#LOCK_UN
 0x08

	)

293 #i‡
__POSIX_VISIBLE
 >= 200112

297 
	#POSIX_FADV_NORMAL
 0

	)

298 
	#POSIX_FADV_RANDOM
 1

	)

299 
	#POSIX_FADV_SEQUENTIAL
 2

	)

300 
	#POSIX_FADV_WILLNEED
 3

	)

301 
	#POSIX_FADV_DONTNEED
 4

	)

302 
	#POSIX_FADV_NOREUSE
 5

	)

305 #i‚de‡
_KERNEL


306 
__BEGIN_DECLS


307 
	`›í
(const *, , ...);

308 
	`¸ót
(c⁄° *, 
mode_t
);

309 
	`f˙é
(, , ...);

310 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

311 
	`›í©
(, const *, , ...);

313 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

314 
	`posix_Ádvi£
(, 
off_t
, off_t, );

315 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

317 #i‡
__BSD_VISIBLE


318 
	`Êock
(, );

320 
__END_DECLS


	@/usr/include/fnmatch.h

33 #i‚def 
_FNMATCH_H_


34 
	#_FNMATCH_H_


	)

36 
	~<sys/cdefs.h
>

38 
	#FNM_NOMATCH
 1

	)

40 
	#FNM_NOESCAPE
 0x01

	)

41 
	#FNM_PATHNAME
 0x02

	)

42 
	#FNM_PERIOD
 0x04

	)

44 #i‡
__XSI_VISIBLE


45 
	#FNM_NOSYS
 (-1Ë

	)

48 #i‡
__BSD_VISIBLE


49 
	#FNM_LEADING_DIR
 0x08

	)

50 
	#FNM_CASEFOLD
 0x10

	)

51 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

52 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

55 
__BEGIN_DECLS


56 
‚m©ch
(const *, const *, );

57 
	g__END_DECLS


	@/usr/include/getopt.h

33 #i‚de‡
_GETOPT_H_


34 
	#_GETOPT_H_


	)

36 
	~<sys/cdefs.h
>

42 
	#no_¨gumít
 0

	)

43 
	#ªquúed_¨gumít
 1

	)

44 
	#›ti⁄Æ_¨gumít
 2

	)

46 
	s›ti⁄
 {

48 c⁄° *
	m«me
;

53 
	mhas_¨g
;

55 *
	mÊag
;

57 
	mvÆ
;

60 
__BEGIN_DECLS


61 
gë›t_l⁄g
(, * const *, const *,

62 c⁄° 
›ti⁄
 *, *);

63 
gë›t_l⁄g_⁄ly
(, * const *, const *,

64 c⁄° 
›ti⁄
 *, *);

65 #i‚de‡
_GETOPT_DECLARED


66 
	#_GETOPT_DECLARED


	)

67 
gë›t
(, * const [], const *);

69 *
›èrg
;

70 
›töd
, 
›ãº
, 
›t›t
;

72 #i‚de‡
_OPTRESET_DECLARED


73 
	#_OPTRESET_DECLARED


	)

74 
›åe£t
;

76 
	g__END_DECLS


	@/usr/include/inttypes.h

29 #i‚de‡
_INTTYPES_H_


30 
	#_INTTYPES_H_


	)

32 
	~<machöe/_öây≥s.h
>

33 
	~<sys/°döt.h
>

35 #i‚def 
__˝lu•lus


36 #i‚de‡
_WCHAR_T_DECLARED


37 
__wch¨_t
 
	twch¨_t
;

38 
	#_WCHAR_T_DECLARED


	)

43 
ötmax_t
 
	mquŸ
;

44 
ötmax_t
 
	mªm
;

45 } 
	timaxdiv_t
;

47 
	g__BEGIN_DECLS


48 #ifde‡
_XLOCALE_H_


49 
	~<xloˇÀ/_öây≥s.h
>

51 
ötmax_t
 
	$imaxabs
(
ötmax_t
Ë
__puª2
;

52 
imaxdiv_t
 
	$imaxdiv
(
ötmax_t
, i¡max_tË
__puª2
;

54 
ötmax_t
 
	`°πoimax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

55 
uötmax_t
 
	`°πoumax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

56 
ötmax_t
 
	`wc°oimax
(c⁄° 
wch¨_t
 * 
__ª°ri˘
,

57 
wch¨_t
 ** 
__ª°ri˘
, );

58 
uötmax_t
 
	`wc°oumax
(c⁄° 
wch¨_t
 * 
__ª°ri˘
,

59 
wch¨_t
 ** 
__ª°ri˘
, );

60 
__END_DECLS


	@/usr/include/md5.h

1 #i‚de‡
_MD5_H_


2 
	#_MD5_H_


	)

3 
	~<sys/md5.h
>

	@/usr/include/netdb.h

57 #i‚de‡
_NETDB_H_


58 
	#_NETDB_H_


	)

60 
	~<sys/cdefs.h
>

61 
	~<sys/_ty≥s.h
>

63 #i‚de‡
_SIZE_T_DECLARED


64 
__size_t
 
	tsize_t
;

65 
	#_SIZE_T_DECLARED


	)

68 #i‚de‡
_SOCKLEN_T_DECLARED


69 
__sockÀn_t
 
	tsockÀn_t
;

70 
	#_SOCKLEN_T_DECLARED


	)

73 #i‚de‡
_UINT32_T_DECLARED


74 
__uöt32_t
 
	tuöt32_t
;

75 
	#_UINT32_T_DECLARED


	)

78 #i‚de‡
_PATH_HEQUIV


79 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

81 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

82 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

83 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

84 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

85 
	#_PATH_SERVICES_DB
 "/v¨/db/£rvi˚s.db"

	)

87 
	#h_î∫o
 (*
	`__h_î∫o
())

	)

94 
	sho°ít
 {

95 *
	mh_«me
;

96 **
	mh_Æü£s
;

97 
	mh_addπy≥
;

98 
	mh_Àngth
;

99 **
	mh_addr_li°
;

100 
	#h_addr
 
h_addr_li°
[0]

	)

103 
	s√ã¡
 {

104 *
	mn_«me
;

105 **
	mn_Æü£s
;

106 
	mn_addπy≥
;

107 
uöt32_t
 
	mn_√t
;

110 
	s£rvít
 {

111 *
	ms_«me
;

112 **
	ms_Æü£s
;

113 
	ms_p‹t
;

114 *
	ms_¥Ÿo
;

117 
	s¥Ÿ€¡
 {

118 *
	mp_«me
;

119 **
	mp_Æü£s
;

120 
	mp_¥Ÿo
;

123 
	saddröfo
 {

124 
	mai_Êags
;

125 
	mai_Ámûy
;

126 
	mai_sockty≥
;

127 
	mai_¥Ÿocﬁ
;

128 
sockÀn_t
 
	mai_addæí
;

129 *
	mai_ˇn⁄«me
;

130 
sockaddr
 *
	mai_addr
;

131 
addröfo
 *
	mai_√xt
;

139 
	#NETDB_INTERNAL
 -1

	)

140 
	#NETDB_SUCCESS
 0

	)

141 
	#HOST_NOT_FOUND
 1

	)

142 
	#TRY_AGAIN
 2

	)

143 
	#NO_RECOVERY
 3

	)

144 
	#NO_DATA
 4

	)

145 
	#NO_ADDRESS
 
NO_DATA


	)

152 
	#EAI_ADDRFAMILY
 1

	)

154 
	#EAI_AGAIN
 2

	)

155 
	#EAI_BADFLAGS
 3

	)

156 
	#EAI_FAIL
 4

	)

157 
	#EAI_FAMILY
 5

	)

158 
	#EAI_MEMORY
 6

	)

161 
	#EAI_NODATA
 7

	)

163 
	#EAI_NONAME
 8

	)

164 
	#EAI_SERVICE
 9

	)

165 
	#EAI_SOCKTYPE
 10

	)

166 
	#EAI_SYSTEM
 11

	)

167 
	#EAI_BADHINTS
 12

	)

168 
	#EAI_PROTOCOL
 13

	)

169 
	#EAI_OVERFLOW
 14

	)

170 
	#EAI_MAX
 15

	)

175 
	#AI_PASSIVE
 0x00000001

	)

176 
	#AI_CANONNAME
 0x00000002

	)

177 
	#AI_NUMERICHOST
 0x00000004

	)

178 
	#AI_NUMERICSERV
 0x00000008

	)

180 
	#AI_MASK
 \

181 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

182 
AI_ADDRCONFIG
)

	)

184 
	#AI_ALL
 0x00000100

	)

185 
	#AI_V4MAPPED_CFG
 0x00000200

	)

186 
	#AI_ADDRCONFIG
 0x00000400

	)

187 
	#AI_V4MAPPED
 0x00000800

	)

189 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

194 
	#NI_MAXHOST
 1025

	)

195 
	#NI_MAXSERV
 32

	)

200 
	#NI_NOFQDN
 0x00000001

	)

201 
	#NI_NUMERICHOST
 0x00000002

	)

202 
	#NI_NAMEREQD
 0x00000004

	)

203 
	#NI_NUMERICSERV
 0x00000008

	)

204 
	#NI_DGRAM
 0x00000010

	)

206 
	#NI_WITHSCOPEID
 0x00000020

	)

212 
	#SCOPE_DELIMITER
 '%'

	)

214 
__BEGIN_DECLS


215 
ídho°ít
();

216 
íd√ã¡
();

217 
íd¥Ÿ€¡
();

218 
íd£rvít
();

219 #i‡
__BSD_VISIBLE
 || (
__POSIX_VISIBLE
 && __POSIX_VISIBLE <= 200112)

220 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
sockÀn_t
, );

221 
ho°ít
 *
gëho°by«me
(const *);

223 
ho°ít
 *
gëho°ít
();

224 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

225 
√ã¡
 *
gë√tby«me
(const *);

226 
√ã¡
 *
gë√ã¡
();

227 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

228 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

229 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

230 
£rvít
 *
gë£rvby«me
(const *, const *);

231 
£rvít
 *
gë£rvbyp‹t
(, const *);

232 
£rvít
 *
gë£rvít
();

233 
£tho°ít
();

235 
£äëít
();

236 
£çrŸ€¡
();

237 
gëaddröfo
(const *, const *,

238 c⁄° 
addröfo
 *, addrinfo **);

239 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *,

240 
size_t
, *, size_t, );

241 
‰ìaddröfo
(
addröfo
 *);

242 c⁄° *
gai_°ªº‹
();

243 
£t£rvít
();

245 #i‡
__BSD_VISIBLE


246 
íd√tgª¡
();

247 
‰ìho°ít
(
ho°ít
 *);

248 
gëho°byaddr_r
(c⁄° *, 
sockÀn_t
, , 
ho°ít
 *,

249 *, 
size_t
, 
ho°ít
 **, *);

250 
gëho°by«me_r
(c⁄° *, 
ho°ít
 *, *, 
size_t
,

251 
ho°ít
 **, *);

252 
ho°ít
 *
gëho°by«me2
(const *, );

253 
gëho°by«me2_r
(c⁄° *, , 
ho°ít
 *, *,

254 
size_t
, 
ho°ít
 **, *);

255 
gëho°ít_r
(
ho°ít
 *, *, 
size_t
,

256 
ho°ít
 **, *);

257 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

258 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

259 
gë√tbyaddr_r
(
uöt32_t
, , 
√ã¡
 *, *, 
size_t
,

260 
√ã¡
**, *);

261 
gë√tby«me_r
(c⁄° *, 
√ã¡
 *, *, 
size_t
,

262 
√ã¡
 **, *);

263 
gë√ã¡_r
(
√ã¡
 *, *, 
size_t
, netent **,

265 
gë√tgª¡
(**, **, **);

266 
gë¥Ÿoby«me_r
(c⁄° *, 
¥Ÿ€¡
 *, *,

267 
size_t
, 
¥Ÿ€¡
 **);

268 
gë¥Ÿobynumbî_r
(, 
¥Ÿ€¡
 *, *, 
size_t
,

269 
¥Ÿ€¡
 **);

270 
gë¥Ÿ€¡_r
(
¥Ÿ€¡
 *, *, 
size_t
,

271 
¥Ÿ€¡
 **);

272 
gë£rvby«me_r
(c⁄° *, c⁄° *, 
£rvít
 *,

273 *, 
size_t
, 
£rvít
 **);

274 
gë£rvbyp‹t_r
(, c⁄° *, 
£rvít
 *, *,

275 
size_t
, 
£rvít
 **);

276 
gë£rvít_r
(
£rvít
 *, *, 
size_t
,

277 
£rvít
 **);

278 
hîr‹
(const *);

279 
__c⁄°
 *
h°ªº‹
();

280 
ö√tgr
(const *, const *, const *, const *);

281 
£äëgª¡
(const *);

290 * 
__h_î∫o
();

291 
	g__END_DECLS


	@/usr/include/netinet/in.h

33 #i‚de‡
_NETINET_IN_H_


34 
	#_NETINET_IN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<machöe/ídün.h
>

41 
	#IPPROTO_IP
 0

	)

42 
	#IPPROTO_ICMP
 1

	)

43 
	#IPPROTO_TCP
 6

	)

44 
	#IPPROTO_UDP
 17

	)

46 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

47 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

49 #i‚de‡
_UINT8_T_DECLARED


50 
__uöt8_t
 
	tuöt8_t
;

51 
	#_UINT8_T_DECLARED


	)

54 #i‚de‡
_UINT16_T_DECLARED


55 
__uöt16_t
 
	tuöt16_t
;

56 
	#_UINT16_T_DECLARED


	)

59 #i‚de‡
_UINT32_T_DECLARED


60 
__uöt32_t
 
	tuöt32_t
;

61 
	#_UINT32_T_DECLARED


	)

64 #i‚de‡
_IN_ADDR_T_DECLARED


65 
uöt32_t
 
	tö_addr_t
;

66 
	#_IN_ADDR_T_DECLARED


	)

69 #i‚de‡
_IN_PORT_T_DECLARED


70 
uöt16_t
 
	tö_p‹t_t
;

71 
	#_IN_PORT_T_DECLARED


	)

74 #i‚de‡
_SA_FAMILY_T_DECLARED


75 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

76 
	#_SA_FAMILY_T_DECLARED


	)

80 #i‚def 
_STRUCT_IN_ADDR_DECLARED


81 
	sö_addr
 {

82 
ö_addr_t
 
	ms_addr
;

84 
	#_STRUCT_IN_ADDR_DECLARED


	)

87 #i‚def 
_SOCKLEN_T_DECLARED


88 
__sockÀn_t
 
	tsockÀn_t
;

89 
	#_SOCKLEN_T_DECLARED


	)

92 
	~<sys/_sockaddr_°‹age.h
>

95 
	ssockaddr_ö
 {

96 
uöt8_t
 
	msö_Àn
;

97 
ß_Ámûy_t
 
	msö_Ámûy
;

98 
ö_p‹t_t
 
	msö_p‹t
;

99 
ö_addr
 
	msö_addr
;

100 
	msö_zîo
[8];

103 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


105 #i‚de‡
_BYTEORDER_PROTOTYPED


106 
	#_BYTEORDER_PROTOTYPED


	)

107 
__BEGIN_DECLS


108 
uöt32_t
 
ht⁄l
(uint32_t);

109 
uöt16_t
 
ht⁄s
(uint16_t);

110 
uöt32_t
 
¡ohl
(uint32_t);

111 
uöt16_t
 
¡ohs
(uint16_t);

112 
	g__END_DECLS


115 #i‚de‡
_BYTEORDER_FUNC_DEFINED


116 
	#_BYTEORDER_FUNC_DEFINED


	)

117 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

118 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

119 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

120 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

125 #i‡
__POSIX_VISIBLE
 >= 200112

126 
	#IPPROTO_IPV6
 41

	)

127 
	#IPPROTO_RAW
 255

	)

128 
	#INET_ADDRSTRLEN
 16

	)

131 #i‡
__BSD_VISIBLE


140 
	#IPPROTO_HOPOPTS
 0

	)

141 
	#IPPROTO_IGMP
 2

	)

142 
	#IPPROTO_GGP
 3

	)

143 
	#IPPROTO_IPV4
 4

	)

144 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

145 
	#IPPROTO_ST
 7

	)

146 
	#IPPROTO_EGP
 8

	)

147 
	#IPPROTO_PIGP
 9

	)

148 
	#IPPROTO_RCCMON
 10

	)

149 
	#IPPROTO_NVPII
 11

	)

150 
	#IPPROTO_PUP
 12

	)

151 
	#IPPROTO_ARGUS
 13

	)

152 
	#IPPROTO_EMCON
 14

	)

153 
	#IPPROTO_XNET
 15

	)

154 
	#IPPROTO_CHAOS
 16

	)

155 
	#IPPROTO_MUX
 18

	)

156 
	#IPPROTO_MEAS
 19

	)

157 
	#IPPROTO_HMP
 20

	)

158 
	#IPPROTO_PRM
 21

	)

159 
	#IPPROTO_IDP
 22

	)

160 
	#IPPROTO_TRUNK1
 23

	)

161 
	#IPPROTO_TRUNK2
 24

	)

162 
	#IPPROTO_LEAF1
 25

	)

163 
	#IPPROTO_LEAF2
 26

	)

164 
	#IPPROTO_RDP
 27

	)

165 
	#IPPROTO_IRTP
 28

	)

166 
	#IPPROTO_TP
 29

	)

167 
	#IPPROTO_BLT
 30

	)

168 
	#IPPROTO_NSP
 31

	)

169 
	#IPPROTO_INP
 32

	)

170 
	#IPPROTO_SEP
 33

	)

171 
	#IPPROTO_3PC
 34

	)

172 
	#IPPROTO_IDPR
 35

	)

173 
	#IPPROTO_XTP
 36

	)

174 
	#IPPROTO_DDP
 37

	)

175 
	#IPPROTO_CMTP
 38

	)

176 
	#IPPROTO_TPXX
 39

	)

177 
	#IPPROTO_IL
 40

	)

178 
	#IPPROTO_SDRP
 42

	)

179 
	#IPPROTO_ROUTING
 43

	)

180 
	#IPPROTO_FRAGMENT
 44

	)

181 
	#IPPROTO_IDRP
 45

	)

182 
	#IPPROTO_RSVP
 46

	)

183 
	#IPPROTO_GRE
 47

	)

184 
	#IPPROTO_MHRP
 48

	)

185 
	#IPPROTO_BHA
 49

	)

186 
	#IPPROTO_ESP
 50

	)

187 
	#IPPROTO_AH
 51

	)

188 
	#IPPROTO_INLSP
 52

	)

189 
	#IPPROTO_SWIPE
 53

	)

190 
	#IPPROTO_NHRP
 54

	)

191 
	#IPPROTO_MOBILE
 55

	)

192 
	#IPPROTO_TLSP
 56

	)

193 
	#IPPROTO_SKIP
 57

	)

194 
	#IPPROTO_ICMPV6
 58

	)

195 
	#IPPROTO_NONE
 59

	)

196 
	#IPPROTO_DSTOPTS
 60

	)

197 
	#IPPROTO_AHIP
 61

	)

198 
	#IPPROTO_CFTP
 62

	)

199 
	#IPPROTO_HELLO
 63

	)

200 
	#IPPROTO_SATEXPAK
 64

	)

201 
	#IPPROTO_KRYPTOLAN
 65

	)

202 
	#IPPROTO_RVD
 66

	)

203 
	#IPPROTO_IPPC
 67

	)

204 
	#IPPROTO_ADFS
 68

	)

205 
	#IPPROTO_SATMON
 69

	)

206 
	#IPPROTO_VISA
 70

	)

207 
	#IPPROTO_IPCV
 71

	)

208 
	#IPPROTO_CPNX
 72

	)

209 
	#IPPROTO_CPHB
 73

	)

210 
	#IPPROTO_WSN
 74

	)

211 
	#IPPROTO_PVP
 75

	)

212 
	#IPPROTO_BRSATMON
 76

	)

213 
	#IPPROTO_ND
 77

	)

214 
	#IPPROTO_WBMON
 78

	)

215 
	#IPPROTO_WBEXPAK
 79

	)

216 
	#IPPROTO_EON
 80

	)

217 
	#IPPROTO_VMTP
 81

	)

218 
	#IPPROTO_SVMTP
 82

	)

219 
	#IPPROTO_VINES
 83

	)

220 
	#IPPROTO_TTP
 84

	)

221 
	#IPPROTO_IGP
 85

	)

222 
	#IPPROTO_DGP
 86

	)

223 
	#IPPROTO_TCF
 87

	)

224 
	#IPPROTO_IGRP
 88

	)

225 
	#IPPROTO_OSPFIGP
 89

	)

226 
	#IPPROTO_SRPC
 90

	)

227 
	#IPPROTO_LARP
 91

	)

228 
	#IPPROTO_MTP
 92

	)

229 
	#IPPROTO_AX25
 93

	)

230 
	#IPPROTO_IPEIP
 94

	)

231 
	#IPPROTO_MICP
 95

	)

232 
	#IPPROTO_SCCSP
 96

	)

233 
	#IPPROTO_ETHERIP
 97

	)

234 
	#IPPROTO_ENCAP
 98

	)

235 
	#IPPROTO_APES
 99

	)

236 
	#IPPROTO_GMTP
 100

	)

237 
	#IPPROTO_IPCOMP
 108

	)

238 
	#IPPROTO_SCTP
 132

	)

239 
	#IPPROTO_MH
 135

	)

241 
	#IPPROTO_PIM
 103

	)

242 
	#IPPROTO_CARP
 112

	)

243 
	#IPPROTO_PGM
 113

	)

244 
	#IPPROTO_MPLS
 137

	)

245 
	#IPPROTO_PFSYNC
 240

	)

248 
	#IPPROTO_OLD_DIVERT
 254

	)

249 
	#IPPROTO_MAX
 256

	)

252 
	#IPPROTO_DONE
 257

	)

255 
	#IPPROTO_DIVERT
 258

	)

256 
	#IPPROTO_SEND
 259

	)

262 
	#IPPROTO_SPACER
 32767

	)

313 
	#IPPORT_RESERVED
 1024

	)

318 
	#IPPORT_EPHEMERALFIRST
 10000

	)

319 
	#IPPORT_EPHEMERALLAST
 65535

	)

324 
	#IPPORT_HIFIRSTAUTO
 49152

	)

325 
	#IPPORT_HILASTAUTO
 65535

	)

333 
	#IPPORT_RESERVEDSTART
 600

	)

335 
	#IPPORT_MAX
 65535

	)

342 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

343 
	#IN_CLASSA_NET
 0xff000000

	)

344 
	#IN_CLASSA_NSHIFT
 24

	)

345 
	#IN_CLASSA_HOST
 0x00ffffff

	)

346 
	#IN_CLASSA_MAX
 128

	)

348 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

349 
	#IN_CLASSB_NET
 0xffff0000

	)

350 
	#IN_CLASSB_NSHIFT
 16

	)

351 
	#IN_CLASSB_HOST
 0x0000ffff

	)

352 
	#IN_CLASSB_MAX
 65536

	)

354 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

355 
	#IN_CLASSC_NET
 0xffffff00

	)

356 
	#IN_CLASSC_NSHIFT
 8

	)

357 
	#IN_CLASSC_HOST
 0x000000ff

	)

359 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

360 
	#IN_CLASSD_NET
 0xf0000000

	)

361 
	#IN_CLASSD_NSHIFT
 28

	)

362 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

363 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

365 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

366 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

368 
	#IN_LINKLOCAL
(
i
Ë(((
u_öt32_t
)(iË& 0xffff0000Ë=0xa9„0000)

	)

369 
	#IN_LOOPBACK
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0x7f000000)

	)

370 
	#IN_ZERONET
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0)

	)

372 
	#IN_PRIVATE
(
i
Ë((((
u_öt32_t
)(i) & 0xff000000) == 0x0a000000) || \

373 (((
u_öt32_t
)(
i
) & 0xfff00000) == 0xac100000) || \

374 (((
u_öt32_t
)(
i
Ë& 0xffff0000Ë=0xc0a80000))

	)

376 
	#IN_LOCAL_GROUP
(
i
Ë(((
u_öt32_t
)(iË& 0xffffff00Ë=0xe0000000)

	)

378 
	#IN_ANY_LOCAL
(
i
Ë(
	`IN_LINKLOCAL
(iË|| 
	`IN_LOCAL_GROUP
(i))

	)

380 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

381 #i‚de‡
_KERNEL


382 
	#INADDR_NONE
 0xfffffff‡

	)

385 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

386 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

387 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

388 
	#INADDR_ALLRPTS_GROUP
 (
u_öt32_t
)0xe0000016

	)

389 
	#INADDR_CARP_GROUP
 (
u_öt32_t
)0xe0000012

	)

390 
	#INADDR_PFSYNC_GROUP
 (
u_öt32_t
)0xe00000f0

	)

391 
	#INADDR_ALLMDNS_GROUP
 (
u_öt32_t
)0xe00000fb

	)

392 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

394 
	#IN_LOOPBACKNET
 127

	)

396 
	#IN_RFC3021_MASK
 (
u_öt32_t
)0xffffff„

	)

402 
	#IP_OPTIONS
 1

	)

403 
	#IP_HDRINCL
 2

	)

404 
	#IP_TOS
 3

	)

405 
	#IP_TTL
 4

	)

406 
	#IP_RECVOPTS
 5

	)

407 
	#IP_RECVRETOPTS
 6

	)

408 
	#IP_RECVDSTADDR
 7

	)

409 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

410 
	#IP_RETOPTS
 8

	)

411 
	#IP_MULTICAST_IF
 9

	)

413 
	#IP_MULTICAST_TTL
 10

	)

414 
	#IP_MULTICAST_LOOP
 11

	)

415 
	#IP_ADD_MEMBERSHIP
 12

	)

416 
	#IP_DROP_MEMBERSHIP
 13

	)

417 
	#IP_MULTICAST_VIF
 14

	)

418 
	#IP_RSVP_ON
 15

	)

419 
	#IP_RSVP_OFF
 16

	)

420 
	#IP_RSVP_VIF_ON
 17

	)

421 
	#IP_RSVP_VIF_OFF
 18

	)

422 
	#IP_PORTRANGE
 19

	)

423 
	#IP_RECVIF
 20

	)

425 
	#IP_IPSEC_POLICY
 21

	)

426 
	#IP_FAITH
 22

	)

428 
	#IP_ONESBCAST
 23

	)

429 
	#IP_BINDANY
 24

	)

436 
	#IP_FW_TABLE_ADD
 40

	)

437 
	#IP_FW_TABLE_DEL
 41

	)

438 
	#IP_FW_TABLE_FLUSH
 42

	)

439 
	#IP_FW_TABLE_GETSIZE
 43

	)

440 
	#IP_FW_TABLE_LIST
 44

	)

442 
	#IP_FW3
 48

	)

443 
	#IP_DUMMYNET3
 49

	)

445 
	#IP_FW_ADD
 50

	)

446 
	#IP_FW_DEL
 51

	)

447 
	#IP_FW_FLUSH
 52

	)

448 
	#IP_FW_ZERO
 53

	)

449 
	#IP_FW_GET
 54

	)

450 
	#IP_FW_RESETLOG
 55

	)

452 
	#IP_FW_NAT_CFG
 56

	)

453 
	#IP_FW_NAT_DEL
 57

	)

454 
	#IP_FW_NAT_GET_CONFIG
 58

	)

455 
	#IP_FW_NAT_GET_LOG
 59

	)

457 
	#IP_DUMMYNET_CONFIGURE
 60

	)

458 
	#IP_DUMMYNET_DEL
 61

	)

459 
	#IP_DUMMYNET_FLUSH
 62

	)

460 
	#IP_DUMMYNET_GET
 64

	)

462 
	#IP_RECVTTL
 65

	)

463 
	#IP_MINTTL
 66

	)

464 
	#IP_DONTFRAG
 67

	)

465 
	#IP_RECVTOS
 68

	)

468 
	#IP_ADD_SOURCE_MEMBERSHIP
 70

	)

469 
	#IP_DROP_SOURCE_MEMBERSHIP
 71

	)

470 
	#IP_BLOCK_SOURCE
 72

	)

471 
	#IP_UNBLOCK_SOURCE
 73

	)

474 
	#IP_MSFILTER
 74

	)

477 
	#MCAST_JOIN_GROUP
 80

	)

478 
	#MCAST_LEAVE_GROUP
 81

	)

479 
	#MCAST_JOIN_SOURCE_GROUP
 82

	)

480 
	#MCAST_LEAVE_SOURCE_GROUP
 83

	)

481 
	#MCAST_BLOCK_SOURCE
 84

	)

482 
	#MCAST_UNBLOCK_SOURCE
 85

	)

487 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

488 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

495 
	#IP_MIN_MEMBERSHIPS
 31

	)

496 
	#IP_MAX_MEMBERSHIPS
 4095

	)

497 
	#IP_MAX_SOURCE_FILTER
 1024

	)

503 
	#IP_MAX_GROUP_SRC_FILTER
 512

	)

504 
	#IP_MAX_SOCK_SRC_FILTER
 128

	)

505 
	#IP_MAX_SOCK_MUTE_FILTER
 128

	)

510 
	sù_mªq
 {

511 
ö_addr
 
	mimr_mu…üddr
;

512 
ö_addr
 
	mimr_öãrÁ˚
;

520 
	sù_mªqn
 {

521 
ö_addr
 
	mimr_mu…üddr
;

522 
ö_addr
 
	mimr_addªss
;

523 
	mimr_ifödex
;

529 
	sù_mªq_sour˚
 {

530 
ö_addr
 
	mimr_mu…üddr
;

531 
ö_addr
 
	mimr_sour˚addr
;

532 
ö_addr
 
	mimr_öãrÁ˚
;

539 
	sgroup_ªq
 {

540 
uöt32_t
 
	mgr_öãrÁ˚
;

541 
sockaddr_°‹age
 
	mgr_group
;

544 
	sgroup_sour˚_ªq
 {

545 
uöt32_t
 
	mg§_öãrÁ˚
;

546 
sockaddr_°‹age
 
	mg§_group
;

547 
sockaddr_°‹age
 
	mg§_sour˚
;

550 #i‚de‡
__MSFILTERREQ_DEFINED


551 
	#__MSFILTERREQ_DEFINED


	)

557 
	s__msfûãºeq
 {

558 
uöt32_t
 
	mms‰_ifödex
;

559 
uöt32_t
 
	mms‰_fmode
;

560 
uöt32_t
 
	mms‰_n§cs
;

561 
sockaddr_°‹age
 
	mms‰_group
;

562 
sockaddr_°‹age
 *
	mms‰_§cs
;

569 
	gsockaddr
;

576 
£tùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
,

577 
uöt32_t
, 
ö_addr
 *);

578 
gëùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
 *,

579 
uöt32_t
 *, 
ö_addr
 *);

580 
£tsour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

581 
uöt32_t
, uöt32_t, 
sockaddr_°‹age
 *);

582 
gësour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

583 
uöt32_t
 *, uöt32_à*, 
sockaddr_°‹age
 *);

588 
	#MCAST_UNDEFINED
 0

	)

589 
	#MCAST_INCLUDE
 1

	)

590 
	#MCAST_EXCLUDE
 2

	)

596 
	#IP_PORTRANGE_DEFAULT
 0

	)

597 
	#IP_PORTRANGE_HIGH
 1

	)

598 
	#IP_PORTRANGE_LOW
 2

	)

606 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

608 
	#CTL_IPPROTO_NAMES
 { \

609 { "ù", 
CTLTYPE_NODE
 }, \

610 { "icmp", 
CTLTYPE_NODE
 }, \

611 { "igmp", 
CTLTYPE_NODE
 }, \

612 { "ggp", 
CTLTYPE_NODE
 }, \

615 { "t˝", 
CTLTYPE_NODE
 }, \

617 { "egp", 
CTLTYPE_NODE
 }, \

621 { "pup", 
CTLTYPE_NODE
 }, \

626 { "udp", 
CTLTYPE_NODE
 }, \

631 { "idp", 
CTLTYPE_NODE
 }, \

660 { "ù£c", 
CTLTYPE_NODE
 }, \

676 { "pim", 
CTLTYPE_NODE
 }, \

677 }

	)

682 
	#IPCTL_FORWARDING
 1

	)

683 
	#IPCTL_SENDREDIRECTS
 2

	)

684 
	#IPCTL_DEFTTL
 3

	)

685 #ifde‡
nŸyë


686 
	#IPCTL_DEFMTU
 4

	)

688 
	#IPCTL_RTEXPIRE
 5

	)

689 
	#IPCTL_RTMINEXPIRE
 6

	)

690 
	#IPCTL_RTMAXCACHE
 7

	)

691 
	#IPCTL_SOURCEROUTE
 8

	)

692 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

693 
	#IPCTL_INTRQMAXLEN
 10

	)

694 
	#IPCTL_INTRQDROPS
 11

	)

695 
	#IPCTL_STATS
 12

	)

696 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

697 
	#IPCTL_FASTFORWARDING
 14

	)

698 
	#IPCTL_KEEPFAITH
 15

	)

699 
	#IPCTL_GIF_TTL
 16

	)

700 
	#IPCTL_MAXID
 17

	)

702 
	#IPCTL_NAMES
 { \

704 { "f‹w¨dög", 
CTLTYPE_INT
 }, \

705 { "ªdúe˘", 
CTLTYPE_INT
 }, \

706 { "âl", 
CTLTYPE_INT
 }, \

707 { "mtu", 
CTLTYPE_INT
 }, \

708 { "πexpúe", 
CTLTYPE_INT
 }, \

709 { "πmöexpúe", 
CTLTYPE_INT
 }, \

710 { "πmaxˇche", 
CTLTYPE_INT
 }, \

711 { "sour˚rouã", 
CTLTYPE_INT
 }, \

712 { "dúe˘ed-brﬂdˇ°", 
CTLTYPE_INT
 }, \

713 { "öå-queue-maxÀn", 
CTLTYPE_INT
 }, \

714 { "öå-queue-dr›s", 
CTLTYPE_INT
 }, \

715 { "°©s", 
CTLTYPE_STRUCT
 }, \

716 { "ac˚±_sour˚rouã", 
CTLTYPE_INT
 }, \

717 { "Á°f‹w¨dög", 
CTLTYPE_INT
 }, \

718 }

	)

722 #ifde‡
_KERNEL


724 
	gi‚ë
; 
	gmbuf
;

726 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

727 
ö_ˇnf‹w¨d
(
ö_addr
);

728 
ö_loˇœddr
(
ö_addr
);

729 
ö_loˇlù
(
ö_addr
);

730 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

731 *
öë_¡ﬂ
(
ö_addr
);

732 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

733 *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

734 
öë_±⁄
(
af
, const *, *);

735 
ö_ifdëach
(
i‚ë
 *);

737 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

738 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

739 
	#ö_Ælho°s
(
x
Ë((x).
s_addr
 =
	`ht⁄l
(
INADDR_ALLHOSTS_GROUP
))

	)

741 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

742 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

743 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

754 #i‡(
BYTE_ORDER
 =
BIG_ENDIAN
Ë|| 
deföed
(
HAVE_NET_IPLEN
)

755 
	#SET_NET_IPLEN
(
p
Ëdÿ{} 0)

	)

756 
	#SET_HOST_IPLEN
(
p
Ëdÿ{} 0)

	)

758 
	#SET_NET_IPLEN
(
p
) do { \

759 
ù
 *
h_ù
 = (
p
); \

760 
h_ù
->
ù_Àn
 = 
	`ht⁄s
(h_ip->ip_len); \

761 
h_ù
->
ù_off
 = 
	`ht⁄s
(h_ip->ip_off); \

762 } 0)

	)

764 
	#SET_HOST_IPLEN
(
p
) do { \

765 
ù
 *
h_ù
 = (
p
); \

766 
h_ù
->
ù_Àn
 = 
	`¡ohs
(h_ip->ip_len); \

767 
h_ù
->
ù_off
 = 
	`¡ohs
(h_ip->ip_off); \

768 } 0)

	)

774 #i‡
__POSIX_VISIBLE
 >= 200112

775 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

776 
	~<√töë6/ö6.h
>

777 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/netinet/tcp.h

33 #i‚de‡
_NETINET_TCP_H_


34 
	#_NETINET_TCP_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

39 #i‡
__BSD_VISIBLE


41 
u_öt32_t
 
	tt˝_£q
;

43 
	#t˝6_£q
 
t˝_£q


	)

44 
	#t˝6hdr
 
t˝hdr


	)

50 
	st˝hdr
 {

51 
u_sh‹t
 
	mth_•‹t
;

52 
u_sh‹t
 
	mth_dp‹t
;

53 
t˝_£q
 
	mth_£q
;

54 
t˝_£q
 
	mth_ack
;

55 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


56 
u_ch¨
 
	mth_x2
:4,

57 
	mth_off
:4;

59 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


60 
u_ch¨
 
	mth_off
:4,

61 
	mth_x2
:4;

63 
u_ch¨
 
	mth_Êags
;

64 
	#TH_FIN
 0x01

	)

65 
	#TH_SYN
 0x02

	)

66 
	#TH_RST
 0x04

	)

67 
	#TH_PUSH
 0x08

	)

68 
	#TH_ACK
 0x10

	)

69 
	#TH_URG
 0x20

	)

70 
	#TH_ECE
 0x40

	)

71 
	#TH_CWR
 0x80

	)

72 
	#TH_FLAGS
 (
TH_FIN
|
TH_SYN
|
TH_RST
|
TH_PUSH
|
TH_ACK
|
TH_URG
|
TH_ECE
|
TH_CWR
)

	)

73 
	#PRINT_TH_FLAGS
 "\20\1FIN\2SYN\3RST\4PUSH\5ACK\6URG\7ECE\10CWR"

	)

75 
u_sh‹t
 
	mth_wö
;

76 
u_sh‹t
 
	mth_sum
;

77 
u_sh‹t
 
	mth_uΩ
;

80 
	#TCPOPT_EOL
 0

	)

81 
	#TCPOLEN_EOL
 1

	)

82 
	#TCPOPT_PAD
 0

	)

83 
	#TCPOLEN_PAD
 1

	)

84 
	#TCPOPT_NOP
 1

	)

85 
	#TCPOLEN_NOP
 1

	)

86 
	#TCPOPT_MAXSEG
 2

	)

87 
	#TCPOLEN_MAXSEG
 4

	)

88 
	#TCPOPT_WINDOW
 3

	)

89 
	#TCPOLEN_WINDOW
 3

	)

90 
	#TCPOPT_SACK_PERMITTED
 4

	)

91 
	#TCPOLEN_SACK_PERMITTED
 2

	)

92 
	#TCPOPT_SACK
 5

	)

93 
	#TCPOLEN_SACKHDR
 2

	)

94 
	#TCPOLEN_SACK
 8

	)

95 
	#TCPOPT_TIMESTAMP
 8

	)

96 
	#TCPOLEN_TIMESTAMP
 10

	)

97 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

98 
	#TCPOPT_SIGNATURE
 19

	)

99 
	#TCPOLEN_SIGNATURE
 18

	)

102 
	#MAX_SACK_BLKS
 6

	)

103 
	#TCP_MAX_SACK
 4

	)

120 
	#TCP_MSS
 536

	)

121 
	#TCP6_MSS
 1220

	)

137 
	#TCP_MINMSS
 216

	)

139 
	#TCP_MAXWIN
 65535

	)

140 
	#TTCP_CLIENT_SND_WND
 4096

	)

142 
	#TCP_MAX_WINSHIFT
 14

	)

144 
	#TCP_MAXBURST
 4

	)

146 
	#TCP_MAXHLEN
 (0xf<<2Ë

	)

147 
	#TCP_MAXOLEN
 (
TCP_MAXHLEN
 - (
t˝hdr
))

	)

156 
	#TCP_NODELAY
 1

	)

157 #i‡
__BSD_VISIBLE


158 
	#TCP_MAXSEG
 2

	)

159 
	#TCP_NOPUSH
 4

	)

160 
	#TCP_NOOPT
 8

	)

161 
	#TCP_MD5SIG
 16

	)

162 
	#TCP_INFO
 32

	)

163 
	#TCP_CONGESTION
 64

	)

164 
	#TCP_KEEPINIT
 128

	)

165 
	#TCP_KEEPIDLE
 256

	)

166 
	#TCP_KEEPINTVL
 512

	)

167 
	#TCP_KEEPCNT
 1024

	)

170 
	#TCP_VENDOR
 
SO_VENDOR


	)

172 
	#TCP_CA_NAME_MAX
 16

	)

174 
	#TCPI_OPT_TIMESTAMPS
 0x01

	)

175 
	#TCPI_OPT_SACK
 0x02

	)

176 
	#TCPI_OPT_WSCALE
 0x04

	)

177 
	#TCPI_OPT_ECN
 0x08

	)

178 
	#TCPI_OPT_TOE
 0x10

	)

192 
	st˝_öfo
 {

193 
u_öt8_t
 
	mt˝i_°©e
;

194 
u_öt8_t
 
	m__t˝i_ˇ_°©e
;

195 
u_öt8_t
 
	m__t˝i_ªå™smôs
;

196 
u_öt8_t
 
	m__t˝i_¥obes
;

197 
u_öt8_t
 
	m__t˝i_backoff
;

198 
u_öt8_t
 
	mt˝i_›ti⁄s
;

199 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
:4,

200 
	mt˝i_rcv_wsˇÀ
:4;

202 
u_öt32_t
 
	mt˝i_πo
;

203 
u_öt32_t
 
	m__t˝i_©o
;

204 
u_öt32_t
 
	mt˝i_¢d_mss
;

205 
u_öt32_t
 
	mt˝i_rcv_mss
;

207 
u_öt32_t
 
	m__t˝i_u«cked
;

208 
u_öt32_t
 
	m__t˝i_ßcked
;

209 
u_öt32_t
 
	m__t˝i_lo°
;

210 
u_öt32_t
 
	m__t˝i_ªå™s
;

211 
u_öt32_t
 
	m__t˝i_Áckës
;

214 
u_öt32_t
 
	m__t˝i_œ°_d©a_£¡
;

215 
u_öt32_t
 
	m__t˝i_œ°_ack_£¡
;

216 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

217 
u_öt32_t
 
	m__t˝i_œ°_ack_ªcv
;

220 
u_öt32_t
 
	m__t˝i_pmtu
;

221 
u_öt32_t
 
	m__t˝i_rcv_s°hªsh
;

222 
u_öt32_t
 
	mt˝i_πt
;

223 
u_öt32_t
 
	mt˝i_πtv¨
;

224 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

225 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

226 
u_öt32_t
 
	m__t˝i_advmss
;

227 
u_öt32_t
 
	m__t˝i_ª‹dîög
;

229 
u_öt32_t
 
	m__t˝i_rcv_πt
;

230 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

233 
u_öt32_t
 
	mt˝i_¢d_wnd
;

234 
u_öt32_t
 
	mt˝i_¢d_bwnd
;

235 
u_öt32_t
 
	mt˝i_¢d_nxt
;

236 
u_öt32_t
 
	mt˝i_rcv_nxt
;

237 
u_öt32_t
 
	mt˝i_t€_tid
;

238 
u_öt32_t
 
	mt˝i_¢d_ªxmô∑ck
;

239 
u_öt32_t
 
	mt˝i_rcv_oo›ack
;

240 
u_öt32_t
 
	mt˝i_¢d_zîowö
;

243 
u_öt32_t
 
	m__t˝i_∑d
[26];

	@/usr/include/poll.h

31 #i‚de‡
_SYS_POLL_H_


32 
	#_SYS_POLL_H_


	)

34 
	~<sys/cdefs.h
>

40 
	tnfds_t
;

45 
	spﬁlfd
 {

46 
	mfd
;

47 
	mevíts
;

48 
	mªvíts
;

61 
	#POLLIN
 0x0001

	)

62 
	#POLLPRI
 0x0002

	)

63 
	#POLLOUT
 0x0004

	)

64 
	#POLLRDNORM
 0x0040

	)

65 
	#POLLWRNORM
 
POLLOUT


	)

66 
	#POLLRDBAND
 0x0080

	)

67 
	#POLLWRBAND
 0x0100

	)

69 #i‡
__BSD_VISIBLE


71 
	#POLLINIGNEOF
 0x2000

	)

78 
	#POLLERR
 0x0008

	)

79 
	#POLLHUP
 0x0010

	)

80 
	#POLLNVAL
 0x0020

	)

82 #i‡
__BSD_VISIBLE


84 
	#POLLSTANDARD
 (
POLLIN
|
POLLPRI
|
POLLOUT
|
POLLRDNORM
|
POLLRDBAND
|\

85 
POLLWRBAND
|
POLLERR
|
POLLHUP
|
POLLNVAL
)

	)

92 
	#INFTIM
 (-1)

	)

96 #i‚de‡
_KERNEL


98 
__BEGIN_DECLS


99 
pﬁl
(
pﬁlfd
 
_pfd
[], 
nfds_t
 
_nfds
, 
_timeout
);

100 
	g__END_DECLS


	@/usr/include/stdarg.h

31 #i‚de‡
_MACHINE_STDARG_H_


32 
	#_MACHINE_STDARG_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_VA_LIST_DECLARED


38 
	#_VA_LIST_DECLARED


	)

39 
__va_li°
 
	tva_li°
;

42 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


44 
	#va_°¨t
(
≠
, 
œ°
) \

45 
	`__buûtö_va_°¨t
((
≠
), (
œ°
))

	)

47 
	#va_¨g
(
≠
, 
ty≥
) \

48 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

50 
	#__va_c›y
(
de°
, 
§c
) \

51 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

53 #i‡
__ISO_C_VISIBLE
 >= 1999

54 
	#va_c›y
(
de°
, 
§c
) \

55 
	`__va_c›y
(
de°
, 
§c
)

	)

58 
	#va_íd
(
≠
) \

59 
	`__buûtö_va_íd
(
≠
)

	)

61 #ñi‡
deföed
(
löt
)

63 
	#__va_size
(
ty≥
) \

64 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

65 
	#va_°¨t
(
≠
, 
œ°
) \

66 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

67 
	#va_¨g
(
≠
, 
ty≥
) \

68 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

69 
	#va_íd
(
≠
)

	)

72 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/usr/include/stddef.h

34 #i‚de‡
_STDDEF_H_


35 
	#_STDDEF_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_nuŒ.h
>

39 
	~<sys/_ty≥s.h
>

41 
__±rdiff_t
 
	t±rdiff_t
;

43 #i‡
__BSD_VISIBLE


44 #i‚de‡
_RUNE_T_DECLARED


45 
__ru√_t
 
	tru√_t
;

46 
	#_RUNE_T_DECLARED


	)

50 #i‚de‡
_SIZE_T_DECLARED


51 
__size_t
 
	tsize_t
;

52 
	#_SIZE_T_DECLARED


	)

55 #i‚def 
__˝lu•lus


56 #i‚de‡
_WCHAR_T_DECLARED


57 
__wch¨_t
 
	twch¨_t
;

58 
	#_WCHAR_T_DECLARED


	)

62 
	#off£tof
(
ty≥
, 
membî
Ë
	`__off£tof
—y≥, membî)

	)

	@/usr/include/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

36 
	~<sys/_°döt.h
>

38 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

39 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

40 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

41 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

43 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

44 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

45 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

46 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

48 
__öt_Á°8_t
 
	töt_Á°8_t
;

49 
__öt_Á°16_t
 
	töt_Á°16_t
;

50 
__öt_Á°32_t
 
	töt_Á°32_t
;

51 
__öt_Á°64_t
 
	töt_Á°64_t
;

53 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

54 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

55 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

56 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

58 #i‚de‡
_INTMAX_T_DECLARED


59 
__ötmax_t
 
	tötmax_t
;

60 
	#_INTMAX_T_DECLARED


	)

62 #i‚de‡
_UINTMAX_T_DECLARED


63 
__uötmax_t
 
	tuötmax_t
;

64 
	#_UINTMAX_T_DECLARED


	)

68 #i‡
deföed
(
UINTPTR_MAX
Ë&& deföed(
UINT64_MAX
) && (UINTPTR_MAX == UINT64_MAX)

69 
	#__WORDSIZE
 64

	)

71 
	#__WORDSIZE
 32

	)

	@/usr/include/stdio.h

36 #i‚def 
_STDIO_H_


37 
	#_STDIO_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_nuŒ.h
>

41 
	~<sys/_ty≥s.h
>

43 
__off_t
 
	tÂos_t
;

45 #i‚de‡
_SIZE_T_DECLARED


46 
__size_t
 
	tsize_t
;

47 
	#_SIZE_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

51 #i‚de‡
_OFF_T_DECLARED


52 
	#_OFF_T_DECLARED


	)

53 
__off_t
 
	toff_t
;

55 #i‚de‡
_SSIZE_T_DECLARED


56 
	#_SSIZE_T_DECLARED


	)

57 
__ssize_t
 
	tssize_t
;

61 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


62 #i‚de‡
_VA_LIST_DECLARED


63 
__va_li°
 
	tva_li°
;

64 
	#_VA_LIST_DECLARED


	)

68 
	#_FSTDIO


	)

77 
	s__sbuf
 {

78 *
	m_ba£
;

79 
	m_size
;

110 
	s__sFILE
 {

111 *
	m_p
;

112 
	m_r
;

113 
	m_w
;

114 
	m_Êags
;

115 
	m_fûe
;

116 
__sbuf
 
	m_bf
;

117 
	m_lbfsize
;

120 *
	m_cookõ
;

121 (*
	m_˛o£
)(*);

122 (*
	m_ªad
)(*, *, );

123 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

124 (*
	m_wrôe
)(*, const *, );

127 
__sbuf
 
	m_ub
;

128 *
	m_up
;

129 
	m_ur
;

132 
	m_ubuf
[3];

133 
	m_nbuf
[1];

136 
__sbuf
 
	m_lb
;

139 
	m_blksize
;

140 
Âos_t
 
	m_off£t
;

142 
±hªad_muãx
 *
	m_Ê_muãx
;

143 
±hªad
 *
	m_Ê_ow√r
;

144 
	m_Ê_cou¡
;

145 
	m_‹õ¡©i⁄
;

146 
__mb°©e_t
 
	m_mb°©e
;

148 #i‚de‡
_STDFILE_DECLARED


149 
	#_STDFILE_DECLARED


	)

150 
__sFILE
 
	tFILE
;

152 #i‚de‡
_STDSTREAM_DECLARED


153 
__BEGIN_DECLS


154 
FILE
 *
__°döp
;

155 
FILE
 *
__°douç
;

156 
FILE
 *
__°dîΩ
;

157 
	g__END_DECLS


158 
	#_STDSTREAM_DECLARED


	)

161 
	#__SLBF
 0x0001

	)

162 
	#__SNBF
 0x0002

	)

163 
	#__SRD
 0x0004

	)

164 
	#__SWR
 0x0008

	)

166 
	#__SRW
 0x0010

	)

167 
	#__SEOF
 0x0020

	)

168 
	#__SERR
 0x0040

	)

169 
	#__SMBF
 0x0080

	)

170 
	#__SAPP
 0x0100

	)

171 
	#__SSTR
 0x0200

	)

172 
	#__SOPT
 0x0400

	)

173 
	#__SNPT
 0x0800

	)

174 
	#__SOFF
 0x1000

	)

175 
	#__SMOD
 0x2000

	)

176 
	#__SALC
 0x4000

	)

177 
	#__SIGN
 0x8000

	)

188 
	#_IOFBF
 0

	)

189 
	#_IOLBF
 1

	)

190 
	#_IONBF
 2

	)

192 
	#BUFSIZ
 1024

	)

193 
	#EOF
 (-1)

	)

201 #i‚de‡
FOPEN_MAX


202 
	#FOPEN_MAX
 20

	)

204 
	#FILENAME_MAX
 1024

	)

207 #i‡
__XSI_VISIBLE


208 
	#P_tmpdú
 "/tmp/"

	)

210 
	#L_tm≤am
 1024

	)

211 
	#TMP_MAX
 308915776

	)

213 #i‚de‡
SEEK_SET


214 
	#SEEK_SET
 0

	)

216 #i‚de‡
SEEK_CUR


217 
	#SEEK_CUR
 1

	)

219 #i‚de‡
SEEK_END


220 
	#SEEK_END
 2

	)

223 
	#°dö
 
__°döp


	)

224 
	#°dout
 
__°douç


	)

225 
	#°dîr
 
__°dîΩ


	)

227 
	g__BEGIN_DECLS


228 #ifde‡
_XLOCALE_H_


229 
	~<xloˇÀ/_°dio.h
>

234 
˛óªº
(
FILE
 *);

235 
f˛o£
(
FILE
 *);

236 
„of
(
FILE
 *);

237 
„º‹
(
FILE
 *);

238 
fÊush
(
FILE
 *);

239 
fgëc
(
FILE
 *);

240 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

241 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

242 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

243 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

244 
Âutc
(, 
FILE
 *);

245 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

246 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

247 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

248 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

249 
f£ek
(
FILE
 *, , );

250 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

251 
·ñl
(
FILE
 *);

252 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

253 
gëc
(
FILE
 *);

254 
gëch¨
();

255 *
gës
(*);

256 
≥º‹
(const *);

257 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

258 
putc
(, 
FILE
 *);

259 
putch¨
();

260 
puts
(const *);

261 
ªmove
(const *);

262 
ª«me
(const *, const *);

263 
ªwöd
(
FILE
 *);

264 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

265 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

266 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

267 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

268 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

269 
FILE
 *
tmpfûe
();

270 *
tm≤am
(*);

271 
ungëc
(, 
FILE
 *);

272 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict,

273 
__va_li°
);

274 
v¥ötf
(c⁄° * 
__ª°ri˘
, 
__va_li°
);

275 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

276 
__va_li°
);

278 #i‡
__ISO_C_VISIBLE
 >= 1999

279 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

280 ...Ë
	`__¥ötÊike
(3, 4);

281 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

282 
	`__sˇnÊike
(2, 0);

283 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__sˇnÊike
(1, 0);

284 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

285 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

286 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

287 
	`__sˇnÊike
(2, 0);

293 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 199506

294 
	#L_cu£rid
 17

	)

297 #i‡
__POSIX_VISIBLE


298 
	#L_˘îmid
 1024

	)

300 *
	`˘îmid
(*);

301 
FILE
 *
	`fd›í
(, const *);

302 
	`fûío
(
FILE
 *);

305 #i‡
__POSIX_VISIBLE
 >= 199209

306 
	`p˛o£
(
FILE
 *);

307 
FILE
 *
	`p›í
(const *, const *);

310 #i‡
__POSIX_VISIBLE
 >= 199506

311 
	`·rylockfûe
(
FILE
 *);

312 
	`Êockfûe
(
FILE
 *);

313 
	`fu∆ockfûe
(
FILE
 *);

319 
	`gëc_u∆ocked
(
FILE
 *);

320 
	`gëch¨_u∆ocked
();

321 
	`putc_u∆ocked
(, 
FILE
 *);

322 
	`putch¨_u∆ocked
();

324 #i‡
__BSD_VISIBLE


325 
	`˛óªº_u∆ocked
(
FILE
 *);

326 
	`„of_u∆ocked
(
FILE
 *);

327 
	`„º‹_u∆ocked
(
FILE
 *);

328 
	`fûío_u∆ocked
(
FILE
 *);

331 #i‡
__POSIX_VISIBLE
 >= 200112

332 
	`f£eko
(
FILE
 *, 
__off_t
, );

333 
__off_t
 
	`·ñlo
(
FILE
 *);

336 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 > 0 && __XSI_VISIBLE < 600

337 
	`gëw
(
FILE
 *);

338 
	`putw
(, 
FILE
 *);

341 #i‡
__XSI_VISIBLE


342 *
	`ãm≤am
(const *, const *);

345 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

346 
FILE
 *
	`fmem›í
(* 
__ª°ri˘
, 
size_t
, const * __restrict);

347 
ssize_t
 
	`gëdñim
(** 
__ª°ri˘
, 
size_t
 * __restrict, ,

348 
FILE
 * 
__ª°ri˘
);

349 
FILE
 *
	`›í_mem°ªam
(**, 
size_t
 *);

350 
	`ª«mót
(, const *, , const *);

351 
	`vd¥ötf
(, c⁄° * 
__ª°ri˘
, 
__va_li°
);

362 #i‚de‡
_WITH_GETLINE


363 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

364 
	#_WITH_GETLINE


	)

365 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

366 #i‡
_POSIX_C_SOURCE
 >= 200809

367 
	#_WITH_GETLINE


	)

372 #ifde‡
_WITH_GETLINE


373 
ssize_t
 
	`gëlöe
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, 
FILE
 * __restrict);

376 #i‚de‡
_WITH_DPRINTF


377 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

378 
	#_WITH_DPRINTF


	)

379 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

380 #i‡
_POSIX_C_SOURCE
 >= 200809

381 
	#_WITH_DPRINTF


	)

386 #ifde‡
_WITH_DPRINTF


387 (
d¥ötf
)(, c⁄° * 
__ª°ri˘
, ...);

395 #i‡
__BSD_VISIBLE


396 
	$a•rötf
(**, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

397 *
	`˘îmid_r
(*);

398 
	`f˛o£Æl
();

399 *
	`fgë 
(
FILE
 *, 
size_t
 *);

400 c⁄° *
	$fmtcheck
(c⁄° *, c⁄° *Ë
	`__f‹m©_¨g
(2);

401 
	`Âurge
(
FILE
 *);

402 
	`£tbuf„r
(
FILE
 *, *, );

403 
	`£éöebuf
(
FILE
 *);

404 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

405 
	`__¥ötÊike
(2, 0);

412 
__c⁄°
 
sys_√º
;

413 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

418 
FILE
 *
	`fun›í
(const *,

421 
	$Âos_t
 (*)(*, 
Âos_t
, ),

423 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

424 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

429 #i‚de‡
_FTRUNCATE_DECLARED


430 
	#_FTRUNCATE_DECLARED


	)

431 
	`·runˇã
(, 
__off_t
);

433 #i‚de‡
_LSEEK_DECLARED


434 
	#_LSEEK_DECLARED


	)

435 
__off_t
 
	`l£ek
(, __off_t, );

437 #i‚de‡
_MMAP_DECLARED


438 
	#_MMAP_DECLARED


	)

439 *
	`mm≠
(*, 
size_t
, , , , 
__off_t
);

441 #i‚de‡
_TRUNCATE_DECLARED


442 
	#_TRUNCATE_DECLARED


	)

443 
	`åunˇã
(c⁄° *, 
__off_t
);

450 
	`__§gë
(
FILE
 *);

451 
	`__swbuf
(, 
FILE
 *);

457 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

458 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

459 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

460 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

461  (*
_p
->_p++ = 
_c
);

463  (
	`__swbuf
(
_c
, 
_p
));

464 
	}
}

469 
	#__•utc
(
c
, 
p
) \

470 (--(
p
)->
_w
 < 0 ? \

471 (
p
)->
_w
 >’)->
_lbfsize
 ? \

472 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

473 ()*(
p
)->
_p
++ : \

474 
	`__swbuf
('\n', 
p
) : \

475 
	`__swbuf
(()(
c
), 
p
) : \

476 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

479 
__i°hªaded
;

481 #i‚de‡
__˝lu•lus


483 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

484 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

485 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

486 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

489 
	#„of
(
p
Ë(!
__i°hªaded
 ? 
	`__s„of
’Ë: (
„of
)’))

	)

490 
	#„º‹
(
p
Ë(!
__i°hªaded
 ? 
	`__s„º‹
’Ë: (
„º‹
)’))

	)

491 
	#˛óªº
(
p
Ë(!
__i°hªaded
 ? 
	`__s˛óªº
’Ë: (
˛óªº
)’))

	)

493 #i‡
__POSIX_VISIBLE


494 
	#fûío
(
p
Ë(!
__i°hªaded
 ? 
	`__sfûío
’Ë: (
fûío
)’))

	)

497 
	#gëc
(
Â
Ë(!
__i°hªaded
 ? 
	`__sgëc
(ÂË: (
gëc
)(Â))

	)

498 
	#putc
(
x
, 
Â
Ë(!
__i°hªaded
 ? 
	`__•utc
(x, fpË: (
putc
)(x, fp))

	)

500 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

501 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

503 #i‡
__BSD_VISIBLE


508 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

509 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

510 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

511 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

513 #i‡
__POSIX_VISIBLE
 >= 199506

514 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

515 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

517 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

518 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

522 
	g__END_DECLS


	@/usr/include/stdlib.h

33 #i‚de‡
_STDLIB_H_


34 
	#_STDLIB_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_nuŒ.h
>

38 
	~<sys/_ty≥s.h
>

40 #i‡
__BSD_VISIBLE


41 #i‚de‡
_RUNE_T_DECLARED


42 
__ru√_t
 
	tru√_t
;

43 
	#_RUNE_T_DECLARED


	)

47 #i‚de‡
_SIZE_T_DECLARED


48 
__size_t
 
	tsize_t
;

49 
	#_SIZE_T_DECLARED


	)

52 #i‚def 
__˝lu•lus


53 #i‚de‡
_WCHAR_T_DECLARED


54 
__wch¨_t
 
	twch¨_t
;

55 
	#_WCHAR_T_DECLARED


	)

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 
	mquŸ
;

66 
	mªm
;

67 } 
	tldiv_t
;

69 
	#EXIT_FAILURE
 1

	)

70 
	#EXIT_SUCCESS
 0

	)

72 
	#RAND_MAX
 0x7ffffffd

	)

74 
	g__BEGIN_DECLS


75 #ifde‡
_XLOCALE_H_


76 
	~<xloˇÀ/_°dlib.h
>

78 
__mb_cur_max
;

79 
___mb_cur_max
();

80 
	#MB_CUR_MAX
 (
	`___mb_cur_max
())

	)

82 
_N‹ëu∫
 
ab‹t
();

83 
	$abs
(Ë
__puª2
;

84 
	`©exô
((*)());

85 
	`©of
(const *);

86 
	`©oi
(const *);

87 
	`©ﬁ
(const *);

88 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

89 
size_t
, (*)(const *, const *));

90 *
	$ˇŒoc
(
size_t
, size_tË
__mÆloc_like
;

91 
div_t
 
	$div
(, Ë
__puª2
;

92 
_N‹ëu∫
 
	`exô
();

93 
	`‰ì
(*);

94 *
	`gëív
(const *);

95 
	$œbs
(Ë
__puª2
;

96 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

97 *
	$mÆloc
(
size_t
Ë
__mÆloc_like
;

98 
	`mbÀn
(c⁄° *, 
size_t
);

99 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

100 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	`qs‹t
(*, 
size_t
, size_t,

103 
	`ønd
();

104 *
	`ªÆloc
(*, 
size_t
);

105 
	`§™d
();

106 
	`°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

107 
	`°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

108 
	`°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

110 
	`°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

112 
	`°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

113 
	`sy°em
(const *);

114 
	`w˘omb
(*, 
wch¨_t
);

115 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

127 #i‡
__ISO_C_VISIBLE
 >= 1999

128 #ifde‡
__LONG_LONG_SUPPORTED


131 
quŸ
;

132 
ªm
;

133 } 
	tŒdiv_t
;

137 
	`©ﬁl
(const *);

140 
	$Œabs
(Ë
__puª2
;

142 
Œdiv_t
 
	$Œdiv
(, Ë
__puª2
;

145 
	`°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

148 
	`°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

151 
_N‹ëu∫
 
	`_Exô
();

157 #i‡
__ISO_C_VISIBLE
 >2011 || 
__˝lu•lus
 >= 201103L

158 * 
	`Æig√d_Æloc
(
size_t
, size_t);

159 
_N‹ëu∫
 

160 
	`quick_exô
();

161 
	`©_quick_exô
((*)());

168 #i‡
__POSIX_VISIBLE


169 
	`posix_memÆign
(**, 
size_t
, size_t);

170 
	`ønd_r
(*);

171 *
	`ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __restrict);

172 
	`£ãnv
(const *, const *, );

173 
	`un£ãnv
(const *);

176 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


177 
	`gësub›t
(**, *const *, **);

178 #i‚de‡
_MKDTEMP_DECLARED


179 *
	`mkdãmp
(*);

180 
	#_MKDTEMP_DECLARED


	)

182 #i‚de‡
_MKSTEMP_DECLARED


183 
	`mk°emp
(*);

184 
	#_MKSTEMP_DECLARED


	)

194 #i‡
__XSI_VISIBLE


196 
	`a64l
(const *);

197 
	`dønd48
();

199 
	`î™d48
([3]);

202 
	`gø¡±
();

203 *
	`öô°©e
(, *, );

204 
	`jønd48
([3]);

205 *
	`l64a
();

206 
	`lc⁄g48
([7]);

207 
	`Ã™d48
();

208 #i‡!
	`deföed
(
_MKTEMP_DECLARED
Ë&& (
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 <= 600)

209 *
	`mkãmp
(*);

210 
	#_MKTEMP_DECLARED


	)

212 
	`mønd48
();

213 
	`ƒ™d48
([3]);

214 
	`posix_›í±
();

215 *
	`±¢ame
();

216 
	`puãnv
(*);

217 
	`øndom
();

219 *
	`£ed48
([3]);

220 #i‚de‡
_SETKEY_DECLARED


221 
	`£tkey
(const *);

222 
	#_SETKEY_DECLARED


	)

224 *
	`£t°©e
( *);

225 
	`§™d48
();

226 
	`§™dom
();

227 
	`u∆ock±
();

230 #i‡
__BSD_VISIBLE


231 c⁄° *
_mÆloc_›ti⁄s
;

232 (*
_mÆloc_mesßge
)(const *, const *, const *,

244 #i‡
__GNUC__
 >2 || 
	`deföed
(
__INTEL_COMPILER
)

245 #unde‡
Æloˇ


246 
	#Æloˇ
(
sz
Ë
	`__buûtö_Æloˇ
(sz)

	)

247 #ñi‡
	`deföed
(
löt
)

248 *
	`Æloˇ
(
size_t
);

251 
	$ab‹t2
(c⁄° *, , **Ë
__dód2
;

252 
__uöt32_t


253 
	`¨c4øndom
();

254 
	`¨c4øndom_addøndom
(*, );

255 
	`¨c4øndom_buf
(*, 
size_t
);

256 
	`¨c4øndom_°ú
();

257 
__uöt32_t


258 
	`¨c4øndom_unif‹m
(
__uöt32_t
);

259 *
	`gëbsize
(*, *);

261 *
	`cgëˇp
(*, const *, );

262 
	`cgë˛o£
();

263 
	`cgëít
(**, **, const *);

264 
	`cgëfú°
(**, **);

265 
	`cgëm©ch
(const *, const *);

266 
	`cgë√xt
(**, **);

267 
	`cgënum
(*, const *, *);

268 
	`cgë£t
(const *);

269 
	`cgë°r
(*, const *, **);

270 
	`cgëu°r
(*, const *, **);

272 
	`d´m⁄
(, );

273 *
	`dev«me
(
__dev_t
, 
__mode_t
);

274 *
	`dev«me_r
(
__dev_t
, 
__mode_t
, *, );

275 *
	`fdev«me
();

276 *
	`fdev«me_r
(, *, );

277 
	`gëlﬂdavg
([], );

278 
__c⁄°
 *

279 
	`gë¥og«me
();

281 
	`hóps‹t
(*, 
size_t
, size_t, (*)(const *, const *));

282 
	`l64a_r
(, *, );

283 
	`mîges‹t
(*, 
size_t
, size_t, (*)(const *, const *));

284 
	`qs‹t_r
(*, 
size_t
, size_t, *,

286 
	`ødixs‹t
(const **, , const *,

288 *
	`ªÆlocf
(*, 
size_t
);

289 
	`Ωm©ch
(const *);

290 
	`£çrog«me
(const *);

291 
	`§adixs‹t
(const **, , const *,

293 
	`§™ddev
();

294 
	`§™domdev
();

296 
	`°π⁄um
(const *, , , const **);

299 
__öt64_t


300 
	`°πoq
(const *, **, );

301 
__uöt64_t


302 
	`°πouq
(const *, **, );

304 *
sub›èrg
;

306 
__END_DECLS


	@/usr/include/string.h

33 #i‚de‡
_STRING_H_


34 
	#_STRING_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_nuŒ.h
>

38 
	~<sys/_ty≥s.h
>

44 #i‡
__BSD_VISIBLE


45 
	~<°rögs.h
>

48 #i‚de‡
_SIZE_T_DECLARED


49 
__size_t
 
	tsize_t
;

50 
	#_SIZE_T_DECLARED


	)

53 
	g__BEGIN_DECLS


54 #i‡
__XSI_VISIBLE
 >= 600

55 *
memc˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, , 
size_t
);

57 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

58 #i‡
__BSD_VISIBLE


59 *
	$memrchr
(c⁄° *, , 
size_t
Ë
__puª
;

61 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

62 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

63 #i‡
__BSD_VISIBLE


64 *
	$memmem
(c⁄° *, 
size_t
, c⁄° *, size_tË
__puª
;

66 *
	`memmove
(*, c⁄° *, 
size_t
);

67 *
	`mem£t
(*, , 
size_t
);

68 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


69 *
	`°p˝y
(* 
__ª°ri˘
, const * __restrict);

70 *
	`°≤˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

72 #i‡
__BSD_VISIBLE


73 *
	$°rˇ£°r
(c⁄° *, c⁄° *Ë
__puª
;

75 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

76 *
	$°rchr
(c⁄° *, Ë
__puª
;

77 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

78 
	`°rcﬁl
(const *, const *);

79 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

80 
size_t
 
	$°rc•n
(c⁄° *, c⁄° *Ë
__puª
;

81 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


82 *
	$°rdup
(c⁄° *Ë
__mÆloc_like
;

84 *
	`°ªº‹
();

85 #i‡
__POSIX_VISIBLE
 >= 200112

86 
	`°ªº‹_r
(, *, 
size_t
);

88 #i‡
__BSD_VISIBLE


89 
size_t
 
	`°æˇt
(* 
__ª°ri˘
, const * __restrict, size_t);

90 
size_t
 
	`°æ˝y
(* 
__ª°ri˘
, const * __restrict, size_t);

92 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

93 #i‡
__BSD_VISIBLE


94 
	`°rmode
(, *);

96 *
	`°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

97 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

98 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

99 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


100 *
	$°∫dup
(c⁄° *, 
size_t
Ë
__mÆloc_like
;

101 
size_t
 
	$°∫Àn
(c⁄° *, 
size_t
Ë
__puª
;

103 #i‡
__BSD_VISIBLE


104 *
	$°∫°r
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

106 *
	$°Ωbrk
(c⁄° *, c⁄° *Ë
__puª
;

107 *
	$°ºchr
(c⁄° *, Ë
__puª
;

108 #i‡
__BSD_VISIBLE


109 *
	`°r£p
(**, const *);

111 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


112 *
	`°rsig«l
();

114 
size_t
 
	$°r•n
(c⁄° *, c⁄° *Ë
__puª
;

115 *
	$°r°r
(c⁄° *, c⁄° *Ë
__puª
;

116 *
	`°πok
(* 
__ª°ri˘
, const * __restrict);

117 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

118 *
	`°πok_r
(*, const *, **);

120 
size_t
 
	`°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

121 #i‡
__BSD_VISIBLE


123 #i‚de‡
_SWAB_DECLARED


124 
	#_SWAB_DECLARED


	)

126 #i‚de‡
_SSIZE_T_DECLARED


127 
__ssize_t
 
	tssize_t
;

128 
	#_SSIZE_T_DECLARED


	)

131 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

136 #i‡
__POSIX_VISIBLE
 >200809 || 
	`deföed
(
_XLOCALE_H_
)

137 
	~<xloˇÀ/_°rög.h
>

139 
__END_DECLS


	@/usr/include/strings.h

29 #i‚de‡
_STRINGS_H_


30 
	#_STRINGS_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_SIZE_T_DECLARED


36 
__size_t
 
	tsize_t
;

37 
	#_SIZE_T_DECLARED


	)

40 
	g__BEGIN_DECLS


41 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

42 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

43 
	`bc›y
(c⁄° *, *, 
size_t
);

44 
	`bzîo
(*, 
size_t
);

46 #i‡
__XSI_VISIBLE


47 
	$ffs
(Ë
__puª2
;

49 #i‡
__BSD_VISIBLE


50 
	$ff¶
(Ë
__puª2
;

51 
	$ff¶l
(Ë
__puª2
;

52 
	$Ês
(Ë
__puª2
;

53 
	$Ê¶
(Ë
__puª2
;

54 
	$Ê¶l
(Ë
__puª2
;

56 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

57 *
	$ödex
(c⁄° *, Ë
__puª
;

58 *
	$rödex
(c⁄° *, Ë
__puª
;

60 
	$°rˇ£cmp
(c⁄° *, c⁄° *Ë
__puª
;

61 
	$°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

62 
__END_DECLS


	@/usr/include/sys/filio.h

38 #i‚def 
_SYS_FILIO_H_


39 
	#_SYS_FILIO_H_


	)

41 
	~<sys/ioccom.h
>

44 
	#FIOCLEX
 
	`_IO
('f', 1Ë

	)

45 
	#FIONCLEX
 
	`_IO
('f', 2Ë

	)

46 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

47 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

48 
	#FIOASYNC
 
	`_IOW
('f', 125, Ë

	)

49 
	#FIOSETOWN
 
	`_IOW
('f', 124, Ë

	)

50 
	#FIOGETOWN
 
	`_IOR
('f', 123, Ë

	)

51 
	#FIODTYPE
 
	`_IOR
('f', 122, Ë

	)

52 
	#FIOGETLBA
 
	`_IOR
('f', 121, Ë

	)

53 
	sfiodg«me_¨g
 {

54 
	mÀn
;

55 *
	mbuf
;

57 
	#FIODGNAME
 
	`_IOW
('f', 120, 
fiodg«me_¨g
Ë

	)

58 
	#FIONWRITE
 
	`_IOR
('f', 119, Ë

	)

59 
	#FIONSPACE
 
	`_IOR
('f', 118, Ë

	)

61 
	#FIOSEEKDATA
 
	`_IOWR
('f', 97, 
off_t
Ë

	)

62 
	#FIOSEEKHOLE
 
	`_IOWR
('f', 98, 
off_t
Ë

	)

	@/usr/include/sys/ioctl.h

38 #i‚def 
_SYS_IOCTL_H_


39 
	#_SYS_IOCTL_H_


	)

41 #ifde‡
_KERNEL


45 
	~<sys/ioccom.h
>

47 
	~<sys/fûio.h
>

48 
	~<sys/sockio.h
>

49 
	~<sys/âycom.h
>

	@/usr/include/sys/socket.h

33 #i‚de‡
_SYS_SOCKET_H_


34 
	#_SYS_SOCKET_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

39 
	~<machöe/_Æign.h
>

48 #i‡
__BSD_VISIBLE


49 #i‚de‡
_GID_T_DECLARED


50 
__gid_t
 
	tgid_t
;

51 
	#_GID_T_DECLARED


	)

54 #i‚de‡
_OFF_T_DECLARED


55 
__off_t
 
	toff_t
;

56 
	#_OFF_T_DECLARED


	)

59 #i‚de‡
_PID_T_DECLARED


60 
__pid_t
 
	tpid_t
;

61 
	#_PID_T_DECLARED


	)

65 #i‚de‡
_SA_FAMILY_T_DECLARED


66 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

67 
	#_SA_FAMILY_T_DECLARED


	)

70 #i‚de‡
_SOCKLEN_T_DECLARED


71 
__sockÀn_t
 
	tsockÀn_t
;

72 
	#_SOCKLEN_T_DECLARED


	)

75 #i‚de‡
_SSIZE_T_DECLARED


76 
__ssize_t
 
	tssize_t
;

77 
	#_SSIZE_T_DECLARED


	)

80 #i‡
__BSD_VISIBLE


81 #i‚de‡
_UID_T_DECLARED


82 
__uid_t
 
	tuid_t
;

83 
	#_UID_T_DECLARED


	)

90 
	#SOCK_STREAM
 1

	)

91 
	#SOCK_DGRAM
 2

	)

92 
	#SOCK_RAW
 3

	)

93 #i‡
__BSD_VISIBLE


94 
	#SOCK_RDM
 4

	)

96 
	#SOCK_SEQPACKET
 5

	)

101 
	#SO_DEBUG
 0x0001

	)

102 
	#SO_ACCEPTCONN
 0x0002

	)

103 
	#SO_REUSEADDR
 0x0004

	)

104 
	#SO_KEEPALIVE
 0x0008

	)

105 
	#SO_DONTROUTE
 0x0010

	)

106 
	#SO_BROADCAST
 0x0020

	)

107 #i‡
__BSD_VISIBLE


108 
	#SO_USELOOPBACK
 0x0040

	)

110 
	#SO_LINGER
 0x0080

	)

111 
	#SO_OOBINLINE
 0x0100

	)

112 #i‡
__BSD_VISIBLE


113 
	#SO_REUSEPORT
 0x0200

	)

114 
	#SO_TIMESTAMP
 0x0400

	)

115 
	#SO_NOSIGPIPE
 0x0800

	)

116 
	#SO_ACCEPTFILTER
 0x1000

	)

117 
	#SO_BINTIME
 0x2000

	)

119 
	#SO_NO_OFFLOAD
 0x4000

	)

120 
	#SO_NO_DDP
 0x8000

	)

125 
	#SO_SNDBUF
 0x1001

	)

126 
	#SO_RCVBUF
 0x1002

	)

127 
	#SO_SNDLOWAT
 0x1003

	)

128 
	#SO_RCVLOWAT
 0x1004

	)

129 
	#SO_SNDTIMEO
 0x1005

	)

130 
	#SO_RCVTIMEO
 0x1006

	)

131 
	#SO_ERROR
 0x1007

	)

132 
	#SO_TYPE
 0x1008

	)

133 #i‡
__BSD_VISIBLE


134 
	#SO_LABEL
 0x1009

	)

135 
	#SO_PEERLABEL
 0x1010

	)

136 
	#SO_LISTENQLIMIT
 0x1011

	)

137 
	#SO_LISTENQLEN
 0x1012

	)

138 
	#SO_LISTENINCQLEN
 0x1013

	)

139 
	#SO_SETFIB
 0x1014

	)

140 
	#SO_USER_COOKIE
 0x1015

	)

141 
	#SO_PROTOCOL
 0x1016

	)

142 
	#SO_PROTOTYPE
 
SO_PROTOCOL


	)

150 #i‡
__BSD_VISIBLE


151 
	#SO_VENDOR
 0x80000000

	)

157 
	slögî
 {

158 
	ml_⁄off
;

159 
	ml_lögî
;

162 #i‡
__BSD_VISIBLE


163 
	sac˚±_fûãr_¨g
 {

164 
	maf_«me
[16];

165 
	maf_¨g
[256-16];

172 
	#SOL_SOCKET
 0xfff‡

	)

177 
	#AF_UNSPEC
 0

	)

178 #i‡
__BSD_VISIBLE


179 
	#AF_LOCAL
 
AF_UNIX


	)

181 
	#AF_UNIX
 1

	)

182 
	#AF_INET
 2

	)

183 #i‡
__BSD_VISIBLE


184 
	#AF_IMPLINK
 3

	)

185 
	#AF_PUP
 4

	)

186 
	#AF_CHAOS
 5

	)

187 
	#AF_NETBIOS
 6

	)

188 
	#AF_ISO
 7

	)

189 
	#AF_OSI
 
AF_ISO


	)

190 
	#AF_ECMA
 8

	)

191 
	#AF_DATAKIT
 9

	)

192 
	#AF_CCITT
 10

	)

193 
	#AF_SNA
 11

	)

194 
	#AF_DEC√t
 12

	)

195 
	#AF_DLI
 13

	)

196 
	#AF_LAT
 14

	)

197 
	#AF_HYLINK
 15

	)

198 
	#AF_APPLETALK
 16

	)

199 
	#AF_ROUTE
 17

	)

200 
	#AF_LINK
 18

	)

201 
	#p£udo_AF_XTP
 19

	)

202 
	#AF_COIP
 20

	)

203 
	#AF_CNT
 21

	)

204 
	#p£udo_AF_RTIP
 22

	)

205 
	#AF_IPX
 23

	)

206 
	#AF_SIP
 24

	)

207 
	#p£udo_AF_PIP
 25

	)

208 
	#AF_ISDN
 26

	)

209 
	#AF_E164
 
AF_ISDN


	)

210 
	#p£udo_AF_KEY
 27

	)

212 
	#AF_INET6
 28

	)

213 #i‡
__BSD_VISIBLE


214 
	#AF_NATM
 29

	)

215 
	#AF_ATM
 30

	)

216 
	#p£udo_AF_HDRCMPLT
 31

	)

219 
	#AF_NETGRAPH
 32

	)

220 
	#AF_SLOW
 33

	)

221 
	#AF_SCLUSTER
 34

	)

222 
	#AF_ARP
 35

	)

223 
	#AF_BLUETOOTH
 36

	)

224 
	#AF_IEEE80211
 37

	)

225 
	#AF_MAX
 38

	)

231 
	#AF_VENDOR00
 39

	)

232 
	#AF_VENDOR01
 41

	)

233 
	#AF_VENDOR02
 43

	)

234 
	#AF_VENDOR03
 45

	)

235 
	#AF_VENDOR04
 47

	)

236 
	#AF_VENDOR05
 49

	)

237 
	#AF_VENDOR06
 51

	)

238 
	#AF_VENDOR07
 53

	)

239 
	#AF_VENDOR08
 55

	)

240 
	#AF_VENDOR09
 57

	)

241 
	#AF_VENDOR10
 59

	)

242 
	#AF_VENDOR11
 61

	)

243 
	#AF_VENDOR12
 63

	)

244 
	#AF_VENDOR13
 65

	)

245 
	#AF_VENDOR14
 67

	)

246 
	#AF_VENDOR15
 69

	)

247 
	#AF_VENDOR16
 71

	)

248 
	#AF_VENDOR17
 73

	)

249 
	#AF_VENDOR18
 75

	)

250 
	#AF_VENDOR19
 77

	)

251 
	#AF_VENDOR20
 79

	)

252 
	#AF_VENDOR21
 81

	)

253 
	#AF_VENDOR22
 83

	)

254 
	#AF_VENDOR23
 85

	)

255 
	#AF_VENDOR24
 87

	)

256 
	#AF_VENDOR25
 89

	)

257 
	#AF_VENDOR26
 91

	)

258 
	#AF_VENDOR27
 93

	)

259 
	#AF_VENDOR28
 95

	)

260 
	#AF_VENDOR29
 97

	)

261 
	#AF_VENDOR30
 99

	)

262 
	#AF_VENDOR31
 101

	)

263 
	#AF_VENDOR32
 103

	)

264 
	#AF_VENDOR33
 105

	)

265 
	#AF_VENDOR34
 107

	)

266 
	#AF_VENDOR35
 109

	)

267 
	#AF_VENDOR36
 111

	)

268 
	#AF_VENDOR37
 113

	)

269 
	#AF_VENDOR38
 115

	)

270 
	#AF_VENDOR39
 117

	)

271 
	#AF_VENDOR40
 119

	)

272 
	#AF_VENDOR41
 121

	)

273 
	#AF_VENDOR42
 123

	)

274 
	#AF_VENDOR43
 125

	)

275 
	#AF_VENDOR44
 127

	)

276 
	#AF_VENDOR45
 129

	)

277 
	#AF_VENDOR46
 131

	)

278 
	#AF_VENDOR47
 133

	)

285 
	ssockaddr
 {

286 
	mß_Àn
;

287 
ß_Ámûy_t
 
	mß_Ámûy
;

288 
	mß_d©a
[14];

290 #i‡
__BSD_VISIBLE


291 
	#SOCK_MAXADDRLEN
 255

	)

297 
	ssock¥Ÿo
 {

298 
	m•_Ámûy
;

299 
	m•_¥Ÿocﬁ
;

303 
	~<sys/_sockaddr_°‹age.h
>

305 #i‡
__BSD_VISIBLE


309 
	#PF_UNSPEC
 
AF_UNSPEC


	)

310 
	#PF_LOCAL
 
AF_LOCAL


	)

311 
	#PF_UNIX
 
PF_LOCAL


	)

312 
	#PF_INET
 
AF_INET


	)

313 
	#PF_IMPLINK
 
AF_IMPLINK


	)

314 
	#PF_PUP
 
AF_PUP


	)

315 
	#PF_CHAOS
 
AF_CHAOS


	)

316 
	#PF_NETBIOS
 
AF_NETBIOS


	)

317 
	#PF_ISO
 
AF_ISO


	)

318 
	#PF_OSI
 
AF_ISO


	)

319 
	#PF_ECMA
 
AF_ECMA


	)

320 
	#PF_DATAKIT
 
AF_DATAKIT


	)

321 
	#PF_CCITT
 
AF_CCITT


	)

322 
	#PF_SNA
 
AF_SNA


	)

323 
	#PF_DEC√t
 
AF_DEC√t


	)

324 
	#PF_DLI
 
AF_DLI


	)

325 
	#PF_LAT
 
AF_LAT


	)

326 
	#PF_HYLINK
 
AF_HYLINK


	)

327 
	#PF_APPLETALK
 
AF_APPLETALK


	)

328 
	#PF_ROUTE
 
AF_ROUTE


	)

329 
	#PF_LINK
 
AF_LINK


	)

330 
	#PF_XTP
 
p£udo_AF_XTP


	)

331 
	#PF_COIP
 
AF_COIP


	)

332 
	#PF_CNT
 
AF_CNT


	)

333 
	#PF_SIP
 
AF_SIP


	)

334 
	#PF_IPX
 
AF_IPX


	)

335 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

336 
	#PF_PIP
 
p£udo_AF_PIP


	)

337 
	#PF_ISDN
 
AF_ISDN


	)

338 
	#PF_KEY
 
p£udo_AF_KEY


	)

339 
	#PF_INET6
 
AF_INET6


	)

340 
	#PF_NATM
 
AF_NATM


	)

341 
	#PF_ATM
 
AF_ATM


	)

342 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

343 
	#PF_SLOW
 
AF_SLOW


	)

344 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

345 
	#PF_ARP
 
AF_ARP


	)

346 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

348 
	#PF_MAX
 
AF_MAX


	)

358 
	#NET_MAXID
 
AF_MAX


	)

360 
	#CTL_NET_NAMES
 { \

362 { "unix", 
CTLTYPE_NODE
 }, \

363 { "öë", 
CTLTYPE_NODE
 }, \

364 { "im∂ök", 
CTLTYPE_NODE
 }, \

365 { "pup", 
CTLTYPE_NODE
 }, \

366 { "chaos", 
CTLTYPE_NODE
 }, \

367 { "xîox_ns", 
CTLTYPE_NODE
 }, \

368 { "iso", 
CTLTYPE_NODE
 }, \

369 { "emˇ", 
CTLTYPE_NODE
 }, \

370 { "d©akô", 
CTLTYPE_NODE
 }, \

371 { "ccôt", 
CTLTYPE_NODE
 }, \

372 { "ibm_¢a", 
CTLTYPE_NODE
 }, \

373 { "de˙ë", 
CTLTYPE_NODE
 }, \

374 { "dec_dli", 
CTLTYPE_NODE
 }, \

375 { "œt", 
CTLTYPE_NODE
 }, \

376 { "hylök", 
CTLTYPE_NODE
 }, \

377 { "≠∂ëÆk", 
CTLTYPE_NODE
 }, \

378 { "rouã", 
CTLTYPE_NODE
 }, \

379 { "lök_œyî", 
CTLTYPE_NODE
 }, \

380 { "xç", 
CTLTYPE_NODE
 }, \

381 { "coù", 
CTLTYPE_NODE
 }, \

382 { "˙t", 
CTLTYPE_NODE
 }, \

383 { "πù", 
CTLTYPE_NODE
 }, \

384 { "ùx", 
CTLTYPE_NODE
 }, \

385 { "sù", 
CTLTYPE_NODE
 }, \

386 { "pù", 
CTLTYPE_NODE
 }, \

387 { "isdn", 
CTLTYPE_NODE
 }, \

388 { "key", 
CTLTYPE_NODE
 }, \

389 { "öë6", 
CTLTYPE_NODE
 }, \

390 { "«tm", 
CTLTYPE_NODE
 }, \

391 { "©m", 
CTLTYPE_NODE
 }, \

392 { "hdrcom∂ëe", 
CTLTYPE_NODE
 }, \

393 { "√tgøph", 
CTLTYPE_NODE
 }, \

394 { "¢p", 
CTLTYPE_NODE
 }, \

395 { "s˝", 
CTLTYPE_NODE
 }, \

396 }

	)

406 
	#NET_RT_DUMP
 1

	)

407 
	#NET_RT_FLAGS
 2

	)

408 
	#NET_RT_IFLIST
 3

	)

409 
	#NET_RT_IFMALIST
 4

	)

410 
	#NET_RT_IFLISTL
 5

	)

412 
	#NET_RT_MAXID
 6

	)

414 
	#CTL_NET_RT_NAMES
 { \

416 { "dump", 
CTLTYPE_STRUCT
 }, \

417 { "Êags", 
CTLTYPE_STRUCT
 }, \

418 { "iÊi°", 
CTLTYPE_STRUCT
 }, \

419 { "ifmÆi°", 
CTLTYPE_STRUCT
 }, \

420 { "iÊi°l", 
CTLTYPE_STRUCT
 }, \

421 }

	)

427 
	#SOMAXCONN
 128

	)

433 
	smsghdr
 {

434 *
	mmsg_«me
;

435 
sockÀn_t
 
	mmsg_«mñí
;

436 
iovec
 *
	mmsg_iov
;

437 
	mmsg_iovÀn
;

438 *
	mmsg_c⁄åﬁ
;

439 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

440 
	mmsg_Êags
;

443 
	#MSG_OOB
 0x1

	)

444 
	#MSG_PEEK
 0x2

	)

445 
	#MSG_DONTROUTE
 0x4

	)

446 
	#MSG_EOR
 0x8

	)

447 
	#MSG_TRUNC
 0x10

	)

448 
	#MSG_CTRUNC
 0x20

	)

449 
	#MSG_WAITALL
 0x40

	)

450 
	#MSG_NOTIFICATION
 0x2000

	)

451 #i‡
__BSD_VISIBLE


452 
	#MSG_DONTWAIT
 0x80

	)

453 
	#MSG_EOF
 0x100

	)

454 
	#MSG_NBIO
 0x4000

	)

455 
	#MSG_COMPAT
 0x8000

	)

457 #ifde‡
_KERNEL


458 
	#MSG_SOCALLBCK
 0x10000

	)

460 #i‡
__BSD_VISIBLE


461 
	#MSG_NOSIGNAL
 0x20000

	)

470 
	scmsghdr
 {

471 
sockÀn_t
 
	mcmsg_Àn
;

472 
	mcmsg_Àvñ
;

473 
	mcmsg_ty≥
;

477 #i‡
__BSD_VISIBLE


483 
	#CMGROUP_MAX
 16

	)

492 
	scmsg¸ed
 {

493 
pid_t
 
	mcm¸ed_pid
;

494 
uid_t
 
	mcm¸ed_uid
;

495 
uid_t
 
	mcm¸ed_euid
;

496 
gid_t
 
	mcm¸ed_gid
;

497 
	mcm¸ed_ngroups
;

498 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

504 
	ssock¸ed
 {

505 
uid_t
 
	msc_uid
;

506 
uid_t
 
	msc_euid
;

507 
gid_t
 
	msc_gid
;

508 
gid_t
 
	msc_egid
;

509 
	msc_ngroups
;

510 
gid_t
 
	msc_groups
[1];

516 
	#SOCKCREDSIZE
(
ngΩs
) \

517 ((
sock¸ed
Ë+ ((
gid_t
Ë* ((
ngΩs
Ë- 1)))

	)

522 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

523 
	`_ALIGN
((
cmsghdr
)))

	)

526 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

527 ((*)(
cmsg
Ë=
NULL
 ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

528 ((*)(
cmsg
Ë+ 
	`_ALIGN
(((
cmsghdr
 *)(cmsg))->
cmsg_Àn
) + \

529 
	`_ALIGN
((
cmsghdr
)) > \

530 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

531 (
cmsghdr
 *)0 : \

532 (
cmsghdr
 *)(*)((*)(
cmsg
) + \

533 
	`_ALIGN
(((
cmsghdr
 *)(
cmsg
))->
cmsg_Àn
)))

	)

539 
	#CMSG_FIRSTHDR
(
mhdr
) \

540 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

541 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

542 (
cmsghdr
 *)
NULL
)

	)

544 #i‡
__BSD_VISIBLE


546 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

547 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

550 #ifde‡
_KERNEL


551 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

555 
	#SCM_RIGHTS
 0x01

	)

556 #i‡
__BSD_VISIBLE


557 
	#SCM_TIMESTAMP
 0x02

	)

558 
	#SCM_CREDS
 0x03

	)

559 
	#SCM_BINTIME
 0x04

	)

562 #i‡
__BSD_VISIBLE


566 
	sosockaddr
 {

567 
	mß_Ámûy
;

568 
	mß_d©a
[14];

574 
	somsghdr
 {

575 *
	mmsg_«me
;

576 
	mmsg_«mñí
;

577 
iovec
 *
	mmsg_iov
;

578 
	mmsg_iovÀn
;

579 *
	mmsg_ac¸ights
;

580 
	mmsg_ac¸ight¶í
;

587 
	#SHUT_RD
 0

	)

588 
	#SHUT_WR
 1

	)

589 
	#SHUT_RDWR
 2

	)

592 
	#PRU_FLUSH_RD
 
SHUT_RD


	)

593 
	#PRU_FLUSH_WR
 
SHUT_WR


	)

594 
	#PRU_FLUSH_RDWR
 
SHUT_RDWR


	)

597 #i‡
__BSD_VISIBLE


601 
	ssf_hdå
 {

602 
iovec
 *
	mhódîs
;

603 
	mhdr_˙t
;

604 
iovec
 *
	måaûîs
;

605 
	mål_˙t
;

611 
	#SF_NODISKIO
 0x00000001

	)

612 
	#SF_MNOWAIT
 0x00000002

	)

613 
	#SF_SYNC
 0x00000004

	)

616 #i‚def 
_KERNEL


618 
	~<sys/cdefs.h
>

620 
__BEGIN_DECLS


621 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

622 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

623 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

624 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

625 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

626 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

627 
li°í
(, );

628 
ssize_t
 
ªcv
(, *, 
size_t
, );

629 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

630 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

631 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

632 
ssize_t
 
£ndto
(, const *,

633 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

634 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

635 #i‡
__BSD_VISIBLE


636 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

637 
£tfib
();

639 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

640 
shutdown
(, );

641 
sock©m¨k
();

642 
sockë
(, , );

643 
sockë∑ú
(, , , *);

644 
	g__END_DECLS


648 #ifde‡
_KERNEL


649 
	gsockë
;

651 
t˝cb
 *
so_sŸŸ˝cb
(
sockë
 *
so
);

652 
öpcb
 *
so_sŸoöpcb
(
sockë
 *
so
);

653 
sockbuf
 *
so_sockbuf_¢d
(
sockë
 *);

654 
sockbuf
 *
so_sockbuf_rcv
(
sockë
 *);

656 
so_°©e_gë
(c⁄° 
sockë
 *);

657 
so_°©e_£t
(
sockë
 *, );

659 
so_›ti⁄s_gë
(c⁄° 
sockë
 *);

660 
so_›ti⁄s_£t
(
sockë
 *, );

662 
so_îr‹_gë
(c⁄° 
sockë
 *);

663 
so_îr‹_£t
(
sockë
 *, );

665 
so_lögî_gë
(c⁄° 
sockë
 *);

666 
so_lögî_£t
(
sockë
 *, );

668 
¥Ÿosw
 *
so_¥Ÿosw_gë
(c⁄° 
sockë
 *);

669 
so_¥Ÿosw_£t
(
sockë
 *, 
¥Ÿosw
 *);

671 
so_s‹wakeup_locked
(
sockë
 *
so
);

672 
so_sowwakeup_locked
(
sockë
 *
so
);

674 
so_s‹wakeup
(
sockë
 *
so
);

675 
so_sowwakeup
(
sockë
 *
so
);

677 
so_lock
(
sockë
 *
so
);

678 
so_u∆ock
(
sockë
 *
so
);

680 
so_li°íîs_≠∂y_Æl
(
sockë
 *
so
, (*
func
)(sockë *, *), *
¨g
);

	@/usr/include/sys/stat.h

38 #i‚de‡
_SYS_STAT_H_


39 
	#_SYS_STAT_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_time•ec.h
>

43 
	~<sys/_ty≥s.h
>

45 #i‚de‡
_BLKSIZE_T_DECLARED


46 
__blksize_t
 
	tblksize_t
;

47 
	#_BLKSIZE_T_DECLARED


	)

50 #i‚de‡
_BLKCNT_T_DECLARED


51 
__blk˙t_t
 
	tblk˙t_t
;

52 
	#_BLKCNT_T_DECLARED


	)

55 #i‚de‡
_DEV_T_DECLARED


56 
__dev_t
 
	tdev_t
;

57 
	#_DEV_T_DECLARED


	)

60 #i‚de‡
_FFLAGS_T_DECLARED


61 
__fÊags_t
 
	tfÊags_t
;

62 
	#_FFLAGS_T_DECLARED


	)

65 #i‚de‡
_GID_T_DECLARED


66 
__gid_t
 
	tgid_t
;

67 
	#_GID_T_DECLARED


	)

70 #i‚de‡
_INO_T_DECLARED


71 
__öo_t
 
	töo_t
;

72 
	#_INO_T_DECLARED


	)

75 #i‚de‡
_MODE_T_DECLARED


76 
__mode_t
 
	tmode_t
;

77 
	#_MODE_T_DECLARED


	)

80 #i‚de‡
_NLINK_T_DECLARED


81 
__∆ök_t
 
	t∆ök_t
;

82 
	#_NLINK_T_DECLARED


	)

85 #i‚de‡
_OFF_T_DECLARED


86 
__off_t
 
	toff_t
;

87 
	#_OFF_T_DECLARED


	)

90 #i‚de‡
_UID_T_DECLARED


91 
__uid_t
 
	tuid_t
;

92 
	#_UID_T_DECLARED


	)

95 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


99 
	~<sys/time.h
>

102 #ifde‡
_KERNEL


103 
	so°©
 {

104 
__uöt16_t
 
	m°_dev
;

105 
öo_t
 
	m°_öo
;

106 
mode_t
 
	m°_mode
;

107 
∆ök_t
 
	m°_∆ök
;

108 
__uöt16_t
 
	m°_uid
;

109 
__uöt16_t
 
	m°_gid
;

110 
__uöt16_t
 
	m°_rdev
;

111 
__öt32_t
 
	m°_size
;

112 
time•ec
 
	m°_©im
;

113 
time•ec
 
	m°_mtim
;

114 
time•ec
 
	m°_˘im
;

115 
__öt32_t
 
	m°_blksize
;

116 
__öt32_t
 
	m°_blocks
;

117 
fÊags_t
 
	m°_Êags
;

118 
__uöt32_t
 
	m°_gí
;

122 
	s°©
 {

123 
__dev_t
 
	m°_dev
;

124 
öo_t
 
	m°_öo
;

125 
mode_t
 
	m°_mode
;

126 
∆ök_t
 
	m°_∆ök
;

127 
uid_t
 
	m°_uid
;

128 
gid_t
 
	m°_gid
;

129 
__dev_t
 
	m°_rdev
;

130 
time•ec
 
	m°_©im
;

131 
time•ec
 
	m°_mtim
;

132 
time•ec
 
	m°_˘im
;

133 
off_t
 
	m°_size
;

134 
blk˙t_t
 
	m°_blocks
;

135 
blksize_t
 
	m°_blksize
;

136 
fÊags_t
 
	m°_Êags
;

137 
__uöt32_t
 
	m°_gí
;

138 
__öt32_t
 
	m°_l•¨e
;

139 
time•ec
 
	m°_búthtim
;

148 :(8 / 2Ë* (16 - ()(
time•ec
));

149 :(8 / 2Ë* (16 - ()(
time•ec
));

152 #ifde‡
_KERNEL


153 
	sn°©
 {

154 
__dev_t
 
	m°_dev
;

155 
öo_t
 
	m°_öo
;

156 
__uöt32_t
 
	m°_mode
;

157 
__uöt32_t
 
	m°_∆ök
;

158 
uid_t
 
	m°_uid
;

159 
gid_t
 
	m°_gid
;

160 
__dev_t
 
	m°_rdev
;

161 
time•ec
 
	m°_©im
;

162 
time•ec
 
	m°_mtim
;

163 
time•ec
 
	m°_˘im
;

164 
off_t
 
	m°_size
;

165 
blk˙t_t
 
	m°_blocks
;

166 
blksize_t
 
	m°_blksize
;

167 
fÊags_t
 
	m°_Êags
;

168 
__uöt32_t
 
	m°_gí
;

169 
time•ec
 
	m°_búthtim
;

173 :(8 / 2Ë* (16 - ()(
time•ec
));

174 :(8 / 2Ë* (16 - ()(
time•ec
));

178 #i‚de‡
_KERNEL


179 
	#°_©ime
 
°_©im
.
tv_£c


	)

180 
	#°_mtime
 
°_mtim
.
tv_£c


	)

181 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

182 #i‡
__BSD_VISIBLE


183 
	#°_búthtime
 
°_búthtim
.
tv_£c


	)

187 #i‡
__BSD_VISIBLE


188 
	#°_©ime•ec
 
°_©im


	)

189 
	#°_mtime•ec
 
°_mtim


	)

190 
	#°_˘ime•ec
 
°_˘im


	)

191 
	#°_búthtime•ec
 
°_búthtim


	)

195 
	#S_ISUID
 0004000

	)

196 
	#S_ISGID
 0002000

	)

197 #i‡
__BSD_VISIBLE


198 
	#S_ISTXT
 0001000

	)

201 
	#S_IRWXU
 0000700

	)

202 
	#S_IRUSR
 0000400

	)

203 
	#S_IWUSR
 0000200

	)

204 
	#S_IXUSR
 0000100

	)

206 #i‡
__BSD_VISIBLE


207 
	#S_IREAD
 
S_IRUSR


	)

208 
	#S_IWRITE
 
S_IWUSR


	)

209 
	#S_IEXEC
 
S_IXUSR


	)

212 
	#S_IRWXG
 0000070

	)

213 
	#S_IRGRP
 0000040

	)

214 
	#S_IWGRP
 0000020

	)

215 
	#S_IXGRP
 0000010

	)

217 
	#S_IRWXO
 0000007

	)

218 
	#S_IROTH
 0000004

	)

219 
	#S_IWOTH
 0000002

	)

220 
	#S_IXOTH
 0000001

	)

222 #i‡
__XSI_VISIBLE


223 
	#S_IFMT
 0170000

	)

224 
	#S_IFIFO
 0010000

	)

225 
	#S_IFCHR
 0020000

	)

226 
	#S_IFDIR
 0040000

	)

227 
	#S_IFBLK
 0060000

	)

228 
	#S_IFREG
 0100000

	)

229 
	#S_IFLNK
 0120000

	)

230 
	#S_IFSOCK
 0140000

	)

231 
	#S_ISVTX
 0001000

	)

233 #i‡
__BSD_VISIBLE


234 
	#S_IFWHT
 0160000

	)

237 
	#S_ISDIR
(
m
Ë(((mË& 0170000Ë=0040000Ë

	)

238 
	#S_ISCHR
(
m
Ë(((mË& 0170000Ë=0020000Ë

	)

239 
	#S_ISBLK
(
m
Ë(((mË& 0170000Ë=0060000Ë

	)

240 
	#S_ISREG
(
m
Ë(((mË& 0170000Ë=0100000Ë

	)

241 
	#S_ISFIFO
(
m
Ë(((mË& 0170000Ë=0010000Ë

	)

242 #i‡
__POSIX_VISIBLE
 >= 200112

243 
	#S_ISLNK
(
m
Ë(((mË& 0170000Ë=0120000Ë

	)

244 
	#S_ISSOCK
(
m
Ë(((mË& 0170000Ë=0140000Ë

	)

246 #i‡
__BSD_VISIBLE


247 
	#S_ISWHT
(
m
Ë(((mË& 0170000Ë=0160000Ë

	)

250 #i‡
__BSD_VISIBLE


251 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

253 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

255 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

257 
	#S_BLKSIZE
 512

	)

264 
	#UF_SETTABLE
 0x0000fff‡

	)

265 
	#UF_NODUMP
 0x00000001

	)

266 
	#UF_IMMUTABLE
 0x00000002

	)

267 
	#UF_APPEND
 0x00000004

	)

268 
	#UF_OPAQUE
 0x00000008

	)

269 
	#UF_NOUNLINK
 0x00000010

	)

273 
	#SF_SETTABLE
 0xffff0000

	)

274 
	#SF_ARCHIVED
 0x00010000

	)

275 
	#SF_IMMUTABLE
 0x00020000

	)

276 
	#SF_APPEND
 0x00040000

	)

277 
	#SF_NOUNLINK
 0x00100000

	)

278 
	#SF_SNAPSHOT
 0x00200000

	)

280 #ifde‡
_KERNEL


284 
	#OPAQUE
 (
UF_OPAQUE
)

	)

285 
	#APPEND
 (
UF_APPEND
 | 
SF_APPEND
)

	)

286 
	#IMMUTABLE
 (
UF_IMMUTABLE
 | 
SF_IMMUTABLE
)

	)

287 
	#NOUNLINK
 (
UF_NOUNLINK
 | 
SF_NOUNLINK
)

	)

292 #i‚de‡
_KERNEL


293 
	g__BEGIN_DECLS


294 #i‡
__BSD_VISIBLE


295 
chÊags
(const *, );

297 
chmod
(c⁄° *, 
mode_t
);

298 #i‡
__BSD_VISIBLE


299 
fchÊags
(, );

301 #i‡
__POSIX_VISIBLE
 >= 200112

302 
fchmod
(, 
mode_t
);

304 #i‡
__POSIX_VISIBLE
 >= 200809

305 
fchmod©
(, c⁄° *, 
mode_t
, );

307 
f°©
(, 
°©
 *);

308 #i‡
__BSD_VISIBLE


309 
lchÊags
(const *, );

310 
lchmod
(c⁄° *, 
mode_t
);

312 #i‡
__POSIX_VISIBLE
 >= 200112

313 
l°©
(c⁄° * 
__ª°ri˘
, 
°©
 * __restrict);

315 
mkdú
(c⁄° *, 
mode_t
);

316 
mkfifo
(c⁄° *, 
mode_t
);

317 #i‡!
deföed
(
_MKNOD_DECLARED
Ë&& 
__XSI_VISIBLE


318 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

319 
	#_MKNOD_DECLARED


	)

321 
°©
(c⁄° * 
__ª°ri˘
, stat * __restrict);

322 
mode_t
 
umask
(mode_t);

323 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

324 
f°©©
(, c⁄° *, 
°©
 *, );

325 
mkdú©
(, c⁄° *, 
mode_t
);

326 
mkfifﬂt
(, c⁄° *, 
mode_t
);

328 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 >= 700

329 
mknod©
(, c⁄° *, 
mode_t
, 
dev_t
);

331 
	g__END_DECLS


	@/usr/include/sys/syscall.h

9 
	#SYS_sysˇŒ
 0

	)

10 
	#SYS_exô
 1

	)

11 
	#SYS_f‹k
 2

	)

12 
	#SYS_ªad
 3

	)

13 
	#SYS_wrôe
 4

	)

14 
	#SYS_›í
 5

	)

15 
	#SYS_˛o£
 6

	)

16 
	#SYS_waô4
 7

	)

18 
	#SYS_lök
 9

	)

19 
	#SYS_u∆ök
 10

	)

21 
	#SYS_chdú
 12

	)

22 
	#SYS_fchdú
 13

	)

23 
	#SYS_mknod
 14

	)

24 
	#SYS_chmod
 15

	)

25 
	#SYS_chown
 16

	)

26 
	#SYS_bªak
 17

	)

27 
	#SYS_‰ìbsd4_gëfs°©
 18

	)

29 
	#SYS_gëpid
 20

	)

30 
	#SYS_mou¡
 21

	)

31 
	#SYS_unmou¡
 22

	)

32 
	#SYS_£tuid
 23

	)

33 
	#SYS_gëuid
 24

	)

34 
	#SYS_gëeuid
 25

	)

35 
	#SYS_±ø˚
 26

	)

36 
	#SYS_ªcvmsg
 27

	)

37 
	#SYS_£ndmsg
 28

	)

38 
	#SYS_ªcv‰om
 29

	)

39 
	#SYS_ac˚±
 30

	)

40 
	#SYS_gë≥î«me
 31

	)

41 
	#SYS_gësock«me
 32

	)

42 
	#SYS_ac˚ss
 33

	)

43 
	#SYS_chÊags
 34

	)

44 
	#SYS_fchÊags
 35

	)

45 
	#SYS_sync
 36

	)

46 
	#SYS_kûl
 37

	)

48 
	#SYS_gëµid
 39

	)

50 
	#SYS_dup
 41

	)

51 
	#SYS_pùe
 42

	)

52 
	#SYS_gëegid
 43

	)

53 
	#SYS_¥ofû
 44

	)

54 
	#SYS_kåa˚
 45

	)

56 
	#SYS_gëgid
 47

	)

58 
	#SYS_gëlogö
 49

	)

59 
	#SYS_£éogö
 50

	)

60 
	#SYS_ac˘
 51

	)

62 
	#SYS_sigÆt°ack
 53

	)

63 
	#SYS_io˘l
 54

	)

64 
	#SYS_ªboŸ
 55

	)

65 
	#SYS_ªvoke
 56

	)

66 
	#SYS_symlök
 57

	)

67 
	#SYS_ªadlök
 58

	)

68 
	#SYS_execve
 59

	)

69 
	#SYS_umask
 60

	)

70 
	#SYS_chroŸ
 61

	)

74 
	#SYS_msync
 65

	)

75 
	#SYS_vf‹k
 66

	)

78 
	#SYS_sbrk
 69

	)

79 
	#SYS_s°k
 70

	)

81 
	#SYS_vadvi£
 72

	)

82 
	#SYS_munm≠
 73

	)

83 
	#SYS_m¥Ÿe˘
 74

	)

84 
	#SYS_madvi£
 75

	)

87 
	#SYS_möc‹e
 78

	)

88 
	#SYS_gëgroups
 79

	)

89 
	#SYS_£tgroups
 80

	)

90 
	#SYS_gëpgΩ
 81

	)

91 
	#SYS_£çgid
 82

	)

92 
	#SYS_£tôimî
 83

	)

94 
	#SYS_sw≠⁄
 85

	)

95 
	#SYS_gëôimî
 86

	)

98 
	#SYS_gëdèbÀsize
 89

	)

99 
	#SYS_dup2
 90

	)

100 
	#SYS_f˙é
 92

	)

101 
	#SYS_£À˘
 93

	)

102 
	#SYS_fsync
 95

	)

103 
	#SYS_£çri‹ôy
 96

	)

104 
	#SYS_sockë
 97

	)

105 
	#SYS_c⁄√˘
 98

	)

107 
	#SYS_gë¥i‹ôy
 100

	)

111 
	#SYS_böd
 104

	)

112 
	#SYS_£tsock›t
 105

	)

113 
	#SYS_li°í
 106

	)

123 
	#SYS_gëtimeofday
 116

	)

124 
	#SYS_gërußge
 117

	)

125 
	#SYS_gësock›t
 118

	)

126 
	#SYS_ªadv
 120

	)

127 
	#SYS_wrôev
 121

	)

128 
	#SYS_£âimeofday
 122

	)

129 
	#SYS_fchown
 123

	)

130 
	#SYS_fchmod
 124

	)

132 
	#SYS_£åeuid
 126

	)

133 
	#SYS_£åegid
 127

	)

134 
	#SYS_ª«me
 128

	)

137 
	#SYS_Êock
 131

	)

138 
	#SYS_mkfifo
 132

	)

139 
	#SYS_£ndto
 133

	)

140 
	#SYS_shutdown
 134

	)

141 
	#SYS_sockë∑ú
 135

	)

142 
	#SYS_mkdú
 136

	)

143 
	#SYS_rmdú
 137

	)

144 
	#SYS_utimes
 138

	)

146 
	#SYS_adjtime
 140

	)

153 
	#SYS_£tsid
 147

	)

154 
	#SYS_quŸa˘l
 148

	)

157 
	#SYS_∆m_sysˇŒ
 154

	)

158 
	#SYS_nfssvc
 155

	)

160 
	#SYS_‰ìbsd4_°©fs
 157

	)

161 
	#SYS_‰ìbsd4_f°©fs
 158

	)

162 
	#SYS_lgëfh
 160

	)

163 
	#SYS_gëfh
 161

	)

164 
	#SYS_‰ìbsd4_gëdomaö«me
 162

	)

165 
	#SYS_‰ìbsd4_£tdomaö«me
 163

	)

166 
	#SYS_‰ìbsd4_u«me
 164

	)

167 
	#SYS_syßrch
 165

	)

168 
	#SYS_π¥io
 166

	)

169 
	#SYS_£msys
 169

	)

170 
	#SYS_msgsys
 170

	)

171 
	#SYS_shmsys
 171

	)

172 
	#SYS_‰ìbsd6_¥ód
 173

	)

173 
	#SYS_‰ìbsd6_pwrôe
 174

	)

174 
	#SYS_£tfib
 175

	)

175 
	#SYS_¡p_adjtime
 176

	)

176 
	#SYS_£tgid
 181

	)

177 
	#SYS_£ãgid
 182

	)

178 
	#SYS_£ãuid
 183

	)

179 
	#SYS_°©
 188

	)

180 
	#SYS_f°©
 189

	)

181 
	#SYS_l°©
 190

	)

182 
	#SYS_∑thc⁄f
 191

	)

183 
	#SYS_Â©hc⁄f
 192

	)

184 
	#SYS_gëæimô
 194

	)

185 
	#SYS_£ålimô
 195

	)

186 
	#SYS_gëdúíåõs
 196

	)

187 
	#SYS_‰ìbsd6_mm≠
 197

	)

188 
	#SYS___sysˇŒ
 198

	)

189 
	#SYS_‰ìbsd6_l£ek
 199

	)

190 
	#SYS_‰ìbsd6_åunˇã
 200

	)

191 
	#SYS_‰ìbsd6_·runˇã
 201

	)

192 
	#SYS___sys˘l
 202

	)

193 
	#SYS_mlock
 203

	)

194 
	#SYS_mu∆ock
 204

	)

195 
	#SYS_undñëe
 205

	)

196 
	#SYS_futimes
 206

	)

197 
	#SYS_gëpgid
 207

	)

198 
	#SYS_pﬁl
 209

	)

199 
	#SYS_‰ìbsd7___£m˘l
 220

	)

200 
	#SYS_£mgë
 221

	)

201 
	#SYS_£m›
 222

	)

202 
	#SYS_‰ìbsd7_msg˘l
 224

	)

203 
	#SYS_msggë
 225

	)

204 
	#SYS_msg¢d
 226

	)

205 
	#SYS_msgrcv
 227

	)

206 
	#SYS_shm©
 228

	)

207 
	#SYS_‰ìbsd7_shm˘l
 229

	)

208 
	#SYS_shmdt
 230

	)

209 
	#SYS_shmgë
 231

	)

210 
	#SYS_˛ock_gëtime
 232

	)

211 
	#SYS_˛ock_£âime
 233

	)

212 
	#SYS_˛ock_gëªs
 234

	)

213 
	#SYS_ktimî_¸óã
 235

	)

214 
	#SYS_ktimî_dñëe
 236

	)

215 
	#SYS_ktimî_£âime
 237

	)

216 
	#SYS_ktimî_gëtime
 238

	)

217 
	#SYS_ktimî_gëovîrun
 239

	)

218 
	#SYS_«no¶ìp
 240

	)

219 
	#SYS_¡p_gëtime
 248

	)

220 
	#SYS_möhîô
 250

	)

221 
	#SYS_rf‹k
 251

	)

222 
	#SYS_›íbsd_pﬁl
 252

	)

223 
	#SYS_is£tugid
 253

	)

224 
	#SYS_lchown
 254

	)

225 
	#SYS_aio_ªad
 255

	)

226 
	#SYS_aio_wrôe
 256

	)

227 
	#SYS_lio_li°io
 257

	)

228 
	#SYS_gëdíts
 272

	)

229 
	#SYS_lchmod
 274

	)

230 
	#SYS_√tbsd_lchown
 275

	)

231 
	#SYS_lutimes
 276

	)

232 
	#SYS_√tbsd_msync
 277

	)

233 
	#SYS_n°©
 278

	)

234 
	#SYS_nf°©
 279

	)

235 
	#SYS_∆°©
 280

	)

236 
	#SYS_¥ódv
 289

	)

237 
	#SYS_pwrôev
 290

	)

238 
	#SYS_‰ìbsd4_fh°©fs
 297

	)

239 
	#SYS_fh›í
 298

	)

240 
	#SYS_fh°©
 299

	)

241 
	#SYS_mod√xt
 300

	)

242 
	#SYS_mod°©
 301

	)

243 
	#SYS_mod‚ext
 302

	)

244 
	#SYS_modföd
 303

	)

245 
	#SYS_kldlﬂd
 304

	)

246 
	#SYS_kldu∆ﬂd
 305

	)

247 
	#SYS_kldföd
 306

	)

248 
	#SYS_kld√xt
 307

	)

249 
	#SYS_kld°©
 308

	)

250 
	#SYS_kldfú°mod
 309

	)

251 
	#SYS_gësid
 310

	)

252 
	#SYS_£åesuid
 311

	)

253 
	#SYS_£åesgid
 312

	)

255 
	#SYS_aio_ªtu∫
 314

	)

256 
	#SYS_aio_su•íd
 315

	)

257 
	#SYS_aio_ˇn˚l
 316

	)

258 
	#SYS_aio_îr‹
 317

	)

259 
	#SYS_ﬂio_ªad
 318

	)

260 
	#SYS_ﬂio_wrôe
 319

	)

261 
	#SYS_ﬁio_li°io
 320

	)

262 
	#SYS_yõld
 321

	)

265 
	#SYS_mlockÆl
 324

	)

266 
	#SYS_mu∆ockÆl
 325

	)

267 
	#SYS___gëcwd
 326

	)

268 
	#SYS_sched_£ç¨am
 327

	)

269 
	#SYS_sched_gë∑øm
 328

	)

270 
	#SYS_sched_£tscheduÀr
 329

	)

271 
	#SYS_sched_gëscheduÀr
 330

	)

272 
	#SYS_sched_yõld
 331

	)

273 
	#SYS_sched_gë_¥i‹ôy_max
 332

	)

274 
	#SYS_sched_gë_¥i‹ôy_mö
 333

	)

275 
	#SYS_sched_º_gë_öãrvÆ
 334

	)

276 
	#SYS_uåa˚
 335

	)

277 
	#SYS_‰ìbsd4_£ndfûe
 336

	)

278 
	#SYS_kldsym
 337

	)

279 
	#SYS_jaû
 338

	)

280 
	#SYS_¬pfs_sysˇŒ
 339

	)

281 
	#SYS_sig¥ocmask
 340

	)

282 
	#SYS_sigsu•íd
 341

	)

283 
	#SYS_‰ìbsd4_siga˘i⁄
 342

	)

284 
	#SYS_sig≥ndög
 343

	)

285 
	#SYS_‰ìbsd4_sigªtu∫
 344

	)

286 
	#SYS_sigtimedwaô
 345

	)

287 
	#SYS_sigwaôöfo
 346

	)

288 
	#SYS___a˛_gë_fûe
 347

	)

289 
	#SYS___a˛_£t_fûe
 348

	)

290 
	#SYS___a˛_gë_fd
 349

	)

291 
	#SYS___a˛_£t_fd
 350

	)

292 
	#SYS___a˛_dñëe_fûe
 351

	)

293 
	#SYS___a˛_dñëe_fd
 352

	)

294 
	#SYS___a˛_a˛check_fûe
 353

	)

295 
	#SYS___a˛_a˛check_fd
 354

	)

296 
	#SYS_exèâr˘l
 355

	)

297 
	#SYS_exèâr_£t_fûe
 356

	)

298 
	#SYS_exèâr_gë_fûe
 357

	)

299 
	#SYS_exèâr_dñëe_fûe
 358

	)

300 
	#SYS_aio_waôcom∂ëe
 359

	)

301 
	#SYS_gëªsuid
 360

	)

302 
	#SYS_gëªsgid
 361

	)

303 
	#SYS_kqueue
 362

	)

304 
	#SYS_kevít
 363

	)

305 
	#SYS_exèâr_£t_fd
 371

	)

306 
	#SYS_exèâr_gë_fd
 372

	)

307 
	#SYS_exèâr_dñëe_fd
 373

	)

308 
	#SYS___£tugid
 374

	)

309 
	#SYS_óc˚ss
 376

	)

310 
	#SYS_afs3_sysˇŒ
 377

	)

311 
	#SYS_nmou¡
 378

	)

312 
	#SYS___mac_gë_¥oc
 384

	)

313 
	#SYS___mac_£t_¥oc
 385

	)

314 
	#SYS___mac_gë_fd
 386

	)

315 
	#SYS___mac_gë_fûe
 387

	)

316 
	#SYS___mac_£t_fd
 388

	)

317 
	#SYS___mac_£t_fûe
 389

	)

318 
	#SYS_kív
 390

	)

319 
	#SYS_lchÊags
 391

	)

320 
	#SYS_uuidgí
 392

	)

321 
	#SYS_£ndfûe
 393

	)

322 
	#SYS_mac_sysˇŒ
 394

	)

323 
	#SYS_gëfs°©
 395

	)

324 
	#SYS_°©fs
 396

	)

325 
	#SYS_f°©fs
 397

	)

326 
	#SYS_fh°©fs
 398

	)

327 
	#SYS_k£m_˛o£
 400

	)

328 
	#SYS_k£m_po°
 401

	)

329 
	#SYS_k£m_waô
 402

	)

330 
	#SYS_k£m_åywaô
 403

	)

331 
	#SYS_k£m_öô
 404

	)

332 
	#SYS_k£m_›í
 405

	)

333 
	#SYS_k£m_u∆ök
 406

	)

334 
	#SYS_k£m_gëvÆue
 407

	)

335 
	#SYS_k£m_de°roy
 408

	)

336 
	#SYS___mac_gë_pid
 409

	)

337 
	#SYS___mac_gë_lök
 410

	)

338 
	#SYS___mac_£t_lök
 411

	)

339 
	#SYS_exèâr_£t_lök
 412

	)

340 
	#SYS_exèâr_gë_lök
 413

	)

341 
	#SYS_exèâr_dñëe_lök
 414

	)

342 
	#SYS___mac_execve
 415

	)

343 
	#SYS_siga˘i⁄
 416

	)

344 
	#SYS_sigªtu∫
 417

	)

345 
	#SYS_gëc⁄ãxt
 421

	)

346 
	#SYS_£tc⁄ãxt
 422

	)

347 
	#SYS_sw≠c⁄ãxt
 423

	)

348 
	#SYS_sw≠off
 424

	)

349 
	#SYS___a˛_gë_lök
 425

	)

350 
	#SYS___a˛_£t_lök
 426

	)

351 
	#SYS___a˛_dñëe_lök
 427

	)

352 
	#SYS___a˛_a˛check_lök
 428

	)

353 
	#SYS_sigwaô
 429

	)

354 
	#SYS_thr_¸óã
 430

	)

355 
	#SYS_thr_exô
 431

	)

356 
	#SYS_thr_£lf
 432

	)

357 
	#SYS_thr_kûl
 433

	)

358 
	#SYS__umtx_lock
 434

	)

359 
	#SYS__umtx_u∆ock
 435

	)

360 
	#SYS_jaû_©èch
 436

	)

361 
	#SYS_exèâr_li°_fd
 437

	)

362 
	#SYS_exèâr_li°_fûe
 438

	)

363 
	#SYS_exèâr_li°_lök
 439

	)

364 
	#SYS_k£m_timedwaô
 441

	)

365 
	#SYS_thr_su•íd
 442

	)

366 
	#SYS_thr_wake
 443

	)

367 
	#SYS_kldu∆ﬂdf
 444

	)

368 
	#SYS_audô
 445

	)

369 
	#SYS_audô⁄
 446

	)

370 
	#SYS_gëauid
 447

	)

371 
	#SYS_£èuid
 448

	)

372 
	#SYS_gëaudô
 449

	)

373 
	#SYS_£èudô
 450

	)

374 
	#SYS_gëaudô_addr
 451

	)

375 
	#SYS_£èudô_addr
 452

	)

376 
	#SYS_audô˘l
 453

	)

377 
	#SYS__umtx_›
 454

	)

378 
	#SYS_thr_√w
 455

	)

379 
	#SYS_sigqueue
 456

	)

380 
	#SYS_kmq_›í
 457

	)

381 
	#SYS_kmq_£èâr
 458

	)

382 
	#SYS_kmq_timedª˚ive
 459

	)

383 
	#SYS_kmq_timed£nd
 460

	)

384 
	#SYS_kmq_nŸify
 461

	)

385 
	#SYS_kmq_u∆ök
 462

	)

386 
	#SYS_ab‹t2
 463

	)

387 
	#SYS_thr_£t_«me
 464

	)

388 
	#SYS_aio_fsync
 465

	)

389 
	#SYS_π¥io_thªad
 466

	)

390 
	#SYS_s˘p_≥ñoff
 471

	)

391 
	#SYS_s˘p_gíîic_£ndmsg
 472

	)

392 
	#SYS_s˘p_gíîic_£ndmsg_iov
 473

	)

393 
	#SYS_s˘p_gíîic_ªcvmsg
 474

	)

394 
	#SYS_¥ód
 475

	)

395 
	#SYS_pwrôe
 476

	)

396 
	#SYS_mm≠
 477

	)

397 
	#SYS_l£ek
 478

	)

398 
	#SYS_åunˇã
 479

	)

399 
	#SYS_·runˇã
 480

	)

400 
	#SYS_thr_kûl2
 481

	)

401 
	#SYS_shm_›í
 482

	)

402 
	#SYS_shm_u∆ök
 483

	)

403 
	#SYS_˝u£t
 484

	)

404 
	#SYS_˝u£t_£tid
 485

	)

405 
	#SYS_˝u£t_gëid
 486

	)

406 
	#SYS_˝u£t_gëafföôy
 487

	)

407 
	#SYS_˝u£t_£èfföôy
 488

	)

408 
	#SYS_Ác˚sßt
 489

	)

409 
	#SYS_fchmod©
 490

	)

410 
	#SYS_fchow«t
 491

	)

411 
	#SYS_„xecve
 492

	)

412 
	#SYS_f°©©
 493

	)

413 
	#SYS_futimeßt
 494

	)

414 
	#SYS_lök©
 495

	)

415 
	#SYS_mkdú©
 496

	)

416 
	#SYS_mkfifﬂt
 497

	)

417 
	#SYS_mknod©
 498

	)

418 
	#SYS_›í©
 499

	)

419 
	#SYS_ªadlök©
 500

	)

420 
	#SYS_ª«mót
 501

	)

421 
	#SYS_symlök©
 502

	)

422 
	#SYS_u∆ök©
 503

	)

423 
	#SYS_posix_›í±
 504

	)

424 
	#SYS_gssd_sysˇŒ
 505

	)

425 
	#SYS_jaû_gë
 506

	)

426 
	#SYS_jaû_£t
 507

	)

427 
	#SYS_jaû_ªmove
 508

	)

428 
	#SYS_˛o£‰om
 509

	)

429 
	#SYS___£m˘l
 510

	)

430 
	#SYS_msg˘l
 511

	)

431 
	#SYS_shm˘l
 512

	)

432 
	#SYS_Õ©hc⁄f
 513

	)

433 
	#SYS_ˇp_√w
 514

	)

434 
	#SYS_ˇp_gërights
 515

	)

435 
	#SYS_ˇp_íãr
 516

	)

436 
	#SYS_ˇp_gëmode
 517

	)

437 
	#SYS_pdf‹k
 518

	)

438 
	#SYS_pdkûl
 519

	)

439 
	#SYS_pdgëpid
 520

	)

440 
	#SYS_p£À˘
 522

	)

441 
	#SYS_gëlogö˛ass
 523

	)

442 
	#SYS_£éogö˛ass
 524

	)

443 
	#SYS_r˘l_gë_øc˘
 525

	)

444 
	#SYS_r˘l_gë_ruÀs
 526

	)

445 
	#SYS_r˘l_gë_limôs
 527

	)

446 
	#SYS_r˘l_add_ruÀ
 528

	)

447 
	#SYS_r˘l_ªmove_ruÀ
 529

	)

448 
	#SYS_posix_ÁŒoˇã
 530

	)

449 
	#SYS_posix_Ádvi£
 531

	)

450 
	#SYS_waô6
 532

	)

451 
	#SYS_MAXSYSCALL
 533

	)

	@/usr/include/sys/time.h

33 #i‚de‡
_SYS_TIME_H_


34 
	#_SYS_TIME_H_


	)

36 
	~<sys/_timevÆ.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/time•ec.h
>

40 
	stimez⁄e
 {

41 
	mtz_möuãswe°
;

42 
	mtz_d°time
;

44 
	#DST_NONE
 0

	)

45 
	#DST_USA
 1

	)

46 
	#DST_AUST
 2

	)

47 
	#DST_WET
 3

	)

48 
	#DST_MET
 4

	)

49 
	#DST_EET
 5

	)

50 
	#DST_CAN
 6

	)

52 #i‡
__BSD_VISIBLE


53 
	sbötime
 {

54 
time_t
 
	m£c
;

55 
uöt64_t
 
	m‰ac
;

58 
__ölöe
 

59 
	$bötime_addx
(
bötime
 *
bt
, 
uöt64_t
 
x
)

61 
uöt64_t
 
u
;

63 
u
 = 
bt
->
‰ac
;

64 
bt
->
‰ac
 +
x
;

65 i‡(
u
 > 
bt
->
‰ac
)

66 
bt
->
£c
++;

67 
	}
}

69 
__ölöe
 

70 
	$bötime_add
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

72 
uöt64_t
 
u
;

74 
u
 = 
bt
->
‰ac
;

75 
bt
->
‰ac
 +
bt2
->frac;

76 i‡(
u
 > 
bt
->
‰ac
)

77 
bt
->
£c
++;

78 
bt
->
£c
 +
bt2
->sec;

79 
	}
}

81 
__ölöe
 

82 
	$bötime_sub
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

84 
uöt64_t
 
u
;

86 
u
 = 
bt
->
‰ac
;

87 
bt
->
‰ac
 -
bt2
->frac;

88 i‡(
u
 < 
bt
->
‰ac
)

89 
bt
->
£c
--;

90 
bt
->
£c
 -
bt2
->sec;

91 
	}
}

93 
__ölöe
 

94 
	$bötime_mul
(
bötime
 *
bt
, 
u_öt
 
x
)

96 
uöt64_t
 
p1
, 
p2
;

98 
p1
 = (
bt
->
‰ac
 & 0xffffffffuŒË* 
x
;

99 
p2
 = (
bt
->
‰ac
 >> 32Ë* 
x
 + (
p1
 >> 32);

100 
bt
->
£c
 *
x
;

101 
bt
->
£c
 +(
p2
 >> 32);

102 
bt
->
‰ac
 = (
p2
 << 32Ë| (
p1
 & 0xffffffffull);

103 
	}
}

105 
	#bötime_˛ór
(
a
Ë(◊)->
£c
 = (a)->
‰ac
 = 0)

	)

106 
	#bötime_is£t
(
a
Ë(◊)->
£c
 || (a)->
‰ac
)

	)

107 
	#bötime_cmp
(
a
, 
b
, 
cmp
) \

108 (((
a
)->
£c
 =(
b
)->sec) ? \

109 ((
a
)->
‰ac
 
	`cmp
 (
b
)->frac) : \

110 ((
a
)->
£c
 
	`cmp
 (
b
)->£c))

	)

126 
__ölöe
 

127 
	$bötime2time•ec
(c⁄° 
bötime
 *
bt
, 
time•ec
 *
ts
)

130 
ts
->
tv_£c
 = 
bt
->
£c
;

131 
ts
->
tv_n£c
 = ((
uöt64_t
)1000000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

132 
	}
}

134 
__ölöe
 

135 
	$time•ec2bötime
(c⁄° 
time•ec
 *
ts
, 
bötime
 *
bt
)

138 
bt
->
£c
 = 
ts
->
tv_£c
;

140 
bt
->
‰ac
 = 
ts
->
tv_n£c
 * (
uöt64_t
)18446744073LL;

141 
	}
}

143 
__ölöe
 

144 
	$bötime2timevÆ
(c⁄° 
bötime
 *
bt
, 
timevÆ
 *
tv
)

147 
tv
->
tv_£c
 = 
bt
->
£c
;

148 
tv
->
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

149 
	}
}

151 
__ölöe
 

152 
	$timevÆ2bötime
(c⁄° 
timevÆ
 *
tv
, 
bötime
 *
bt
)

155 
bt
->
£c
 = 
tv
->
tv_£c
;

157 
bt
->
‰ac
 = 
tv
->
tv_u£c
 * (
uöt64_t
)18446744073709LL;

158 
	}
}

161 #ifde‡
_KERNEL


164 
	#time•ec˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

165 
	#time•ecis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

166 
	#time•eccmp
(
tvp
, 
uvp
, 
cmp
) \

167 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

168 ((
tvp
)->
tv_n£c
 
	`cmp
 (
uvp
)->tv_nsec) : \

169 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

170 
	#time•eˇdd
(
vvp
, 
uvp
) \

172 (
vvp
)->
tv_£c
 +(
uvp
)->tv_sec; \

173 (
vvp
)->
tv_n£c
 +(
uvp
)->tv_nsec; \

174 i‡((
vvp
)->
tv_n£c
 >= 1000000000) { \

175 (
vvp
)->
tv_£c
++; \

176 (
vvp
)->
tv_n£c
 -= 1000000000; \

178 } 0)

	)

179 
	#time•ecsub
(
vvp
, 
uvp
) \

181 (
vvp
)->
tv_£c
 -(
uvp
)->tv_sec; \

182 (
vvp
)->
tv_n£c
 -(
uvp
)->tv_nsec; \

183 i‡((
vvp
)->
tv_n£c
 < 0) { \

184 (
vvp
)->
tv_£c
--; \

185 (
vvp
)->
tv_n£c
 += 1000000000; \

187 } 0)

	)

191 
	#timevÆ˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

192 
	#timevÆis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

193 
	#timevÆcmp
(
tvp
, 
uvp
, 
cmp
) \

194 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

195 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

196 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

202 #i‚de‡
_KERNEL


204 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

205 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

206 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

207 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

208 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

209 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

210 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

212 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

213 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

214 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

215 (
vvp
)->
tv_£c
++; \

216 (
vvp
)->
tv_u£c
 -= 1000000; \

218 } 0)

	)

219 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

221 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

222 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

223 i‡((
vvp
)->
tv_u£c
 < 0) { \

224 (
vvp
)->
tv_£c
--; \

225 (
vvp
)->
tv_u£c
 += 1000000; \

227 } 0)

	)

234 
	#ITIMER_REAL
 0

	)

235 
	#ITIMER_VIRTUAL
 1

	)

236 
	#ITIMER_PROF
 2

	)

238 
	sôimîvÆ
 {

239 
timevÆ
 
	mô_öãrvÆ
;

240 
timevÆ
 
	mô_vÆue
;

246 
	s˛ocköfo
 {

247 
	mhz
;

248 
	mtick
;

249 
	m•¨e
;

250 
	m°©hz
;

251 
	m¥ofhz
;

255 #i‚de‡
CLOCK_REALTIME


256 
	#CLOCK_REALTIME
 0

	)

257 
	#CLOCK_VIRTUAL
 1

	)

258 
	#CLOCK_PROF
 2

	)

259 
	#CLOCK_MONOTONIC
 4

	)

260 
	#CLOCK_UPTIME
 5

	)

261 
	#CLOCK_UPTIME_PRECISE
 7

	)

262 
	#CLOCK_UPTIME_FAST
 8

	)

263 
	#CLOCK_REALTIME_PRECISE
 9

	)

264 
	#CLOCK_REALTIME_FAST
 10

	)

265 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

266 
	#CLOCK_MONOTONIC_FAST
 12

	)

267 
	#CLOCK_SECOND
 13

	)

268 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

271 #i‚de‡
TIMER_ABSTIME


272 
	#TIMER_RELTIME
 0x0

	)

273 
	#TIMER_ABSTIME
 0x1

	)

276 #ifde‡
_KERNEL


281 
öôtodr
(
time_t
 
ba£
);

282 
ª£âodr
();

284 vﬁ©ûê
time_t
 
time_£c⁄d
;

285 vﬁ©ûê
time_t
 
time_u±ime
;

286 
bötime
 
boŸtimebö
;

287 
timevÆ
 
boŸtime
;

311 
böu±ime
(
bötime
 *
bt
);

312 
«nou±ime
(
time•ec
 *
t•
);

313 
mi¸ou±ime
(
timevÆ
 *
tvp
);

315 
bötime
(bötimê*
bt
);

316 
«nŸime
(
time•ec
 *
t•
);

317 
mi¸Ÿime
(
timevÆ
 *
tvp
);

319 
gëböu±ime
(
bötime
 *
bt
);

320 
gë«nou±ime
(
time•ec
 *
t•
);

321 
gëmi¸ou±ime
(
timevÆ
 *
tvp
);

323 
gëbötime
(
bötime
 *
bt
);

324 
gë«nŸime
(
time•ec
 *
t•
);

325 
gëmi¸Ÿime
(
timevÆ
 *
tvp
);

328 
ôimîde¸
(
ôimîvÆ
 *
ôp
, 
u£c
);

329 
ôimîfix
(
timevÆ
 *
tv
);

330 
µ§©echeck
(
timevÆ
 *, *, );

331 
øãcheck
(
timevÆ
 *, const timeval *);

332 
timevÆadd
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

333 
timevÆsub
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

334 
tvtohz
(
timevÆ
 *
tv
);

336 
	~<time.h
>

338 
	~<sys/cdefs.h
>

339 
	~<sys/£À˘.h
>

341 
__BEGIN_DECLS


342 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

343 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

345 #i‡
__BSD_VISIBLE


346 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

347 
futimes
(, c⁄° 
timevÆ
 *);

348 
futimeßt
(, c⁄° *, c⁄° 
timevÆ
 [2]);

349 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

350 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

353 #i‡
__XSI_VISIBLE


354 
gëôimî
(, 
ôimîvÆ
 *);

355 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

358 
	g__END_DECLS


	@/usr/include/sys/types.h

38 #i‚de‡
_SYS_TYPES_H_


39 
	#_SYS_TYPES_H_


	)

41 
	~<sys/cdefs.h
>

44 
	~<machöe/ídün.h
>

45 
	~<sys/_ty≥s.h
>

47 
	~<sys/_±hªadty≥s.h
>

49 #i‡
__BSD_VISIBLE


50 
	tu_ch¨
;

51 
	tu_sh‹t
;

52 
	tu_öt
;

53 
	tu_l⁄g
;

54 #i‚de‡
_KERNEL


55 
	tush‹t
;

56 
	tuöt
;

63 
	~<sys/_°döt.h
>

65 
__uöt8_t
 
	tu_öt8_t
;

66 
__uöt16_t
 
	tu_öt16_t
;

67 
__uöt32_t
 
	tu_öt32_t
;

68 
__uöt64_t
 
	tu_öt64_t
;

70 
__uöt64_t
 
	tu_quad_t
;

71 
__öt64_t
 
	tquad_t
;

72 
quad_t
 * 
	tqaddr_t
;

74 * 
	tˇddr_t
;

75 
__c⁄°
 * 
	tc_ˇddr_t
;

76 
__vﬁ©ûe
 *
	tv_ˇddr_t
;

78 #i‚de‡
_BLKSIZE_T_DECLARED


79 
__blksize_t
 
	tblksize_t
;

80 
	#_BLKSIZE_T_DECLARED


	)

83 
__˝uwhich_t
 
	t˝uwhich_t
;

84 
__˝uÀvñ_t
 
	t˝uÀvñ_t
;

85 
__˝u£tid_t
 
	t˝u£tid_t
;

87 #i‚de‡
_BLKCNT_T_DECLARED


88 
__blk˙t_t
 
	tblk˙t_t
;

89 
	#_BLKCNT_T_DECLARED


	)

92 
__ˇp_rights_t
 
	tˇp_rights_t
;

94 #i‚de‡
_CLOCK_T_DECLARED


95 
__˛ock_t
 
	t˛ock_t
;

96 
	#_CLOCK_T_DECLARED


	)

99 #i‚de‡
_CLOCKID_T_DECLARED


100 
__˛ockid_t
 
	t˛ockid_t
;

101 
	#_CLOCKID_T_DECLARED


	)

104 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

105 
__öt64_t
 
	tdaddr_t
;

107 #i‚de‡
_DEV_T_DECLARED


108 
__dev_t
 
	tdev_t
;

109 
	#_DEV_T_DECLARED


	)

112 #i‚de‡
_FFLAGS_T_DECLARED


113 
__fÊags_t
 
	tfÊags_t
;

114 
	#_FFLAGS_T_DECLARED


	)

117 
__fix±_t
 
	tfix±_t
;

119 #i‚de‡
_FSBLKCNT_T_DECLARED


120 
__fsblk˙t_t
 
	tfsblk˙t_t
;

121 
__fsfû˙t_t
 
	tfsfû˙t_t
;

122 
	#_FSBLKCNT_T_DECLARED


	)

125 #i‚de‡
_GID_T_DECLARED


126 
__gid_t
 
	tgid_t
;

127 
	#_GID_T_DECLARED


	)

130 #i‚de‡
_IN_ADDR_T_DECLARED


131 
__uöt32_t
 
	tö_addr_t
;

132 
	#_IN_ADDR_T_DECLARED


	)

135 #i‚de‡
_IN_PORT_T_DECLARED


136 
__uöt16_t
 
	tö_p‹t_t
;

137 
	#_IN_PORT_T_DECLARED


	)

140 #i‚de‡
_ID_T_DECLARED


141 
__id_t
 
	tid_t
;

142 
	#_ID_T_DECLARED


	)

145 #i‚de‡
_INO_T_DECLARED


146 
__öo_t
 
	töo_t
;

147 
	#_INO_T_DECLARED


	)

150 #i‚de‡
_KEY_T_DECLARED


151 
__key_t
 
	tkey_t
;

152 
	#_KEY_T_DECLARED


	)

155 #i‚de‡
_LWPID_T_DECLARED


156 
__lwpid_t
 
	tlwpid_t
;

157 
	#_LWPID_T_DECLARED


	)

160 #i‚de‡
_MODE_T_DECLARED


161 
__mode_t
 
	tmode_t
;

162 
	#_MODE_T_DECLARED


	)

165 #i‚de‡
_ACCMODE_T_DECLARED


166 
__accmode_t
 
	taccmode_t
;

167 
	#_ACCMODE_T_DECLARED


	)

170 #i‚de‡
_NLINK_T_DECLARED


171 
__∆ök_t
 
	t∆ök_t
;

172 
	#_NLINK_T_DECLARED


	)

175 #i‚de‡
_OFF_T_DECLARED


176 
__off_t
 
	toff_t
;

177 
	#_OFF_T_DECLARED


	)

180 #i‚de‡
_PID_T_DECLARED


181 
__pid_t
 
	tpid_t
;

182 
	#_PID_T_DECLARED


	)

185 
__ªgi°î_t
 
	tªgi°î_t
;

187 #i‚de‡
_RLIM_T_DECLARED


188 
__æim_t
 
	tæim_t
;

189 
	#_RLIM_T_DECLARED


	)

192 
__£gsz_t
 
	t£gsz_t
;

194 #i‚de‡
_SIZE_T_DECLARED


195 
__size_t
 
	tsize_t
;

196 
	#_SIZE_T_DECLARED


	)

199 #i‚de‡
_SSIZE_T_DECLARED


200 
__ssize_t
 
	tssize_t
;

201 
	#_SSIZE_T_DECLARED


	)

204 #i‚de‡
_SUSECONDS_T_DECLARED


205 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

206 
	#_SUSECONDS_T_DECLARED


	)

209 #i‚de‡
_TIME_T_DECLARED


210 
__time_t
 
	ttime_t
;

211 
	#_TIME_T_DECLARED


	)

214 #i‚de‡
_TIMER_T_DECLARED


215 
__timî_t
 
	ttimî_t
;

216 
	#_TIMER_T_DECLARED


	)

219 #i‚de‡
_MQD_T_DECLARED


220 
__mqd_t
 
	tmqd_t
;

221 
	#_MQD_T_DECLARED


	)

224 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

226 #i‚de‡
_UID_T_DECLARED


227 
__uid_t
 
	tuid_t
;

228 
	#_UID_T_DECLARED


	)

231 #i‚de‡
_USECONDS_T_DECLARED


232 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

233 
	#_USECONDS_T_DECLARED


	)

236 
__vm_off£t_t
 
	tvm_off£t_t
;

237 
__vm_ooff£t_t
 
	tvm_ooff£t_t
;

238 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

239 
__vm_pödex_t
 
	tvm_pödex_t
;

240 
__vm_size_t
 
	tvm_size_t
;

242 #ifde‡
_KERNEL


243 
	tboﬁón_t
;

244 
devi˚
 *
	tdevi˚_t
;

245 
__ötÂå_t
 
	tötÂå_t
;

257 
__uöt32_t
 
	töåmask_t
;

259 
__uötÂå_t
 
	tuötÂå_t
;

260 
__uöt64_t
 
	tuoff_t
;

261 
	tvm_mem©å_t
;

262 
vm_∑ge
 *
	tvm_∑ge_t
;

264 #i‡!
deföed
(
__boﬁ_åue_Ál£_¨e_deföed
Ë&& !deföed(
__˝lu•lus
)

265 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

266 
	#Ál£
 0

	)

267 
	#åue
 1

	)

268 #i‡
__STDC_VERSION__
 < 199901L && 
__GNUC__
 < 3 && !
deföed
(
__INTEL_COMPILER
)

269 
	t_Boﬁ
;

271 
_Boﬁ
 
	tboﬁ
;

274 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

282 #i‡
__BSD_VISIBLE


284 
	~<sys/£À˘.h
>

291 
	#maj‹
(
x
Ë(()(((
u_öt
)(xË>> 8)&0xff)Ë

	)

292 
	#mö‹
(
x
Ë(()((x)&0xffff00ff)Ë

	)

293 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 8Ë| (y))Ë

	)

300 #i‚de‡
_KERNEL


301 
	g__BEGIN_DECLS


302 #i‚de‡
_FTRUNCATE_DECLARED


303 
	#_FTRUNCATE_DECLARED


	)

304 
·runˇã
(, 
off_t
);

306 #i‚de‡
_LSEEK_DECLARED


307 
	#_LSEEK_DECLARED


	)

308 
off_t
 
l£ek
(, off_t, );

310 #i‚de‡
_MMAP_DECLARED


311 
	#_MMAP_DECLARED


	)

312 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

314 #i‚de‡
_TRUNCATE_DECLARED


315 
	#_TRUNCATE_DECLARED


	)

316 
åunˇã
(c⁄° *, 
off_t
);

318 
	g__END_DECLS


	@/usr/include/sys/uio.h

33 #i‚de‡
_SYS_UIO_H_


34 
	#_SYS_UIO_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

40 #i‚de‡
_SSIZE_T_DECLARED


41 
__ssize_t
 
	tssize_t
;

42 
	#_SSIZE_T_DECLARED


	)

45 #i‚de‡
_OFF_T_DECLARED


46 
__off_t
 
	toff_t
;

47 
	#_OFF_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE


51 
	euio_rw
 { 
	mUIO_READ
, 
	mUIO_WRITE
 };

54 
	euio_£g
 {

55 
	mUIO_USERSPACE
,

56 
	mUIO_SYSSPACE
,

57 
	mUIO_NOCOPY


61 #ifde‡
_KERNEL


63 
	suio
 {

64 
iovec
 *
	muio_iov
;

65 
	muio_iov˙t
;

66 
off_t
 
	muio_off£t
;

67 
ssize_t
 
	muio_ªsid
;

68 
uio_£g
 
	muio_£gÊg
;

69 
uio_rw
 
	muio_rw
;

70 
thªad
 *
	muio_td
;

84 
	#UIO_MAXIOV
 1024

	)

86 
	gvm_obje˘
;

87 
	gvm_∑ge
;

89 
uio
 *
˛⁄euio
(uiÿ*
ui›
);

90 
c›yö‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

91 
size_t
 
Àn
, 
£g
);

92 
c›yöiov
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, iove¯**
iov
,

93 
îr‹
);

94 
c›yö°r‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

95 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
c›õd
, 
£g
);

96 
c›yöuio
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, 
uio
 **
ui›
);

97 
c›yout_m≠
(
thªad
 *
td
, 
vm_off£t_t
 *
addr
, 
size_t
 
sz
);

98 
c›yout_unm≠
(
thªad
 *
td
, 
vm_off£t_t
 
addr
, 
size_t
 
sz
);

99 
physc›yö
(*
§c
, 
vm_∑ddr_t
 
d°
, 
size_t
 
Àn
);

100 
physc›yout
(
vm_∑ddr_t
 
§c
, *
d°
, 
size_t
 
Àn
);

101 
uiomove
(*
˝
, 
n
, 
uio
 *uio);

102 
uiomove_‰ombuf
(*
buf
, 
buÊí
, 
uio
 *uio);

103 
uiomove_‰omphys
(
vm_∑ge
 *
ma
[], 
vm_off£t_t
 
off£t
, 
n
,

104 
uio
 *uio);

105 
uiomove_noÁu…
(*
˝
, 
n
, 
uio
 *uio);

106 
uiomoveco
(*
˝
, 
n
, 
uio
 *uio, 
di•oßbÀ
);

110 
__BEGIN_DECLS


111 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

112 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

113 #i‡
__BSD_VISIBLE


114 
ssize_t
 
¥ódv
(, c⁄° 
iovec
 *, , 
off_t
);

115 
ssize_t
 
pwrôev
(, c⁄° 
iovec
 *, , 
off_t
);

117 
	g__END_DECLS


	@/usr/include/time.h

41 #i‚de‡
_TIME_H_


42 
	#_TIME_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/_nuŒ.h
>

46 
	~<sys/_ty≥s.h
>

48 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


53 
	#CLK_TCK
 128

	)

57 
	#CLOCKS_PER_SEC
 128

	)

59 #i‚de‡
_CLOCK_T_DECLARED


60 
__˛ock_t
 
	t˛ock_t
;

61 
	#_CLOCK_T_DECLARED


	)

64 #i‚de‡
_TIME_T_DECLARED


65 
__time_t
 
	ttime_t
;

66 
	#_TIME_T_DECLARED


	)

69 #i‚de‡
_SIZE_T_DECLARED


70 
__size_t
 
	tsize_t
;

71 
	#_SIZE_T_DECLARED


	)

74 #i‡
__POSIX_VISIBLE
 >= 199309

78 #i‚de‡
_CLOCKID_T_DECLARED


79 
__˛ockid_t
 
	t˛ockid_t
;

80 
	#_CLOCKID_T_DECLARED


	)

83 #i‚de‡
_TIMER_T_DECLARED


84 
__timî_t
 
	ttimî_t
;

85 
	#_TIMER_T_DECLARED


	)

88 
	~<sys/time•ec.h
>

92 #i‡!
deföed
(
CLOCK_REALTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

93 
	#CLOCK_REALTIME
 0

	)

94 #ifde‡
__BSD_VISIBLE


95 
	#CLOCK_VIRTUAL
 1

	)

96 
	#CLOCK_PROF
 2

	)

98 
	#CLOCK_MONOTONIC
 4

	)

99 
	#CLOCK_UPTIME
 5

	)

100 
	#CLOCK_UPTIME_PRECISE
 7

	)

101 
	#CLOCK_UPTIME_FAST
 8

	)

102 
	#CLOCK_REALTIME_PRECISE
 9

	)

103 
	#CLOCK_REALTIME_FAST
 10

	)

104 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

105 
	#CLOCK_MONOTONIC_FAST
 12

	)

106 
	#CLOCK_SECOND
 13

	)

107 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

108 
	#CLOCK_PROCESS_CPUTIME_ID
 15

	)

111 #i‡!
deföed
(
TIMER_ABSTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

112 #i‡
__BSD_VISIBLE


113 
	#TIMER_RELTIME
 0x0

	)

115 
	#TIMER_ABSTIME
 0x1

	)

118 
	stm
 {

119 
	mtm_£c
;

120 
	mtm_mö
;

121 
	mtm_hour
;

122 
	mtm_mday
;

123 
	mtm_m⁄
;

124 
	mtm_yór
;

125 
	mtm_wday
;

126 
	mtm_yday
;

127 
	mtm_isd°
;

128 
	mtm_gmtoff
;

129 *
	mtm_z⁄e
;

132 #i‡
__POSIX_VISIBLE


133 *
tz«me
[];

136 
__BEGIN_DECLS


137 *
as˘ime
(c⁄° 
tm
 *);

138 
˛ock_t
 
˛ock
();

139 *
˘ime
(c⁄° 
time_t
 *);

140 
dif·ime
(
time_t
,Åime_t);

142 
tm
 *
gmtime
(c⁄° 
time_t
 *);

143 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

144 
time_t
 
mktime
(
tm
 *);

145 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

146 c⁄° 
tm
 * 
__ª°ri˘
);

147 
time_t
 
time
(time_t *);

148 #i‡
__POSIX_VISIBLE
 >= 200112

149 
	gsigevít
;

150 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *
__ª°ri˘
, 
timî_t
 *__restrict);

151 
timî_dñëe
(
timî_t
);

152 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

153 
timî_gëovîrun
(
timî_t
);

154 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *
__ª°ri˘
,

155 
ôimî•ec
 *
__ª°ri˘
);

157 #i‡
__POSIX_VISIBLE


158 
tz£t
();

161 #i‡
__POSIX_VISIBLE
 >= 199309

162 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

163 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

164 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

166 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

169 #i‡
__POSIX_VISIBLE
 >= 199506

170 *
as˘ime_r
(c⁄° 
tm
 *, *);

171 *
˘ime_r
(c⁄° 
time_t
 *, *);

172 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

173 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

176 #i‡
__XSI_VISIBLE


177 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

178 
tm
 * 
__ª°ri˘
);

181 #i‡
__BSD_VISIBLE


182 *
timez⁄e
(, );

183 
tz£twÆl
();

184 
time_t
 
timñoˇl
(
tm
 * const);

185 
time_t
 
timegm
(
tm
 * const);

188 #i‡
__POSIX_VISIBLE
 >200809 || 
deföed
(
_XLOCALE_H_
)

189 
	~<xloˇÀ/_time.h
>

191 
	g__END_DECLS


	@/usr/include/unistd.h

33 #i‚de‡
_UNISTD_H_


34 
	#_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/uni°d.h
>

39 
	~<sys/_nuŒ.h
>

40 
	~<sys/_ty≥s.h
>

42 #i‚de‡
_GID_T_DECLARED


43 
__gid_t
 
	tgid_t
;

44 
	#_GID_T_DECLARED


	)

47 #i‚de‡
_OFF_T_DECLARED


48 
__off_t
 
	toff_t
;

49 
	#_OFF_T_DECLARED


	)

52 #i‚de‡
_PID_T_DECLARED


53 
__pid_t
 
	tpid_t
;

54 
	#_PID_T_DECLARED


	)

57 #i‚de‡
_SIZE_T_DECLARED


58 
__size_t
 
	tsize_t
;

59 
	#_SIZE_T_DECLARED


	)

62 #i‚de‡
_SSIZE_T_DECLARED


63 
__ssize_t
 
	tssize_t
;

64 
	#_SSIZE_T_DECLARED


	)

67 #i‚de‡
_UID_T_DECLARED


68 
__uid_t
 
	tuid_t
;

69 
	#_UID_T_DECLARED


	)

72 #i‚de‡
_USECONDS_T_DECLARED


73 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

74 
	#_USECONDS_T_DECLARED


	)

77 
	#STDIN_FILENO
 0

	)

78 
	#STDOUT_FILENO
 1

	)

79 
	#STDERR_FILENO
 2

	)

81 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

82 
	#F_ULOCK
 0

	)

83 
	#F_LOCK
 1

	)

84 
	#F_TLOCK
 2

	)

85 
	#F_TEST
 3

	)

102 
	#_POSIX_BARRIERS
 200112L

	)

103 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

104 
	#_POSIX_REGEXP
 1

	)

105 
	#_POSIX_SHELL
 1

	)

106 
	#_POSIX_SPAWN
 200112L

	)

107 
	#_POSIX_SPIN_LOCKS
 200112L

	)

108 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

109 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

110 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

111 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

112 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

113 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

114 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

115 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 -1

	)

116 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

117 
	#_POSIX_THREADS
 200112L

	)

118 
	#_POSIX_TRACE
 -1

	)

119 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

120 
	#_POSIX_TRACE_INHERIT
 -1

	)

121 
	#_POSIX_TRACE_LOG
 -1

	)

122 
	#_POSIX2_C_BIND
 200112L

	)

123 
	#_POSIX2_C_DEV
 -1

	)

124 
	#_POSIX2_CHAR_TERM
 1

	)

125 
	#_POSIX2_FORT_DEV
 -1

	)

126 
	#_POSIX2_FORT_RUN
 200112L

	)

127 
	#_POSIX2_LOCALEDEF
 -1

	)

128 
	#_POSIX2_PBS
 -1

	)

129 
	#_POSIX2_PBS_ACCOUNTING
 -1

	)

130 
	#_POSIX2_PBS_CHECKPOINT
 -1

	)

131 
	#_POSIX2_PBS_LOCATE
 -1

	)

132 
	#_POSIX2_PBS_MESSAGE
 -1

	)

133 
	#_POSIX2_PBS_TRACK
 -1

	)

134 
	#_POSIX2_SW_DEV
 -1

	)

135 
	#_POSIX2_UPE
 200112L

	)

136 
	#_V6_ILP32_OFF32
 -1

	)

137 
	#_V6_ILP32_OFFBIG
 0

	)

138 
	#_V6_LP64_OFF64
 0

	)

139 
	#_V6_LPBIG_OFFBIG
 -1

	)

141 #i‡
__XSI_VISIBLE


142 
	#_XOPEN_CRYPT
 -1

	)

143 
	#_XOPEN_ENH_I18N
 -1

	)

144 
	#_XOPEN_LEGACY
 -1

	)

145 
	#_XOPEN_REALTIME
 -1

	)

146 
	#_XOPEN_REALTIME_THREADS
 -1

	)

147 
	#_XOPEN_UNIX
 -1

	)

151 
	#_POSIX2_VERSION
 199212L

	)

162 
	#_SC_ARG_MAX
 1

	)

163 
	#_SC_CHILD_MAX
 2

	)

164 
	#_SC_CLK_TCK
 3

	)

165 
	#_SC_NGROUPS_MAX
 4

	)

166 
	#_SC_OPEN_MAX
 5

	)

167 
	#_SC_JOB_CONTROL
 6

	)

168 
	#_SC_SAVED_IDS
 7

	)

169 
	#_SC_VERSION
 8

	)

170 
	#_SC_BC_BASE_MAX
 9

	)

171 
	#_SC_BC_DIM_MAX
 10

	)

172 
	#_SC_BC_SCALE_MAX
 11

	)

173 
	#_SC_BC_STRING_MAX
 12

	)

174 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

175 
	#_SC_EXPR_NEST_MAX
 14

	)

176 
	#_SC_LINE_MAX
 15

	)

177 
	#_SC_RE_DUP_MAX
 16

	)

178 
	#_SC_2_VERSION
 17

	)

179 
	#_SC_2_C_BIND
 18

	)

180 
	#_SC_2_C_DEV
 19

	)

181 
	#_SC_2_CHAR_TERM
 20

	)

182 
	#_SC_2_FORT_DEV
 21

	)

183 
	#_SC_2_FORT_RUN
 22

	)

184 
	#_SC_2_LOCALEDEF
 23

	)

185 
	#_SC_2_SW_DEV
 24

	)

186 
	#_SC_2_UPE
 25

	)

187 
	#_SC_STREAM_MAX
 26

	)

188 
	#_SC_TZNAME_MAX
 27

	)

190 #i‡
__POSIX_VISIBLE
 >= 199309

191 
	#_SC_ASYNCHRONOUS_IO
 28

	)

192 
	#_SC_MAPPED_FILES
 29

	)

193 
	#_SC_MEMLOCK
 30

	)

194 
	#_SC_MEMLOCK_RANGE
 31

	)

195 
	#_SC_MEMORY_PROTECTION
 32

	)

196 
	#_SC_MESSAGE_PASSING
 33

	)

197 
	#_SC_PRIORITIZED_IO
 34

	)

198 
	#_SC_PRIORITY_SCHEDULING
 35

	)

199 
	#_SC_REALTIME_SIGNALS
 36

	)

200 
	#_SC_SEMAPHORES
 37

	)

201 
	#_SC_FSYNC
 38

	)

202 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

203 
	#_SC_SYNCHRONIZED_IO
 40

	)

204 
	#_SC_TIMERS
 41

	)

205 
	#_SC_AIO_LISTIO_MAX
 42

	)

206 
	#_SC_AIO_MAX
 43

	)

207 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

208 
	#_SC_DELAYTIMER_MAX
 45

	)

209 
	#_SC_MQ_OPEN_MAX
 46

	)

210 
	#_SC_PAGESIZE
 47

	)

211 
	#_SC_RTSIG_MAX
 48

	)

212 
	#_SC_SEM_NSEMS_MAX
 49

	)

213 
	#_SC_SEM_VALUE_MAX
 50

	)

214 
	#_SC_SIGQUEUE_MAX
 51

	)

215 
	#_SC_TIMER_MAX
 52

	)

218 #i‡
__POSIX_VISIBLE
 >= 200112

219 
	#_SC_2_PBS
 59

	)

220 
	#_SC_2_PBS_ACCOUNTING
 60

	)

221 
	#_SC_2_PBS_CHECKPOINT
 61

	)

222 
	#_SC_2_PBS_LOCATE
 62

	)

223 
	#_SC_2_PBS_MESSAGE
 63

	)

224 
	#_SC_2_PBS_TRACK
 64

	)

225 
	#_SC_ADVISORY_INFO
 65

	)

226 
	#_SC_BARRIERS
 66

	)

227 
	#_SC_CLOCK_SELECTION
 67

	)

228 
	#_SC_CPUTIME
 68

	)

229 
	#_SC_FILE_LOCKING
 69

	)

230 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

231 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

232 
	#_SC_HOST_NAME_MAX
 72

	)

233 
	#_SC_LOGIN_NAME_MAX
 73

	)

234 
	#_SC_MONOTONIC_CLOCK
 74

	)

235 
	#_SC_MQ_PRIO_MAX
 75

	)

236 
	#_SC_READER_WRITER_LOCKS
 76

	)

237 
	#_SC_REGEXP
 77

	)

238 
	#_SC_SHELL
 78

	)

239 
	#_SC_SPAWN
 79

	)

240 
	#_SC_SPIN_LOCKS
 80

	)

241 
	#_SC_SPORADIC_SERVER
 81

	)

242 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

243 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

244 
	#_SC_THREAD_CPUTIME
 84

	)

245 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

246 
	#_SC_THREAD_KEYS_MAX
 86

	)

247 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

248 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

249 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

250 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

251 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

252 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

253 
	#_SC_THREAD_STACK_MIN
 93

	)

254 
	#_SC_THREAD_THREADS_MAX
 94

	)

255 
	#_SC_TIMEOUTS
 95

	)

256 
	#_SC_THREADS
 96

	)

257 
	#_SC_TRACE
 97

	)

258 
	#_SC_TRACE_EVENT_FILTER
 98

	)

259 
	#_SC_TRACE_INHERIT
 99

	)

260 
	#_SC_TRACE_LOG
 100

	)

261 
	#_SC_TTY_NAME_MAX
 101

	)

262 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

263 
	#_SC_V6_ILP32_OFF32
 103

	)

264 
	#_SC_V6_ILP32_OFFBIG
 104

	)

265 
	#_SC_V6_LP64_OFF64
 105

	)

266 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

267 
	#_SC_IPV6
 118

	)

268 
	#_SC_RAW_SOCKETS
 119

	)

269 
	#_SC_SYMLOOP_MAX
 120

	)

272 #i‡
__XSI_VISIBLE


273 
	#_SC_ATEXIT_MAX
 107

	)

274 
	#_SC_IOV_MAX
 56

	)

275 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

276 
	#_SC_XOPEN_CRYPT
 108

	)

277 
	#_SC_XOPEN_ENH_I18N
 109

	)

278 
	#_SC_XOPEN_LEGACY
 110

	)

279 
	#_SC_XOPEN_REALTIME
 111

	)

280 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

281 
	#_SC_XOPEN_SHM
 113

	)

282 
	#_SC_XOPEN_STREAMS
 114

	)

283 
	#_SC_XOPEN_UNIX
 115

	)

284 
	#_SC_XOPEN_VERSION
 116

	)

285 
	#_SC_XOPEN_XCU_VERSION
 117

	)

288 #i‡
__BSD_VISIBLE


289 
	#_SC_NPROCESSORS_CONF
 57

	)

290 
	#_SC_NPROCESSORS_ONLN
 58

	)

291 
	#_SC_CPUSET_SIZE
 122

	)

295 
	#_SC_PHYS_PAGES
 121

	)

298 #i‡
__POSIX_VISIBLE
 >= 199209

299 
	#_CS_PATH
 1

	)

302 #i‡
__POSIX_VISIBLE
 >= 200112

303 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

304 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

305 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

306 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

307 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

308 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

309 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

310 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

311 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

312 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

313 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

314 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

315 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

318 
__BEGIN_DECLS


320 
	$_exô
(Ë
__dód2
;

321 
	`ac˚ss
(const *, );

322 
	`Æ¨m
();

323 
	`chdú
(const *);

324 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

325 
	`˛o£
();

326 
	`˛o£‰om
();

327 
	`dup
();

328 
	`dup2
(, );

329 
	`exe˛
(const *, const *, ...);

330 
	`exe˛e
(const *, const *, ...);

331 
	`exe˛p
(const *, const *, ...);

332 
	`execv
(const *, * const *);

333 
	`execve
(const *, * const *, * const *);

334 
	`execvp
(const *, * const *);

335 
pid_t
 
	`f‹k
();

336 
	`Â©hc⁄f
(, );

337 *
	`gëcwd
(*, 
size_t
);

338 
gid_t
 
	`gëegid
();

339 
uid_t
 
	`gëeuid
();

340 
gid_t
 
	`gëgid
();

341 
	`gëgroups
(, 
gid_t
 []);

342 *
	`gëlogö
();

343 
pid_t
 
	`gëpgΩ
();

344 
pid_t
 
	`gëpid
();

345 
pid_t
 
	`gëµid
();

346 
uid_t
 
	`gëuid
();

347 
	`ißây
();

348 
	`lök
(const *, const *);

349 #i‚de‡
_LSEEK_DECLARED


350 
	#_LSEEK_DECLARED


	)

351 
off_t
 
	`l£ek
(, off_t, );

353 
	`∑thc⁄f
(const *, );

354 
	`∑u£
();

355 
	`pùe
(*);

356 
ssize_t
 
	`ªad
(, *, 
size_t
);

357 
	`rmdú
(const *);

358 
	`£tgid
(
gid_t
);

359 
	`£çgid
(
pid_t
,Öid_t);

360 
pid_t
 
	`£tsid
();

361 
	`£tuid
(
uid_t
);

362 
	`¶ìp
();

363 
	`sysc⁄f
();

364 
pid_t
 
	`tcgëpgΩ
();

365 
	`tc£çgΩ
(, 
pid_t
);

366 *
	`ây«me
();

367 
	`ây«me_r
(, *, 
size_t
);

368 
	`u∆ök
(const *);

369 
ssize_t
 
	`wrôe
(, c⁄° *, 
size_t
);

372 #i‡
__POSIX_VISIBLE
 >199209 || 
__XSI_VISIBLE


373 
size_t
 
	`c⁄f°r
(, *, size_t);

374 #i‚de‡
_GETOPT_DECLARED


375 
	#_GETOPT_DECLARED


	)

376 
	`gë›t
(, * const [], const *);

378 *
›èrg
;

379 
›töd
, 
›ãº
, 
›t›t
;

384 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


385 
	`fsync
();

391 #i‚de‡
_FTRUNCATE_DECLARED


392 
	#_FTRUNCATE_DECLARED


	)

393 
	`·runˇã
(, 
off_t
);

397 #i‡
__POSIX_VISIBLE
 >= 199506

398 
	`gëlogö_r
(*, );

402 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


403 
	`fchown
(, 
uid_t
, 
gid_t
);

404 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

406 #i‡
__POSIX_VISIBLE
 >= 200112

407 
	`gëho°«me
(*, 
size_t
);

408 
	`£ãgid
(
gid_t
);

409 
	`£ãuid
(
uid_t
);

413 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


414 
	`gësid
(
pid_t
 
_pid
);

415 
	`fchdú
();

416 
	`gëpgid
(
pid_t
 
_pid
);

417 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

418 
ssize_t
 
	`¥ód
(, *, 
size_t
, 
off_t
);

419 
ssize_t
 
	`pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

422 #i‚de‡
_TRUNCATE_DECLARED


423 
	#_TRUNCATE_DECLARED


	)

424 
	`åunˇã
(c⁄° *, 
off_t
);

428 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


429 
	`Ác˚sßt
(, const *, , );

430 
	`fchow«t
(, c⁄° *, 
uid_t
, 
gid_t
, );

431 
	`„xecve
(, *const [], *const []);

432 
	`lök©
(, const *, , const *, );

433 
ssize_t
 
	`ªadlök©
(, c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

434 
	`symlök©
(const *, , const *);

435 
	`u∆ök©
(, const *, );

443 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >402 || 
__BSD_VISIBLE


444 
	`symlök
(c⁄° * 
__ª°ri˘
, const * __restrict);

448 #i‡
__XSI_VISIBLE


449 *
	`¸y±
(const *, const *);

451 
	`í¸y±
(*, );

452 
	`gëho°id
();

453 
	`lockf
(, , 
off_t
);

454 
	`ni˚
();

455 
	`£çgΩ
(
pid_t
 
_pid
,Öid_à
_pgΩ
);

456 
	`£åegid
(
gid_t
, gid_t);

457 
	`£åeuid
(
uid_t
, uid_t);

459 #i‚de‡
_SWAB_DECLARED


460 
	#_SWAB_DECLARED


	)

461 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

464 
	`sync
();

468 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <500Ë|| 
__BSD_VISIBLE


469 
	`brk
(const *);

470 
	`chroŸ
(const *);

471 
	`gëdèbÀsize
();

472 
	$gë∑gesize
(Ë
__puª2
;

473 *
	`gë∑ss
(const *);

474 *
	`sbrk
(
öçå_t
);

477 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <600Ë|| 
__BSD_VISIBLE


478 *
	`gëwd
(*);

479 
u£c⁄ds_t


480 
	`uÆ¨m
(
u£c⁄ds_t
, useconds_t);

481 
	`u¶ìp
(
u£c⁄ds_t
);

482 
pid_t
 
	$vf‹k
(Ë
__ªtu∫s_twi˚
;

485 #i‡
__BSD_VISIBLE


486 
timevÆ
;

487 
	`ac˘
(const *);

488 
	`async_d´m⁄
();

489 
	`check_utûôy_com∑t
(const *);

491 
	`¸y±_gë_f‹m©
();

492 
	`¸y±_£t_f‹m©
(const *);

493 
	`des_cùhî
(const *, *, , );

494 
	`des_£tkey
(c⁄° *
key
);

495 
	`óc˚ss
(const *, );

496 
	`ídu£rshñl
();

497 
	`exe˘
(const *, * const *, * const *);

498 
	`execvP
(const *, const *, * const *);

499 
	`„©uª_¥e£¡
(const *);

500 *
	`fÊag°o°r
(
u_l⁄g
);

501 
	`gëdomaö«me
(*, );

502 
	`gëgrou∂i°
(c⁄° *, 
gid_t
, gid_t *, *);

503 
	`gëlogö˛ass
(*, 
size_t
);

504 
mode_t
 
	`gëmode
(const *, mode_t);

505 
	`gëo§ñd©e
();

506 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

507 
	`gëªsgid
(
gid_t
 *, gid_t *, gid_t *);

508 
	`gëªsuid
(
uid_t
 *, uid_t *, uid_t *);

509 *
	`gëu£rshñl
();

510 
	`öôgroups
(c⁄° *, 
gid_t
);

511 
	`úu£rok
(, , const *, const *);

512 
	`úu£rok_ß
(const *, , , const *, const *);

513 
	`is£tugid
();

514 
	`__FªeBSD_libc_íãr_ª°ri˘ed_mode
();

515 
	`Õ©hc⁄f
(const *, );

516 #i‚de‡
_MKDTEMP_DECLARED


517 *
	`mkdãmp
(*);

518 
	#_MKDTEMP_DECLARED


	)

520 #i‚def 
_MKNOD_DECLARED


521 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

522 
	#_MKNOD_DECLARED


	)

524 #i‚de‡
_MKSTEMP_DECLARED


525 
	`mk°emp
(*);

526 
	#_MKSTEMP_DECLARED


	)

528 
	`mk°emps
(*, );

529 #i‚de‡
_MKTEMP_DECLARED


530 *
	`mkãmp
(*);

531 
	#_MKTEMP_DECLARED


	)

533 
	`nfssvc
(, *);

534 
	`∆m_sysˇŒ
(, , , **);

535 
	`¥ofû
(*, 
size_t
, 
vm_off£t_t
, );

536 
	`rcmd
(**, , const *, const *, const *, *);

537 
	`rcmd_af
(**, , const *,

539 
	`rcmdsh
(**, , const *,

541 *
	`ª_comp
(const *);

542 
	`ª_exec
(const *);

543 
	`ªboŸ
();

544 
	`ªvoke
(const *);

545 
pid_t
 
	`rf‹k
();

546 
pid_t
 
	`rf‹k_thªad
(, *, (*)(*), *);

547 
	`ºesvp‹t
(*);

548 
	`ºesvp‹t_af
(*, );

549 
	`ru£rok
(const *, , const *, const *);

550 #i‡
__BSD_VISIBLE


551 #i‚de‡
_SELECT_DECLARED


552 
	#_SELECT_DECLARED


	)

553 
	`£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

556 
	`£tdomaö«me
(const *, );

557 
	`£tgroups
(, c⁄° 
gid_t
 *);

558 
	`£tho°id
();

559 
	`£tho°«me
(const *, );

560 #i‚de‡
_SETKEY_DECLARED


561 
	`£tkey
(const *);

562 
	#_SETKEY_DECLARED


	)

564 
	`£éogö
(const *);

565 
	`£éogö˛ass
(const *);

566 *
	`£tmode
(const *);

567 
	$£çro˘ôÀ
(c⁄° *
_fmt
, ...Ë
	`__¥ötf0like
(1, 2);

568 
	`£åesgid
(
gid_t
, gid_t, gid_t);

569 
	`£åesuid
(
uid_t
, uid_t, uid_t);

570 
	`£ågid
(
gid_t
);

571 
	`£åuid
(
uid_t
);

572 
	`£tu£rshñl
();

573 
	`°πofÊags
(**, 
u_l⁄g
 *, u_long *);

574 
	`sw≠⁄
(const *);

575 
	`sw≠off
(const *);

576 
	`sysˇŒ
(, ...);

577 
off_t
 
	`__sysˇŒ
(
quad_t
, ...);

578 
	`undñëe
(const *);

579 
	`unwhôeout
(const *);

580 *
	`vÆloc
(
size_t
);

582 #i‚de‡
_OPTRESET_DECLARED


583 
	#_OPTRESET_DECLARED


	)

584 
›åe£t
;

587 
__END_DECLS


	@aros/aros_compat.h

1 #i‚de‡
AROS_COMPAT_H


2 
	#AROS_COMPAT_H


	)

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/io˘l.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/mou¡.h
>

9 
	~<¥Ÿo/sockë.h
>

10 
	~<¥Ÿo/exec.h
>

11 
	~<sys/uio.h
>

13 
	#°©vfs
 
°©fs


	)

14 
	#io˘l
 
Io˘lSockë


	)

15 
	#˛o£
 
Clo£Sockë


	)

17 
	#wrôev
 
¨os_wrôev


	)

18 
	#ªadv
 
¨os_ªadv


	)

19 
	#öë_±⁄
 
¨os_öë_±⁄


	)

20 
	#‰ìaddröfo
 
¨os_‰ìaddröfo


	)

21 
	#gë«meöfo
 
¨os_gë«meöfo


	)

22 
	#gëaddröfo
 
¨os_gëaddröfo


	)

24 
	#SOL_TCP
 
IPPROTO_TCP


	)

26 
Libøry
 * 
SockëBa£
;

28 
¨os_öô_sockë
();

30 
	#POLLIN
 0x0001

	)

31 
	#POLLPRI
 0x0002

	)

32 
	#POLLOUT
 0x0004

	)

33 
	#POLLERR
 0x0008

	)

34 
	#POLLHUP
 0x0010

	)

35 
	#POLLNVAL
 0x0020

	)

37 
	spﬁlfd
 {

38 
	mfd
;

39 
	mevíts
;

40 
	mªvíts
;

43 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`¨os_pﬁl
(x, y, z)

	)

	@win32/win32_compat.h

25 #ifde‡
WIN32


26 #i‚de‡
wö32_COMPAT_H_


27 
	#wö32_COMPAT_H_


	)

28 
	#NO_IPv6
 1

	)

30 
	~<wösock2.h
>

31 
	~<ws2t˝ù.h
>

32 
	~<Ws2ùdef.h
>

33 
	~<ba£tsd.h
>

34 
	~<io.h
>

35 
	~<mÆloc.h
>

36 
	~<sys/°©.h
>

38 
	#SOL_TCP
 
IPPROTO_TCP


	)

40 
	tssize_t
;

41 
	tuid_t
;

42 
	tgid_t
;

43 
	tsockÀn_t
;

46 
	#wrôev
 
wö32_wrôev


	)

47 
	#ªadv
 
wö32_ªadv


	)

48 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`wö32_pﬁl
(x, y, z)

	)

49 
	#öë_±⁄
(
x
,
y
,
z
Ë
	`wö32_öë_±⁄
(x,y,z)

	)

50 
	#¶ìp
(
x
Ë
	`SÀï
(x * 1000)

	)

51 
	#¢¥ötf
(
a
, 
b
, 
c
, ...Ë
	`_¢¥ötf_s
◊, b, b, c, ## 
__VA_ARGS__
)

	)

52 
wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
);

53 
wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfsd
, 
timeout
);

54 
wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

56 
	siovec
 {

57 *
	miov_ba£
;

58 
size_t
 
	miov_Àn
;

61 
	#ölöe


	)

	@/usr/include/_ctype.h

42 #i‚de‡
__CTYPE_H_


43 
	#__CTYPE_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<sys/_ty≥s.h
>

48 
	#_CTYPE_A
 0x00000100L

	)

49 
	#_CTYPE_C
 0x00000200L

	)

50 
	#_CTYPE_D
 0x00000400L

	)

51 
	#_CTYPE_G
 0x00000800L

	)

52 
	#_CTYPE_L
 0x00001000L

	)

53 
	#_CTYPE_P
 0x00002000L

	)

54 
	#_CTYPE_S
 0x00004000L

	)

55 
	#_CTYPE_U
 0x00008000L

	)

56 
	#_CTYPE_X
 0x00010000L

	)

57 
	#_CTYPE_B
 0x00020000L

	)

58 
	#_CTYPE_R
 0x00040000L

	)

59 
	#_CTYPE_I
 0x00080000L

	)

60 
	#_CTYPE_T
 0x00100000L

	)

61 
	#_CTYPE_Q
 0x00200000L

	)

62 
	#_CTYPE_SW0
 0x20000000L

	)

63 
	#_CTYPE_SW1
 0x40000000L

	)

64 
	#_CTYPE_SW2
 0x80000000L

	)

65 
	#_CTYPE_SW3
 0xc0000000L

	)

66 
	#_CTYPE_SWM
 0xe0000000L

	)

67 
	#_CTYPE_SWS
 30

	)

70 
__BEGIN_DECLS


71 
	$___ru√ty≥
(
__˘_ru√_t
Ë
__puª
;

72 
__˘_ru√_t
 
	$___tﬁowî
(
__˘_ru√_t
Ë
__puª
;

73 
__˘_ru√_t
 
	$___touµî
(
__˘_ru√_t
Ë
__puª
;

74 
__END_DECLS


80 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


81 
	#_USE_CTYPE_INLINE_


	)

82 

	)

83 
	#__ölöe


	)

86 
__mb_sb_limô
;

91 #i‡!
	`deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

92 (
	`deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

94 
	~<ru√ty≥.h
>

96 
__ölöe
 

97 
	$__maskru√
(
__˘_ru√_t
 
_c
, 
_f
)

99  ((
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥
(_c) :

100 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
]Ë& 
_f
;

101 
	}
}

103 
__ölöe
 

104 
	$__sbmaskru√
(
__˘_ru√_t
 
_c
, 
_f
)

106  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? 0 :

107 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
] & 
_f
;

108 
	}
}

110 
__ölöe
 

111 
	$__i°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

113  (!!
	`__maskru√
(
_c
, 
_f
));

114 
	}
}

116 
__ölöe
 

117 
	$__sbi°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

119  (!!
	`__sbmaskru√
(
_c
, 
_f
));

120 
	}
}

122 
__ölöe
 

123 
	$__is˘y≥
(
__˘_ru√_t
 
_c
, 
_f
)

125  (
_c
 < 0 || _c >= 128) ? 0 :

126 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

127 
	}
}

129 
__ölöe
 
__˘_ru√_t


130 
	$__touµî
(
__˘_ru√_t
 
_c
)

132  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___touµî
(_c) :

133 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

134 
	}
}

136 
__ölöe
 
__˘_ru√_t


137 
	$__sbtouµî
(
__˘_ru√_t
 
_c
)

139  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

140 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

141 
	}
}

143 
__ölöe
 
__˘_ru√_t


144 
	$__tﬁowî
(
__˘_ru√_t
 
_c
)

146  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî
(_c) :

147 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

148 
	}
}

150 
__ölöe
 
__˘_ru√_t


151 
	$__sbtﬁowî
(
__˘_ru√_t
 
_c
)

153  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

154 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

155 
	}
}

157 
__ölöe
 

158 
	$__wcwidth
(
__˘_ru√_t
 
_c
)

160 
_x
;

162 i‡(
_c
 == 0)

164 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

165 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

166  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

167  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

168 
	}
}

172 
__BEGIN_DECLS


173 
__maskru√
(
__˘_ru√_t
, );

174 
__sbmaskru√
(
__˘_ru√_t
, );

175 
__i°y≥
(
__˘_ru√_t
, );

176 
__sbi°y≥
(
__˘_ru√_t
, );

177 
__is˘y≥
(
__˘_ru√_t
, );

178 
__˘_ru√_t
 
__touµî
(__ct_rune_t);

179 
__˘_ru√_t
 
__sbtouµî
(__ct_rune_t);

180 
__˘_ru√_t
 
__tﬁowî
(__ct_rune_t);

181 
__˘_ru√_t
 
__sbtﬁowî
(__ct_rune_t);

182 
__wcwidth
(
__˘_ru√_t
);

183 
	g__END_DECLS


	@/usr/include/machine/_align.h

6 
	~<x86/_Æign.h
>

	@/usr/include/machine/_inttypes.h

6 
	~<x86/_öây≥s.h
>

	@/usr/include/machine/_stdint.h

40 #i‚de‡
_MACHINE__STDINT_H_


41 
	#_MACHINE__STDINT_H_


	)

43 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

45 
	#INT8_C
(
c
Ë(c)

	)

46 
	#INT16_C
(
c
Ë(c)

	)

47 
	#INT32_C
(
c
Ë(c)

	)

48 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

50 
	#UINT8_C
(
c
Ë(c)

	)

51 
	#UINT16_C
(
c
Ë(c)

	)

52 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

53 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

55 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

56 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

60 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

67 
	#INT8_MIN
 (-0x7f-1)

	)

68 
	#INT16_MIN
 (-0x7fff-1)

	)

69 
	#INT32_MIN
 (-0x7fffffff-1)

	)

70 
	#INT64_MIN
 (-0x7fffffffffffffffL-1)

	)

73 
	#INT8_MAX
 0x7f

	)

74 
	#INT16_MAX
 0x7fff

	)

75 
	#INT32_MAX
 0x7fffffff

	)

76 
	#INT64_MAX
 0x7fffffffffffffffL

	)

79 
	#UINT8_MAX
 0xff

	)

80 
	#UINT16_MAX
 0xffff

	)

81 
	#UINT32_MAX
 0xffffffffU

	)

82 
	#UINT64_MAX
 0xffffffffffffffffUL

	)

89 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

90 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

91 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

92 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

95 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

96 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

97 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

98 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

101 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

102 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

103 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

104 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

111 
	#INT_FAST8_MIN
 
INT32_MIN


	)

112 
	#INT_FAST16_MIN
 
INT32_MIN


	)

113 
	#INT_FAST32_MIN
 
INT32_MIN


	)

114 
	#INT_FAST64_MIN
 
INT64_MIN


	)

117 
	#INT_FAST8_MAX
 
INT32_MAX


	)

118 
	#INT_FAST16_MAX
 
INT32_MAX


	)

119 
	#INT_FAST32_MAX
 
INT32_MAX


	)

120 
	#INT_FAST64_MAX
 
INT64_MAX


	)

123 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

124 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

125 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

126 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

132 
	#INTPTR_MIN
 
INT64_MIN


	)

133 
	#INTPTR_MAX
 
INT64_MAX


	)

134 
	#UINTPTR_MAX
 
UINT64_MAX


	)

140 
	#INTMAX_MIN
 
INT64_MIN


	)

141 
	#INTMAX_MAX
 
INT64_MAX


	)

142 
	#UINTMAX_MAX
 
UINT64_MAX


	)

149 
	#PTRDIFF_MIN
 
INT64_MIN


	)

150 
	#PTRDIFF_MAX
 
INT64_MAX


	)

153 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

154 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

157 
	#SIZE_MAX
 
UINT64_MAX


	)

159 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 
INT32_MIN


	)

162 
	#WCHAR_MAX
 
INT32_MAX


	)

166 
	#WINT_MIN
 
INT32_MIN


	)

167 
	#WINT_MAX
 
INT32_MAX


	)

	@/usr/include/machine/endian.h

33 #i‚de‡
_MACHINE_ENDIAN_H_


34 
	#_MACHINE_ENDIAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #ifde‡
__˝lu•lus


46 
	#_QUAD_HIGHWORD
 1

	)

47 
	#_QUAD_LOWWORD
 0

	)

53 
	#_LITTLE_ENDIAN
 1234

	)

54 
	#_BIG_ENDIAN
 4321

	)

55 
	#_PDP_ENDIAN
 3412

	)

57 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

63 #i‡
__BSD_VISIBLE


64 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

65 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

66 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

67 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

70 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE_BUILTIN_CONSTANT_P
)

72 
	#__bsw≠64_c⁄°
(
_x
) \

73 (((
_x
) >> 56) | \

74 (((
_x
) >> 40) & (0xffUL << 8)) | \

75 (((
_x
) >> 24) & (0xffUL << 16)) | \

76 (((
_x
) >> 8) & (0xffUL << 24)) | \

77 (((
_x
) << 8) & (0xffUL << 32)) | \

78 (((
_x
) << 24) & (0xffUL << 40)) | \

79 (((
_x
) << 40) & (0xffUL << 48)) | \

80 ((
_x
Ë<< 56))

	)

82 
	#__bsw≠32_c⁄°
(
_x
) \

83 (((
_x
) >> 24) | \

84 (((
_x
) & (0xff << 16)) >> 8) | \

85 (((
_x
) & (0xff << 8)) << 8) | \

86 ((
_x
Ë<< 24))

	)

88 
	#__bsw≠16_c⁄°
(
_x
Ë(
__uöt16_t
)((_xË<< 8 | (_xË>> 8)

	)

90 
__ölöe
 
__uöt64_t


91 
__bsw≠64_v¨
(
__uöt64_t
 
_x
)

94 
__asm
 ("bsw≠ %0" : "+r" (
_x
));

95  (
_x
);

98 
__ölöe
 
__uöt32_t


99 
__bsw≠32_v¨
(
__uöt32_t
 
_x
)

102 
__asm
 ("bsw≠ %0" : "+r" (
_x
));

103  (
_x
);

106 
__ölöe
 
__uöt16_t


107 
__bsw≠16_v¨
(
__uöt16_t
 
_x
)

110  (
__bsw≠16_c⁄°
(
_x
));

113 
	#__bsw≠64
(
_x
) \

114 (
	`__buûtö_c⁄°™t_p
(
_x
) ? \

115 
	`__bsw≠64_c⁄°
((
__uöt64_t
)(
_x
)Ë: 
	`__bsw≠64_v¨
(_x))

	)

117 
	#__bsw≠32
(
_x
) \

118 (
	`__buûtö_c⁄°™t_p
(
_x
) ? \

119 
	`__bsw≠32_c⁄°
((
__uöt32_t
)(
_x
)Ë: 
	`__bsw≠32_v¨
(_x))

	)

121 
	#__bsw≠16
(
_x
) \

122 ((
__uöt16_t
)(
	`__buûtö_c⁄°™t_p
(
_x
) ? \

123 
	`__bsw≠16_c⁄°
((
__uöt16_t
)(
_x
)Ë: 
	`__bsw≠16_v¨
(_x)))

	)

125 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

126 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

127 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

128 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

137 
	#_BYTEORDER_FUNC_DEFINED


	)

141 #ifde‡
__˝lu•lus


	@/usr/include/malloc.h

2 #i‡
__STDC__


5 
	~<°dlib.h
>

	@/usr/include/netinet6/in6.h

64 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


68 #i‚de‡
_NETINET6_IN6_H_


69 
	#_NETINET6_IN6_H_


	)

76 
	#__KAME__


	)

77 
	#__KAME_VERSION
 "FªeBSD"

	)

84 #i‡
__BSD_VISIBLE


85 
	#IPV6PORT_RESERVED
 1024

	)

86 
	#IPV6PORT_ANONMIN
 49152

	)

87 
	#IPV6PORT_ANONMAX
 65535

	)

88 
	#IPV6PORT_RESERVEDMIN
 600

	)

89 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

95 
	sö6_addr
 {

97 
uöt8_t
 
	m__u6_addr8
[16];

98 
uöt16_t
 
	m__u6_addr16
[8];

99 
uöt32_t
 
	m__u6_addr32
[4];

100 } 
	m__u6_addr
;

103 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

104 #ifde‡
_KERNEL


105 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

106 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

107 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

110 
	#INET6_ADDRSTRLEN
 46

	)

119 #i‡
__BSD_VISIBLE


120 
	#SIN6_LEN


	)

123 
	ssockaddr_ö6
 {

124 
uöt8_t
 
	msö6_Àn
;

125 
ß_Ámûy_t
 
	msö6_Ámûy
;

126 
ö_p‹t_t
 
	msö6_p‹t
;

127 
uöt32_t
 
	msö6_Êowöfo
;

128 
ö6_addr
 
	msö6_addr
;

129 
uöt32_t
 
	msö6_sc›e_id
;

135 #ifde‡
_KERNEL


136 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

137 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

138 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

139 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

140 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

141 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

142 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

143 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

144 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

147 #ifde‡
_KERNEL


148 c⁄° 
sockaddr_ö6
 
ß6_™y
;

150 c⁄° 
ö6_addr
 
ö6mask0
;

151 c⁄° 
ö6_addr
 
ö6mask32
;

152 c⁄° 
ö6_addr
 
ö6mask64
;

153 c⁄° 
ö6_addr
 
ö6mask96
;

154 c⁄° 
ö6_addr
 
ö6mask128
;

160 #ifde‡
_KERNEL


161 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


162 
	#IPV6_ADDR_INT32_ONE
 1

	)

163 
	#IPV6_ADDR_INT32_TWO
 2

	)

164 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

165 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

166 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

167 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

168 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

169 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

170 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


171 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

172 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

173 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

174 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

175 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

176 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

177 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

178 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

185 #i‡
__BSD_VISIBLE


186 
	#IN6ADDR_ANY_INIT
 \

188 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

189 
	#IN6ADDR_LOOPBACK_INIT
 \

191 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

192 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

194 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

195 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

197 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

198 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

200 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

201 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

203 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

204 
	#IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT
 \

206 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}

	)

209 c⁄° 
ö6_addr
 
ö6addr_™y
;

210 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

211 #i‡
__BSD_VISIBLE


212 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

213 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

214 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

215 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Ælv2rouãrs
;

224 #ifde‡
_KERNEL


225 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

226 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

228 #i‡
__BSD_VISIBLE


229 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

230 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

237 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

238 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

239 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

240 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

241 (
a
)->
__u6_addr
.
__u6_addr32
[3] =0)

	)

246 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

247 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

248 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

249 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

250 (
a
)->
__u6_addr
.
__u6_addr32
[3] =
	`¡ohl
(1))

	)

255 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

256 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

257 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

258 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

259 (
a
)->
__u6_addr
.
__u6_addr32
[3] != 0 && \

260 (
a
)->
__u6_addr
.
__u6_addr32
[3] !
	`¡ohl
(1))

	)

265 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

266 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

267 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

268 (
a
)->
__u6_addr
.
__u6_addr32
[2] =
	`¡ohl
(0x0000ffff))

	)

274 #ifde‡
_KERNEL


275 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

276 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

277 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

278 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

279 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

280 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

282 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

283 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

284 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

285 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

286 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

287 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

294 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

295 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

296 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

297 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

302 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

304 #ifde‡
_KERNEL


305 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

307 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

313 #ifde‡
_KERNEL


314 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

315 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

316 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

317 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

318 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

319 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

320 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

321 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

322 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

323 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

324 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

325 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

326 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

327 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

328 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

329 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

330 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

331 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

333 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

334 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

335 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

336 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

337 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

338 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

339 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

340 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

341 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

342 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

343 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

344 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

345 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

346 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

347 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

350 #ifde‡
_KERNEL


354 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

355 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

356 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

357 
	#IN6_IS_SCOPE_EMBED
(
a
) \

358 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

359 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)) || \

360 (
	`IN6_IS_ADDR_MC_INTFACELOCAL
(
a
)))

	)

362 
	#IFA6_IS_DEPRECATED
(
a
) \

363 ((
a
)->
ü6_li„time
.
ü6t_∂time
 !
ND6_INFINITE_LIFETIME
 && \

364 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

365 (
a
)->
ü6_li„time
.
ü6t_∂time
)

	)

366 
	#IFA6_IS_INVALID
(
a
) \

367 ((
a
)->
ü6_li„time
.
ü6t_v…ime
 !
ND6_INFINITE_LIFETIME
 && \

368 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

369 (
a
)->
ü6_li„time
.
ü6t_v…ime
)

	)

375 #i‡
__BSD_VISIBLE


376 
	srouã_ö6
 {

377 
πíåy
 *
	mro_π
;

378 
Œíåy
 *
	mro_Œe
;

379 
ö6_addr
 *
	mro_ü6
;

380 
	mro_Êags
;

381 
sockaddr_ö6
 
	mro_d°
;

391 
	#IPV6_OPTIONS
 1

	)

392 
	#IPV6_RECVOPTS
 5

	)

393 
	#IPV6_RECVRETOPTS
 6

	)

394 
	#IPV6_RECVDSTADDR
 7

	)

395 
	#IPV6_RETOPTS
 8

	)

397 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

398 
	#IPV6_UNICAST_HOPS
 4

	)

399 
	#IPV6_MULTICAST_IF
 9

	)

400 
	#IPV6_MULTICAST_HOPS
 10

	)

401 
	#IPV6_MULTICAST_LOOP
 11

	)

402 
	#IPV6_JOIN_GROUP
 12

	)

403 
	#IPV6_LEAVE_GROUP
 13

	)

404 
	#IPV6_PORTRANGE
 14

	)

405 
	#ICMP6_FILTER
 18

	)

407 #ifde‡
_KERNEL


408 
	#IPV6_2292PKTINFO
 19

	)

409 
	#IPV6_2292HOPLIMIT
 20

	)

410 
	#IPV6_2292NEXTHOP
 21

	)

411 
	#IPV6_2292HOPOPTS
 22

	)

412 
	#IPV6_2292DSTOPTS
 23

	)

413 
	#IPV6_2292RTHDR
 24

	)

414 
	#IPV6_2292PKTOPTIONS
 25

	)

417 
	#IPV6_CHECKSUM
 26

	)

418 
	#IPV6_V6ONLY
 27

	)

419 #i‚de‡
_KERNEL


420 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

424 
	#IPV6_IPSEC_POLICY
 28

	)

427 
	#IPV6_FAITH
 29

	)

430 
	#IPV6_FW_ADD
 30

	)

431 
	#IPV6_FW_DEL
 31

	)

432 
	#IPV6_FW_FLUSH
 32

	)

433 
	#IPV6_FW_ZERO
 33

	)

434 
	#IPV6_FW_GET
 34

	)

438 
	#IPV6_RTHDRDSTOPTS
 35

	)

440 
	#IPV6_RECVPKTINFO
 36

	)

441 
	#IPV6_RECVHOPLIMIT
 37

	)

442 
	#IPV6_RECVRTHDR
 38

	)

443 
	#IPV6_RECVHOPOPTS
 39

	)

444 
	#IPV6_RECVDSTOPTS
 40

	)

445 #ifde‡
_KERNEL


446 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

449 
	#IPV6_USE_MIN_MTU
 42

	)

450 
	#IPV6_RECVPATHMTU
 43

	)

452 
	#IPV6_PATHMTU
 44

	)

455 
	#IPV6_REACHCONF
 45

	)

460 
	#IPV6_PKTINFO
 46

	)

461 
	#IPV6_HOPLIMIT
 47

	)

462 
	#IPV6_NEXTHOP
 48

	)

463 
	#IPV6_HOPOPTS
 49

	)

464 
	#IPV6_DSTOPTS
 50

	)

465 
	#IPV6_RTHDR
 51

	)

467 
	#IPV6_PKTOPTIONS
 52

	)

471 
	#IPV6_RECVTCLASS
 57

	)

473 
	#IPV6_AUTOFLOWLABEL
 59

	)

475 
	#IPV6_TCLASS
 61

	)

476 
	#IPV6_DONTFRAG
 62

	)

478 
	#IPV6_PREFER_TEMPADDR
 63

	)

482 
	#IPV6_BINDANY
 64

	)

488 
	#IPV6_MSFILTER
 74

	)

494 
	#IPV6_RTHDR_LOOSE
 0

	)

495 
	#IPV6_RTHDR_STRICT
 1

	)

496 
	#IPV6_RTHDR_TYPE_0
 0

	)

501 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

502 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

509 
	#IPV6_MIN_MEMBERSHIPS
 31

	)

510 
	#IPV6_MAX_MEMBERSHIPS
 4095

	)

516 
	#IPV6_MAX_GROUP_SRC_FILTER
 512

	)

517 
	#IPV6_MAX_SOCK_SRC_FILTER
 128

	)

522 
	sùv6_mªq
 {

523 
ö6_addr
 
	mùv6mr_mu…üddr
;

524 
	mùv6mr_öãrÁ˚
;

530 
	sö6_pktöfo
 {

531 
ö6_addr
 
	mùi6_addr
;

532 
	mùi6_ifödex
;

538 
	sù6_mtuöfo
 {

539 
sockaddr_ö6
 
	mù6m_addr
;

540 
uöt32_t
 
	mù6m_mtu
;

547 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

548 
	#IPV6_PORTRANGE_HIGH
 1

	)

549 
	#IPV6_PORTRANGE_LOW
 2

	)

551 #i‡
__BSD_VISIBLE


558 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

563 
	#IPV6CTL_FORWARDING
 1

	)

564 
	#IPV6CTL_SENDREDIRECTS
 2

	)

565 
	#IPV6CTL_DEFHLIM
 3

	)

566 #ifde‡
nŸyë


567 
	#IPV6CTL_DEFMTU
 4

	)

569 
	#IPV6CTL_FORWSRCRT
 5

	)

570 
	#IPV6CTL_STATS
 6

	)

571 
	#IPV6CTL_MRTSTATS
 7

	)

572 
	#IPV6CTL_MRTPROTO
 8

	)

573 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

574 
	#IPV6CTL_SOURCECHECK
 10

	)

575 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

576 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

577 
	#IPV6CTL_KEEPFAITH
 13

	)

578 
	#IPV6CTL_LOG_INTERVAL
 14

	)

579 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

580 
	#IPV6CTL_DAD_COUNT
 16

	)

581 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

582 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

583 
	#IPV6CTL_GIF_HLIM
 19

	)

584 
	#IPV6CTL_KAME_VERSION
 20

	)

585 
	#IPV6CTL_USE_DEPRECATED
 21

	)

586 
	#IPV6CTL_RR_PRUNE
 22

	)

588 
	#IPV6CTL_MAPPED_ADDR
 23

	)

590 
	#IPV6CTL_V6ONLY
 24

	)

591 
	#IPV6CTL_RTEXPIRE
 25

	)

592 
	#IPV6CTL_RTMINEXPIRE
 26

	)

593 
	#IPV6CTL_RTMAXCACHE
 27

	)

595 
	#IPV6CTL_USETEMPADDR
 32

	)

596 
	#IPV6CTL_TEMPPLTIME
 33

	)

597 
	#IPV6CTL_TEMPVLTIME
 34

	)

598 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

599 
	#IPV6CTL_RIP6STATS
 36

	)

600 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

601 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

602 
	#IPV6CTL_USE_DEFAULTZONE
 39

	)

604 
	#IPV6CTL_MAXFRAGS
 41

	)

606 
	#IPV6CTL_IFQ
 42

	)

607 
	#IPV6CTL_ISATAPRTR
 43

	)

609 
	#IPV6CTL_MCAST_PMTU
 44

	)

613 
	#IPV6CTL_STEALTH
 45

	)

615 
	#ICMPV6CTL_ND6_ONLINKNSRFC4861
 47

	)

616 
	#IPV6CTL_NO_RADR
 48

	)

617 
	#IPV6CTL_NORBIT_RAIF
 49

	)

619 
	#IPV6CTL_RFC6204W3
 50

	)

621 
	#IPV6CTL_MAXID
 51

	)

627 
	#M_AUTHIPHDR
 
M_PROTO2


	)

628 
	#M_DECRYPTED
 
M_PROTO3


	)

629 
	#M_LOOP
 
M_PROTO4


	)

630 
	#M_AUTHIPDGM
 
M_PROTO5


	)

631 
	#M_RTALERT_MLD
 
M_PROTO6


	)

633 #ifde‡
_KERNEL


634 
	gcmsghdr
;

635 
	gù6_hdr
;

637 
ö6_cksum_p£udo
(
ù6_hdr
 *, 
uöt32_t
, 
uöt8_t
, 
uöt16_t
);

638 
ö6_cksum
(
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t);

639 
ö6_loˇœddr
(
ö6_addr
 *);

640 
ö6_loˇlù
(
ö6_addr
 *);

641 
ö6_addrsc›e
(
ö6_addr
 *);

642 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
(
i‚ë
 *, 
ö6_addr
 *);

643 
ö6_if_up
(
i‚ë
 *);

644 
	gsockaddr
;

645 
u_ch¨
 
ù6_¥Ÿox
[];

647 
ö6_sö6_2_sö
(
sockaddr_ö
 *
sö
,

648 
sockaddr_ö6
 *
sö6
);

649 
ö6_sö_2_v4m≠sö6
(
sockaddr_ö
 *
sö
,

650 
sockaddr_ö6
 *
sö6
);

651 
ö6_sö6_2_sö_ö_sock
(
sockaddr
 *
«m
);

652 
ö6_sö_2_v4m≠sö6_ö_sock
(
sockaddr
 **
«m
);

653 
addr£l_pﬁicy_öô
();

655 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

656 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

657 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

659 (*
Áôh¥efix_p
)(
ö6_addr
 *);

662 #i‚de‡
_SIZE_T_DECLARED


663 
__size_t
 
	tsize_t
;

664 
	#_SIZE_T_DECLARED


	)

667 #i‚de‡
_SOCKLEN_T_DECLARED


668 
__sockÀn_t
 
	tsockÀn_t
;

669 
	#_SOCKLEN_T_DECLARED


	)

672 #i‡
__BSD_VISIBLE


674 
__BEGIN_DECLS


675 
cmsghdr
;

677 
	`öë6_›ti⁄_•a˚
();

678 
	`öë6_›ti⁄_öô
(*, 
cmsghdr
 **, );

679 
	`öë6_›ti⁄_≠≥nd
(
cmsghdr
 *, c⁄° 
uöt8_t
 *,

681 
uöt8_t
 *
	`öë6_›ti⁄_Æloc
(
cmsghdr
 *, , , );

682 
	`öë6_›ti⁄_√xt
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **);

683 
	`öë6_›ti⁄_föd
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **, );

685 
size_t
 
	`öë6_πhdr_•a˚
(, );

686 
cmsghdr
 *
	`öë6_πhdr_öô
(*, );

687 
	`öë6_πhdr_add
(
cmsghdr
 *, c⁄° 
ö6_addr
 *,

689 
	`öë6_πhdr_œ°h›
(
cmsghdr
 *, );

691 
	`öë6_πhdr_ªvî£
(c⁄° 
cmsghdr
 *, cmsghdr *);

693 
	`öë6_πhdr_£gmíts
(c⁄° 
cmsghdr
 *);

694 
ö6_addr
 *
	`öë6_πhdr_gëaddr
(
cmsghdr
 *, );

695 
	`öë6_πhdr_gëÊags
(c⁄° 
cmsghdr
 *, );

697 
	`öë6_›t_öô
(*, 
sockÀn_t
);

698 
	`öë6_›t_≠≥nd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

699 
uöt8_t
, **);

700 
	`öë6_›t_föish
(*, 
sockÀn_t
, );

701 
	`öë6_›t_£t_vÆ
(*, , *, 
sockÀn_t
);

703 
	`öë6_›t_√xt
(*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

705 
	`öë6_›t_föd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

707 
	`öë6_›t_gë_vÆ
(*, , *, 
sockÀn_t
);

708 
sockÀn_t
 
	`öë6_πh_•a˚
(, );

709 *
	`öë6_πh_öô
(*, 
sockÀn_t
, , );

710 
	`öë6_πh_add
(*, c⁄° 
ö6_addr
 *);

711 
	`öë6_πh_ªvî£
(const *, *);

712 
	`öë6_πh_£gmíts
(const *);

713 
ö6_addr
 *
	`öë6_πh_gëaddr
(const *, );

714 
__END_DECLS


	@/usr/include/sys/_iovec.h

33 #i‚de‡
_SYS__IOVEC_H_


34 
	#_SYS__IOVEC_H_


	)

36 
	~<sys/_ty≥s.h
>

38 #i‚de‡
_SIZE_T_DECLARED


39 
__size_t
 
	tsize_t
;

40 
	#_SIZE_T_DECLARED


	)

43 
	siovec
 {

44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_null.h

29 #i‚de‡
NULL


31 #i‡!
deföed
(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
__˝lu•lus
 >= 201103L

35 
	#NULL
 
nuŒ±r


	)

36 #ñi‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

37 
	#NULL
 
__nuŒ


	)

39 #i‡
deföed
(
__LP64__
)

40 
	#NULL
 (0L)

	)

42 
	#NULL
 0

	)

	@/usr/include/sys/_pthreadtypes.h

36 #i‚de‡
_SYS__PTHREADTYPES_H_


37 
	#_SYS__PTHREADTYPES_H_


	)

44 
	g±hªad
;

45 
	g±hªad_©å
;

46 
	g±hªad_c⁄d
;

47 
	g±hªad_c⁄d_©å
;

48 
	g±hªad_muãx
;

49 
	g±hªad_muãx_©å
;

50 
	g±hªad_⁄˚
;

51 
	g±hªad_rwlock
;

52 
	g±hªad_rwlock©å
;

53 
	g±hªad_b¨rõr
;

54 
	g±hªad_b¨rõr_©å
;

55 
	g±hªad_•ölock
;

64 #i‚de‡
_PTHREAD_T_DECLARED


65 
±hªad
 *
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

68 
±hªad_©å
 *
	t±hªad_©å_t
;

69 
±hªad_muãx
 *
	t±hªad_muãx_t
;

70 
±hªad_muãx_©å
 *
	t±hªad_muãx©å_t
;

71 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

72 
±hªad_c⁄d_©å
 *
	t±hªad_c⁄d©å_t
;

73 
	t±hªad_key_t
;

74 
±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

75 
±hªad_rwlock
 *
	t±hªad_rwlock_t
;

76 
±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

77 
±hªad_b¨rõr
 *
	t±hªad_b¨rõr_t
;

78 
±hªad_b¨rõøâr
 *
	t±hªad_b¨rõøâr_t
;

79 
±hªad_•ölock
 *
	t±hªad_•ölock_t
;

87 *
	t±hªad_addr_t
;

88 *(*
	t±hªad_°¨åoutöe_t
)(*);

93 
	s±hªad_⁄˚
 {

94 
	m°©e
;

95 
±hªad_muãx_t
 
	mmuãx
;

	@/usr/include/sys/_sockaddr_storage.h

33 #i‚de‡
_SYS__SOCKADDR_STORAGE_H_


34 
	#_SYS__SOCKADDR_STORAGE_H_


	)

39 
	#_SS_MAXSIZE
 128U

	)

40 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

41 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

42 (
ß_Ámûy_t
))

	)

43 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

44 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

46 
	ssockaddr_°‹age
 {

47 
	mss_Àn
;

48 
ß_Ámûy_t
 
	mss_Ámûy
;

49 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

50 
__öt64_t
 
	m__ss_Æign
;

51 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

	@/usr/include/sys/_stdint.h

30 #i‚de‡
_SYS__STDINT_H_


31 
	#_SYS__STDINT_H_


	)

33 #i‚de‡
_INT8_T_DECLARED


34 
__öt8_t
 
	töt8_t
;

35 
	#_INT8_T_DECLARED


	)

38 #i‚de‡
_INT16_T_DECLARED


39 
__öt16_t
 
	töt16_t
;

40 
	#_INT16_T_DECLARED


	)

43 #i‚de‡
_INT32_T_DECLARED


44 
__öt32_t
 
	töt32_t
;

45 
	#_INT32_T_DECLARED


	)

48 #i‚de‡
_INT64_T_DECLARED


49 
__öt64_t
 
	töt64_t
;

50 
	#_INT64_T_DECLARED


	)

53 #i‚de‡
_UINT8_T_DECLARED


54 
__uöt8_t
 
	tuöt8_t
;

55 
	#_UINT8_T_DECLARED


	)

58 #i‚de‡
_UINT16_T_DECLARED


59 
__uöt16_t
 
	tuöt16_t
;

60 
	#_UINT16_T_DECLARED


	)

63 #i‚de‡
_UINT32_T_DECLARED


64 
__uöt32_t
 
	tuöt32_t
;

65 
	#_UINT32_T_DECLARED


	)

68 #i‚de‡
_UINT64_T_DECLARED


69 
__uöt64_t
 
	tuöt64_t
;

70 
	#_UINT64_T_DECLARED


	)

73 #i‚de‡
_INTPTR_T_DECLARED


74 
__öçå_t
 
	töçå_t
;

75 
	#_INTPTR_T_DECLARED


	)

77 #i‚de‡
_UINTPTR_T_DECLARED


78 
__uöçå_t
 
	tuöçå_t
;

79 
	#_UINTPTR_T_DECLARED


	)

	@/usr/include/sys/_timespec.h

34 #i‚de‡
_SYS__TIMESPEC_H_


35 
	#_SYS__TIMESPEC_H_


	)

37 
	~<sys/_ty≥s.h
>

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

44 
	stime•ec
 {

45 
time_t
 
	mtv_£c
;

46 
	mtv_n£c
;

	@/usr/include/sys/_timeval.h

29 #i‚de‡
_SYS__TIMEVAL_H_


30 
	#_SYS__TIMEVAL_H_


	)

32 
	~<sys/_ty≥s.h
>

34 #i‚de‡
_SUSECONDS_T_DECLARED


35 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

36 
	#_SUSECONDS_T_DECLARED


	)

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

47 
	stimevÆ
 {

48 
time_t
 
	mtv_£c
;

49 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__uöt32_t
 
	t__blksize_t
;

39 
__öt64_t
 
	t__blk˙t_t
;

40 
__öt32_t
 
	t__˛ockid_t
;

41 
__uöt64_t
 
	t__ˇp_rights_t
;

42 
__uöt32_t
 
	t__fÊags_t
;

43 
__uöt64_t
 
	t__fsblk˙t_t
;

44 
__uöt64_t
 
	t__fsfû˙t_t
;

45 
__uöt32_t
 
	t__gid_t
;

46 
__öt64_t
 
	t__id_t
;

47 
__uöt32_t
 
	t__öo_t
;

48 
	t__key_t
;

49 
__öt32_t
 
	t__lwpid_t
;

50 
__uöt16_t
 
	t__mode_t
;

51 
	t__accmode_t
;

52 
	t__∆_ôem
;

53 
__uöt16_t
 
	t__∆ök_t
;

54 
__öt64_t
 
	t__off_t
;

55 
__öt32_t
 
	t__pid_t
;

56 
__öt64_t
 
	t__æim_t
;

59 
__uöt8_t
 
	t__ß_Ámûy_t
;

60 
__uöt32_t
 
	t__sockÀn_t
;

61 
	t__su£c⁄ds_t
;

62 
__timî
 *
	t__timî_t
;

63 
__mq
 *
	t__mqd_t
;

64 
__uöt32_t
 
	t__uid_t
;

65 
	t__u£c⁄ds_t
;

66 
	t__˝uwhich_t
;

67 
	t__˝uÀvñ_t
;

68 
	t__˝u£tid_t
;

88 
	t__˘_ru√_t
;

89 
__˘_ru√_t
 
	t__ru√_t
;

90 
__˘_ru√_t
 
	t__wch¨_t
;

91 
__˘_ru√_t
 
	t__wöt_t
;

93 
__uöt32_t
 
	t__dev_t
;

95 
__uöt32_t
 
	t__fix±_t
;

102 
	m__mb°©e8
[128];

103 
__öt64_t
 
	m_mb°©eL
;

104 } 
	t__mb°©e_t
;

	@/usr/include/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

40 
	#__BEGIN_DECLS
 "C" {

	)

41 
	#__END_DECLS
 }

	)

43 
	#__BEGIN_DECLS


	)

44 
	#__END_DECLS


	)

53 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

55 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

56 
	#__GNUCLIKE_ASM
 3

	)

57 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

59 
	#__GNUCLIKE_ASM
 2

	)

61 
	#__GNUCLIKE___TYPEOF
 1

	)

62 
	#__GNUCLIKE___OFFSETOF
 1

	)

63 
	#__GNUCLIKE___SECTION
 1

	)

65 #i‚de‡
__INTEL_COMPILER


66 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

69 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

70 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

71 && 
__INTEL_COMPILER
 < 800

72 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


75 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >3Ë&& !
deföed
(
__INTEL_COMPILER
)

76 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

77 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

78 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

81 #i‡
deföed
(
__GNUC__
)

82 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

85 #i‚de‡
__INTEL_COMPILER


86 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

87 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

90 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

93 
	#__CC_SUPPORTS_INLINE
 1

	)

94 
	#__CC_SUPPORTS___INLINE
 1

	)

95 
	#__CC_SUPPORTS___INLINE__
 1

	)

97 
	#__CC_SUPPORTS___FUNC__
 1

	)

98 
	#__CC_SUPPORTS_WARNING
 1

	)

100 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

102 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

109 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

110 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

111 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

113 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

128 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

129 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

130 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

131 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

132 
	#__STRING
(
x
Ë#x

	)

133 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

135 
	#__c⁄°
 c⁄°

	)

136 
	#__sig√d
 sig√d

	)

137 
	#__vﬁ©ûe
 vﬁ©ûe

	)

138 #i‡
deföed
(
__˝lu•lus
)

139 
	#__ölöe
 
ölöe


	)

141 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

142 
	#__ölöe


	)

147 
	#__P
(
¥Ÿos
Ë(Ë

	)

148 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

149 
	#__STRING
(
x
Ë"x"

	)

151 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

152 
	#__c⁄°


	)

153 
	#__ölöe


	)

154 
	#__sig√d


	)

155 
	#__vﬁ©ûe


	)

164 #i‚def 
NO_ANSI_KEYWORDS


165 c⁄°

	)

166 
	#ölöe


	)

167 sig√d

	)

168 vﬁ©ûe

	)

182 #ifde‡
löt


183 
	#__dód2


	)

184 
	#__puª2


	)

185 
	#__unu£d


	)

186 
	#__∑cked


	)

187 
	#__Æig√d
(
x
)

	)

188 
	#__£˘i⁄
(
x
)

	)

190 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

191 
	#__dód2


	)

192 
	#__puª2


	)

193 
	#__unu£d


	)

195 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

196 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

197 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

198 
	#__unu£d


	)

201 #i‡
__GNUC_PREREQ__
(2, 7)

202 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

203 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

204 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

205 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

206 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

207 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

208 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

210 #i‡
deföed
(
__INTEL_COMPILER
)

211 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

212 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

213 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

214 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

215 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

216 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

217 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

221 #i‡!
__GNUC_PREREQ__
(2, 95)

222 
	#__Æignof
(
x
Ë
	`__off£tof
(°ru˘ { 
__a
; x 
__b
; }, __b)

	)

228 #i‡
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

229 
	#_Alig«s
(
e
Ë
	`Æig«s
”)

	)

230 
	#_Alignof
(
e
Ë
	`Æignof
”)

	)

231 
	#_N‹ëu∫
 [[
n‹ëu∫
]]

	)

232 
	#_Sètic_as£π
(
e
, 
s
Ë
	`°©ic_as£π
”, s)

	)

234 
	#_Thªad_loˇl
 
__thªad


	)

235 #ñi‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

239 
	#_Alig«s
(
x
Ë
	`__Æig√d
(x)

	)

240 
	#_Alignof
(
x
Ë
	`__Æignof
(x)

	)

241 
	#_N‹ëu∫
 
__dód2


	)

242 
	#_Thªad_loˇl
 
__thªad


	)

243 #ifde‡
__COUNTER__


244 
	#_Sètic_as£π
(
x
, 
y
Ë
	`__Sètic_as£π
(x, 
__COUNTER__
)

	)

245 
	#__Sètic_as£π
(
x
, 
y
Ë
	`___Sètic_as£π
(x, y)

	)

246 
	#___Sètic_as£π
(
x
, 
y
Ë
	t__as£π_
 ## 
	ty
[(xË? 1 : -1]

	)

248 
	t_Sètic_as£π
(
	tx
, 
	ty
Ë
	t__hack


	)

261 #i‡
	tdeföed
(
	t__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

262 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

263 
	t_Gíîic
(
	tex¥
, 
	tt
: 
	tyes
, : 
	tno
)

	)

264 #ñi‡
	t__GNUC_PREREQ__
(3, 1Ë&& !
	tdeföed
(
	t__˝lu•lus
)

265 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

266 
	t__buûtö_choo£_ex¥
( \

267 
	t__buûtö_ty≥s_com∑tibÀ_p
(
	t__ty≥of
(
	tex¥
), 
	tt
), 
	tyes
, 
	tno
)

	)

270 #i‡
	t__GNUC_PREREQ__
(2, 96)

271 
	t__mÆloc_like
 
	t__©åibuã__
((
	t__mÆloc__
))

	)

272 
	t__puª
 
	t__©åibuã__
((
	t__puª__
))

	)

274 
	t__mÆloc_like


	)

275 
	t__puª


	)

278 #i‡
	t__GNUC_PREREQ__
(3, 1Ë|| (
	tdeföed
(
	t__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

279 
	t__Æways_ölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

281 
	t__Æways_ölöe


	)

284 #i‡
	t__GNUC_PREREQ__
(3, 1)

285 
	t__noölöe
 
	t__©åibuã__
 ((
	t__noölöe__
))

	)

287 
	t__noölöe


	)

290 #i‡
	t__GNUC_PREREQ__
(3, 3)

291 
	t__n⁄nuŒ
(
	tx
Ë
	t__©åibuã__
((
	t__n⁄nuŒ__
(x)))

	)

293 
	t__n⁄nuŒ
(
	tx
)

	)

296 #i‡
	t__GNUC_PREREQ__
(3, 4)

297 
	t__Á°ˇŒ
 
	t__©åibuã__
((
	t__Á°ˇŒ__
))

	)

299 
	t__Á°ˇŒ


	)

302 #i‡
	t__GNUC_PREREQ__
(4, 1)

303 
	t__ªtu∫s_twi˚
 
	t__©åibuã__
((
	t__ªtu∫s_twi˚__
))

	)

305 
	t__ªtu∫s_twi˚


	)

309 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

310 
	t__func__
 
	tNULL


	)

313 #i‡(
	tdeföed
(
	t__INTEL_COMPILER
Ë|| (deföed(
	t__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
	t__STRICT_ANSI__
Ë|| 
	t__STDC_VERSION__
 >= 199901

314 
	t__LONG_LONG_SUPPORTED


	)

318 #i‡
	tdeföed
(
	t__˝lu•lus
) && __cplusplus >= 201103L

319 
	t__LONG_LONG_SUPPORTED


	)

320 #i‚def 
	t__STDC_LIMIT_MACROS


321 
	t__STDC_LIMIT_MACROS


	)

323 #i‚def 
	t__STDC_CONSTANT_MACROS


324 
	t__STDC_CONSTANT_MACROS


	)

334 #i‡!(
	t__GNUC__
 =2 && 
	t__GNUC_MINOR__
 == 95)

335 #i‡!
	tdeföed
(
	t__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
	tlöt
)

336 
	t__ª°ri˘


	)

338 
	t__ª°ri˘
 
	tª°ri˘


	)

370 #i‡
	t__GNUC_PREREQ__
(2, 96)

371 
	t__¥edi˘_åue
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 1)

	)

372 
	t__¥edi˘_Ál£
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 0)

	)

374 
	t__¥edi˘_åue
(
	texp
Ë”xp)

	)

375 
	t__¥edi˘_Ál£
(
	texp
Ë”xp)

	)

378 #i‡
	t__GNUC_PREREQ__
(4, 2)

379 
	t__hiddí
 
	t__©åibuã__
((
	t__visibûôy__
("hiddí")))

	)

380 
	t__exp‹ãd
 
	t__©åibuã__
((
	t__visibûôy__
("deÁu…")))

	)

382 
	t__hiddí


	)

383 
	t__exp‹ãd


	)

390 #i‡
	t__GNUC_PREREQ__
(4, 1)

391 
	t__off£tof
(
	tty≥
, 
	tfõld
Ë
	t__buûtö_off£tof
—y≥, fõld)

	)

393 #i‚de‡
	t__˝lu•lus


394 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

395 ((
	t__size_t
)(
	t__uöçå_t
)((c⁄° vﬁ©ûê*)&((
	tty≥
 *)0)->
	tfõld
))

	)

397 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

398 (
	t__off£tof__
 (
	tªöãΩªt_ˇ°
 <
	t__size_t
> \

399 (&
	tªöãΩªt_ˇ°
 <const volatile &> \

400 (
	t°©ic_ˇ°
<
	tty≥
 *> (0)->
	tfõld
))))

	)

403 
	t__øngeof
(
	tty≥
, 
	t°¨t
, 
	tíd
) \

404 (
	t__off£tof
(
	tty≥
, 
	tíd
Ë- __off£tof—y≥, 
	t°¨t
))

	)

412 #i‡
	t__GNUC_PREREQ__
(3, 1)

413 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) ({ \

414 c⁄° vﬁ©ûê
	`__ty≥of
(((
s
 *)0)->
m
Ë*
__x
 = (
x
); \

415 
	`__DEQUALIFY
(
s
 *, (c⁄° vﬁ©ûê*)
__x
 - 
	`__off£tof
(s, 
m
));\

416 })

	)

418 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) \

419 
	t__DEQUALIFY
(
	ts
 *, (c⁄° vﬁ©ûê*)(
	tx
Ë- 
	t__off£tof
(s, 
	tm
))

	)

428 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

429 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

430 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

431 
	t__f‹m©_¨g
(
	tfmèrg
)

	)

432 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

433 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

435 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

436 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

437 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

438 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__sˇnf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

439 
	t__f‹m©_¨g
(
	tfmèrg
Ë
	t__©åibuã__
((
	t__f‹m©_¨g__
 (fmèrg)))

	)

440 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

441 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°rfm⁄__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

442 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

443 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°r·ime__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

447 #i‡
	t__FªeBSD_cc_vîsi⁄
 >300001 && 
	tdeföed
(
	t__GNUC__
Ë&& !deföed(
	t__INTEL_COMPILER
)

448 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

449 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf0__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

451 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

454 #i‡
	tdeföed
(
	t__GNUC__
Ë|| deföed(
	t__INTEL_COMPILER
)

455 #i‚de‡
	t__INTEL_COMPILER


456 
	t__°r⁄g_ª„ªn˚
(
	tsym
,
	tÆüssym
) \

457 
	t__ty≥of
 (
	tsym
Ë
	tÆüssym
 
	t__©åibuã__
 ((
	t__Æüs__
 (#sym)))

	)

459 #ifde‡
	t__STDC__


460 
	t__wók_ª„ªn˚
(
	tsym
,
	tÆüs
) \

461 
	t__asm__
(".weak " #alias); \

462 
	`__asm__
(".equ " #Æü†", " #sym)

	)

463 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

464 
	`__asm__
(".section .gnu.warning." #sym); \

465 
	`__asm__
(".asciz \"" 
msg
 "\""); \

466 
	`__asm__
(".¥evious")

	)

467 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

468 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

469 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

470 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

472 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

473 
	`__asm__
(".weakálias"); \

474 
	`__asm__
(".equálüs, sym")

	)

475 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

476 
	`__asm__
(".section .gnu.warning.sym"); \

477 
	`__asm__
(".asciz \"msg\""); \

478 
	`__asm__
(".¥evious")

	)

479 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

480 
	`__asm__
(".symvî im∂, sym@vîid")

	)

481 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

482 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

486 
	#__GLOBL1
(
sym
Ë
	`__asm__
(".glob»" #sym)

	)

487 
	#__GLOBL
(
sym
Ë
	`__GLOBL1
(sym)

	)

489 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

490 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

498 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

507 #i‚def 
__FBSDID


508 #i‡!
deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

509 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

511 
	#__FBSDID
(
s
Ë
__hack


	)

515 #i‚def 
__RCSID


516 #i‚def 
NO__RCSID


517 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

519 
	#__RCSID
(
s
Ë
__hack


	)

523 #i‚def 
__RCSID_SOURCE


524 #i‚def 
NO__RCSID_SOURCE


525 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

527 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

531 #i‚def 
__SCCSID


532 #i‚def 
NO__SCCSID


533 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

535 
	#__SCCSID
(
s
Ë
__hack


	)

539 #i‚def 
__COPYRIGHT


540 #i‚def 
NO__COPYRIGHT


541 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

543 
	#__COPYRIGHT
(
s
Ë
__hack


	)

547 #i‚def 
__DECONST


548 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° *)(v¨))

	)

551 #i‚def 
__DEVOLATILE


552 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(vﬁ©ûê*)(v¨))

	)

555 #i‚def 
__DEQUALIFY


556 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

583 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

584 #unde‡
_POSIX_C_SOURCE


585 
	#_POSIX_C_SOURCE
 199009

	)

589 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

590 #unde‡
_POSIX_C_SOURCE


591 
	#_POSIX_C_SOURCE
 199209

	)

595 #ifde‡
_XOPEN_SOURCE


596 #i‡
_XOPEN_SOURCE
 - 0 >= 700

597 
	#__XSI_VISIBLE
 700

	)

598 #unde‡
_POSIX_C_SOURCE


599 
	#_POSIX_C_SOURCE
 200809

	)

600 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

601 
	#__XSI_VISIBLE
 600

	)

602 #unde‡
_POSIX_C_SOURCE


603 
	#_POSIX_C_SOURCE
 200112

	)

604 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

605 
	#__XSI_VISIBLE
 500

	)

606 #unde‡
_POSIX_C_SOURCE


607 
	#_POSIX_C_SOURCE
 199506

	)

615 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

616 
	#_POSIX_C_SOURCE
 198808

	)

618 #ifde‡
_POSIX_C_SOURCE


619 #i‡
_POSIX_C_SOURCE
 >= 200809

620 
	#__POSIX_VISIBLE
 200809

	)

621 
	#__ISO_C_VISIBLE
 1999

	)

622 #ñi‡
_POSIX_C_SOURCE
 >= 200112

623 
	#__POSIX_VISIBLE
 200112

	)

624 
	#__ISO_C_VISIBLE
 1999

	)

625 #ñi‡
_POSIX_C_SOURCE
 >= 199506

626 
	#__POSIX_VISIBLE
 199506

	)

627 
	#__ISO_C_VISIBLE
 1990

	)

628 #ñi‡
_POSIX_C_SOURCE
 >= 199309

629 
	#__POSIX_VISIBLE
 199309

	)

630 
	#__ISO_C_VISIBLE
 1990

	)

631 #ñi‡
_POSIX_C_SOURCE
 >= 199209

632 
	#__POSIX_VISIBLE
 199209

	)

633 
	#__ISO_C_VISIBLE
 1990

	)

634 #ñi‡
_POSIX_C_SOURCE
 >= 199009

635 
	#__POSIX_VISIBLE
 199009

	)

636 
	#__ISO_C_VISIBLE
 1990

	)

638 
	#__POSIX_VISIBLE
 198808

	)

639 
	#__ISO_C_VISIBLE
 0

	)

654 #i‡
deföed
(
_ANSI_SOURCE
)

655 
	#__POSIX_VISIBLE
 0

	)

656 
	#__XSI_VISIBLE
 0

	)

657 
	#__BSD_VISIBLE
 0

	)

658 
	#__ISO_C_VISIBLE
 1990

	)

659 #ñi‡
deföed
(
_C99_SOURCE
)

660 
	#__POSIX_VISIBLE
 0

	)

661 
	#__XSI_VISIBLE
 0

	)

662 
	#__BSD_VISIBLE
 0

	)

663 
	#__ISO_C_VISIBLE
 1999

	)

665 
	#__POSIX_VISIBLE
 200809

	)

666 
	#__XSI_VISIBLE
 700

	)

667 
	#__BSD_VISIBLE
 1

	)

668 
	#__ISO_C_VISIBLE
 1999

	)

672 #i‚def 
__has_„©uª


673 
	#__has_„©uª
(
x
Ë0

	)

675 #i‚def 
__has_ö˛ude


676 
	#__has_ö˛ude
(
x
Ë0

	)

678 #i‚def 
__has_buûtö


679 
	#__has_buûtö
(
x
Ë0

	)

682 #i‡
deföed
(
__mùs
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__¨m__
)

683 
	#__NO_TLS
 1

	)

	@/usr/include/sys/ioccom.h

33 #i‚def 
_SYS_IOCCOM_H_


34 
	#_SYS_IOCCOM_H_


	)

41 
	#IOCPARM_SHIFT
 13

	)

42 
	#IOCPARM_MASK
 ((1 << 
IOCPARM_SHIFT
Ë- 1Ë

	)

43 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

44 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

45 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

47 
	#IOCPARM_MAX
 (1 << 
IOCPARM_SHIFT
Ë

	)

48 
	#IOC_VOID
 0x20000000

	)

49 
	#IOC_OUT
 0x40000000

	)

50 
	#IOC_IN
 0x80000000

	)

51 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

52 
	#IOC_DIRMASK
 (
IOC_VOID
|
IOC_OUT
|
IOC_IN
)

	)

54 
	#_IOC
(
öout
,
group
,
num
,
Àn
) (() \

55 ((
öout
Ë| (((
Àn
Ë& 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
)))

	)

56 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

57 
	#_IOWINT
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), ())

	)

58 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

59 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

61 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

63 #ifde‡
_KERNEL


65 #i‡
deföed
(
COMPAT_FREEBSD6
Ë|| deföed(
COMPAT_FREEBSD5
) || \

66 
deföed
(
COMPAT_FREEBSD4
Ë|| 
	$deföed
(
COMPAT_43
)

67 
	#IOCPARM_IVAL
(
x
Ë(()(
öçå_t
)(*)*(
ˇddr_t
 *)(*)(x))

	)

72 
	~<sys/cdefs.h
>

74 
__BEGIN_DECLS


75 
	`io˘l
(, , ...);

76 
__END_DECLS


	@/usr/include/sys/md5.h

28 #i‚de‡
_SYS_MD5_H_


29 
	#_SYS_MD5_H_


	)

31 
	#MD5_BLOCK_LENGTH
 64

	)

32 
	#MD5_DIGEST_LENGTH
 16

	)

33 
	#MD5_DIGEST_STRING_LENGTH
 (
MD5_DIGEST_LENGTH
 * 2 + 1)

	)

36 
	sMD5C⁄ãxt
 {

37 
u_öt32_t
 
	m°©e
[4];

38 
u_öt32_t
 
	mcou¡
[2];

39 
	mbuf„r
[64];

40 } 
	tMD5_CTX
;

42 
	~<sys/cdefs.h
>

44 
__BEGIN_DECLS


45 
MD5Inô
 (
MD5_CTX
 *);

46 
MD5Upd©e
 (
MD5_CTX
 *, const *, );

47 
MD5FöÆ
 ([16], 
MD5_CTX
 *);

48 * 
MD5End
(
MD5_CTX
 *, *);

49 * 
MD5Fûe
(const *, *);

50 * 
MD5FûeChunk
(c⁄° *, *, 
off_t
, off_t);

51 * 
MD5D©a
(const *, , *);

52 
	g__END_DECLS


	@/usr/include/sys/mount.h

33 #i‚de‡
_SYS_MOUNT_H_


34 
	#_SYS_MOUNT_H_


	)

36 
	~<sys/u¸ed.h
>

37 
	~<sys/queue.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/lock.h
>

40 
	~<sys/lockmgr.h
>

41 
	~<sys/_muãx.h
>

49 
	sfsid
 { 
öt32_t
 
	mvÆ
[2]; } 
	tfsid_t
;

55 
	#MAXFIDSZ
 16

	)

57 
	sfid
 {

58 
u_sh‹t
 
	mfid_Àn
;

59 
u_sh‹t
 
	mfid_d©a0
;

60 
	mfid_d©a
[
MAXFIDSZ
];

66 
	#MFSNAMELEN
 16

	)

67 
	#MNAMELEN
 88

	)

68 
	#STATFS_VERSION
 0x20030518

	)

69 
	s°©fs
 {

70 
uöt32_t
 
	mf_vîsi⁄
;

71 
uöt32_t
 
	mf_ty≥
;

72 
uöt64_t
 
	mf_Êags
;

73 
uöt64_t
 
	mf_bsize
;

74 
uöt64_t
 
	mf_iosize
;

75 
uöt64_t
 
	mf_blocks
;

76 
uöt64_t
 
	mf_b‰ì
;

77 
öt64_t
 
	mf_bavaû
;

78 
uöt64_t
 
	mf_fûes
;

79 
öt64_t
 
	mf_f‰ì
;

80 
uöt64_t
 
	mf_syncwrôes
;

81 
uöt64_t
 
	mf_asyncwrôes
;

82 
uöt64_t
 
	mf_syn¸óds
;

83 
uöt64_t
 
	mf_asyn¸óds
;

84 
uöt64_t
 
	mf_•¨e
[10];

85 
uöt32_t
 
	mf_«memax
;

86 
uid_t
 
	mf_ow√r
;

87 
fsid_t
 
	mf_fsid
;

88 
	mf_ch¨•¨e
[80];

89 
	mf_f°y≥«me
[
MFSNAMELEN
];

90 
	mf_m¡‰om«me
[
MNAMELEN
];

91 
	mf_m¡⁄«me
[
MNAMELEN
];

94 #ifde‡
_KERNEL


95 
	#OMFSNAMELEN
 16

	)

96 
	#OMNAMELEN
 (88 - 2 * ()Ë

	)

100 
	so°©fs
 {

101 
	mf_•¨e2
;

102 
	mf_bsize
;

103 
	mf_iosize
;

104 
	mf_blocks
;

105 
	mf_b‰ì
;

106 
	mf_bavaû
;

107 
	mf_fûes
;

108 
	mf_f‰ì
;

109 
fsid_t
 
	mf_fsid
;

110 
uid_t
 
	mf_ow√r
;

111 
	mf_ty≥
;

112 
	mf_Êags
;

113 
	mf_syncwrôes
;

114 
	mf_asyncwrôes
;

115 
	mf_f°y≥«me
[
OMFSNAMELEN
];

116 
	mf_m¡⁄«me
[
OMNAMELEN
];

117 
	mf_syn¸óds
;

118 
	mf_asyn¸óds
;

119 
	mf_•¨es1
;

120 
	mf_m¡‰om«me
[
OMNAMELEN
];

121 
	mf_•¨es2
;

127 
	mf_•¨e
[2];

130 
TAILQ_HEAD
(
vnodñ°
, 
vnode
);

133 
TAILQ_HEAD
(
vfs›éi°
, 
vfs›t
);

134 
	svfs›t
 {

135 
TAILQ_ENTRY
(
vfs›t
Ë
	mlök
;

136 *
	m«me
;

137 *
	mvÆue
;

138 
	mÀn
;

139 
	mpos
;

140 
	m£í
;

156 
	smou¡
 {

157 
mtx
 
	mm¡_mtx
;

158 
	mm¡_gí
;

159 
	#m¡_°¨tzîo
 
m¡_li°


	)

160 
TAILQ_ENTRY
(
mou¡
Ë
	mm¡_li°
;

161 
vfs›s
 *
	mm¡_›
;

162 
vfsc⁄f
 *
	mm¡_vfc
;

163 
vnode
 *
	mm¡_vnodecovîed
;

164 
vnode
 *
	mm¡_syn˚r
;

165 
	mm¡_ªf
;

166 
vnodñ°
 
	mm¡_nvnodñi°
;

167 
	mm¡_nvnodñi°size
;

168 
vnodñ°
 
	mm¡_a˘ivevnodñi°
;

169 
	mm¡_a˘ivevnodñi°size
;

170 
	mm¡_wrôe›cou¡
;

171 
	mm¡_kîn_Êag
;

172 
uöt64_t
 
	mm¡_Êag
;

173 
u_öt
 
	mm¡_∑d_nﬂsync
;

174 
vfs›éi°
 *
	mm¡_›t
;

175 
vfs›éi°
 *
	mm¡_›äew
;

176 
	mm¡_maxsymlökÀn
;

177 
°©fs
 
	mm¡_°©
;

178 
u¸ed
 *
	mm¡_¸ed
;

179 * 
	mm¡_d©a
;

180 
time_t
 
	mm¡_time
;

181 
	mm¡_iosize_max
;

182 
√ãxp‹t
 *
	mm¡_exp‹t
;

183 
œbñ
 *
	mm¡_œbñ
;

184 
u_öt
 
	mm¡_hash£ed
;

185 
	mm¡_lockªf
;

186 
	mm¡_£c⁄d¨y_wrôes
;

187 
	mm¡_£c⁄d¨y_accwrôes
;

188 
thªad
 *
	mm¡_su•_ow√r
;

189 
	#m¡_ídzîo
 
m¡_gj¥ovidî


	)

190 *
	mm¡_gj¥ovidî
;

191 
lock
 
	mm¡_ex∂ock
;

192 
TAILQ_ENTRY
(
mou¡
Ë
	mm¡_uµî_lök
;

193 
TAILQ_HEAD
(, 
mou¡
Ë
	mm¡_uµîs
;

199 
vnode
 *
__m¡_vnode_√xt_Æl
(vnodê**
mvp
, 
mou¡
 *
mp
);

200 
vnode
 *
__m¡_vnode_fú°_Æl
(vnodê**
mvp
, 
mou¡
 *
mp
);

201 
__m¡_vnode_m¨kî‰ì_Æl
(
vnode
 **
mvp
, 
mou¡
 *
mp
);

203 
	#MNT_VNODE_FOREACH_ALL
(
vp
, 
mp
, 
mvp
) \

204 
vp
 = 
	`__m¡_vnode_fú°_Æl
(&(
mvp
), (
mp
)); \

205 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt_Æl
(&(
mvp
), (
mp
)))

	)

207 
	#MNT_VNODE_FOREACH_ALL_ABORT
(
mp
, 
mvp
) \

209 
	`MNT_ILOCK
(
mp
); \

210 
	`__m¡_vnode_m¨kî‰ì_Æl
(&(
mvp
), (
mp
)); \

212 
	`mtx_as£π
(
	`MNT_MTX
(
mp
), 
MA_NOTOWNED
); \

213 } 0)

	)

218 
vnode
 *
__m¡_vnode_√xt_a˘ive
(vnodê**
mvp
, 
mou¡
 *
mp
);

219 
vnode
 *
__m¡_vnode_fú°_a˘ive
(vnodê**
mvp
, 
mou¡
 *
mp
);

220 
__m¡_vnode_m¨kî‰ì_a˘ive
(
vnode
 **
mvp
, 
mou¡
 *);

222 
	#MNT_VNODE_FOREACH_ACTIVE
(
vp
, 
mp
, 
mvp
) \

223 
vp
 = 
	`__m¡_vnode_fú°_a˘ive
(&(
mvp
), (
mp
)); \

224 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt_a˘ive
(&(
mvp
), (
mp
)))

	)

226 
	#MNT_VNODE_FOREACH_ACTIVE_ABORT
(
mp
, 
mvp
) \

227 
	`__m¡_vnode_m¨kî‰ì_a˘ive
(&(
mvp
), (
mp
))

	)

234 
vnode
 *
__m¡_vnode_√xt
(vnodê**
mvp
, 
mou¡
 *
mp
);

235 
vnode
 *
__m¡_vnode_fú°
(vnodê**
mvp
, 
mou¡
 *
mp
);

236 
__m¡_vnode_m¨kî‰ì
(
vnode
 **
mvp
, 
mou¡
 *
mp
);

238 
	#MNT_VNODE_FOREACH
(
vp
, 
mp
, 
mvp
) \

239 
vp
 = 
	`__m¡_vnode_fú°
(&(
mvp
), (
mp
)); \

240 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt
(&(
mvp
), (
mp
)))

	)

242 
	#MNT_VNODE_FOREACH_ABORT_ILOCKED
(
mp
, 
mvp
) \

243 
	`__m¡_vnode_m¨kî‰ì
(&(
mvp
), (
mp
))

	)

245 
	#MNT_VNODE_FOREACH_ABORT
(
mp
, 
mvp
) \

247 
	`MNT_ILOCK
(
mp
); \

248 
	`MNT_VNODE_FOREACH_ABORT_ILOCKED
(
mp
, 
mvp
); \

249 
	`MNT_IUNLOCK
(
mp
); \

250 } 0)

	)

252 
	#MNT_ILOCK
(
mp
Ë
	`mtx_lock
(&(mp)->
m¡_mtx
)

	)

253 
	#MNT_ITRYLOCK
(
mp
Ë
	`mtx_åylock
(&(mp)->
m¡_mtx
)

	)

254 
	#MNT_IUNLOCK
(
mp
Ë
	`mtx_u∆ock
(&(mp)->
m¡_mtx
)

	)

255 
	#MNT_MTX
(
mp
Ë(&(mp)->
m¡_mtx
)

	)

256 
	#MNT_REF
(
mp
Ë(mp)->
m¡_ªf
++

	)

257 
	#MNT_REL
(
mp
) do { \

258 
	`KASSERT
((
mp
)->
m¡_ªf
 > 0, ("negative mnt_ref")); \

259 (
mp
)->
m¡_ªf
--; \

260 i‡((
mp
)->
m¡_ªf
 == 0) \

261 
	`wakeup
((
mp
)); \

262 } 0)

	)

269 
	#MNT_RDONLY
 0x0000000000000001ULL

	)

270 
	#MNT_SYNCHRONOUS
 0x0000000000000002ULL

	)

271 
	#MNT_NOEXEC
 0x0000000000000004ULL

	)

272 
	#MNT_NOSUID
 0x0000000000000008ULL

	)

273 
	#MNT_NFS4ACLS
 0x0000000000000010ULL

	)

274 
	#MNT_UNION
 0x0000000000000020ULL

	)

275 
	#MNT_ASYNC
 0x0000000000000040ULL

	)

276 
	#MNT_SUIDDIR
 0x0000000000100000ULL

	)

277 
	#MNT_SOFTDEP
 0x0000000000200000ULL

	)

278 
	#MNT_NOSYMFOLLOW
 0x0000000000400000ULL

	)

279 
	#MNT_GJOURNAL
 0x0000000002000000ULL

	)

280 
	#MNT_MULTILABEL
 0x0000000004000000ULL

	)

281 
	#MNT_ACLS
 0x0000000008000000ULL

	)

282 
	#MNT_NOATIME
 0x0000000010000000ULL

	)

283 
	#MNT_NOCLUSTERR
 0x0000000040000000ULL

	)

284 
	#MNT_NOCLUSTERW
 0x0000000080000000ULL

	)

285 
	#MNT_SUJ
 0x0000000100000000ULL

	)

290 
	#MNT_EXRDONLY
 0x0000000000000080ULL

	)

291 
	#MNT_EXPORTED
 0x0000000000000100ULL

	)

292 
	#MNT_DEFEXPORTED
 0x0000000000000200ULL

	)

293 
	#MNT_EXPORTANON
 0x0000000000000400ULL

	)

294 
	#MNT_EXKERB
 0x0000000000000800ULL

	)

295 
	#MNT_EXPUBLIC
 0x0000000020000000ULL

	)

302 
	#MNT_LOCAL
 0x0000000000001000ULL

	)

303 
	#MNT_QUOTA
 0x0000000000002000ULL

	)

304 
	#MNT_ROOTFS
 0x0000000000004000ULL

	)

305 
	#MNT_USER
 0x0000000000008000ULL

	)

306 
	#MNT_IGNORE
 0x0000000000800000ULL

	)

313 
	#MNT_VISFLAGMASK
 (
MNT_RDONLY
 | 
MNT_SYNCHRONOUS
 | 
MNT_NOEXEC
 | \

314 
MNT_NOSUID
 | 
MNT_UNION
 | 
MNT_SUJ
 | \

315 
MNT_ASYNC
 | 
MNT_EXRDONLY
 | 
MNT_EXPORTED
 | \

316 
MNT_DEFEXPORTED
 | 
MNT_EXPORTANON
| 
MNT_EXKERB
 | \

317 
MNT_LOCAL
 | 
MNT_USER
 | 
MNT_QUOTA
 | \

318 
MNT_ROOTFS
 | 
MNT_NOATIME
 | 
MNT_NOCLUSTERR
| \

319 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | 
MNT_SOFTDEP
 | \

320 
MNT_IGNORE
 | 
MNT_EXPUBLIC
 | 
MNT_NOSYMFOLLOW
 | \

321 
MNT_GJOURNAL
 | 
MNT_MULTILABEL
 | 
MNT_ACLS
 | \

322 
MNT_NFS4ACLS
)

	)

325 
	#MNT_UPDATEMASK
 (
MNT_NOSUID
 | 
MNT_NOEXEC
 | \

326 
MNT_SYNCHRONOUS
 | 
MNT_UNION
 | 
MNT_ASYNC
 | \

327 
MNT_NOATIME
 | \

328 
MNT_NOSYMFOLLOW
 | 
MNT_IGNORE
 | \

329 
MNT_NOCLUSTERR
 | 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | \

330 
MNT_ACLS
 | 
MNT_USER
 | 
MNT_NFS4ACLS
)

	)

339 
	#MNT_UPDATE
 0x0000000000010000ULL

	)

340 
	#MNT_DELEXPORT
 0x0000000000020000ULL

	)

341 
	#MNT_RELOAD
 0x0000000000040000ULL

	)

342 
	#MNT_FORCE
 0x0000000000080000ULL

	)

343 
	#MNT_SNAPSHOT
 0x0000000001000000ULL

	)

344 
	#MNT_BYFSID
 0x0000000008000000ULL

	)

345 
	#MNT_CMDFLAGS
 (
MNT_UPDATE
 | 
MNT_DELEXPORT
 | 
MNT_RELOAD
 | \

346 
MNT_FORCE
 | 
MNT_SNAPSHOT
 | 
MNT_BYFSID
)

	)

363 
	#MNTK_UNMOUNTF
 0x00000001

	)

364 
	#MNTK_ASYNC
 0x00000002

	)

365 
	#MNTK_SOFTDEP
 0x00000004

	)

366 
	#MNTK_NOINSMNTQ
 0x00000008

	)

367 
	#MNTK_DRAINING
 0x00000010

	)

368 
	#MNTK_REFEXPIRE
 0x00000020

	)

369 
	#MNTK_EXTENDED_SHARED
 0x00000040

	)

370 
	#MNTK_SHARED_WRITES
 0x00000080

	)

371 
	#MNTK_NO_IOPF
 0x00000100

	)

374 
	#MNTK_VGONE_UPPER
 0x00000200

	)

375 
	#MNTK_VGONE_WAITER
 0x00000400

	)

376 
	#MNTK_LOOKUP_EXCL_DOTDOT
 0x00000800

	)

377 
	#MNTK_MARKER
 0x00001000

	)

378 
	#MNTK_UNMAPPED_BUFS
 0x00002000

	)

379 
	#MNTK_NOASYNC
 0x00800000

	)

380 
	#MNTK_UNMOUNT
 0x01000000

	)

381 
	#MNTK_MWAIT
 0x02000000

	)

382 
	#MNTK_SUSPEND
 0x08000000

	)

383 
	#MNTK_SUSPEND2
 0x04000000

	)

384 
	#MNTK_SUSPENDED
 0x10000000

	)

385 
	#MNTK_MPSAFE
 0x20000000

	)

386 
	#MNTK_LOOKUP_SHARED
 0x40000000

	)

387 
	#MNTK_NOKNOTE
 0x80000000

	)

389 
	#MNT_SHARED_WRITES
(
mp
Ë(((mpË!
NULL
) && \

390 ((
mp
)->
m¡_kîn_Êag
 & 
MNTK_SHARED_WRITES
))

	)

399 
	#VFS_VFSCONF
 0

	)

400 
	#VFS_GENERIC
 0

	)

406 
	#VFS_MAXTYPENUM
 1

	)

407 
	#VFS_CONF
 2

	)

415 
	#MNT_WAIT
 1

	)

416 
	#MNT_NOWAIT
 2

	)

417 
	#MNT_LAZY
 3

	)

418 
	#MNT_SUSPEND
 4

	)

423 
	sfh™dÀ
 {

424 
fsid_t
 
	mfh_fsid
;

425 
fid
 
	mfh_fid
;

427 
fh™dÀ
 
	tfh™dÀ_t
;

432 
	s€xp‹t_¨gs
 {

433 
	mex_Êags
;

434 
uid_t
 
	mex_roŸ
;

435 
xu¸ed
 
	mex_™⁄
;

436 
sockaddr
 *
	mex_addr
;

437 
u_ch¨
 
	mex_addæí
;

438 
sockaddr
 *
	mex_mask
;

439 
u_ch¨
 
	mex_maskÀn
;

440 *
	mex_ödexfûe
;

446 
	#MAXSECFLAVORS
 5

	)

447 
	sexp‹t_¨gs
 {

448 
	mex_Êags
;

449 
uid_t
 
	mex_roŸ
;

450 
xu¸ed
 
	mex_™⁄
;

451 
sockaddr
 *
	mex_addr
;

452 
u_ch¨
 
	mex_addæí
;

453 
sockaddr
 *
	mex_mask
;

454 
u_ch¨
 
	mex_maskÀn
;

455 *
	mex_ödexfûe
;

456 
	mex_num£cÊav‹s
;

457 
	mex_£cÊav‹s
[
MAXSECFLAVORS
];

464 
	snfs_public
 {

465 
	m≈_vÆid
;

466 
fh™dÀ_t
 
	m≈_h™dÀ
;

467 
mou¡
 *
	m≈_mou¡
;

468 *
	m≈_ödex
;

478 
	svfsc⁄f
 {

479 
u_öt
 
	mvfc_vîsi⁄
;

480 
	mvfc_«me
[
MFSNAMELEN
];

481 
vfs›s
 *
	mvfc_vfs›s
;

482 
	mvfc_ty≥num
;

483 
	mvfc_ªfcou¡
;

484 
	mvfc_Êags
;

485 
vfs›tde˛
 *
	mvfc_›ts
;

486 
TAILQ_ENTRY
(
vfsc⁄f
Ë
	mvfc_li°
;

490 
	sxvfsc⁄f
 {

491 
vfs›s
 *
	mvfc_vfs›s
;

492 
	mvfc_«me
[
MFSNAMELEN
];

493 
	mvfc_ty≥num
;

494 
	mvfc_ªfcou¡
;

495 
	mvfc_Êags
;

496 
vfsc⁄f
 *
	mvfc_√xt
;

499 #i‚de‡
BURN_BRIDGES


500 
	sovfsc⁄f
 {

501 *
	mvfc_vfs›s
;

502 
	mvfc_«me
[32];

503 
	mvfc_ödex
;

504 
	mvfc_ªfcou¡
;

505 
	mvfc_Êags
;

513 
	#VFCF_STATIC
 0x00010000

	)

514 
	#VFCF_NETWORK
 0x00020000

	)

515 
	#VFCF_READONLY
 0x00040000

	)

516 
	#VFCF_SYNTHETIC
 0x00080000

	)

517 
	#VFCF_LOOPBACK
 0x00100000

	)

518 
	#VFCF_UNICODE
 0x00200000

	)

519 
	#VFCF_JAIL
 0x00400000

	)

520 
	#VFCF_DELEGADMIN
 0x00800000

	)

521 
	#VFCF_SBDRY
 0x01000000

	)

523 
uöt32_t
 
	tfs˘l›_t
;

525 
	svfsid˘l
 {

526 
	mvc_vîs
;

527 
fsid_t
 
	mvc_fsid
;

528 
	mvc_f°y≥«me
[
MFSNAMELEN
];

530 
fs˘l›_t
 
	mvc_›
;

531 *
	mvc_±r
;

532 
size_t
 
	mvc_Àn
;

533 
u_öt32_t
 
	mvc_•¨e
[12];

537 
	#VFS_CTL_VERS1
 0x01

	)

546 
	#VFS_CTL_QUERY
 0x00010001

	)

547 
	#VFS_CTL_TIMEO
 0x00010002

	)

548 
	#VFS_CTL_NOLOCKS
 0x00010003

	)

550 
	svfsquîy
 {

551 
u_öt32_t
 
	mvq_Êags
;

552 
u_öt32_t
 
	mvq_•¨e
[31];

556 
	#VQ_NOTRESP
 0x0001

	)

557 
	#VQ_NEEDAUTH
 0x0002

	)

558 
	#VQ_LOWDISK
 0x0004

	)

559 
	#VQ_MOUNT
 0x0008

	)

560 
	#VQ_UNMOUNT
 0x0010

	)

561 
	#VQ_DEAD
 0x0020

	)

562 
	#VQ_ASSIST
 0x0040

	)

564 
	#VQ_NOTRESPLOCK
 0x0080

	)

565 
	#VQ_FLAG0100
 0x0100

	)

566 
	#VQ_FLAG0200
 0x0200

	)

567 
	#VQ_FLAG0400
 0x0400

	)

568 
	#VQ_FLAG0800
 0x0800

	)

569 
	#VQ_FLAG1000
 0x1000

	)

570 
	#VQ_FLAG2000
 0x2000

	)

571 
	#VQ_FLAG4000
 0x4000

	)

572 
	#VQ_FLAG8000
 0x8000

	)

574 #ifde‡
_KERNEL


576 
	#VCTLTOREQ
(
vc
, 
ªq
) \

578 (
ªq
)->
√w±r
 = (
vc
)->
vc_±r
; \

579 (
ªq
)->
√wÀn
 = (
vc
)->
vc_Àn
; \

580 (
ªq
)->
√widx
 = 0; \

581 } 0)

	)

584 
	giovec
;

585 
	guio
;

587 #ifde‡
_KERNEL


592 
	#MBF_NOWAIT
 0x01

	)

593 
	#MBF_MNTLSTLOCK
 0x02

	)

594 
	#MBF_MASK
 (
MBF_NOWAIT
 | 
MBF_MNTLSTLOCK
)

	)

596 #ifde‡
MALLOC_DECLARE


597 
MALLOC_DECLARE
(
M_MOUNT
);

599 
maxvfsc⁄f
;

600 
nfs_mou¡_ty≥
;

602 
TAILQ_HEAD
(
vfsc⁄fhód
, 
vfsc⁄f
);

603 
vfsc⁄fhód
 
vfsc⁄f
;

608 
	gmou¡_¨gs
;

609 
	g«meid©a
;

610 
	gsys˘l_ªq
;

611 
	gm¡¨g
;

613 
	tvfs_cmou¡_t
(
	tm¡¨g
 *
	tma
, *
	td©a
, 
	tuöt64_t
 
	tÊags
);

614 
	tvfs_unmou¡_t
(
	tmou¡
 *
	tmp
, 
	tm¡Êags
);

615 
	tvfs_roŸ_t
(
	tmou¡
 *
	tmp
, 
	tÊags
, 
	tvnode
 **
	tvµ
);

616 
	tvfs_quŸa˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmds
, 
	tuid_t
 
	tuid
, *
	t¨g
);

617 
	tvfs_°©fs_t
(
	tmou¡
 *
	tmp
, 
	t°©fs
 *
	tsbp
);

618 
	tvfs_sync_t
(
	tmou¡
 *
	tmp
, 
	twaôf‹
);

619 
	tvfs_vgë_t
(
	tmou¡
 *
	tmp
, 
	töo_t
 
	töo
, 
	tÊags
,

620 
	tvnode
 **
	tvµ
);

621 
	tvfs_fhtovp_t
(
	tmou¡
 *
	tmp
, 
	tfid
 *
	tfhp
,

622 
	tÊags
, 
	tvnode
 **
	tvµ
);

623 
	tvfs_checkexp_t
(
	tmou¡
 *
	tmp
, 
	tsockaddr
 *
	t«m
,

624 *
	textÊag•
, 
	tu¸ed
 **
	t¸ed™⁄p
,

625 *
	tnum£cÊav‹s
, **
	t£cÊav‹s
);

626 
	tvfs_öô_t
(
	tvfsc⁄f
 *);

627 
	tvfs_unöô_t
(
	tvfsc⁄f
 *);

628 
	tvfs_exèâr˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmd
,

629 
	tvnode
 *
	tfûíame_vp
, 
	t©å«me•a˚
,

630 c⁄° *
	t©å«me
);

631 
	tvfs_mou¡_t
(
	tmou¡
 *
	tmp
);

632 
	tvfs_sys˘l_t
(
	tmou¡
 *
	tmp
, 
	tfs˘l›_t
 
	t›
,

633 
	tsys˘l_ªq
 *
	tªq
);

634 
	tvfs_su•_˛ón_t
(
	tmou¡
 *
	tmp
);

635 
	tvfs_nŸify_lowîvp_t
(
	tmou¡
 *
	tmp
, 
	tvnode
 *
	tlowîvp
);

637 
	svfs›s
 {

638 
vfs_mou¡_t
 *
	mvfs_mou¡
;

639 
vfs_cmou¡_t
 *
	mvfs_cmou¡
;

640 
vfs_unmou¡_t
 *
	mvfs_unmou¡
;

641 
vfs_roŸ_t
 *
	mvfs_roŸ
;

642 
vfs_quŸa˘l_t
 *
	mvfs_quŸa˘l
;

643 
vfs_°©fs_t
 *
	mvfs_°©fs
;

644 
vfs_sync_t
 *
	mvfs_sync
;

645 
vfs_vgë_t
 *
	mvfs_vgë
;

646 
vfs_fhtovp_t
 *
	mvfs_fhtovp
;

647 
vfs_checkexp_t
 *
	mvfs_checkexp
;

648 
vfs_öô_t
 *
	mvfs_öô
;

649 
vfs_unöô_t
 *
	mvfs_unöô
;

650 
vfs_exèâr˘l_t
 *
	mvfs_exèâr˘l
;

651 
vfs_sys˘l_t
 *
	mvfs_sys˘l
;

652 
vfs_su•_˛ón_t
 *
	mvfs_su•_˛ón
;

653 
vfs_nŸify_lowîvp_t
 *
	mvfs_ª˛aim_lowîvp
;

654 
vfs_nŸify_lowîvp_t
 *
	mvfs_u∆ök_lowîvp
;

657 
vfs_°©fs_t
 
	g__vfs_°©fs
;

659 
	#VFS_NEEDSGIANT_
(
MP
) \

660 ((
MP
Ë!
NULL
 && ((MP)->
m¡_kîn_Êag
 & 
MNTK_MPSAFE
Ë=0)

	)

662 
	#VFS_NEEDSGIANT
(
MP
Ë
__exãnsi⁄__
 \

664 
mou¡
 *
_mp
; \

665 
_mp
 = (
MP
); \

666 
	`VFS_NEEDSGIANT_
(
_mp
); \

667 })

	)

669 
	#VFS_LOCK_GIANT
(
MP
Ë
__exãnsi⁄__
 \

671 
_locked
; \

672 
mou¡
 *
_mp
; \

673 
_mp
 = (
MP
); \

674 i‡(
	`VFS_NEEDSGIANT_
(
_mp
)) { \

675 
	`mtx_lock
(&
Gü¡
); \

676 
_locked
 = 1; \

678 
_locked
 = 0; \

679 
_locked
; \

680 })

	)

681 
	#VFS_UNLOCK_GIANT
(
locked
) do \

683 i‡((
locked
)) \

684 
	`mtx_u∆ock
(&
Gü¡
); \

685 } 0)

	)

686 
	#VFS_ASSERT_GIANT
(
MP
) do \

688 
mou¡
 *
_mp
; \

689 
_mp
 = (
MP
); \

690 i‡(
	`VFS_NEEDSGIANT_
(
_mp
)) \

691 
	`mtx_as£π
(&
Gü¡
, 
MA_OWNED
); \

692 } 0)

	)

694 
	#VFS_PROLOGUE
(
MP
) do { \

695 
_íabÀ_°›s
; \

697 
_íabÀ_°›s
 = ((
MP
Ë!
NULL
 && \

698 ((
MP
)->
m¡_vfc
->
vfc_Êags
 & 
VFCF_SBDRY
Ë&& 
	`sigde„r°›
())

	)

700 
	#VFS_EPILOGUE
(
MP
) \

701 i‡(
_íabÀ_°›s
) \

702 
	`sigÆlow°›
(); \

703 } 0)

	)

705 
	#VFS_MOUNT
(
MP
) ({ \

706 
_rc
; \

708 
	`VFS_PROLOGUE
(
MP
); \

709 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_mou¡
)(MP); \

710 
	`VFS_EPILOGUE
(
MP
); \

711 
_rc
; })

	)

713 
	#VFS_UNMOUNT
(
MP
, 
FORCE
) ({ \

714 
_rc
; \

716 
	`VFS_PROLOGUE
(
MP
); \

717 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_unmou¡
)(MP, 
FORCE
); \

718 
	`VFS_EPILOGUE
(
MP
); \

719 
_rc
; })

	)

721 
	#VFS_ROOT
(
MP
, 
FLAGS
, 
VPP
) ({ \

722 
_rc
; \

724 
	`VFS_PROLOGUE
(
MP
); \

725 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_roŸ
)(MP, 
FLAGS
, 
VPP
); \

726 
	`VFS_EPILOGUE
(
MP
); \

727 
_rc
; })

	)

729 
	#VFS_QUOTACTL
(
MP
, 
C
, 
U
, 
A
) ({ \

730 
_rc
; \

732 
	`VFS_PROLOGUE
(
MP
); \

733 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_quŸa˘l
)(MP, 
C
, 
U
, 
A
); \

734 
	`VFS_EPILOGUE
(
MP
); \

735 
_rc
; })

	)

737 
	#VFS_STATFS
(
MP
, 
SBP
) ({ \

738 
_rc
; \

740 
	`VFS_PROLOGUE
(
MP
); \

741 
_rc
 = 
	`__vfs_°©fs
((
MP
), (
SBP
)); \

742 
	`VFS_EPILOGUE
(
MP
); \

743 
_rc
; })

	)

745 
	#VFS_SYNC
(
MP
, 
WAIT
) ({ \

746 
_rc
; \

748 
	`VFS_PROLOGUE
(
MP
); \

749 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_sync
)(MP, 
WAIT
); \

750 
	`VFS_EPILOGUE
(
MP
); \

751 
_rc
; })

	)

753 
	#VFS_VGET
(
MP
, 
INO
, 
FLAGS
, 
VPP
) ({ \

754 
_rc
; \

756 
	`VFS_PROLOGUE
(
MP
); \

757 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_vgë
)(MP, 
INO
, 
FLAGS
, 
VPP
); \

758 
	`VFS_EPILOGUE
(
MP
); \

759 
_rc
; })

	)

761 
	#VFS_FHTOVP
(
MP
, 
FIDP
, 
FLAGS
, 
VPP
) ({ \

762 
_rc
; \

764 
	`VFS_PROLOGUE
(
MP
); \

765 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_fhtovp
)(MP, 
FIDP
, 
FLAGS
, 
VPP
); \

766 
	`VFS_EPILOGUE
(
MP
); \

767 
_rc
; })

	)

769 
	#VFS_CHECKEXP
(
MP
, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
, 
SEC
) ({ \

770 
_rc
; \

772 
	`VFS_PROLOGUE
(
MP
); \

773 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_checkexp
)(MP, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
,\

774 
SEC
); \

775 
	`VFS_EPILOGUE
(
MP
); \

776 
_rc
; })

	)

778 
	#VFS_EXTATTRCTL
(
MP
, 
C
, 
FN
, 
NS
, 
N
) ({ \

779 
_rc
; \

781 
	`VFS_PROLOGUE
(
MP
); \

782 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_exèâr˘l
)(MP, 
C
, 
FN
, 
NS
, 
N
); \

783 
	`VFS_EPILOGUE
(
MP
); \

784 
_rc
; })

	)

786 
	#VFS_SYSCTL
(
MP
, 
OP
, 
REQ
) ({ \

787 
_rc
; \

789 
	`VFS_PROLOGUE
(
MP
); \

790 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_sys˘l
)(MP, 
OP
, 
REQ
); \

791 
	`VFS_EPILOGUE
(
MP
); \

792 
_rc
; })

	)

794 
	#VFS_SUSP_CLEAN
(
MP
) do { \

795 i‡(*(
MP
)->
m¡_›
->
vfs_su•_˛ón
 !
NULL
) { \

796 
	`VFS_PROLOGUE
(
MP
); \

797 (*(
MP
)->
m¡_›
->
vfs_su•_˛ón
)(MP); \

798 
	`VFS_EPILOGUE
(
MP
); \

800 } 0)

	)

802 
	#VFS_RECLAIM_LOWERVP
(
MP
, 
VP
) do { \

803 i‡(*(
MP
)->
m¡_›
->
vfs_ª˛aim_lowîvp
 !
NULL
) { \

804 
	`VFS_PROLOGUE
(
MP
); \

805 (*(
MP
)->
m¡_›
->
vfs_ª˛aim_lowîvp
)((MP), (
VP
)); \

806 
	`VFS_EPILOGUE
(
MP
); \

808 } 0)

	)

810 
	#VFS_UNLINK_LOWERVP
(
MP
, 
VP
) do { \

811 i‡(*(
MP
)->
m¡_›
->
vfs_u∆ök_lowîvp
 !
NULL
) { \

812 
	`VFS_PROLOGUE
(
MP
); \

813 (*(
MP
)->
m¡_›
->
vfs_u∆ök_lowîvp
)((MP), (
VP
)); \

814 
	`VFS_EPILOGUE
(
MP
); \

816 } 0)

	)

818 
	#VFS_KNOTE_LOCKED
(
vp
, 
höt
) do \

820 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

821 
	`VN_KNOTE
((
vp
), (
höt
), 
KNF_LISTLOCKED
); \

822 } 0)

	)

824 
	#VFS_KNOTE_UNLOCKED
(
vp
, 
höt
) do \

826 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

827 
	`VN_KNOTE
((
vp
), (
höt
), 0); \

828 } 0)

	)

830 
	#VFS_NOTIFY_UPPER_RECLAIM
 1

	)

831 
	#VFS_NOTIFY_UPPER_UNLINK
 2

	)

833 
	~<sys/moduÀ.h
>

838 
	#VFS_VERSION_00
 0x19660120

	)

839 
	#VFS_VERSION
 
VFS_VERSION_00


	)

841 
	#VFS_SET
(
vfs›s
, 
f¢ame
, 
Êags
) \

842 
vfsc⁄f
 
f¢ame
 ## 
_vfsc⁄f
 = { \

843 .
vfc_vîsi⁄
 = 
VFS_VERSION
, \

844 .
vfc_«me
 = #fsname, \

845 .
vfc_vfs›s
 = &
vfs›s
, \

846 .
vfc_ty≥num
 = -1, \

847 .
vfc_Êags
 = 
Êags
, \

849 
moduÀd©a_t
 
f¢ame
 ## 
_mod
 = { \

851 
vfs_modevít
, \

852 & 
f¢ame
 ## 
_vfsc⁄f
 \

854 
	`DECLARE_MODULE
(
f¢ame
, f¢amê## 
_mod
, 
SI_SUB_VFS
, 
SI_ORDER_MIDDLE
)

	)

856 *
mou¡roŸf¢ame
;

862 
dounmou¡
(
mou¡
 *, , 
thªad
 *);

864 
kî√l_mou¡
(
m¡¨g
 *
ma
, 
uöt64_t
 
Êags
);

865 
kî√l_vmou¡
(
Êags
, ...);

866 
m¡¨g
 *
mou¡_¨g
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

867 
m¡¨g
 *
mou¡_¨gb
(m¡¨g *
ma
, 
Êag
, c⁄° *
«me
);

868 
m¡¨g
 *
mou¡_¨gf
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
fmt
, ...);

869 
m¡¨g
 *
mou¡_¨gsu
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

870 
°©fs_sˇÀ_blocks
(
°©fs
 *
sf
, 
max_size
);

871 
vfsc⁄f
 *
vfs_by«me
(const *);

872 
vfsc⁄f
 *
vfs_by«me_kld
(c⁄° *, 
thªad
 *
td
, *);

873 
vfs_mou¡_de°roy
(
mou¡
 *);

874 
vfs_evít_sig«l
(
fsid_t
 *, 
u_öt32_t
, 
öçå_t
);

875 
vfs_‰ì›ts
(
vfs›éi°
 *
›ts
);

876 
vfs_dñëe›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

877 
vfs_buûd›ts
(
uio
 *
auio
, 
vfs›éi°
 **
›ti⁄s
);

878 
vfs_Êag›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, 
uöt64_t
 *
w
,

879 
uöt64_t
 
vÆ
);

880 
vfs_gë›t
(
vfs›éi°
 *, const *, **, *);

881 
vfs_gë›t_pos
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

882 *
vfs_gë›ts
(
vfs›éi°
 *, c⁄° *, *
îr‹
);

883 
vfs_c›y›t
(
vfs›éi°
 *, const *, *, );

884 
vfs_fûãr›t
(
vfs›éi°
 *, c⁄° **
ÀgÆ
);

885 
vfs_›ãº‹
(
vfs›éi°
 *
›ts
, c⁄° *
fmt
, ...);

886 
vfs_sˇn›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, c⁄° *
fmt
, ...);

887 
vfs_£t›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

888 
Àn
);

889 
vfs_£t›t_∑π
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

890 
Àn
);

891 
vfs_£t›ts
(
vfs›éi°
 *
›ts
, c⁄° *
«me
,

892 c⁄° *
vÆue
);

893 
	gvfs_£çublicfs


894 (
	gmou¡
 *, 
	g√ãxp‹t
 *, 
	gexp‹t_¨gs
 *);

895 
vfs_msync
(
mou¡
 *, );

896 
vfs_busy
(
mou¡
 *, );

897 
	gvfs_exp‹t


898 (
	gmou¡
 *, 
	gexp‹t_¨gs
 *);

899 
vfs_Æloˇã_syncvnode
(
mou¡
 *);

900 
vfs_dóŒoˇã_syncvnode
(
mou¡
 *);

901 
vfs_d⁄mou¡
(
thªad
 *
td
, 
uöt64_t
 
fsÊags
,

902 
uio
 *
fs›ti⁄s
);

903 
vfs_gë√wfsid
(
mou¡
 *);

904 
cdev
 *
vfs_gëroŸfsid
(
mou¡
 *);

905 
mou¡
 *
vfs_gëvfs
(
fsid_t
 *);

906 
mou¡
 *
vfs_busyfs
(
fsid_t
 *);

907 
vfs_modevít
(
moduÀ_t
, , *);

908 
vfs_mou¡_îr‹
(
mou¡
 *, const *, ...);

909 
vfs_mou¡roŸ
();

910 
vfs_mou¡ed‰om
(
mou¡
 *, c⁄° *
‰om
);

911 
vfs_nŸify_uµî
(
vnode
 *, );

912 
vfs_€xp‹t_c⁄v
(c⁄° 
€xp‹t_¨gs
 *
€xp
,

913 
exp‹t_¨gs
 *
exp
);

914 
vfs_ªf
(
mou¡
 *);

915 
vfs_ªl
(
mou¡
 *);

916 
mou¡
 *
vfs_mou¡_Æloc
(
vnode
 *, 
vfsc⁄f
 *, const *,

917 
u¸ed
 *);

918 
vfs_su£r
(
mou¡
 *, 
thªad
 *);

919 
vfs_unbusy
(
mou¡
 *);

920 
vfs_unmou¡Æl
();

921 
	$TAILQ_HEAD
(
m¡li°
, 
mou¡
Ë
mou¡li°
;

922 
mtx
 
mou¡li°_mtx
;

923 
nfs_public
 
nfs_pub
;

930 
vfs_roŸ_t
 
vfs_°droŸ
;

931 
vfs_quŸa˘l_t
 
vfs_°dquŸa˘l
;

932 
vfs_°©fs_t
 
vfs_°d°©fs
;

933 
vfs_sync_t
 
vfs_°dsync
;

934 
vfs_sync_t
 
vfs_°dnosync
;

935 
vfs_vgë_t
 
vfs_°dvgë
;

936 
vfs_fhtovp_t
 
vfs_°dfhtovp
;

937 
vfs_checkexp_t
 
vfs_°dcheckexp
;

938 
vfs_öô_t
 
vfs_°döô
;

939 
vfs_unöô_t
 
vfs_°dunöô
;

940 
vfs_exèâr˘l_t
 
vfs_°dexèâr˘l
;

941 
vfs_sys˘l_t
 
vfs_°dsys˘l
;

945 
	~<sys/cdefs.h
>

947 
°©
;

949 
__BEGIN_DECLS


950 
	`fh›í
(c⁄° 
fh™dÀ
 *, );

951 
	`fh°©
(c⁄° 
fh™dÀ
 *, 
°©
 *);

952 
	`fh°©fs
(c⁄° 
fh™dÀ
 *, 
°©fs
 *);

953 
	`f°©fs
(, 
°©fs
 *);

954 
	`gëfh
(c⁄° *, 
fh™dÀ_t
 *);

955 
	`gëfs°©
(
°©fs
 *, , );

956 
	`gëm¡öfo
(
°©fs
 **, );

957 
	`lgëfh
(c⁄° *, 
fh™dÀ_t
 *);

958 
	`mou¡
(const *, const *, , *);

959 
	`nmou¡
(
iovec
 *, , );

960 
	`°©fs
(c⁄° *, 
°©fs
 *);

961 
	`unmou¡
(const *, );

964 
	`gëvfsby«me
(c⁄° *, 
xvfsc⁄f
 *);

965 
__END_DECLS


	@/usr/include/sys/select.h

32 #i‚de‡
_SYS_SELECT_H_


33 
	#_SYS_SELECT_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<sys/_ty≥s.h
>

38 
	~<sys/_sig£t.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/time•ec.h
>

42 
	t__fd_mask
;

43 #i‡
__BSD_VISIBLE


44 
__fd_mask
 
	tfd_mask
;

47 #i‚de‡
_SIGSET_T_DECLARED


48 
	#_SIGSET_T_DECLARED


	)

49 
__sig£t_t
 
	tsig£t_t
;

58 #i‚def 
FD_SETSIZE


59 
	#FD_SETSIZE
 1024U

	)

62 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#NFDBITS
 
_NFDBITS


	)

67 #i‚de‡
_howm™y


68 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

71 
	sfd_£t
 {

72 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

73 } 
	tfd_£t
;

74 #i‡
__BSD_VISIBLE


75 
	#fds_bôs
 
__fds_bôs


	)

78 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

79 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

80 #i‡
__BSD_VISIBLE


81 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

83 
	#FD_ISSET
(
n
, 
p
Ë((’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“)Ë!0)

	)

84 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

85 
	#FD_ZERO
(
p
) do { \

86 
fd_£t
 *
_p
; \

87 
__size_t
 
_n
; \

89 
_p
 = (
p
); \

90 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

91 
_n
 > 0) \

92 
_p
->
__fds_bôs
[--
_n
] = 0; \

93 } 0)

	)

95 #i‚de‡
_KERNEL


97 
__BEGIN_DECLS


98 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

99 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

100 #i‚de‡
_SELECT_DECLARED


101 
	#_SELECT_DECLARED


	)

103 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

105 
	g__END_DECLS


	@/usr/include/sys/sockio.h

33 #i‚de‡
_SYS_SOCKIO_H_


34 
	#_SYS_SOCKIO_H_


	)

36 
	~<sys/ioccom.h
>

39 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

40 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

41 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

42 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

43 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

44 
	#SIOCSPGRP
 
	`_IOW
('s', 8, Ë

	)

45 
	#SIOCGPGRP
 
	`_IOR
('s', 9, Ë

	)

47 
	#SIOCADDRT
 
	`_IOW
('r', 10, 
‹ã¡ry
Ë

	)

48 
	#SIOCDELRT
 
	`_IOW
('r', 11, 
‹ã¡ry
Ë

	)

49 
	#SIOCGETVIFCNT
 
	`_IOWR
('r', 15, 
sioc_vif_ªq
)

	)

50 
	#SIOCGETSGCNT
 
	`_IOWR
('r', 16, 
sioc_sg_ªq
Ë

	)

52 
	#SIOCSIFADDR
 
	`_IOW
('i', 12, 
i‰eq
Ë

	)

53 
	#OSIOCGIFADDR
 
	`_IOWR
('i', 13, 
i‰eq
Ë

	)

54 
	#SIOCGIFADDR
 
	`_IOWR
('i', 33, 
i‰eq
Ë

	)

55 
	#SIOCSIFDSTADDR
 
	`_IOW
('i', 14, 
i‰eq
Ë

	)

56 
	#OSIOCGIFDSTADDR
 
	`_IOWR
('i', 15, 
i‰eq
Ë

	)

57 
	#SIOCGIFDSTADDR
 
	`_IOWR
('i', 34, 
i‰eq
Ë

	)

58 
	#SIOCSIFFLAGS
 
	`_IOW
('i', 16, 
i‰eq
Ë

	)

59 
	#SIOCGIFFLAGS
 
	`_IOWR
('i', 17, 
i‰eq
Ë

	)

60 
	#OSIOCGIFBRDADDR
 
	`_IOWR
('i', 18, 
i‰eq
Ë

	)

61 
	#SIOCGIFBRDADDR
 
	`_IOWR
('i', 35, 
i‰eq
Ë

	)

62 
	#SIOCSIFBRDADDR
 
	`_IOW
('i', 19, 
i‰eq
Ë

	)

63 
	#OSIOCGIFCONF
 
	`_IOWR
('i', 20, 
ifc⁄f
Ë

	)

64 
	#SIOCGIFCONF
 
	`_IOWR
('i', 36, 
ifc⁄f
Ë

	)

65 
	#OSIOCGIFNETMASK
 
	`_IOWR
('i', 21, 
i‰eq
Ë

	)

66 
	#SIOCGIFNETMASK
 
	`_IOWR
('i', 37, 
i‰eq
Ë

	)

67 
	#SIOCSIFNETMASK
 
	`_IOW
('i', 22, 
i‰eq
Ë

	)

68 
	#SIOCGIFMETRIC
 
	`_IOWR
('i', 23, 
i‰eq
Ë

	)

69 
	#SIOCSIFMETRIC
 
	`_IOW
('i', 24, 
i‰eq
Ë

	)

70 
	#SIOCDIFADDR
 
	`_IOW
('i', 25, 
i‰eq
Ë

	)

71 
	#SIOCAIFADDR
 
	`_IOW
('i', 26, 
iÁlü§eq
)

	)

73 
	#SIOCALIFADDR
 
	`_IOW
('i', 27, 
if_œddºeq
Ë

	)

74 
	#SIOCGLIFADDR
 
	`_IOWR
('i', 28, 
if_œddºeq
Ë

	)

75 
	#SIOCDLIFADDR
 
	`_IOW
('i', 29, 
if_œddºeq
Ë

	)

76 
	#SIOCSIFCAP
 
	`_IOW
('i', 30, 
i‰eq
Ë

	)

77 
	#SIOCGIFCAP
 
	`_IOWR
('i', 31, 
i‰eq
Ë

	)

78 
	#SIOCGIFINDEX
 
	`_IOWR
('i', 32, 
i‰eq
Ë

	)

79 
	#SIOCGIFMAC
 
	`_IOWR
('i', 38, 
i‰eq
Ë

	)

80 
	#SIOCSIFMAC
 
	`_IOW
('i', 39, 
i‰eq
Ë

	)

81 
	#SIOCSIFNAME
 
	`_IOW
('i', 40, 
i‰eq
Ë

	)

82 
	#SIOCSIFDESCR
 
	`_IOW
('i', 41, 
i‰eq
Ë

	)

83 
	#SIOCGIFDESCR
 
	`_IOWR
('i', 42, 
i‰eq
Ë

	)

85 
	#SIOCADDMULTI
 
	`_IOW
('i', 49, 
i‰eq
Ë

	)

86 
	#SIOCDELMULTI
 
	`_IOW
('i', 50, 
i‰eq
Ë

	)

87 
	#SIOCGIFMTU
 
	`_IOWR
('i', 51, 
i‰eq
Ë

	)

88 
	#SIOCSIFMTU
 
	`_IOW
('i', 52, 
i‰eq
Ë

	)

89 
	#SIOCGIFPHYS
 
	`_IOWR
('i', 53, 
i‰eq
Ë

	)

90 
	#SIOCSIFPHYS
 
	`_IOW
('i', 54, 
i‰eq
Ë

	)

91 
	#SIOCSIFMEDIA
 
	`_IOWR
('i', 55, 
i‰eq
Ë

	)

92 
	#SIOCGIFMEDIA
 
	`_IOWR
('i', 56, 
ifmedüªq
Ë

	)

94 
	#SIOCSIFGENERIC
 
	`_IOW
('i', 57, 
i‰eq
Ë

	)

95 
	#SIOCGIFGENERIC
 
	`_IOWR
('i', 58, 
i‰eq
Ë

	)

97 
	#SIOCGIFSTATUS
 
	`_IOWR
('i', 59, 
if°©
Ë

	)

98 
	#SIOCSIFLLADDR
 
	`_IOW
('i', 60, 
i‰eq
Ë

	)

100 
	#SIOCSIFPHYADDR
 
	`_IOW
('i', 70, 
iÁlü§eq
Ë

	)

101 
	#SIOCGIFPSRCADDR
 
	`_IOWR
('i', 71, 
i‰eq
Ë

	)

102 
	#SIOCGIFPDSTADDR
 
	`_IOWR
('i', 72, 
i‰eq
Ë

	)

103 
	#SIOCDIFPHYADDR
 
	`_IOW
('i', 73, 
i‰eq
Ë

	)

104 
	#SIOCSLIFPHYADDR
 
	`_IOW
('i', 74, 
if_œddºeq
Ë

	)

105 
	#SIOCGLIFPHYADDR
 
	`_IOWR
('i', 75, 
if_œddºeq
Ë

	)

107 
	#SIOCGPRIVATE_0
 
	`_IOWR
('i', 80, 
i‰eq
Ë

	)

108 
	#SIOCGPRIVATE_1
 
	`_IOWR
('i', 81, 
i‰eq
Ë

	)

110 
	#SIOCSIFVNET
 
	`_IOWR
('i', 90, 
i‰eq
Ë

	)

111 
	#SIOCSIFRVNET
 
	`_IOWR
('i', 91, 
i‰eq
Ë

	)

113 
	#SIOCGIFFIB
 
	`_IOWR
('i', 92, 
i‰eq
Ë

	)

114 
	#SIOCSIFFIB
 
	`_IOW
('i', 93, 
i‰eq
Ë

	)

116 
	#SIOCSDRVSPEC
 
	`_IOW
('i', 123, 
ifdrv
Ë

	)

118 
	#SIOCGDRVSPEC
 
	`_IOWR
('i', 123, 
ifdrv
Ë

	)

121 
	#SIOCIFCREATE
 
	`_IOWR
('i', 122, 
i‰eq
Ë

	)

122 
	#SIOCIFCREATE2
 
	`_IOWR
('i', 124, 
i‰eq
Ë

	)

123 
	#SIOCIFDESTROY
 
	`_IOW
('i', 121, 
i‰eq
Ë

	)

124 
	#SIOCIFGCLONERS
 
	`_IOWR
('i', 120, 
if_˛⁄îeq
Ë

	)

126 
	#SIOCAIFGROUP
 
	`_IOW
('i', 135, 
ifgrou¥eq
Ë

	)

127 
	#SIOCGIFGROUP
 
	`_IOWR
('i', 136, 
ifgrou¥eq
Ë

	)

128 
	#SIOCDIFGROUP
 
	`_IOW
('i', 137, 
ifgrou¥eq
Ë

	)

129 
	#SIOCGIFGMEMB
 
	`_IOWR
('i', 138, 
ifgrou¥eq
Ë

	)

	@/usr/include/sys/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

36 
	~<sys/_°döt.h
>

38 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

39 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

40 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

41 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

43 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

44 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

45 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

46 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

48 
__öt_Á°8_t
 
	töt_Á°8_t
;

49 
__öt_Á°16_t
 
	töt_Á°16_t
;

50 
__öt_Á°32_t
 
	töt_Á°32_t
;

51 
__öt_Á°64_t
 
	töt_Á°64_t
;

53 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

54 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

55 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

56 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

58 #i‚de‡
_INTMAX_T_DECLARED


59 
__ötmax_t
 
	tötmax_t
;

60 
	#_INTMAX_T_DECLARED


	)

62 #i‚de‡
_UINTMAX_T_DECLARED


63 
__uötmax_t
 
	tuötmax_t
;

64 
	#_UINTMAX_T_DECLARED


	)

68 #i‡
deföed
(
UINTPTR_MAX
Ë&& deföed(
UINT64_MAX
) && (UINTPTR_MAX == UINT64_MAX)

69 
	#__WORDSIZE
 64

	)

71 
	#__WORDSIZE
 32

	)

	@/usr/include/sys/timespec.h

34 #i‚de‡
_SYS_TIMESPEC_H_


35 
	#_SYS_TIMESPEC_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_time•ec.h
>

40 #i‡
__BSD_VISIBLE


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 } 0)

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 } 0)

	)

58 
	sôimî•ec
 {

59 
time•ec
 
	mô_öãrvÆ
;

60 
time•ec
 
	mô_vÆue
;

	@/usr/include/sys/ttycom.h

38 #i‚def 
_SYS_TTYCOM_H_


39 
	#_SYS_TTYCOM_H_


	)

41 
	~<sys/ioccom.h
>

52 
	swösize
 {

53 
	mws_row
;

54 
	mws_cﬁ
;

55 
	mws_xpixñ
;

56 
	mws_ypixñ
;

63 
	#TIOCEXCL
 
	`_IO
('t', 13Ë

	)

64 
	#TIOCNXCL
 
	`_IO
('t', 14Ë

	)

65 
	#TIOCGPTN
 
	`_IOR
('t', 15, Ë

	)

66 
	#TIOCFLUSH
 
	`_IOW
('t', 16, Ë

	)

68 
	#TIOCGETA
 
	`_IOR
('t', 19, 
ãrmios
Ë

	)

69 
	#TIOCSETA
 
	`_IOW
('t', 20, 
ãrmios
Ë

	)

70 
	#TIOCSETAW
 
	`_IOW
('t', 21, 
ãrmios
Ë

	)

71 
	#TIOCSETAF
 
	`_IOW
('t', 22, 
ãrmios
Ë

	)

73 
	#TIOCGETD
 
	`_IOR
('t', 26, Ë

	)

74 
	#TIOCSETD
 
	`_IOW
('t', 27, Ë

	)

75 
	#TIOCPTMASTER
 
	`_IO
('t', 28Ë

	)

77 
	#TIOCGDRAINWAIT
 
	`_IOR
('t', 86, Ë

	)

78 
	#TIOCSDRAINWAIT
 
	`_IOW
('t', 87, Ë

	)

81 
	#TIOCTIMESTAMP
 
	`_IOR
('t', 89, 
timevÆ
Ë

	)

83 
	#TIOCMGDTRWAIT
 
	`_IOR
('t', 90, Ë

	)

84 
	#TIOCMSDTRWAIT
 
	`_IOW
('t', 91, Ë

	)

87 
	#TIOCDRAIN
 
	`_IO
('t', 94Ë

	)

88 
	#TIOCSIG
 
	`_IOWINT
('t', 95Ë

	)

89 
	#TIOCEXT
 
	`_IOW
('t', 96, Ë

	)

90 
	#TIOCSCTTY
 
	`_IO
('t', 97Ë

	)

91 
	#TIOCCONS
 
	`_IOW
('t', 98, Ë

	)

92 
	#TIOCGSID
 
	`_IOR
('t', 99, Ë

	)

94 
	#TIOCSTAT
 
	`_IO
('t', 101Ë

	)

95 
	#TIOCUCNTL
 
	`_IOW
('t', 102, Ë

	)

96 
	#UIOCCMD
(
n
Ë
	`_IO
('u',ÇË

	)

97 
	#TIOCSWINSZ
 
	`_IOW
('t', 103, 
wösize
Ë

	)

98 
	#TIOCGWINSZ
 
	`_IOR
('t', 104, 
wösize
Ë

	)

100 
	#TIOCMGET
 
	`_IOR
('t', 106, Ë

	)

101 
	#TIOCM_LE
 0001

	)

102 
	#TIOCM_DTR
 0002

	)

103 
	#TIOCM_RTS
 0004

	)

104 
	#TIOCM_ST
 0010

	)

105 
	#TIOCM_SR
 0020

	)

106 
	#TIOCM_CTS
 0040

	)

107 
	#TIOCM_DCD
 0100

	)

108 
	#TIOCM_RI
 0200

	)

109 
	#TIOCM_DSR
 0400

	)

110 
	#TIOCM_CD
 
TIOCM_DCD


	)

111 
	#TIOCM_CAR
 
TIOCM_DCD


	)

112 
	#TIOCM_RNG
 
TIOCM_RI


	)

113 
	#TIOCMBIC
 
	`_IOW
('t', 107, Ë

	)

114 
	#TIOCMBIS
 
	`_IOW
('t', 108, Ë

	)

115 
	#TIOCMSET
 
	`_IOW
('t', 109, Ë

	)

116 
	#TIOCSTART
 
	`_IO
('t', 110Ë

	)

117 
	#TIOCSTOP
 
	`_IO
('t', 111Ë

	)

118 
	#TIOCPKT
 
	`_IOW
('t', 112, Ë

	)

119 
	#TIOCPKT_DATA
 0x00

	)

120 
	#TIOCPKT_FLUSHREAD
 0x01

	)

121 
	#TIOCPKT_FLUSHWRITE
 0x02

	)

122 
	#TIOCPKT_STOP
 0x04

	)

123 
	#TIOCPKT_START
 0x08

	)

124 
	#TIOCPKT_NOSTOP
 0x10

	)

125 
	#TIOCPKT_DOSTOP
 0x20

	)

126 
	#TIOCPKT_IOCTL
 0x40

	)

127 
	#TIOCNOTTY
 
	`_IO
('t', 113Ë

	)

128 
	#TIOCSTI
 
	`_IOW
('t', 114, Ë

	)

129 
	#TIOCOUTQ
 
	`_IOR
('t', 115, Ë

	)

131 
	#TIOCSPGRP
 
	`_IOW
('t', 118, Ë

	)

132 
	#TIOCGPGRP
 
	`_IOR
('t', 119, Ë

	)

133 
	#TIOCCDTR
 
	`_IO
('t', 120Ë

	)

134 
	#TIOCSDTR
 
	`_IO
('t', 121Ë

	)

135 
	#TIOCCBRK
 
	`_IO
('t', 122Ë

	)

136 
	#TIOCSBRK
 
	`_IO
('t', 123Ë

	)

139 
	#TTYDISC
 0

	)

140 
	#SLIPDISC
 4

	)

141 
	#PPPDISC
 5

	)

142 
	#NETGRAPHDISC
 6

	)

143 
	#H4DISC
 7

	)

	@/usr/include/sys/unistd.h

33 #i‚de‡
_SYS_UNISTD_H_


34 
	#_SYS_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

52 
	#_POSIX_ADVISORY_INFO
 200112L

	)

53 
	#_POSIX_ASYNCHRONOUS_IO
 0

	)

54 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_CLOCK_SELECTION
 (-1)

	)

56 
	#_POSIX_CPUTIME
 (-1)

	)

57 
	#_POSIX_FSYNC
 200112L

	)

58 
	#_POSIX_IPV6
 0

	)

59 
	#_POSIX_JOB_CONTROL
 1

	)

60 
	#_POSIX_MAPPED_FILES
 200112L

	)

61 
	#_POSIX_MEMLOCK
 (-1)

	)

62 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

63 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

64 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

65 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

66 
	#_POSIX_NO_TRUNC
 1

	)

67 
	#_POSIX_PRIORITIZED_IO
 (-1)

	)

68 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

69 
	#_POSIX_RAW_SOCKETS
 200112L

	)

70 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

71 
	#_POSIX_SEMAPHORES
 200112L

	)

72 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

73 
	#_POSIX_SPORADIC_SERVER
 (-1)

	)

74 
	#_POSIX_SYNCHRONIZED_IO
 (-1)

	)

75 
	#_POSIX_TIMEOUTS
 200112L

	)

76 
	#_POSIX_TIMERS
 200112L

	)

77 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1)

	)

78 
	#_POSIX_VDISABLE
 0xff

	)

80 #i‡
__XSI_VISIBLE


81 
	#_XOPEN_SHM
 1

	)

82 
	#_XOPEN_STREAMS
 (-1)

	)

92 #ifdef 
_NOT_AVAILABLE


93 
	#_POSIX_SAVED_IDS
 1

	)

97 
	#_POSIX_VERSION
 200112L

	)

100 
	#F_OK
 0

	)

101 
	#X_OK
 0x01

	)

102 
	#W_OK
 0x02

	)

103 
	#R_OK
 0x04

	)

106 #i‚de‡
SEEK_SET


107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

111 #i‡
__BSD_VISIBLE


112 
	#SEEK_DATA
 3

	)

113 
	#SEEK_HOLE
 4

	)

116 #i‚de‡
_POSIX_SOURCE


118 
	#L_SET
 
SEEK_SET


	)

119 
	#L_INCR
 
SEEK_CUR


	)

120 
	#L_XTND
 
SEEK_END


	)

124 
	#_PC_LINK_MAX
 1

	)

125 
	#_PC_MAX_CANON
 2

	)

126 
	#_PC_MAX_INPUT
 3

	)

127 
	#_PC_NAME_MAX
 4

	)

128 
	#_PC_PATH_MAX
 5

	)

129 
	#_PC_PIPE_BUF
 6

	)

130 
	#_PC_CHOWN_RESTRICTED
 7

	)

131 
	#_PC_NO_TRUNC
 8

	)

132 
	#_PC_VDISABLE
 9

	)

134 #i‡
__POSIX_VISIBLE
 >= 199309

135 
	#_PC_ASYNC_IO
 53

	)

136 
	#_PC_PRIO_IO
 54

	)

137 
	#_PC_SYNC_IO
 55

	)

140 #i‡
__POSIX_VISIBLE
 >= 200112

141 
	#_PC_ALLOC_SIZE_MIN
 10

	)

142 
	#_PC_FILESIZEBITS
 12

	)

143 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

144 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

145 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

146 
	#_PC_REC_XFER_ALIGN
 17

	)

147 
	#_PC_SYMLINK_MAX
 18

	)

150 #i‡
__BSD_VISIBLE


151 
	#_PC_ACL_EXTENDED
 59

	)

152 
	#_PC_ACL_PATH_MAX
 60

	)

153 
	#_PC_CAP_PRESENT
 61

	)

154 
	#_PC_INF_PRESENT
 62

	)

155 
	#_PC_MAC_PRESENT
 63

	)

156 
	#_PC_ACL_NFS4
 64

	)

160 
	#_PC_MIN_HOLE_SIZE
 21

	)

162 #i‡
__BSD_VISIBLE


168 
	#RFNAMEG
 (1<<0Ë

	)

169 
	#RFENVG
 (1<<1Ë

	)

170 
	#RFFDG
 (1<<2Ë

	)

171 
	#RFNOTEG
 (1<<3Ë

	)

172 
	#RFPROC
 (1<<4Ë

	)

173 
	#RFMEM
 (1<<5Ë

	)

174 
	#RFNOWAIT
 (1<<6Ë

	)

175 
	#RFCNAMEG
 (1<<10Ë

	)

176 
	#RFCENVG
 (1<<11Ë

	)

177 
	#RFCFDG
 (1<<12Ë

	)

178 
	#RFTHREAD
 (1<<13Ë

	)

179 
	#RFSIGSHARE
 (1<<14Ë

	)

180 
	#RFLINUXTHPN
 (1<<16Ë

	)

181 
	#RFSTOPPED
 (1<<17Ë

	)

182 
	#RFHIGHPID
 (1<<18Ë

	)

183 
	#RFTSIGZMB
 (1<<19Ë

	)

184 
	#RFTSIGSHIFT
 20

	)

185 
	#RFTSIGMASK
 0xFF

	)

186 
	#RFTSIGNUM
(
Êags
Ë(((ÊagsË>> 
RFTSIGSHIFT
Ë& 
RFTSIGMASK
)

	)

187 
	#RFTSIGFLAGS
(
signum
Ë((signumË<< 
RFTSIGSHIFT
)

	)

188 
	#RFPROCDESC
 (1<<28Ë

	)

189 
	#RFPPWAIT
 (1<<31Ë

	)

190 
	#RFFLAGS
 (
RFFDG
 | 
RFPROC
 | 
RFMEM
 | 
RFNOWAIT
 | 
RFCFDG
 | \

191 
RFTHREAD
 | 
RFSIGSHARE
 | 
RFLINUXTHPN
 | 
RFSTOPPED
 | 
RFHIGHPID
 | 
RFTSIGZMB
 | \

192 
RFPROCDESC
 | 
RFPPWAIT
)

	)

193 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
 | 
RFPROCDESC
)

	)

	@/usr/include/xlocale/_ctype.h

33 #if (
deföed
(
_XLOCALE_WCTYPES
Ë&& !deföed(
_XLOCALE_WCTYPE_H
)) || \

34 (!
deföed
(
_XLOCALE_WCTYPES
Ë&& !
	$deföed
(
_XLOCALE_CTYPE_H
))

36 #ifde‡
_XLOCALE_WCTYPES


37 
	#_XLOCALE_WCTYPE_H


	)

39 
	#_XLOCALE_CTYPE_H


	)

42 #i‚de‡
_LOCALE_T_DEFINED


43 
	#_LOCALE_T_DEFINED


	)

44 
_xloˇÀ
 *
	tloˇÀ_t
;

47 #i‚de‡
_XLOCALE_RUN_FUNCTIONS_DEFINED


48 
	#_XLOCALE_RUN_FUNCTIONS_DEFINED
 1

	)

49 
	$___ru√ty≥_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

50 
__˘_ru√_t
 
	$___tﬁowî_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

51 
__˘_ru√_t
 
	$___touµî_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

52 
_Ru√LoˇÀ
 *
	`__ru√s_f‹_loˇÀ
(
loˇÀ_t
, *);

55 #i‚de‡
_XLOCALE_INLINE


56 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

58 
	#_XLOCALE_INLINE
 
__ölöe


	)

61 #ifde‡
ölöe


62 
	#_XLOCALE_INLINE
 
__ölöe


	)

65 
	#_XLOCALE_INLINE
 
ölöe


	)

70 #ifde‡
_XLOCALE_WCTYPES


71 
_XLOCALE_INLINE
 

72 
	`__maskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

73 
_XLOCALE_INLINE
 

74 
	`__i°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

76 
_XLOCALE_INLINE
 

77 
	$__maskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

79 
__limô
;

80 
_Ru√LoˇÀ
 *
ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__loc
, &
__limô
);

81  ((
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥_l
(__c, 
__loc
) :

82 
ru√s
->
__ru√ty≥
[
__c
]Ë& 
__f
;

83 
	}
}

85 
_XLOCALE_INLINE
 

86 
	$__i°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

88  (!!
	`__maskru√_l
(
__c
, 
__f
, 
__loc
));

89 
	}
}

91 
	#XLOCALE_ISCTYPE
(
‚ame
, 
ˇt
) \

92 
_XLOCALE_INLINE
 
isw
##
‚ame
##
	`_l
(, 
loˇÀ_t
);\

93 
_XLOCALE_INLINE
 
isw
##
‚ame
##
	`_l
(
__c
, 
loˇÀ_t
 
__l
)\

94 {  
	`__i°y≥_l
(
__c
, 
ˇt
, 
__l
); }

	)

96 
_XLOCALE_INLINE
 

97 
__sbmaskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

98 
_XLOCALE_INLINE
 

99 
__sbi°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

101 
_XLOCALE_INLINE
 

102 
	$__sbmaskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

104 
__limô
;

105 
_Ru√LoˇÀ
 *
ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__loc
, &
__limô
);

106  (
__c
 < 0 || __¯>
__limô
) ? 0 :

107 
ru√s
->
__ru√ty≥
[
__c
] & 
__f
;

108 
	}
}

110 
_XLOCALE_INLINE
 

111 
	$__sbi°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

113  (!!
	`__sbmaskru√_l
(
__c
, 
__f
, 
__loc
));

114 
	}
}

116 
	#XLOCALE_ISCTYPE
(
__‚ame
, 
__ˇt
) \

117 
_XLOCALE_INLINE
 
is
##
__‚ame
##
	`_l
(, 
loˇÀ_t
); \

118 
_XLOCALE_INLINE
 
is
##
__‚ame
##
	`_l
(
__c
, 
loˇÀ_t
 
__l
)\

119 {  
	`__sbi°y≥_l
(
__c
, 
__ˇt
, 
__l
); }

	)

122 
XLOCALE_ISCTYPE
(
Ænum
, 
_CTYPE_A
|
_CTYPE_D
)

123 
	$XLOCALE_ISCTYPE
(
Æpha
, 
_CTYPE_A
)

124 
	$XLOCALE_ISCTYPE
(
bœnk
, 
_CTYPE_B
)

125 
	$XLOCALE_ISCTYPE
(
˙ål
, 
_CTYPE_C
)

126 
	$XLOCALE_ISCTYPE
(
digô
, 
_CTYPE_D
)

127 
	$XLOCALE_ISCTYPE
(
gøph
, 
_CTYPE_G
)

128 
	$XLOCALE_ISCTYPE
(
hexnumbî
, 
_CTYPE_X
)

129 
	$XLOCALE_ISCTYPE
(
ideogøm
, 
_CTYPE_I
)

130 
	$XLOCALE_ISCTYPE
(
lowî
, 
_CTYPE_L
)

131 
	$XLOCALE_ISCTYPE
(
numbî
, 
_CTYPE_D
)

132 
	$XLOCALE_ISCTYPE
(
ph⁄ogøm
, 
_CTYPE_Q
)

133 
	$XLOCALE_ISCTYPE
(
¥öt
, 
_CTYPE_R
)

134 
	$XLOCALE_ISCTYPE
(
pun˘
, 
_CTYPE_P
)

135 
	$XLOCALE_ISCTYPE
(
ru√
, 0xFFFFFF00L)

136 
	$XLOCALE_ISCTYPE
(
•a˚
, 
_CTYPE_S
)

137 
	$XLOCALE_ISCTYPE
(
•ecül
, 
_CTYPE_T
)

138 
	$XLOCALE_ISCTYPE
(
uµî
, 
_CTYPE_U
)

139 
	$XLOCALE_ISCTYPE
(
xdigô
, 
_CTYPE_X
)

140 #unde‡
XLOCALE_ISCTYPE


142 #ifde‡
_XLOCALE_WCTYPES


143 
_XLOCALE_INLINE
 
	`towlowî_l
(, 
loˇÀ_t
);

144 
_XLOCALE_INLINE
 
	`__wcwidth_l
(
__˘_ru√_t
, 
loˇÀ_t
);

145 
_XLOCALE_INLINE
 
	`towuµî_l
(, 
loˇÀ_t
);

147 
_XLOCALE_INLINE
 
	$towlowî_l
(
__c
, 
loˇÀ_t
 
__l
)

149 
__limô
;

150 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

151  (
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî_l
(__c, 
__l
) :

152 
__ru√s
->
__m≠lowî
[
__c
];

153 
	}
}

154 
_XLOCALE_INLINE
 
	$towuµî_l
(
__c
, 
loˇÀ_t
 
__l
)

156 
__limô
;

157 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

158  (
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___touµî_l
(__c, 
__l
) :

159 
__ru√s
->
__m≠uµî
[
__c
];

160 
	}
}

161 
_XLOCALE_INLINE
 

162 
	$__wcwidth_l
(
__˘_ru√_t
 
_c
, 
loˇÀ_t
 
__l
)

164 
_x
;

166 i‡(
_c
 == 0)

168 
_x
 = ()
	`__maskru√_l
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
, 
__l
);

169 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

170  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

171  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

172 
	}
}

173 
isw˘y≥_l
(
wöt_t
 
__wc
, 
w˘y≥_t
 
__ch¨˛ass
, 
loˇÀ_t
 
__l
);

174 
w˘y≥_t
 
w˘y≥_l
(c⁄° *
¥›îty
, 
loˇÀ_t
 
__l
);

175 
wöt_t
 
tow˘øns_l
(wöt_à
__wc
, 
w˘øns_t
 
desc
, 
loˇÀ_t
 
__l
);

176 
wöt_t
 
√xtw˘y≥_l
(wöt_à
__wc
, 
w˘y≥_t
 
w˘
, 
loˇÀ_t
 
__l
);

177 
w˘øns_t
 
w˘øns_l
(c⁄° *
__ch¨˛ass
, 
loˇÀ_t
 
__l
);

178 #unde‡
_XLOCALE_WCTYPES


180 
_XLOCALE_INLINE
 
digôtoöt_l
(, 
loˇÀ_t
);

181 
_XLOCALE_INLINE
 
tﬁowî_l
(, 
loˇÀ_t
);

182 
_XLOCALE_INLINE
 
touµî_l
(, 
loˇÀ_t
);

184 
_XLOCALE_INLINE
 
	$digôtoöt_l
(
__c
, 
loˇÀ_t
 
__l
)

185 {  
	`__sbmaskru√_l
((
__c
), 0xFF, 
__l
); 
	}
}

187 
_XLOCALE_INLINE
 
	$tﬁowî_l
(
__c
, 
loˇÀ_t
 
__l
)

189 
__limô
;

190 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

191  (
__c
 < 0 || __¯>
__limô
) ? __c :

192 
__ru√s
->
__m≠lowî
[
__c
];

193 
	}
}

194 
_XLOCALE_INLINE
 
	$touµî_l
(
__c
, 
loˇÀ_t
 
__l
)

196 
__limô
;

197 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

198  (
__c
 < 0 || __¯>
__limô
) ? __c :

199 
__ru√s
->
__m≠uµî
[
__c
];

200 
	}
}

203 (!
deföed
(
_XLOCALE_WCTYPES
Ë&& !deföed(
_XLOCALE_CTYPE_H
)) */

	@/usr/include/xlocale/_inttypes.h

37 
ötmax_t
 
°πoimax_l
(c⁄° * 
__ª°ri˘
, ** __restrict,

38 , 
loˇÀ_t
);

39 
uötmax_t
 
°πoumax_l
(c⁄° * 
__ª°ri˘
, ** __restrict, ,

40 
loˇÀ_t
);

41 
ötmax_t
 
wc°oimax_l
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict,

42 , 
loˇÀ_t
);

43 
uötmax_t
 
wc°oumax_l
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict,

44 , 
loˇÀ_t
);

	@/usr/include/xlocale/_stdio.h

32 
	$a•rötf_l
(**, 
loˇÀ_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

33 
	$d¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

34 
	`__¥ötÊike
(3, 4);

35 
	$Ârötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

36 
	`__¥ötÊike
(3, 4);

37 
	$fsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

38 
	`__sˇnÊike
(3, 4);

39 
	$¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...Ë
	`__¥ötÊike
(2, 3);

40 
	$sˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...Ë
	`__sˇnÊike
(2, 3);

41 
	$¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

42 c⁄° * 
__ª°ri˘
, ...Ë
	`__¥ötÊike
(4, 5);

43 
	$•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

44 
	`__¥ötÊike
(3, 4);

45 
	$ssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

46 ...Ë
	`__sˇnÊike
(3, 4);

47 
	$vÂrötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

48 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

49 
	$v¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

50 
	`__¥ötÊike
(2, 0);

51 
	$v•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

52 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

53 
	$vfsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

54 
__va_li°
Ë
	`__sˇnÊike
(3, 0);

55 
	$vsˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

56 
	`__sˇnÊike
(2, 0);

57 
	$v¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

58 c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

59 
	$vssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

60 
__va_li°
Ë
	`__sˇnÊike
(3, 0);

61 
	$vd¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

62 
	`__¥ötÊike
(3, 0);

63 
	$va•rötf_l
(**, 
loˇÀ_t
, c⁄° *, 
__va_li°
)

64 
	`__¥ötÊike
(3, 0);

	@/usr/include/xlocale/_stdlib.h

37 
©of_l
(c⁄° *, 
loˇÀ_t
);

38 
©oi_l
(c⁄° *, 
loˇÀ_t
);

39 
©ﬁ_l
(c⁄° *, 
loˇÀ_t
);

40 
©ﬁl_l
(c⁄° *, 
loˇÀ_t
);

41 
mbÀn_l
(c⁄° *, 
size_t
, 
loˇÀ_t
);

42 
size_t
 
mb°owcs_l
(
wch¨_t
 * 
__ª°ri˘
,

43 c⁄° * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

44 
mbtowc_l
(
wch¨_t
 * 
__ª°ri˘
,

45 c⁄° * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

46 
°πod_l
(c⁄° *, **, 
loˇÀ_t
);

47 
°πof_l
(c⁄° *, **, 
loˇÀ_t
);

48 
°πﬁ_l
(c⁄° *, **, , 
loˇÀ_t
);

49 
°πﬁd_l
(c⁄° *, **, 
loˇÀ_t
);

50 
°πﬁl_l
(c⁄° *, **, , 
loˇÀ_t
);

51 
°πoul_l
(c⁄° *, **, , 
loˇÀ_t
);

52 
°πouŒ_l
(c⁄° *, **, , 
loˇÀ_t
);

53 
size_t
 
wc°ombs_l
(* 
__ª°ri˘
,

54 c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

55 
w˘omb_l
(*, 
wch¨_t
, 
loˇÀ_t
);

57 
___mb_cur_max_l
(
loˇÀ_t
);

58 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

	@/usr/include/xlocale/_string.h

29 #i‚de‡
_LOCALE_T_DEFINED


30 
	#_LOCALE_T_DEFINED


	)

31 
_xloˇÀ
 *
	tloˇÀ_t
;

40 #i‚de‡
_XLOCALE_STRING1_H


41 
	#_XLOCALE_STRING1_H


	)

46 
°rcﬁl_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

47 
size_t
 
°rx‰m_l
(*, c⁄° *, size_t, 
loˇÀ_t
);

53 #ifde‡
_XLOCALE_H_


54 #i‚de‡
_XLOCALE_STRING2_H


55 
	#_XLOCALE_STRING2_H


	)

56 
°rˇ£cmp_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

57 *
°rˇ£°r_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

58 
°∫ˇ£cmp_l
(c⁄° *, c⁄° *, 
size_t
, 
loˇÀ_t
);

	@/usr/include/xlocale/_time.h

32 #i‚de‡
_LOCALE_T_DEFINED


33 
	#_LOCALE_T_DEFINED


	)

34 
_xloˇÀ
 *
	tloˇÀ_t
;

42 #i‚de‡
_XLOCALE_LOCALE1_H


43 
	#_XLOCALE_LOCALE1_H


	)

45 
size_t
 
	$°r·ime_l
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

46 c⁄° 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
Ë
	`__°r·imñike
(3, 0);

50 #ifde‡
_XLOCALE_H_


51 #i‚de‡
_XLOCALE_LOCALE2_H


52 
	#_XLOCALE_LOCALE2_H


	)

54 *
	`°Ωtime_l
(c⁄° * 
__ª°ri˘
, const * __restrict,

55 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
);

	@/usr/include/machine/_types.h

39 #i‚de‡
_MACHINE__TYPES_H_


40 
	#_MACHINE__TYPES_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	#__NO_STRICT_ALIGNMENT


	)

51 
__sig√d
 
	t__öt8_t
;

52 
	t__uöt8_t
;

53 
	t__öt16_t
;

54 
	t__uöt16_t
;

55 
	t__öt32_t
;

56 
	t__uöt32_t
;

57 
	t__öt64_t
;

58 
	t__uöt64_t
;

63 
__öt32_t
 
	t__˛ock_t
;

64 
__öt64_t
 
	t__¸ôiˇl_t
;

65 
	t__doubÀ_t
;

66 
	t__Êﬂt_t
;

67 
__öt64_t
 
	t__ötÂå_t
;

68 
__öt64_t
 
	t__ötmax_t
;

69 
__öt64_t
 
	t__öçå_t
;

70 
__öt32_t
 
	t__öt_Á°8_t
;

71 
__öt32_t
 
	t__öt_Á°16_t
;

72 
__öt32_t
 
	t__öt_Á°32_t
;

73 
__öt64_t
 
	t__öt_Á°64_t
;

74 
__öt8_t
 
	t__öt_Àa°8_t
;

75 
__öt16_t
 
	t__öt_Àa°16_t
;

76 
__öt32_t
 
	t__öt_Àa°32_t
;

77 
__öt64_t
 
	t__öt_Àa°64_t
;

78 
__öt64_t
 
	t__±rdiff_t
;

79 
__öt64_t
 
	t__ªgi°î_t
;

80 
__öt64_t
 
	t__£gsz_t
;

81 
__uöt64_t
 
	t__size_t
;

82 
__öt64_t
 
	t__ssize_t
;

83 
__öt64_t
 
	t__time_t
;

84 
__uöt64_t
 
	t__uötÂå_t
;

85 
__uöt64_t
 
	t__uötmax_t
;

86 
__uöt64_t
 
	t__uöçå_t
;

87 
__uöt32_t
 
	t__uöt_Á°8_t
;

88 
__uöt32_t
 
	t__uöt_Á°16_t
;

89 
__uöt32_t
 
	t__uöt_Á°32_t
;

90 
__uöt64_t
 
	t__uöt_Á°64_t
;

91 
__uöt8_t
 
	t__uöt_Àa°8_t
;

92 
__uöt16_t
 
	t__uöt_Àa°16_t
;

93 
__uöt32_t
 
	t__uöt_Àa°32_t
;

94 
__uöt64_t
 
	t__uöt_Àa°64_t
;

95 
__uöt64_t
 
	t__u_ªgi°î_t
;

96 
__uöt64_t
 
	t__vm_off£t_t
;

97 
__öt64_t
 
	t__vm_ooff£t_t
;

98 
__uöt64_t
 
	t__vm_∑ddr_t
;

99 
__uöt64_t
 
	t__vm_pödex_t
;

100 
__uöt64_t
 
	t__vm_size_t
;

105 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


106 
__buûtö_va_li°
 
	t__va_li°
;

107 #ñi‡
deföed
(
löt
)

108 * 
	t__va_li°
;

110 #i‡
deföed
(
__GNUC_VA_LIST_COMPATIBILITY
Ë&& !deföed(
__GNUC_VA_LIST
) \

111 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

112 
	#__GNUC_VA_LIST


	)

113 
__va_li°
 
	t__gnuc_va_li°
;

	@/usr/include/runetype.h

36 #i‚def 
_RUNETYPE_H_


37 
	#_RUNETYPE_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_ty≥s.h
>

42 
	#_CACHED_RUNES
 (1 <<8 )

	)

43 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

49 
__ru√_t
 
	m__mö
;

50 
__ru√_t
 
	m__max
;

51 
__ru√_t
 
	m__m≠
;

52 *
	m__ty≥s
;

53 } 
	t_Ru√E¡ry
;

56 
	m__ƒ™ges
;

57 
_Ru√E¡ry
 *
	m__ønges
;

58 } 
	t_Ru√R™ge
;

61 
	m__magic
[8];

62 
	m__ícodög
[32];

64 
__ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__size_t
, const **);

65 (*
	m__•uåu√
)(
	m__ru√_t
, *, 
	m__size_t
, **);

66 
__ru√_t
 
	m__övÆid_ru√
;

68 
	m__ru√ty≥
[
_CACHED_RUNES
];

69 
__ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

70 
__ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

77 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

78 
_Ru√R™ge
 
	m__m≠lowî_ext
;

79 
_Ru√R™ge
 
	m__m≠uµî_ext
;

81 *
	m__v¨übÀ
;

82 
	m__v¨übÀ_Àn
;

83 } 
	t_Ru√LoˇÀ
;

85 
	#_RUNE_MAGIC_1
 "Ru√Magi"

	)

86 
__BEGIN_DECLS


87 c⁄° 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

88 c⁄° 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

89 #i‡
deföed
(
__NO_TLS
Ë|| deföed(
__RUNETYPE_INTERNAL
)

90 c⁄° 
_Ru√LoˇÀ
 *
__gëCuºítRu√LoˇÀ
();

92 
_Thªad_loˇl
 c⁄° 
_Ru√LoˇÀ
 *
_ThªadRu√LoˇÀ
;

93 
__ölöe
 c⁄° 
_Ru√LoˇÀ
 *
	$__gëCuºítRu√LoˇÀ
()

96 i‡(
_ThªadRu√LoˇÀ
)

97  
_ThªadRu√LoˇÀ
;

98 i‡(
_CuºítRu√LoˇÀ
)

99  
_CuºítRu√LoˇÀ
;

100  &
_DeÁu…Ru√LoˇÀ
;

101 
	}
}

103 
	#_CuºítRu√LoˇÀ
 (
	`__gëCuºítRu√LoˇÀ
())

	)

104 
	g__END_DECLS


	@/usr/include/sys/_mutex.h

31 #i‚de‡
_SYS__MUTEX_H_


32 
	#_SYS__MUTEX_H_


	)

37 
	smtx
 {

38 
lock_obje˘
 
	mlock_obje˘
;

39 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

	@/usr/include/sys/_sigset.h

38 #i‚de‡
_SYS__SIGSET_H_


39 
	#_SYS__SIGSET_H_


	)

44 
	#_SIG_WORDS
 4

	)

45 
	#_SIG_MAXSIG
 128

	)

46 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

47 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

48 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

49 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

51 
	s__sig£t
 {

52 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

53 } 
	t__sig£t_t
;

55 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

56 
	tosig£t_t
;

	@/usr/include/sys/lock.h

32 #i‚de‡
_SYS_LOCK_H_


33 
	#_SYS_LOCK_H_


	)

35 
	~<sys/queue.h
>

36 
	~<sys/_lock.h
>

38 
	glock_li°_íåy
;

39 
	gthªad
;

58 
	slock_˛ass
 {

59 c⁄° *
	mlc_«me
;

60 
u_öt
 
	mlc_Êags
;

61 (*
	mlc_as£π
)(
lock_obje˘
 *
	mlock
, 
	mwh©
);

62 (*
	mlc_ddb_show
)(
lock_obje˘
 *
	mlock
);

63 (*
	mlc_lock
)(
lock_obje˘
 *
	mlock
, 
	mhow
);

64 (*
	mlc_ow√r
)(
lock_obje˘
 *
	mlock
, 
thªad
 **
	mow√r
);

65 (*
	mlc_u∆ock
)(
lock_obje˘
 *
	mlock
);

68 
	#LC_SLEEPLOCK
 0x00000001

	)

69 
	#LC_SPINLOCK
 0x00000002

	)

70 
	#LC_SLEEPABLE
 0x00000004

	)

71 
	#LC_RECURSABLE
 0x00000008

	)

72 
	#LC_UPGRADABLE
 0x00000010

	)

74 
	#LO_CLASSFLAGS
 0x0000fff‡

	)

75 
	#LO_INITIALIZED
 0x00010000

	)

76 
	#LO_WITNESS
 0x00020000

	)

77 
	#LO_QUIET
 0x00040000

	)

78 
	#LO_RECURSABLE
 0x00080000

	)

79 
	#LO_SLEEPABLE
 0x00100000

	)

80 
	#LO_UPGRADABLE
 0x00200000

	)

81 
	#LO_DUPOK
 0x00400000

	)

82 
	#LO_CLASSMASK
 0x0f000000

	)

83 
	#LO_NOPROFILE
 0x10000000

	)

90 
	#LO_CLASSSHIFT
 24

	)

91 
	#LO_CLASSINDEX
(
lock
Ë(((÷ock)->
lo_Êags
Ë& 
LO_CLASSMASK
Ë>> 
LO_CLASSSHIFT
)

	)

92 
	#LOCK_CLASS
(
lock
Ë(
lock_˛as£s
[
	`LO_CLASSINDEX
(÷ock))])

	)

93 
	#LOCK_CLASS_MAX
 (
LO_CLASSMASK
 >> 
LO_CLASSSHIFT
)

	)

99 
	#LOP_NEWORDER
 0x00000001

	)

100 
	#LOP_QUIET
 0x00000002

	)

101 
	#LOP_TRYLOCK
 0x00000004

	)

102 
	#LOP_EXCLUSIVE
 0x00000008

	)

103 
	#LOP_DUPOK
 0x00000010

	)

106 
	#LA_MASKASSERT
 0x000000f‡

	)

107 
	#LA_UNLOCKED
 0x00000000

	)

108 
	#LA_LOCKED
 0x00000001

	)

109 
	#LA_SLOCKED
 0x00000002

	)

110 
	#LA_XLOCKED
 0x00000004

	)

111 
	#LA_RECURSED
 0x00000008

	)

112 
	#LA_NOTRECURSED
 0x00000010

	)

114 #ifde‡
_KERNEL


124 #i‡
deföed
(
KLD_MODULE
Ë|| deföed(
WITNESS
Ë|| deföed(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
Ë|| deföed(
KTR
Ë|| deföed(
LOCK_PROFILING
)

125 
	#LOCK_DEBUG
 1

	)

127 
	#LOCK_DEBUG
 0

	)

134 #i‡
LOCK_DEBUG
 > 0

135 
	#LOCK_FILE
 
__FILE__


	)

136 
	#LOCK_LINE
 
__LINE__


	)

138 
	#LOCK_FILE
 
NULL


	)

139 
	#LOCK_LINE
 0

	)

153 
	#LOCK_LOG_TEST
(
lo
, 
Êags
) \

154 (((
Êags
Ë& 
LOP_QUIET
Ë=0 && ((
lo
)->
lo_Êags
 & 
LO_QUIET
Ë=0)

	)

156 
	#LOCK_LOG_LOCK
(
›«me
, 
lo
, 
Êags
, 
ªcur£
, 
fûe
, 
löe
) do { \

157 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

158 
	`CTR6
(
KTR_LOCK
, 
›«me
 " (%s) %s %pÑ = %dát %s:%d", \

159 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

160 (
lo
), (
u_öt
)(
ªcur£
), (
fûe
), (
löe
)); \

161 } 0)

	)

163 
	#LOCK_LOG_TRY
(
›«me
, 
lo
, 
Êags
, 
ªsu…
, 
fûe
, 
löe
) do { \

164 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

165 
	`CTR6
(
KTR_LOCK
, "TRY_" 
›«me
 " (%s) %s %pÑesult=%dát %s:%d",\

166 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

167 (
lo
), (
u_öt
)(
ªsu…
), (
fûe
), (
löe
)); \

168 } 0)

	)

170 
	#LOCK_LOG_INIT
(
lo
, 
Êags
) do { \

171 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

172 
	`CTR4
(
KTR_LOCK
, "%s: %∞(%sË%s", 
__func__
, (
lo
), \

173 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
); \

174 } 0)

	)

176 
	#LOCK_LOG_DESTROY
(
lo
, 
Êags
Ë
	`LOCK_LOG_INIT
÷o, fœgs)

	)

178 
	#lock_öôÆized
(
lo
Ë(÷o)->
lo_Êags
 & 
LO_INITIALIZED
)

	)

184 
	#MPASS
(
ex
Ë
	`MPASS4
”x, #ex, 
__FILE__
, 
__LINE__
)

	)

185 
	#MPASS2
(
ex
, 
wh©
Ë
	`MPASS4
”x, wh©, 
__FILE__
, 
__LINE__
)

	)

186 
	#MPASS3
(
ex
, 
fûe
, 
löe
Ë
	`MPASS4
”x, #ex, fûe,Üöe)

	)

187 
	#MPASS4
(
ex
, 
wh©
, 
fûe
, 
löe
) \

188 
	`KASSERT
((
ex
), ("As£πi⁄ %†Áûedáà%s:%d", 
wh©
, 
fûe
, 
löe
))

	)

190 
lock_˛ass
 
lock_˛ass_mtx_¶ìp
;

191 
lock_˛ass
 
lock_˛ass_mtx_•ö
;

192 
lock_˛ass
 
lock_˛ass_sx
;

193 
lock_˛ass
 
lock_˛ass_rw
;

194 
lock_˛ass
 
lock_˛ass_rm
;

195 
lock_˛ass
 
lock_˛ass_lockmgr
;

197 
lock_˛ass
 *
lock_˛as£s
[];

199 
lock_öô
(
lock_obje˘
 *, 
lock_˛ass
 *,

201 
lock_de°roy
(
lock_obje˘
 *);

202 
•ölock_íãr
();

203 
•ölock_exô
();

204 
wô√ss_öô
(
lock_obje˘
 *, const *);

205 
wô√ss_de°roy
(
lock_obje˘
 *);

206 
wô√ss_deföe‹dî
(
lock_obje˘
 *, lock_object *);

207 
wô√ss_check‹dî
(
lock_obje˘
 *, , const *, ,

208 
lock_obje˘
 *);

209 
wô√ss_lock
(
lock_obje˘
 *, , const *, );

210 
wô√ss_upgøde
(
lock_obje˘
 *, , const *, );

211 
wô√ss_downgøde
(
lock_obje˘
 *, , const *, );

212 
wô√ss_u∆ock
(
lock_obje˘
 *, , const *, );

213 
wô√ss_ßve
(
lock_obje˘
 *, const **, *);

214 
wô√ss_ª°‹e
(
lock_obje˘
 *, const *, );

215 
wô√ss_li°_locks
(
lock_li°_íåy
 **,

217 
	`wô√ss_w¨n
(, 
lock_obje˘
 *, const *, ...);

218 
	`wô√ss_as£π
(
lock_obje˘
 *, , const *, );

219 
	`wô√ss_di•œy_•ölock
(
lock_obje˘
 *, 
thªad
 *,

221 
	`wô√ss_löe
(
lock_obje˘
 *);

222 
	`wô√ss_n‹ñó£
(
lock_obje˘
 *);

223 
	`wô√ss_ªÀa£ok
(
lock_obje˘
 *);

224 c⁄° *
	`wô√ss_fûe
(
lock_obje˘
 *);

225 
	`wô√ss_thªad_exô
(
thªad
 *);

227 #ifdef 
WITNESS


230 
	#WARN_GIANTOK
 0x01

	)

231 
	#WARN_PANIC
 0x02

	)

232 
	#WARN_SLEEPOK
 0x04

	)

234 
	#WITNESS_INIT
(
lock
, 
ty≥
) \

235 
	`wô√ss_öô
((
lock
), (
ty≥
))

	)

237 
	#WITNESS_DESTROY
(
lock
) \

238 
	`wô√ss_de°roy
(
lock
)

	)

240 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
) \

241 
	`wô√ss_check‹dî
((
lock
), (
Êags
), (
fûe
), (
löe
), (
öãæock
))

	)

243 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
) \

244 
	`wô√ss_deföe‹dî
((
lock_obje˘
 *)(
lock1
), \

245 (
lock_obje˘
 *)(
lock2
))

	)

247 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

248 
	`wô√ss_lock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

250 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

251 
	`wô√ss_upgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

253 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

254 
	`wô√ss_downgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

256 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

257 
	`wô√ss_u∆ock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

259 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...) \

260 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

262 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...) \

263 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

265 
	#WITNESS_SAVE_DECL
(
n
) \

266 c⁄° * 
	`__CONCAT
(
n
, 
__wf
); \

267 
	`__CONCAT
(
n
, 
__wl
)

	)

269 
	#WITNESS_SAVE
(
lock
, 
n
) \

270 
	`wô√ss_ßve
((
lock
), &
	`__CONCAT
(
n
, 
__wf
), &__CONCAT“, 
__wl
))

	)

272 
	#WITNESS_RESTORE
(
lock
, 
n
) \

273 
	`wô√ss_ª°‹e
((
lock
), 
	`__CONCAT
(
n
, 
__wf
), __CONCAT“, 
__wl
))

	)

275 
	#WITNESS_NORELEASE
(
lock
) \

276 
	`wô√ss_n‹ñó£
(&(
lock
)->
lock_obje˘
)

	)

278 
	#WITNESS_RELEASEOK
(
lock
) \

279 
	`wô√ss_ªÀa£ok
(&(
lock
)->
lock_obje˘
)

	)

281 
	#WITNESS_FILE
(
lock
) \

282 
	`wô√ss_fûe
(
lock
)

	)

284 
	#WITNESS_LINE
(
lock
) \

285 
	`wô√ss_löe
(
lock
)

	)

288 
	#WITNESS_INIT
(
lock
, 
ty≥
Ë()0

	)

289 
	#WITNESS_DESTROY
(
lock
Ë()0

	)

290 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
Ë0

	)

291 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
Ë()0

	)

292 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

293 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

294 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

295 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

296 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...Ë0

	)

297 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...Ë()0

	)

298 
	#WITNESS_SAVE_DECL
(
n
Ë()0

	)

299 
	#WITNESS_SAVE
(
lock
, 
n
Ë()0

	)

300 
	#WITNESS_RESTORE
(
lock
, 
n
Ë()0

	)

301 
	#WITNESS_NORELEASE
(
lock
Ë()0

	)

302 
	#WITNESS_RELEASEOK
(
lock
Ë()0

	)

303 
	#WITNESS_FILE
(
lock
Ë("?")

	)

304 
	#WITNESS_LINE
(
lock
Ë(0)

	)

311 
	#wô√ss_check
(
l
) \

312 
	`WITNESS_CHECKORDER
(&(
l
)->
lock_obje˘
, 
LOP_EXCLUSIVE
, 
LOCK_FILE
, \

313 
LOCK_LINE
, 
NULL
)

	)

315 
	#wô√ss_check_sh¨ed
(
l
) \

316 
	`WITNESS_CHECKORDER
(&(
l
)->
lock_obje˘
, 0, 
LOCK_FILE
, 
LOCK_LINE
, 
NULL
)

	)

	@/usr/include/sys/lockmgr.h

31 #i‚def 
_SYS_LOCKMGR_H_


32 
	#_SYS_LOCKMGR_H_


	)

34 
	~<sys/_lock.h
>

35 
	~<sys/_lockmgr.h
>

36 
	~<sys/_muãx.h
>

37 
	~<sys/_rwlock.h
>

39 
	#LK_SHARE
 0x01

	)

40 
	#LK_SHARED_WAITERS
 0x02

	)

41 
	#LK_EXCLUSIVE_WAITERS
 0x04

	)

42 
	#LK_EXCLUSIVE_SPINNERS
 0x08

	)

43 
	#LK_ALL_WAITERS
 \

44 (
LK_SHARED_WAITERS
 | 
LK_EXCLUSIVE_WAITERS
)

	)

45 
	#LK_FLAGMASK
 \

46 (
LK_SHARE
 | 
LK_ALL_WAITERS
 | 
LK_EXCLUSIVE_SPINNERS
)

	)

48 
	#LK_HOLDER
(
x
Ë((xË& ~
LK_FLAGMASK
)

	)

49 
	#LK_SHARERS_SHIFT
 4

	)

50 
	#LK_SHARERS
(
x
Ë(
	`LK_HOLDER
(xË>> 
LK_SHARERS_SHIFT
)

	)

51 
	#LK_SHARERS_LOCK
(
x
Ë((xË<< 
LK_SHARERS_SHIFT
 | 
LK_SHARE
)

	)

52 
	#LK_ONE_SHARER
 (1 << 
LK_SHARERS_SHIFT
)

	)

53 
	#LK_UNLOCKED
 
	`LK_SHARERS_LOCK
(0)

	)

54 
	#LK_KERNPROC
 ((
uöçå_t
)(-1Ë& ~
LK_FLAGMASK
)

	)

56 #ifde‡
_KERNEL


58 #i‡!
deföed
(
LOCK_FILE
Ë|| !deföed(
LOCK_LINE
)

62 
	gthªad
;

63 
	#lk_ªcur£
 
lock_obje˘
.
lo_d©a


	)

69 
__lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
lock_obje˘
 *
ûk
,

70 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
);

71 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

72 
_lockmgr_as£π
(
lock
 *
lk
, 
wh©
, c⁄° *
fûe
, 
löe
);

74 
_lockmgr_disown
(
lock
 *
lk
, c⁄° *
fûe
, 
löe
);

76 
lockÆlowªcur£
(
lock
 *
lk
);

77 
lockÆlowsh¨e
(
lock
 *
lk
);

78 
lockde°roy
(
lock
 *
lk
);

79 
lockdißbÀªcur£
(
lock
 *
lk
);

80 
locköô
(
lock
 *
lk
, 
¥io
, c⁄° *
wmesg
, 
timo
,

81 
Êags
);

82 #ifde‡
DDB


83 
lockmgr_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

85 
lockmgr_¥ötöfo
(
lock
 *
lk
);

86 
lock°©us
(
lock
 *
lk
);

92 
__ölöe
 

93 
	$_lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
mtx
 *
ûk
, c⁄° *
wmesg
,

94 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

97  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

98 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

99 
	}
}

101 
__ölöe
 

102 
	$_lockmgr_¨gs_rw
(
lock
 *
lk
, 
u_öt
 
Êags
, 
rwlock
 *
ûk
,

103 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

106  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

107 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

108 
	}
}

113 
	#lockmgr
(
lk
, 
Êags
, 
ûk
) \

114 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

115 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

116 
	#lockmgr_¨gs
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

117 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

118 
LOCK_FILE
, 
LOCK_LINE
)

	)

119 
	#lockmgr_¨gs_rw
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

120 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

121 
LOCK_FILE
, 
LOCK_LINE
)

	)

122 
	#lockmgr_disown
(
lk
) \

123 
	`_lockmgr_disown
((
lk
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

124 
	#lockmgr_ªcur£d
(
lk
) \

125 ((
lk
)->
lk_ªcur£
 !0)

	)

126 
	#lockmgr_rw
(
lk
, 
Êags
, 
ûk
) \

127 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

128 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

129 
	#lockmgr_waôîs
(
lk
) \

130 ((
lk
)->
lk_lock
 & 
LK_ALL_WAITERS
)

	)

131 #ifde‡
INVARIANTS


132 
	#lockmgr_as£π
(
lk
, 
wh©
) \

133 
	`_lockmgr_as£π
((
lk
), (
wh©
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

135 
	#lockmgr_as£π
(
lk
, 
wh©
)

	)

141 
	#LK_INIT_MASK
 0x0000FF

	)

142 
	#LK_CANRECURSE
 0x000001

	)

143 
	#LK_NODUP
 0x000002

	)

144 
	#LK_NOPROFILE
 0x000004

	)

145 
	#LK_NOSHARE
 0x000008

	)

146 
	#LK_NOWITNESS
 0x000010

	)

147 
	#LK_QUIET
 0x000020

	)

148 
	#LK_ADAPTIVE
 0x000040

	)

153 
	#LK_EATTR_MASK
 0x00FF00

	)

154 
	#LK_INTERLOCK
 0x000100

	)

155 
	#LK_NOWAIT
 0x000200

	)

156 
	#LK_RETRY
 0x000400

	)

157 
	#LK_SLEEPFAIL
 0x000800

	)

158 
	#LK_TIMELOCK
 0x001000

	)

163 
	#LK_TYPE_MASK
 0xFF0000

	)

164 
	#LK_DOWNGRADE
 0x010000

	)

165 
	#LK_DRAIN
 0x020000

	)

166 
	#LK_EXCLOTHER
 0x040000

	)

167 
	#LK_EXCLUSIVE
 0x080000

	)

168 
	#LK_RELEASE
 0x100000

	)

169 
	#LK_SHARED
 0x200000

	)

170 
	#LK_UPGRADE
 0x400000

	)

172 
	#LK_TOTAL_MASK
 (
LK_INIT_MASK
 | 
LK_EATTR_MASK
 | 
LK_TYPE_MASK
)

	)

177 
	#LK_WMESG_DEFAULT
 (
NULL
)

	)

178 
	#LK_PRIO_DEFAULT
 (0)

	)

179 
	#LK_TIMO_DEFAULT
 (0)

	)

184 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

185 
	#KA_LOCKED
 
LA_LOCKED


	)

186 
	#KA_SLOCKED
 
LA_SLOCKED


	)

187 
	#KA_XLOCKED
 
LA_XLOCKED


	)

188 
	#KA_UNLOCKED
 
LA_UNLOCKED


	)

189 
	#KA_RECURSED
 
LA_RECURSED


	)

190 
	#KA_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/module.h

29 #i‚de‡
_SYS_MODULE_H_


30 
	#_SYS_MODULE_H_


	)

35 
	#MDT_DEPEND
 1

	)

36 
	#MDT_MODULE
 2

	)

37 
	#MDT_VERSION
 3

	)

39 
	#MDT_STRUCT_VERSION
 1

	)

40 
	#MDT_SETNAME
 "modmëad©a_£t"

	)

42 
	emodevíây≥
 {

43 
	mMOD_LOAD
,

44 
	mMOD_UNLOAD
,

45 
	mMOD_SHUTDOWN
,

46 
	mMOD_QUIESCE


47 } 
	tmodevíây≥_t
;

49 
moduÀ
 *
	tmoduÀ_t
;

50 (*
	tmodevíth™d_t
)(
	tmoduÀ_t
, , *);

55 
	smoduÀd©a
 {

56 c⁄° *
«me
;

57 
modevíth™d_t
 
evh™d
;

58 *
¥iv
;

59 } 
	tmoduÀd©a_t
;

65 
	umod•ecific
 {

66 
ötvÆ
;

67 
u_öt
 
uötvÆ
;

68 
l⁄gvÆ
;

69 
u_l⁄g
 
ul⁄gvÆ
;

70 } 
	tmod•ecific_t
;

75 
	smod_dïíd
 {

76 
md_vî_möimum
;

77 
md_vî_¥e„ºed
;

78 
md_vî_maximum
;

84 
	smod_vîsi⁄
 {

85 
mv_vîsi⁄
;

88 
	smod_mëad©a
 {

89 
md_vîsi⁄
;

90 
md_ty≥
;

91 *
md_d©a
;

92 c⁄° *
md_cvÆ
;

95 #ifdef 
_KERNEL


97 
	~<sys/lökî_£t.h
>

99 
	#MODULE_METADATA
(
uniquifõr
, 
ty≥
, 
d©a
, 
cvÆ
) \

100 
mod_mëad©a
 
_mod_mëad©a
##
uniquifõr
 = { \

101 
MDT_STRUCT_VERSION
, \

102 
ty≥
, \

103 
d©a
, \

104 
cvÆ
 \

105 
	}
}; \

106 
	`DATA_SET
(
modmëad©a_£t
, 
_mod_mëad©a
##
uniquifõr
)

	)

108 
	#MODULE_DEPEND
(
moduÀ
, 
mdïíd
, 
vmö
, 
v¥ef
, 
vmax
) \

109 
mod_dïíd
 
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
 = { \

110 
vmö
, \

111 
v¥ef
, \

112 
vmax
 \

114 
	`MODULE_METADATA
(
_md_
##
moduÀ
##
_⁄_
##
mdïíd
, 
MDT_DEPEND
, \

115 &
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
, #mdïíd)

	)

126 
	#MODULE_KERNEL_MAXVER
 (
	`roundup
(
__FªeBSD_vîsi⁄
, 100000Ë- 1)

	)

128 
	#DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
maxvî
) \

129 
	`MODULE_DEPEND
(
«me
, 
kî√l
, 
__FªeBSD_vîsi⁄
, \

130 
__FªeBSD_vîsi⁄
, 
maxvî
); \

131 
	`MODULE_METADATA
(
_md_
##
«me
, 
MDT_MODULE
, &
d©a
, #name); \

132 
	`SYSINIT
(
«me
##
moduÀ
, 
sub
, 
‹dî
, 
moduÀ_ªgi°î_öô
, &
d©a
); \

133 
__hack


	)

135 
	#DECLARE_MODULE
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

136 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
MODULE_KERNEL_MAXVER
)

	)

145 
	#DECLARE_MODULE_TIED
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

146 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
__FªeBSD_vîsi⁄
)

	)

148 
	#MODULE_VERSION
(
moduÀ
, 
vîsi⁄
) \

149 
mod_vîsi⁄
 
_
##
moduÀ
##
_vîsi⁄
 = { \

150 
vîsi⁄
 \

152 
	`MODULE_METADATA
(
_
##
moduÀ
##
_vîsi⁄
, 
MDT_VERSION
, \

153 &
_
##
moduÀ
##
_vîsi⁄
, #moduÀ)

	)

155 
sx
 
moduÀs_sx
;

157 
	#MOD_XLOCK
 
	`sx_xlock
(&
moduÀs_sx
)

	)

158 
	#MOD_SLOCK
 
	`sx_¶ock
(&
moduÀs_sx
)

	)

159 
	#MOD_XUNLOCK
 
	`sx_xu∆ock
(&
moduÀs_sx
)

	)

160 
	#MOD_SUNLOCK
 
	`sx_su∆ock
(&
moduÀs_sx
)

	)

161 
	#MOD_LOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_LOCKED
)

	)

162 
	#MOD_XLOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_XLOCKED
)

	)

164 
	glökî_fûe
;

166 
moduÀ_ªgi°î_öô
(const *);

167 
moduÀ_ªgi°î
(c⁄° 
moduÀd©a
 *, 
lökî_fûe
 *);

168 
moduÀ_t
 
moduÀ_lookupby«me
(const *);

169 
moduÀ_t
 
moduÀ_lookupbyid
();

170 
moduÀ_quõs˚
(
moduÀ_t
);

171 
moduÀ_ª„ªn˚
(
moduÀ_t
);

172 
moduÀ_ªÀa£
(
moduÀ_t
);

173 
moduÀ_u∆ﬂd
(
moduÀ_t
);

174 
moduÀ_gëid
(
moduÀ_t
);

175 
moduÀ_t
 
moduÀ_gë‚ext
(module_t);

176 c⁄° * 
moduÀ_gë«me
(
moduÀ_t
);

177 
moduÀ_£t•ecific
(
moduÀ_t
, 
mod•ecific_t
 *);

178 
lökî_fûe
 *
moduÀ_fûe
(
moduÀ_t
);

180 #ifdef 
MOD_DEBUG


181 
mod_debug
;

182 
	#MOD_DEBUG_REFS
 1

	)

184 
	#MOD_DPF
(
ˇt
, 
¨gs
) do { \

185 i‡(
mod_debug
 & 
MOD_DEBUG_
##
ˇt
) \

186 
	`¥ötf
(
¨gs
); \

187 } 0)

	)

191 
	#MOD_DPF
(
ˇt
, 
¨gs
)

	)

195 
	#MAXMODNAME
 32

	)

197 
	smoduÀ_°©
 {

198 
	mvîsi⁄
;

199 
	m«me
[
MAXMODNAME
];

200 
	mªfs
;

201 
	mid
;

202 
mod•ecific_t
 
	md©a
;

205 #i‚de‡
_KERNEL


207 
	~<sys/cdefs.h
>

209 
__BEGIN_DECLS


210 
mod√xt
(
_modid
);

211 
mod‚ext
(
_modid
);

212 
mod°©
(
_modid
, 
moduÀ_°©
 *
_°©
);

213 
modföd
(c⁄° *
_«me
);

214 
	g__END_DECLS


	@/usr/include/sys/queue.h

33 #i‚de‡
_SYS_QUEUE_H_


34 
	#_SYS_QUEUE_H_


	)

36 
	~<sys/cdefs.h
>

109 #ifde‡
QUEUE_MACRO_DEBUG


111 
	sqm_åa˚
 {

112 * 
	mœ°fûe
;

113 
	mœ°löe
;

114 * 
	m¥evfûe
;

115 
	m¥evlöe
;

118 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

119 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

120 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

122 
	#QMD_TRACE_HEAD
(
hód
) do { \

123 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

124 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

125 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

126 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

127 } 0)

	)

129 
	#QMD_TRACE_ELEM
(
ñem
) do { \

130 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

131 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

132 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

133 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

134 } 0)

	)

137 
	#QMD_TRACE_ELEM
(
ñem
)

	)

138 
	#QMD_TRACE_HEAD
(
hód
)

	)

139 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

140 
	#TRACEBUF


	)

141 
	#TRASHIT
(
x
)

	)

147 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

148 
	s«me
 { \

149 
ty≥
 *
¶h_fú°
; \

150 }

	)

152 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

153 { 
NULL
 }

	)

155 
	#SLIST_ENTRY
(
ty≥
) \

157 
ty≥
 *
¶e_√xt
; \

158 }

	)

163 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

165 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

167 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

168 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

169 (
v¨
); \

170 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

172 
	#SLIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

173 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

174 (
v¨
); \

175 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

177 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

178 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

179 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

180 (
v¨
Ë(
tv¨
))

	)

182 
	#SLIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

183 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

184 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

185 (
v¨
Ë(
tv¨
))

	)

187 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

188 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

189 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

190 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

192 
	#SLIST_INIT
(
hód
) do { \

193 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

194 } 0)

	)

196 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

197 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

198 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

199 } 0)

	)

201 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

203 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

204 } 0)

	)

206 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

208 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

209 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

210 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

211 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

214 
ty≥
 *
cuªlm
 = 
	`SLIST_FIRST
((
hód
)); \

215 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

216 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

217 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

219 
	`TRASHIT
(*
ﬁd√xt
); \

220 } 0)

	)

222 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

223 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

224 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

225 } 0)

	)

227 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

228 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

229 } 0)

	)

231 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

232 
ty≥
 *
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

233 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

234 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

235 } 0)

	)

240 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

241 
	s«me
 { \

242 
ty≥
 *
°qh_fú°
; \

243 
ty≥
 **
°qh_œ°
; \

244 }

	)

246 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

247 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

249 
	#STAILQ_ENTRY
(
ty≥
) \

251 
ty≥
 *
°qe_√xt
; \

252 }

	)

257 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

258 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

259 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

260 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

261 
	`STAILQ_INIT
((
hód2
)); \

263 } 0)

	)

265 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

267 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

271 (
v¨
); \

272 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

274 
	#STAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

275 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

276 (
v¨
); \

277 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

279 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

280 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

281 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

282 (
v¨
Ë(
tv¨
))

	)

284 
	#STAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

285 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

286 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

287 (
v¨
Ë(
tv¨
))

	)

289 
	#STAILQ_INIT
(
hód
) do { \

290 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

291 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

292 } 0)

	)

294 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

295 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

296 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

297 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

298 } 0)

	)

300 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

301 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

302 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

303 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

304 } 0)

	)

306 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

307 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

308 *(
hód
)->
°qh_œ°
 = (
ñm
); \

309 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

310 } 0)

	)

312 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

313 (
	`STAILQ_EMPTY
((
hód
)Ë? 
NULL
 : \

314 
	`__c⁄èöîof
((
hód
)->
°qh_œ°
, 
ty≥
, 
fõld
.
°qe_√xt
))

	)

316 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

318 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

319 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

320 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

321 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

324 
ty≥
 *
cuªlm
 = 
	`STAILQ_FIRST
((
hód
)); \

325 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

326 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

327 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

329 
	`TRASHIT
(*
ﬁd√xt
); \

330 } 0)

	)

332 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

333 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

334 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

335 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

336 } 0)

	)

338 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

339 i‡((
	`STAILQ_FIRST
((
hód
)) = \

340 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

341 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

342 } 0)

	)

344 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

345 
ty≥
 *
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

346 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

347 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

348 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

349 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

350 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

351 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

352 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

353 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

354 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

355 } 0)

	)

361 
	#LIST_HEAD
(
«me
, 
ty≥
) \

362 
	s«me
 { \

363 
ty≥
 *
lh_fú°
; \

364 }

	)

366 
	#LIST_HEAD_INITIALIZER
(
hód
) \

367 { 
NULL
 }

	)

369 
	#LIST_ENTRY
(
ty≥
) \

371 
ty≥
 *
À_√xt
; \

372 
ty≥
 **
À_¥ev
; \

373 }

	)

379 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

380 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

381 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

382 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

383 &
	`LIST_FIRST
((
hód
))) \

384 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

385 } 0)

	)

387 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

388 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

389 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

390 &((
ñm
)->
fõld
.
À_√xt
)) \

391 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

392 } 0)

	)

394 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

395 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

396 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

397 } 0)

	)

399 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

400 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

401 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

404 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

406 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

408 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

409 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

410 (
v¨
); \

411 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

413 
	#LIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

414 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

415 (
v¨
); \

416 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

418 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

419 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

420 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

421 (
v¨
Ë(
tv¨
))

	)

423 
	#LIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

424 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

425 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

426 (
v¨
Ë(
tv¨
))

	)

428 
	#LIST_INIT
(
hód
) do { \

429 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

430 } 0)

	)

432 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

433 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

434 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

435 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

436 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

437 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

438 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

439 } 0)

	)

441 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

442 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

443 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

444 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

445 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

446 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

447 } 0)

	)

449 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

450 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

451 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

452 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

453 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

454 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

455 } 0)

	)

457 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

459 
	#LIST_PREV
(
ñm
, 
hód
, 
ty≥
, 
fõld
) \

460 ((
ñm
)->
fõld
.
À_¥ev
 =&
	`LIST_FIRST
((
hód
)Ë? 
NULL
 : \

461 
	`__c⁄èöîof
((
ñm
)->
fõld
.
À_¥ev
, 
ty≥
, fõld.
À_√xt
))

	)

463 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

464 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

465 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

466 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

467 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

468 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

469 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

470 (
ñm
)->
fõld
.
À_¥ev
; \

471 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

472 
	`TRASHIT
(*
ﬁd√xt
); \

473 
	`TRASHIT
(*
ﬁd¥ev
); \

474 } 0)

	)

476 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

477 
ty≥
 *
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
)); \

478 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

479 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

480 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

481 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

482 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

483 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

484 } 0)

	)

489 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

490 
	s«me
 { \

491 
ty≥
 *
tqh_fú°
; \

492 
ty≥
 **
tqh_œ°
; \

493 
TRACEBUF
 \

494 }

	)

496 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

497 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

499 
	#TAILQ_ENTRY
(
ty≥
) \

501 
ty≥
 *
tqe_√xt
; \

502 
ty≥
 **
tqe_¥ev
; \

503 
TRACEBUF
 \

504 }

	)

509 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

510 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

511 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

512 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

513 &
	`TAILQ_FIRST
((
hód
))) \

514 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

515 } 0)

	)

517 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

518 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

519 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

520 } 0)

	)

522 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

523 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

524 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

525 &((
ñm
)->
fõld
.
tqe_√xt
)) \

526 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

527 } 0)

	)

529 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

530 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

531 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

532 } 0)

	)

534 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

535 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

536 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

537 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

540 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

541 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

542 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

543 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

544 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

545 
	`TAILQ_INIT
((
hód2
)); \

546 
	`QMD_TRACE_HEAD
(
hód1
); \

547 
	`QMD_TRACE_HEAD
(
hód2
); \

549 } 0)

	)

551 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

553 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

555 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

556 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

557 (
v¨
); \

558 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

560 
	#TAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

561 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

562 (
v¨
); \

563 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

565 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

566 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

567 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

568 (
v¨
Ë(
tv¨
))

	)

570 
	#TAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

571 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

572 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

573 (
v¨
Ë(
tv¨
))

	)

575 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

576 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

577 (
v¨
); \

578 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

580 
	#TAILQ_FOREACH_REVERSE_FROM
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

581 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

582 (
v¨
); \

583 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

585 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

586 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

587 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

588 (
v¨
Ë(
tv¨
))

	)

590 
	#TAILQ_FOREACH_REVERSE_FROM_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

591 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

592 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

593 (
v¨
Ë(
tv¨
))

	)

595 
	#TAILQ_INIT
(
hód
) do { \

596 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

597 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

598 
	`QMD_TRACE_HEAD
(
hód
); \

599 } 0)

	)

601 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

602 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

603 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

604 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

605 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

607 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

608 
	`QMD_TRACE_HEAD
(
hód
); \

610 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

611 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

612 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

613 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

614 } 0)

	)

616 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

617 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

618 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

619 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

620 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

621 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

622 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

623 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

624 } 0)

	)

626 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

627 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

628 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

629 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

630 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

632 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

633 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

634 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

635 
	`QMD_TRACE_HEAD
(
hód
); \

636 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

637 } 0)

	)

639 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

640 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

641 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

642 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

643 *(
hód
)->
tqh_œ°
 = (
ñm
); \

644 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

645 
	`QMD_TRACE_HEAD
(
hód
); \

646 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

647 } 0)

	)

649 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

650 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

652 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

654 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

655 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

657 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

658 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

659 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

660 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

661 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

662 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

663 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

664 (
ñm
)->
fõld
.
tqe_¥ev
; \

666 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

667 
	`QMD_TRACE_HEAD
(
hód
); \

669 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

670 
	`TRASHIT
(*
ﬁd√xt
); \

671 
	`TRASHIT
(*
ﬁd¥ev
); \

672 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

673 } 0)

	)

675 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

676 
ty≥
 *
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

677 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

678 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

679 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

680 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

681 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

682 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

683 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

685 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

686 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

687 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

689 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

690 } 0)

	)

	@/usr/include/sys/ucred.h

33 #i‚de‡
_SYS_UCRED_H_


34 
	#_SYS_UCRED_H_


	)

36 
	~<bsm/audô.h
>

38 
	glogö˛ass
;

46 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_UCRED
)

47 
	su¸ed
 {

48 
u_öt
 
	m¸_ªf
;

49 
	#¸_°¨tc›y
 
¸_uid


	)

50 
uid_t
 
	m¸_uid
;

51 
uid_t
 
	m¸_ruid
;

52 
uid_t
 
	m¸_svuid
;

53 
	m¸_ngroups
;

54 
gid_t
 
	m¸_rgid
;

55 
gid_t
 
	m¸_svgid
;

56 
uidöfo
 *
	m¸_uidöfo
;

57 
uidöfo
 *
	m¸_ruidöfo
;

58 
¥is⁄
 *
	m¸_¥is⁄
;

59 
logö˛ass
 *
	m¸_logö˛ass
;

60 
u_öt
 
	m¸_Êags
;

61 *
	m¸_p•¨e2
[2];

62 
	#¸_ídc›y
 
¸_œbñ


	)

63 
œbñ
 *
	m¸_œbñ
;

64 
audôöfo_addr
 
	m¸_audô
;

65 
gid_t
 *
	m¸_groups
;

66 
	m¸_agroups
;

68 
	#NOCRED
 ((
u¸ed
 *)0Ë

	)

69 
	#FSCRED
 ((
u¸ed
 *)-1Ë

	)

72 
	#XU_NGROUPS
 16

	)

77 
	#CRED_FLAG_CAPMODE
 0x00000001

	)

82 
	sxu¸ed
 {

83 
u_öt
 
	m¸_vîsi⁄
;

84 
uid_t
 
	m¸_uid
;

85 
	m¸_ngroups
;

86 
gid_t
 
	m¸_groups
[
XU_NGROUPS
];

87 *
	m_¸_unu£d1
;

89 
	#XUCRED_VERSION
 0

	)

92 
	#¸_gid
 
¸_groups
[0]

	)

94 #ifde‡
_KERNEL


95 
	g¥oc
;

96 
	gthªad
;

98 
ch™ge_egid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
egid
);

99 
ch™ge_euid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
euù
);

100 
ch™ge_rgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
rgid
);

101 
ch™ge_ruid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
ruù
);

102 
ch™ge_svgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
svgid
);

103 
ch™ge_svuid
(
u¸ed
 *
√w¸ed
, 
uid_t
 
svuid
);

104 
¸c›y
(
u¸ed
 *
de°
, u¸ed *
§c
);

105 
u¸ed
 *
¸c›yß„
(
¥oc
 *
p
, u¸ed *
¸
);

106 
u¸ed
 *
¸dup
(u¸ed *
¸
);

107 
¸ed_upd©e_thªad
(
thªad
 *
td
);

108 
¸‰ì
(
u¸ed
 *
¸
);

109 
u¸ed
 *
¸gë
();

110 
u¸ed
 *
¸hﬁd
(u¸ed *
¸
);

111 
¸sh¨ed
(
u¸ed
 *
¸
);

112 
¸u2x
(
u¸ed
 *
¸
, 
xu¸ed
 *
x¸
);

113 
¸£tgroups
(
u¸ed
 *
¸
, 
n
, 
gid_t
 *
groups
);

114 
groupmembî
(
gid_t
 
gid
, 
u¸ed
 *
¸ed
);

	@/usr/include/x86/_align.h

41 #i‚de‡
_X86_INCLUDE__ALIGN_H_


42 
	#_X86_INCLUDE__ALIGN_H_


	)

49 
	#_ALIGNBYTES
 ((
ªgi°î_t
Ë- 1)

	)

50 
	#_ALIGN
(
p
Ë(((
uöçå_t
)’Ë+ 
_ALIGNBYTES
Ë& ~_ALIGNBYTES)

	)

	@/usr/include/x86/_inttypes.h

33 #i‚de‡
_MACHINE_INTTYPES_H_


34 
	#_MACHINE_INTTYPES_H_


	)

40 #ifde‡
__LP64__


41 
	#__PRI64
 "l"

	)

42 
	#__PRI±r
 "l"

	)

44 
	#__PRI64
 "Œ"

	)

45 
	#__PRI±r


	)

50 
	#PRId8
 "d"

	)

51 
	#PRId16
 "d"

	)

52 
	#PRId32
 "d"

	)

53 
	#PRId64
 
__PRI64
"d"

	)

54 
	#PRIdLEAST8
 "d"

	)

55 
	#PRIdLEAST16
 "d"

	)

56 
	#PRIdLEAST32
 "d"

	)

57 
	#PRIdLEAST64
 
__PRI64
"d"

	)

58 
	#PRIdFAST8
 "d"

	)

59 
	#PRIdFAST16
 "d"

	)

60 
	#PRIdFAST32
 "d"

	)

61 
	#PRIdFAST64
 
__PRI64
"d"

	)

62 
	#PRIdMAX
 "jd"

	)

63 
	#PRIdPTR
 
__PRI±r
"d"

	)

65 
	#PRIi8
 "i"

	)

66 
	#PRIi16
 "i"

	)

67 
	#PRIi32
 "i"

	)

68 
	#PRIi64
 
__PRI64
"i"

	)

69 
	#PRIiLEAST8
 "i"

	)

70 
	#PRIiLEAST16
 "i"

	)

71 
	#PRIiLEAST32
 "i"

	)

72 
	#PRIiLEAST64
 
__PRI64
"i"

	)

73 
	#PRIiFAST8
 "i"

	)

74 
	#PRIiFAST16
 "i"

	)

75 
	#PRIiFAST32
 "i"

	)

76 
	#PRIiFAST64
 
__PRI64
"i"

	)

77 
	#PRIiMAX
 "ji"

	)

78 
	#PRIiPTR
 
__PRI±r
"i"

	)

82 
	#PRIo8
 "o"

	)

83 
	#PRIo16
 "o"

	)

84 
	#PRIo32
 "o"

	)

85 
	#PRIo64
 
__PRI64
"o"

	)

86 
	#PRIoLEAST8
 "o"

	)

87 
	#PRIoLEAST16
 "o"

	)

88 
	#PRIoLEAST32
 "o"

	)

89 
	#PRIoLEAST64
 
__PRI64
"o"

	)

90 
	#PRIoFAST8
 "o"

	)

91 
	#PRIoFAST16
 "o"

	)

92 
	#PRIoFAST32
 "o"

	)

93 
	#PRIoFAST64
 
__PRI64
"o"

	)

94 
	#PRIoMAX
 "jo"

	)

95 
	#PRIoPTR
 
__PRI±r
"o"

	)

97 
	#PRIu8
 "u"

	)

98 
	#PRIu16
 "u"

	)

99 
	#PRIu32
 "u"

	)

100 
	#PRIu64
 
__PRI64
"u"

	)

101 
	#PRIuLEAST8
 "u"

	)

102 
	#PRIuLEAST16
 "u"

	)

103 
	#PRIuLEAST32
 "u"

	)

104 
	#PRIuLEAST64
 
__PRI64
"u"

	)

105 
	#PRIuFAST8
 "u"

	)

106 
	#PRIuFAST16
 "u"

	)

107 
	#PRIuFAST32
 "u"

	)

108 
	#PRIuFAST64
 
__PRI64
"u"

	)

109 
	#PRIuMAX
 "ju"

	)

110 
	#PRIuPTR
 
__PRI±r
"u"

	)

112 
	#PRIx8
 "x"

	)

113 
	#PRIx16
 "x"

	)

114 
	#PRIx32
 "x"

	)

115 
	#PRIx64
 
__PRI64
"x"

	)

116 
	#PRIxLEAST8
 "x"

	)

117 
	#PRIxLEAST16
 "x"

	)

118 
	#PRIxLEAST32
 "x"

	)

119 
	#PRIxLEAST64
 
__PRI64
"x"

	)

120 
	#PRIxFAST8
 "x"

	)

121 
	#PRIxFAST16
 "x"

	)

122 
	#PRIxFAST32
 "x"

	)

123 
	#PRIxFAST64
 
__PRI64
"x"

	)

124 
	#PRIxMAX
 "jx"

	)

125 
	#PRIxPTR
 
__PRI±r
"x"

	)

127 
	#PRIX8
 "X"

	)

128 
	#PRIX16
 "X"

	)

129 
	#PRIX32
 "X"

	)

130 
	#PRIX64
 
__PRI64
"X"

	)

131 
	#PRIXLEAST8
 "X"

	)

132 
	#PRIXLEAST16
 "X"

	)

133 
	#PRIXLEAST32
 "X"

	)

134 
	#PRIXLEAST64
 
__PRI64
"X"

	)

135 
	#PRIXFAST8
 "X"

	)

136 
	#PRIXFAST16
 "X"

	)

137 
	#PRIXFAST32
 "X"

	)

138 
	#PRIXFAST64
 
__PRI64
"X"

	)

139 
	#PRIXMAX
 "jX"

	)

140 
	#PRIXPTR
 
__PRI±r
"X"

	)

144 
	#SCNd8
 "hhd"

	)

145 
	#SCNd16
 "hd"

	)

146 
	#SCNd32
 "d"

	)

147 
	#SCNd64
 
__PRI64
"d"

	)

148 
	#SCNdLEAST8
 "hhd"

	)

149 
	#SCNdLEAST16
 "hd"

	)

150 
	#SCNdLEAST32
 "d"

	)

151 
	#SCNdLEAST64
 
__PRI64
"d"

	)

152 
	#SCNdFAST8
 "d"

	)

153 
	#SCNdFAST16
 "d"

	)

154 
	#SCNdFAST32
 "d"

	)

155 
	#SCNdFAST64
 
__PRI64
"d"

	)

156 
	#SCNdMAX
 "jd"

	)

157 
	#SCNdPTR
 
__PRI±r
"d"

	)

159 
	#SCNi8
 "hhi"

	)

160 
	#SCNi16
 "hi"

	)

161 
	#SCNi32
 "i"

	)

162 
	#SCNi64
 
__PRI64
"i"

	)

163 
	#SCNiLEAST8
 "hhi"

	)

164 
	#SCNiLEAST16
 "hi"

	)

165 
	#SCNiLEAST32
 "i"

	)

166 
	#SCNiLEAST64
 
__PRI64
"i"

	)

167 
	#SCNiFAST8
 "i"

	)

168 
	#SCNiFAST16
 "i"

	)

169 
	#SCNiFAST32
 "i"

	)

170 
	#SCNiFAST64
 
__PRI64
"i"

	)

171 
	#SCNiMAX
 "ji"

	)

172 
	#SCNiPTR
 
__PRI±r
"i"

	)

176 
	#SCNo8
 "hho"

	)

177 
	#SCNo16
 "ho"

	)

178 
	#SCNo32
 "o"

	)

179 
	#SCNo64
 
__PRI64
"o"

	)

180 
	#SCNoLEAST8
 "hho"

	)

181 
	#SCNoLEAST16
 "ho"

	)

182 
	#SCNoLEAST32
 "o"

	)

183 
	#SCNoLEAST64
 
__PRI64
"o"

	)

184 
	#SCNoFAST8
 "o"

	)

185 
	#SCNoFAST16
 "o"

	)

186 
	#SCNoFAST32
 "o"

	)

187 
	#SCNoFAST64
 
__PRI64
"o"

	)

188 
	#SCNoMAX
 "jo"

	)

189 
	#SCNoPTR
 
__PRI±r
"o"

	)

191 
	#SCNu8
 "hhu"

	)

192 
	#SCNu16
 "hu"

	)

193 
	#SCNu32
 "u"

	)

194 
	#SCNu64
 
__PRI64
"u"

	)

195 
	#SCNuLEAST8
 "hhu"

	)

196 
	#SCNuLEAST16
 "hu"

	)

197 
	#SCNuLEAST32
 "u"

	)

198 
	#SCNuLEAST64
 
__PRI64
"u"

	)

199 
	#SCNuFAST8
 "u"

	)

200 
	#SCNuFAST16
 "u"

	)

201 
	#SCNuFAST32
 "u"

	)

202 
	#SCNuFAST64
 
__PRI64
"u"

	)

203 
	#SCNuMAX
 "ju"

	)

204 
	#SCNuPTR
 
__PRI±r
"u"

	)

206 
	#SCNx8
 "hhx"

	)

207 
	#SCNx16
 "hx"

	)

208 
	#SCNx32
 "x"

	)

209 
	#SCNx64
 
__PRI64
"x"

	)

210 
	#SCNxLEAST8
 "hhx"

	)

211 
	#SCNxLEAST16
 "hx"

	)

212 
	#SCNxLEAST32
 "x"

	)

213 
	#SCNxLEAST64
 
__PRI64
"x"

	)

214 
	#SCNxFAST8
 "x"

	)

215 
	#SCNxFAST16
 "x"

	)

216 
	#SCNxFAST32
 "x"

	)

217 
	#SCNxFAST64
 
__PRI64
"x"

	)

218 
	#SCNxMAX
 "jx"

	)

219 
	#SCNxPTR
 
__PRI±r
"x"

	)

	@/usr/include/bsm/audit.h

33 #i‚def 
_BSM_AUDIT_H


34 
	#_BSM_AUDIT_H


	)

36 
	~<sys/∑øm.h
>

37 
	~<sys/ty≥s.h
>

39 
	#AUDIT_RECORD_MAGIC
 0x828a0f1b

	)

40 
	#MAX_AUDIT_RECORDS
 20

	)

41 
	#MAXAUDITDATA
 (0x8000 - 1)

	)

42 
	#MAX_AUDIT_RECORD_SIZE
 
MAXAUDITDATA


	)

43 
	#MIN_AUDIT_FILE_SIZE
 (512 * 1024)

	)

51 
	#AUDIT_HARD_LIMIT_FREE_BLOCKS
 4

	)

56 
	#AUDIT_TRIGGER_MIN
 1

	)

57 
	#AUDIT_TRIGGER_LOW_SPACE
 1

	)

58 
	#AUDIT_TRIGGER_ROTATE_KERNEL
 2

	)

59 
	#AUDIT_TRIGGER_READ_FILE
 3

	)

60 
	#AUDIT_TRIGGER_CLOSE_AND_DIE
 4

	)

61 
	#AUDIT_TRIGGER_NO_SPACE
 5

	)

62 
	#AUDIT_TRIGGER_ROTATE_USER
 6

	)

63 
	#AUDIT_TRIGGER_INITIALIZE
 7

	)

64 
	#AUDIT_TRIGGER_EXPIRE_TRAILS
 8

	)

65 
	#AUDIT_TRIGGER_MAX
 8

	)

70 
	#AUDITDEV_FILENAME
 "audô"

	)

71 
	#AUDIT_TRIGGER_FILE
 ("/dev/" 
AUDITDEV_FILENAME
)

	)

76 
	#AU_DEFAUDITID
 (
uid_t
)(-1)

	)

77 
	#AU_DEFAUDITSID
 0

	)

78 
	#AU_ASSIGN_ASID
 -1

	)

83 
	#AT_IPC_MSG
 ((
u_ch¨
)1Ë

	)

84 
	#AT_IPC_SEM
 ((
u_ch¨
)2Ë

	)

85 
	#AT_IPC_SHM
 ((
u_ch¨
)3Ë

	)

90 
	#AUC_UNSET
 0

	)

91 
	#AUC_AUDITING
 1

	)

92 
	#AUC_NOAUDIT
 2

	)

93 
	#AUC_DISABLED
 -1

	)

98 
	#A_OLDGETPOLICY
 2

	)

99 
	#A_OLDSETPOLICY
 3

	)

100 
	#A_GETKMASK
 4

	)

101 
	#A_SETKMASK
 5

	)

102 
	#A_OLDGETQCTRL
 6

	)

103 
	#A_OLDSETQCTRL
 7

	)

104 
	#A_GETCWD
 8

	)

105 
	#A_GETCAR
 9

	)

106 
	#A_GETSTAT
 12

	)

107 
	#A_SETSTAT
 13

	)

108 
	#A_SETUMASK
 14

	)

109 
	#A_SETSMASK
 15

	)

110 
	#A_OLDGETCOND
 20

	)

111 
	#A_OLDSETCOND
 21

	)

112 
	#A_GETCLASS
 22

	)

113 
	#A_SETCLASS
 23

	)

114 
	#A_GETPINFO
 24

	)

115 
	#A_SETPMASK
 25

	)

116 
	#A_SETFSIZE
 26

	)

117 
	#A_GETFSIZE
 27

	)

118 
	#A_GETPINFO_ADDR
 28

	)

119 
	#A_GETKAUDIT
 29

	)

120 
	#A_SETKAUDIT
 30

	)

121 
	#A_SENDTRIGGER
 31

	)

122 
	#A_GETSINFO_ADDR
 32

	)

123 
	#A_GETPOLICY
 33

	)

124 
	#A_SETPOLICY
 34

	)

125 
	#A_GETQCTRL
 35

	)

126 
	#A_SETQCTRL
 36

	)

127 
	#A_GETCOND
 37

	)

128 
	#A_SETCOND
 38

	)

133 
	#AUDIT_CNT
 0x0001

	)

134 
	#AUDIT_AHLT
 0x0002

	)

135 
	#AUDIT_ARGV
 0x0004

	)

136 
	#AUDIT_ARGE
 0x0008

	)

137 
	#AUDIT_SEQ
 0x0010

	)

138 
	#AUDIT_WINDATA
 0x0020

	)

139 
	#AUDIT_USER
 0x0040

	)

140 
	#AUDIT_GROUP
 0x0080

	)

141 
	#AUDIT_TRAIL
 0x0100

	)

142 
	#AUDIT_PATH
 0x0200

	)

143 
	#AUDIT_SCNT
 0x0400

	)

144 
	#AUDIT_PUBLIC
 0x0800

	)

145 
	#AUDIT_ZONENAME
 0x1000

	)

146 
	#AUDIT_PERZONE
 0x2000

	)

151 
	#AQ_HIWATER
 100

	)

152 
	#AQ_MAXHIGH
 10000

	)

153 
	#AQ_LOWATER
 10

	)

154 
	#AQ_BUFSZ
 
MAXAUDITDATA


	)

155 
	#AQ_MAXBUFSZ
 1048576

	)

160 
	#AU_FS_MINFREE
 20

	)

166 
	#AU_IPv4
 4

	)

167 
	#AU_IPv6
 16

	)

169 
__BEGIN_DECLS


171 
uid_t
 
	tau_id_t
;

172 
pid_t
 
	tau_asid_t
;

173 
u_öt16_t
 
	tau_evít_t
;

174 
u_öt16_t
 
	tau_emod_t
;

175 
u_öt32_t
 
	tau_˛ass_t
;

176 
u_öt64_t
 
	tau_asÊgs_t
 
	t__©åibuã__
 ((
	tÆig√d
 (8)));

178 
	sau_tid
 {

179 
dev_t
 
	mp‹t
;

180 
u_öt32_t
 
	mmachöe
;

182 
au_tid
 
	tau_tid_t
;

184 
	sau_tid_addr
 {

185 
dev_t
 
	m©_p‹t
;

186 
u_öt32_t
 
	m©_ty≥
;

187 
u_öt32_t
 
	m©_addr
[4];

189 
au_tid_addr
 
	tau_tid_addr_t
;

191 
	sau_mask
 {

192 
	mam_suc˚ss
;

193 
	mam_Áûuª
;

195 
au_mask
 
	tau_mask_t
;

197 
	saudôöfo
 {

198 
au_id_t
 
	mai_auid
;

199 
au_mask_t
 
	mai_mask
;

200 
au_tid_t
 
	mai_ãrmid
;

201 
au_asid_t
 
	mai_asid
;

203 
audôöfo
 
	taudôöfo_t
;

205 
	saudôöfo_addr
 {

206 
au_id_t
 
	mai_auid
;

207 
au_mask_t
 
	mai_mask
;

208 
au_tid_addr_t
 
	mai_ãrmid
;

209 
au_asid_t
 
	mai_asid
;

210 
au_asÊgs_t
 
	mai_Êags
;

212 
audôöfo_addr
 
	taudôöfo_addr_t
;

214 
	saudôpöfo
 {

215 
pid_t
 
	m≠_pid
;

216 
au_id_t
 
	m≠_auid
;

217 
au_mask_t
 
	m≠_mask
;

218 
au_tid_t
 
	m≠_ãrmid
;

219 
au_asid_t
 
	m≠_asid
;

221 
audôpöfo
 
	taudôpöfo_t
;

223 
	saudôpöfo_addr
 {

224 
pid_t
 
	m≠_pid
;

225 
au_id_t
 
	m≠_auid
;

226 
au_mask_t
 
	m≠_mask
;

227 
au_tid_addr_t
 
	m≠_ãrmid
;

228 
au_asid_t
 
	m≠_asid
;

229 
au_asÊgs_t
 
	m≠_Êags
;

231 
audôpöfo_addr
 
	taudôpöfo_addr_t
;

233 
	sau_£ssi⁄
 {

234 
audôöfo_addr_t
 *
	mas_aü_p
;

235 
au_mask_t
 
	mas_mask
;

237 
au_£ssi⁄
 
	tau_£ssi⁄_t
;

242 
au_tokí
 
	ttokí_t
;

252 
	sau_q˘æ
 {

253 
	maq_hiw©î
;

256 
	maq_low©î
;

259 
	maq_bufsz
;

260 
	maq_dñay
;

261 
	maq_mö‰ì
;

263 
au_q˘æ
 
	tau_q˘æ_t
;

268 
	saudô_°©
 {

269 
	mas_vîsi⁄
;

270 
	mas_numevít
;

271 
	mas_gíî©ed
;

272 
	mas_n⁄©åib
;

273 
	mas_kî√l
;

274 
	mas_audô
;

275 
	mas_audô˘l
;

276 
	mas_íqueue
;

277 
	mas_wrôãn
;

278 
	mas_wblocked
;

279 
	mas_rblocked
;

280 
	mas_dr›≥d
;

281 
	mas_tŸÆsize
;

282 
	mas_memu£d
;

284 
audô_°©
 
	tau_°©_t
;

289 
	saudô_f°©
 {

290 
u_öt64_t
 
	maf_fûesz
;

291 
u_öt64_t
 
	maf_cuºsz
;

293 
audô_f°©
 
	tau_f°©_t
;

298 
	sau_ev˛ass_m≠
 {

299 
au_evít_t
 
	mec_numbî
;

300 
au_˛ass_t
 
	mec_˛ass
;

302 
au_ev˛ass_m≠
 
	tau_ev˛ass_m≠_t
;

307 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
KERNEL
)

308 
audô
(const *, );

309 
audô⁄
(, *, );

310 
audô˘l
(const *);

311 
gëauid
(
au_id_t
 *);

312 
£èuid
(c⁄° 
au_id_t
 *);

313 
gëaudô
(
audôöfo
 *);

314 
£èudô
(c⁄° 
audôöfo
 *);

315 
gëaudô_addr
(
audôöfo_addr
 *, );

316 
£èudô_addr
(c⁄° 
audôöfo_addr
 *, );

318 #ifde‡
__APPLE_API_PRIVATE


319 
	~<mach/p‹t.h
>

320 
mach_p‹t_«me_t
 
audô_£ssi⁄_£lf
();

321 
au_asid_t
 
audô_£ssi⁄_joö
(
mach_p‹t_«me_t
 
p‹t
);

326 
	g__END_DECLS


	@/usr/include/sys/_lock.h

31 #i‚de‡
_SYS__LOCK_H_


32 
	#_SYS__LOCK_H_


	)

34 
	slock_obje˘
 {

35 c⁄° *
	mlo_«me
;

36 
u_öt
 
	mlo_Êags
;

37 
u_öt
 
	mlo_d©a
;

38 
wô√ss
 *
	mlo_wô√ss
;

	@/usr/include/sys/_lockmgr.h

31 #i‚de‡
_SYS__LOCKMGR_H_


32 
	#_SYS__LOCKMGR_H_


	)

34 #ifde‡
DEBUG_LOCKS


35 
	~<sys/_°ack.h
>

38 
	slock
 {

39 
lock_obje˘
 
	mlock_obje˘
;

40 vﬁ©ûê
uöçå_t
 
	mlk_lock
;

41 
u_öt
 
	mlk_ex¶pÁû
;

42 
	mlk_timo
;

43 
	mlk_¥i
;

44 #ifde‡
DEBUG_LOCKS


45 
°ack
 
	mlk_°ack
;

	@/usr/include/sys/_rwlock.h

32 #i‚de‡
_SYS__RWLOCK_H_


33 
	#_SYS__RWLOCK_H_


	)

38 
	srwlock
 {

39 
lock_obje˘
 
	mlock_obje˘
;

40 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

	@/usr/include/sys/linker_set.h

30 #i‚de‡
_SYS_LINKER_SET_H_


31 
	#_SYS_LINKER_SET_H_


	)

33 #i‚de‡
_SYS_CDEFS_H_


34 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 #ifde‡
__GNUCLIKE___SECTION


47 
	#__MAKE_SET
(
£t
, 
sym
) \

48 
	`__GLOBL
(
	`__CONCAT
(
__°¨t_£t_
,
£t
)); \

49 
	`__GLOBL
(
	`__CONCAT
(
__°›_£t_
,
£t
)); \

50 c⁄° * c⁄° 
__£t_
##
£t
##
_sym_
##
sym
 \

51 
	`__£˘i⁄
("£t_" #£tË
__u£d
 = &
sym


	)

53 #i‚de‡
löt


54 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


56 
	#__MAKE_SET
(
£t
, 
sym
Ëc⁄° * c⁄° (
__£t_
##£t##
_sym_
##sym)

	)

62 
	#TEXT_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

63 
	#DATA_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

64 
	#BSS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

65 
	#ABS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

66 
	#SET_ENTRY
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

71 
	#SET_DECLARE
(
£t
, 
±y≥
) \

72 
±y≥
 *
	`__CONCAT
(
__°¨t_£t_
,
£t
); \

73 
±y≥
 *
	`__CONCAT
(
__°›_£t_
,
£t
)

	)

75 
	#SET_BEGIN
(
£t
) \

76 (&
	`__CONCAT
(
__°¨t_£t_
,
£t
))

	)

77 
	#SET_LIMIT
(
£t
) \

78 (&
	`__CONCAT
(
__°›_£t_
,
£t
))

	)

87 
	#SET_FOREACH
(
pv¨
, 
£t
) \

88 
pv¨
 = 
	`SET_BEGIN
(
£t
);Öv¨ < 
	`SET_LIMIT
(£t);Öv¨++)

	)

90 
	#SET_ITEM
(
£t
, 
i
) \

91 ((
	`SET_BEGIN
(
£t
))[
i
])

	)

96 
	#SET_COUNT
(
£t
) \

97 (
	`SET_LIMIT
(
£t
Ë- 
	`SET_BEGIN
(£t))

	)

	@/usr/include/sys/_stack.h

29 #i‚de‡
_SYS__STACK_H_


30 
	#_SYS__STACK_H_


	)

32 
	#STACK_MAX
 18

	)

34 
	s°ack
 {

35 
	mdïth
;

36 
vm_off£t_t
 
	mpcs
[
STACK_MAX
];

	@/usr/include/sys/param.h

38 #i‚de‡
_SYS_PARAM_H_


39 
	#_SYS_PARAM_H_


	)

41 
	~<sys/_nuŒ.h
>

43 
	#BSD
 199506

	)

44 
	#BSD4_3
 1

	)

45 
	#BSD4_4
 1

	)

60 #unde‡
__FªeBSD_vîsi⁄


61 
	#__FªeBSD_vîsi⁄
 902001

	)

76 #unde‡
__FªeBSD_kî√l__


77 
	#__FªeBSD_kî√l__


	)

79 #ifde‡
_KERNEL


80 
	#P_OSREL_SIGWAIT
 700000

	)

81 
	#P_OSREL_SIGSEGV
 700004

	)

82 
	#P_OSREL_MAP_ANON
 800104

	)

85 #i‚de‡
LOCORE


86 
	~<sys/ty≥s.h
>

95 
	~<sys/sy¶imôs.h
>

97 
	#MAXCOMLEN
 19

	)

98 
	#MAXINTERP
 
PATH_MAX


	)

99 
	#MAXLOGNAME
 17

	)

100 
	#MAXUPRC
 
CHILD_MAX


	)

101 
	#NCARGS
 
ARG_MAX


	)

102 
	#NGROUPS
 (
NGROUPS_MAX
+1Ë

	)

103 
	#NOFILE
 
OPEN_MAX


	)

104 
	#NOGROUP
 65535

	)

105 
	#MAXHOSTNAMELEN
 256

	)

106 
	#SPECNAMELEN
 63

	)

109 #ifde‡
_KERNEL


110 
	~<sys/cdefs.h
>

111 
	~<sys/î∫o.h
>

112 #i‚de‡
LOCORE


113 
	~<sys/time.h
>

114 
	~<sys/¥i‹ôy.h
>

117 #i‚de‡
FALSE


118 
	#FALSE
 0

	)

120 #i‚de‡
TRUE


121 
	#TRUE
 1

	)

125 #i‚de‡
_KERNEL


127 
	~<sys/sig«l.h
>

131 
	~<machöe/∑øm.h
>

132 #i‚de‡
_KERNEL


133 
	~<sys/limôs.h
>

136 #i‚de‡
DEV_BSHIFT


137 
	#DEV_BSHIFT
 9

	)

139 
	#DEV_BSIZE
 (1<<
DEV_BSHIFT
)

	)

141 #i‚de‡
BLKDEV_IOSIZE


142 
	#BLKDEV_IOSIZE
 
PAGE_SIZE


	)

144 #i‚de‡
DFLTPHYS


145 
	#DFLTPHYS
 (64 * 1024Ë

	)

147 #i‚de‡
MAXPHYS


148 
	#MAXPHYS
 (128 * 1024Ë

	)

150 #i‚de‡
MAXDUMPPGS


151 
	#MAXDUMPPGS
 (
DFLTPHYS
/
PAGE_SIZE
)

	)

158 #i‚def 
MSIZE


159 
	#MSIZE
 256

	)

162 #i‚def 
MCLSHIFT


163 
	#MCLSHIFT
 11

	)

166 
	#MCLBYTES
 (1 << 
MCLSHIFT
Ë

	)

168 #i‡
PAGE_SIZE
 < 2048

169 
	#MJUMPAGESIZE
 
MCLBYTES


	)

170 #ñi‡
PAGE_SIZE
 <= 8192

171 
	#MJUMPAGESIZE
 
PAGE_SIZE


	)

173 
	#MJUMPAGESIZE
 (8 * 1024)

	)

176 
	#MJUM9BYTES
 (9 * 1024Ë

	)

177 
	#MJUM16BYTES
 (16 * 1024Ë

	)

184 #i‚de‡
˘ob


185 
	#˘ob
(
x
Ë((x)<<
PAGE_SHIFT
)

	)

189 #i‚de‡
btoc


190 
	#btoc
(
x
Ë(((
vm_off£t_t
)(x)+
PAGE_MASK
)>>
PAGE_SHIFT
)

	)

199 #i‚de‡
btodb


200 
	#btodb
(
byãs
) \

201 ( (
byãs
) > () \

202 ? (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
) \

203 : (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
))

	)

206 #i‚de‡
dbtob


207 
	#dbtob
(
db
) \

208 ((
off_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

211 
	#PRIMASK
 0x0ff

	)

212 
	#PCATCH
 0x100

	)

213 
	#PDROP
 0x200

	)

214 
	#PBDRY
 0x400

	)

216 
	#NZERO
 0

	)

218 
	#NBBY
 8

	)

219 
	#NBPW
 (Ë

	)

221 
	#CMASK
 022

	)

223 
	#NODEV
 (
dev_t
)(-1Ë

	)

248 
	#MAXBSIZE
 65536

	)

249 
	#BKVASIZE
 16384

	)

250 
	#BKVAMASK
 (
BKVASIZE
-1)

	)

261 
	#MAXPATHLEN
 
PATH_MAX


	)

262 
	#MAXSYMLINKS
 32

	)

265 
	#£tbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] |1<<((i)%NBBY))

	)

266 
	#˛rbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

267 
	#is£t
(
a
,
i
) \

268 (((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY)))

	)

269 
	#is˛r
(
a
,
i
) \

270 ((((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

273 #i‚de‡
howm™y


274 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

276 
	#nôems
(
x
Ë(((x)Ë/ ((x)[0]))

	)

277 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

278 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y)Ë

	)

279 
	#roundup2
(
x
, 
y
Ë(((x)+((y)-1))&(~((y)-1))Ë

	)

280 
	#powîof2
(
x
Ë((((x)-1)&(x))==0)

	)

283 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

284 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

286 #ifde‡
_KERNEL


290 #i‚de‡
LOCORE


291 #i‚de‡
_BYTEORDER_PROTOTYPED


292 
	#_BYTEORDER_PROTOTYPED


	)

293 
__BEGIN_DECLS


294 
__uöt32_t
 
ht⁄l
(__uint32_t);

295 
__uöt16_t
 
ht⁄s
(__uint16_t);

296 
__uöt32_t
 
¡ohl
(__uint32_t);

297 
__uöt16_t
 
¡ohs
(__uint16_t);

298 
	g__END_DECLS


302 #i‚de‡
löt


303 #i‚de‡
_BYTEORDER_FUNC_DEFINED


304 
	#_BYTEORDER_FUNC_DEFINED


	)

305 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

306 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

307 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

308 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

324 
	#FSHIFT
 11

	)

325 
	#FSCALE
 (1<<
FSHIFT
)

	)

327 
	#dbtoc
(
db
) \

328 ((
db
 + (
	`˘odb
(1Ë- 1)Ë>> (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

330 
	#˘odb
(
db
) \

331 ((
db
Ë<< (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

336 
	#membî2°ru˘
(
s
, 
m
, 
x
) \

337 ((
s
 *)(*)((*)(
x
Ë- 
	`off£tof
(s, 
m
)))

	)

343 
	#__PAST_END
(
¨øy
, 
off£t
Ë(((
	`__ty≥of__
(*◊ºay)Ë*)◊ºay))[off£t])

	)

	@/usr/include/machine/param.h

43 #i‚de‡
_AMD64_INCLUDE_PARAM_H_


44 
	#_AMD64_INCLUDE_PARAM_H_


	)

46 
	~<machöe/_Æign.h
>

53 
	#__HAVE_ACPI


	)

54 
	#__PCI_REROUTE_INTERRUPT


	)

56 #i‚de‡
MACHINE


57 
	#MACHINE
 "amd64"

	)

59 #i‚de‡
MACHINE_ARCH


60 
	#MACHINE_ARCH
 "amd64"

	)

62 #i‚de‡
MACHINE_ARCH32


63 
	#MACHINE_ARCH32
 "i386"

	)

66 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

67 #i‚de‡
MAXCPU


68 
	#MAXCPU
 64

	)

71 
	#MAXCPU
 1

	)

74 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

75 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

82 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

88 
	#CACHE_LINE_SHIFT
 7

	)

89 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

92 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

93 
	#NPTEPGSHIFT
 9

	)

94 
	#PAGE_SHIFT
 12

	)

95 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

96 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

98 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

99 
	#NPDEPGSHIFT
 9

	)

100 
	#PDRSHIFT
 21

	)

101 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

102 
	#PDRMASK
 (
NBPDR
-1)

	)

104 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

105 
	#NPDPEPGSHIFT
 9

	)

106 
	#PDPSHIFT
 30

	)

107 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

108 
	#PDPMASK
 (
NBPDP
-1)

	)

110 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

111 
	#NPML4EPGSHIFT
 9

	)

112 
	#PML4SHIFT
 39

	)

113 
	#NBPML4
 (1UL<<
PML4SHIFT
)

	)

114 
	#PML4MASK
 (
NBPML4
-1)

	)

116 
	#MAXPAGESIZES
 3

	)

118 
	#IOPAGES
 2

	)

120 #i‚def 
KSTACK_PAGES


121 
	#KSTACK_PAGES
 4

	)

123 
	#KSTACK_GUARD_PAGES
 1

	)

128 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

129 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

130 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

131 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

132 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

134 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

135 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

137 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

138 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

140 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

	@/usr/include/sys/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

178 
	#ECAPMODE
 94

	)

179 
	#ENOTRECOVERABLE
 95

	)

182 #i‚de‡
_POSIX_SOURCE


183 
	#ELAST
 94

	)

186 #ifde‡
_KERNEL


188 
	#ERESTART
 (-1Ë

	)

189 
	#EJUSTRETURN
 (-2Ë

	)

190 
	#ENOIOCTL
 (-3Ë

	)

191 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/sys/limits.h

32 #i‚de‡
_SYS_LIMITS_H_


33 
	#_SYS_LIMITS_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<machöe/_limôs.h
>

38 
	#CHAR_BIT
 
__CHAR_BIT


	)

40 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

41 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

43 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

45 #ifde‡
__CHAR_UNSIGNED__


46 
	#CHAR_MAX
 
UCHAR_MAX


	)

47 
	#CHAR_MIN
 0

	)

49 
	#CHAR_MAX
 
SCHAR_MAX


	)

50 
	#CHAR_MIN
 
SCHAR_MIN


	)

53 
	#USHRT_MAX
 
__USHRT_MAX


	)

54 
	#SHRT_MAX
 
__SHRT_MAX


	)

55 
	#SHRT_MIN
 
__SHRT_MIN


	)

57 
	#UINT_MAX
 
__UINT_MAX


	)

58 
	#INT_MAX
 
__INT_MAX


	)

59 
	#INT_MIN
 
__INT_MIN


	)

61 
	#ULONG_MAX
 
__ULONG_MAX


	)

62 
	#LONG_MAX
 
__LONG_MAX


	)

63 
	#LONG_MIN
 
__LONG_MIN


	)

65 #ifde‡
__LONG_LONG_SUPPORTED


66 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

67 
	#LLONG_MAX
 
__LLONG_MAX


	)

68 
	#LLONG_MIN
 
__LLONG_MIN


	)

71 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


72 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

78 
	#OFF_MAX
 
__OFF_MAX


	)

79 
	#OFF_MIN
 
__OFF_MIN


	)

82 #i‡
__BSD_VISIBLE


83 
	#GID_MAX
 
UINT_MAX


	)

84 
	#UID_MAX
 
UINT_MAX


	)

86 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

87 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

88 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

91 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

92 
	#LONG_BIT
 
__LONG_BIT


	)

93 
	#WORD_BIT
 
__WORD_BIT


	)

96 #i‡
__POSIX_VISIBLE


97 
	#MQ_PRIO_MAX
 64

	)

	@/usr/include/sys/priority.h

34 #i‚de‡
_SYS_PRIORITY_H_


35 
	#_SYS_PRIORITY_H_


	)

45 
	#PRI_ITHD
 1

	)

46 
	#PRI_REALTIME
 2

	)

47 
	#PRI_TIMESHARE
 3

	)

48 
	#PRI_IDLE
 4

	)

54 
	#PRI_FIFO_BIT
 8

	)

55 
	#PRI_FIFO
 (
PRI_FIFO_BIT
 | 
PRI_REALTIME
)

	)

57 
	#PRI_BASE
(
P
Ë((PË& ~
PRI_FIFO_BIT
)

	)

58 
	#PRI_IS_REALTIME
(
P
Ë(
	`PRI_BASE
(PË=
PRI_REALTIME
)

	)

59 
	#PRI_NEED_RR
(
P
Ë((PË!
PRI_FIFO
)

	)

80 
	#PRI_MIN
 (0Ë

	)

81 
	#PRI_MAX
 (255Ë

	)

83 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

84 
	#PRI_MAX_ITHD
 (
PRI_MIN_REALTIME
 - 1)

	)

86 
	#PI_REALTIME
 (
PRI_MIN_ITHD
 + 0)

	)

87 
	#PI_AV
 (
PRI_MIN_ITHD
 + 4)

	)

88 
	#PI_NET
 (
PRI_MIN_ITHD
 + 8)

	)

89 
	#PI_DISK
 (
PRI_MIN_ITHD
 + 12)

	)

90 
	#PI_TTY
 (
PRI_MIN_ITHD
 + 16)

	)

91 
	#PI_DULL
 (
PRI_MIN_ITHD
 + 20)

	)

92 
	#PI_SOFT
 (
PRI_MIN_ITHD
 + 24)

	)

93 
	#PI_SWI
(
x
Ë(
PI_SOFT
 + (xË* 
RQ_PPQ
)

	)

95 
	#PRI_MIN_REALTIME
 (48)

	)

96 
	#PRI_MAX_REALTIME
 (
PRI_MIN_KERN
 - 1)

	)

98 
	#PRI_MIN_KERN
 (80)

	)

99 
	#PRI_MAX_KERN
 (
PRI_MIN_TIMESHARE
 - 1)

	)

101 
	#PSWP
 (
PRI_MIN_KERN
 + 0)

	)

102 
	#PVM
 (
PRI_MIN_KERN
 + 4)

	)

103 
	#PINOD
 (
PRI_MIN_KERN
 + 8)

	)

104 
	#PRIBIO
 (
PRI_MIN_KERN
 + 12)

	)

105 
	#PVFS
 (
PRI_MIN_KERN
 + 16)

	)

106 
	#PZERO
 (
PRI_MIN_KERN
 + 20)

	)

107 
	#PSOCK
 (
PRI_MIN_KERN
 + 24)

	)

108 
	#PWAIT
 (
PRI_MIN_KERN
 + 28)

	)

109 
	#PLOCK
 (
PRI_MIN_KERN
 + 32)

	)

110 
	#PPAUSE
 (
PRI_MIN_KERN
 + 36)

	)

112 
	#PRI_MIN_TIMESHARE
 (120)

	)

113 
	#PRI_MAX_TIMESHARE
 (
PRI_MIN_IDLE
 - 1)

	)

115 
	#PUSER
 (
PRI_MIN_TIMESHARE
)

	)

117 
	#PRI_MIN_IDLE
 (224)

	)

118 
	#PRI_MAX_IDLE
 (
PRI_MAX
)

	)

120 #ifde‡
_KERNEL


122 
	#PRI_USER
 -2

	)

123 
	#PRI_UNCHANGED
 -1

	)

126 
	s¥i‹ôy
 {

127 
u_ch¨
 
	m¥i_˛ass
;

128 
u_ch¨
 
	m¥i_Àvñ
;

129 
u_ch¨
 
	m¥i_«tive
;

130 
u_ch¨
 
	m¥i_u£r
;

	@/usr/include/sys/signal.h

38 #i‚de‡
_SYS_SIGNAL_H_


39 
	#_SYS_SIGNAL_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

43 
	~<sys/_sig£t.h
>

45 
	~<machöe/_limôs.h
>

46 
	~<machöe/sig«l.h
>

51 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


52 
	#SIGHUP
 1

	)

54 
	#SIGINT
 2

	)

55 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


56 
	#SIGQUIT
 3

	)

58 
	#SIGILL
 4

	)

59 #i‡
__XSI_VISIBLE


60 
	#SIGTRAP
 5

	)

62 
	#SIGABRT
 6

	)

63 #i‡
__BSD_VISIBLE


64 
	#SIGIOT
 
SIGABRT


	)

65 
	#SIGEMT
 7

	)

67 
	#SIGFPE
 8

	)

68 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


69 
	#SIGKILL
 9

	)

71 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


72 
	#SIGBUS
 10

	)

74 
	#SIGSEGV
 11

	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIGSYS
 12

	)

78 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


79 
	#SIGPIPE
 13

	)

80 
	#SIGALRM
 14

	)

82 
	#SIGTERM
 15

	)

83 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


84 
	#SIGURG
 16

	)

86 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


87 
	#SIGSTOP
 17

	)

88 
	#SIGTSTP
 18

	)

89 
	#SIGCONT
 19

	)

90 
	#SIGCHLD
 20

	)

91 
	#SIGTTIN
 21

	)

92 
	#SIGTTOU
 22

	)

94 #i‡
__BSD_VISIBLE


95 
	#SIGIO
 23

	)

97 #i‡
__XSI_VISIBLE


98 
	#SIGXCPU
 24

	)

99 
	#SIGXFSZ
 25

	)

100 
	#SIGVTALRM
 26

	)

101 
	#SIGPROF
 27

	)

103 #i‡
__BSD_VISIBLE


104 
	#SIGWINCH
 28

	)

105 
	#SIGINFO
 29

	)

107 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


108 
	#SIGUSR1
 30

	)

109 
	#SIGUSR2
 31

	)

111 #i‡
__BSD_VISIBLE


112 
	#SIGTHR
 32

	)

113 
	#SIGLWP
 
SIGTHR


	)

116 
	#SIGRTMIN
 65

	)

117 
	#SIGRTMAX
 126

	)

119 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

120 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

121 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

123 
	#SIG_HOLD
 ((
__sigh™dÀr_t
 *)3)

	)

141 
	t__sigh™dÀr_t
();

143 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


144 #i‚de‡
_SIGSET_T_DECLARED


145 
	#_SIGSET_T_DECLARED


	)

146 
__sig£t_t
 
	tsig£t_t
;

150 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

151 
	usigvÆ
 {

153 
	msivÆ_öt
;

154 *
	msivÆ_±r
;

156 
	msigvÆ_öt
;

157 *
	msigvÆ_±r
;

161 #i‡
__POSIX_VISIBLE
 >= 199309

162 
	ssigevít
 {

163 
	msigev_nŸify
;

164 
	msigev_signo
;

165 
sigvÆ
 
	msigev_vÆue
;

167 
__lwpid_t
 
	m_thªadid
;

169 (*
	m_fun˘i⁄
)(
	msigvÆ
);

170 *
	m_©åibuã
;

171 } 
	m_sigev_thªad
;

172 
	m_kevít_Êags
;

173 
	m__•¨e__
[8];

174 } 
	m_sigev_un
;

177 #i‡
__BSD_VISIBLE


178 
	#sigev_nŸify_kqueue
 
sigev_signo


	)

179 
	#sigev_nŸify_kevít_Êags
 
_sigev_un
.
_kevít_Êags


	)

180 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_thªadid


	)

182 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

183 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

185 
	#SIGEV_NONE
 0

	)

186 
	#SIGEV_SIGNAL
 1

	)

187 
	#SIGEV_THREAD
 2

	)

188 #i‡
__BSD_VISIBLE


189 
	#SIGEV_KEVENT
 3

	)

190 
	#SIGEV_THREAD_ID
 4

	)

194 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


195 
	s__sigöfo
 {

196 
	msi_signo
;

197 
	msi_î∫o
;

204 
	msi_code
;

205 
__pid_t
 
	msi_pid
;

206 
__uid_t
 
	msi_uid
;

207 
	msi_°©us
;

208 *
	msi_addr
;

209 
sigvÆ
 
	msi_vÆue
;

212 
	m_å≠no
;

213 } 
	m_Áu…
;

215 
	m_timîid
;

216 
	m_ovîrun
;

217 } 
	m_timî
;

219 
	m_mqd
;

220 } 
	m_mesgq
;

222 
	m_b™d
;

223 } 
	m_pﬁl
;

225 
	m__•¨e1__
;

226 
	m__•¨e2__
[7];

227 } 
	m__•¨e__
;

228 } 
	m_ªas⁄
;

229 } 
	tsigöfo_t
;

231 
	#si_å≠no
 
_ªas⁄
.
_Áu…
.
_å≠no


	)

232 
	#si_timîid
 
_ªas⁄
.
_timî
.
_timîid


	)

233 
	#si_ovîrun
 
_ªas⁄
.
_timî
.
_ovîrun


	)

234 
	#si_mqd
 
_ªas⁄
.
_mesgq
.
_mqd


	)

235 
	#si_b™d
 
_ªas⁄
.
_pﬁl
.
_b™d


	)

239 
	#ILL_ILLOPC
 1

	)

240 
	#ILL_ILLOPN
 2

	)

241 
	#ILL_ILLADR
 3

	)

242 
	#ILL_ILLTRP
 4

	)

243 
	#ILL_PRVOPC
 5

	)

244 
	#ILL_PRVREG
 6

	)

245 
	#ILL_COPROC
 7

	)

246 
	#ILL_BADSTK
 8

	)

249 
	#BUS_ADRALN
 1

	)

250 
	#BUS_ADRERR
 2

	)

251 
	#BUS_OBJERR
 3

	)

254 
	#SEGV_MAPERR
 1

	)

255 
	#SEGV_ACCERR
 2

	)

259 
	#FPE_INTOVF
 1

	)

260 
	#FPE_INTDIV
 2

	)

261 
	#FPE_FLTDIV
 3

	)

262 
	#FPE_FLTOVF
 4

	)

263 
	#FPE_FLTUND
 5

	)

264 
	#FPE_FLTRES
 6

	)

265 
	#FPE_FLTINV
 7

	)

266 
	#FPE_FLTSUB
 8

	)

269 
	#TRAP_BRKPT
 1

	)

270 
	#TRAP_TRACE
 2

	)

271 
	#TRAP_DTRACE
 3

	)

274 
	#CLD_EXITED
 1

	)

275 
	#CLD_KILLED
 2

	)

277 
	#CLD_DUMPED
 3

	)

279 
	#CLD_TRAPPED
 4

	)

280 
	#CLD_STOPPED
 5

	)

281 
	#CLD_CONTINUED
 6

	)

284 
	#POLL_IN
 1

	)

285 
	#POLL_OUT
 2

	)

286 
	#POLL_MSG
 3

	)

287 
	#POLL_ERR
 4

	)

288 
	#POLL_PRI
 5

	)

289 
	#POLL_HUP
 6

	)

293 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


294 
	g__sigöfo
;

299 
	ssiga˘i⁄
 {

301 (*
	m__ß_h™dÀr
)();

302 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

303 } 
	m__siga˘i⁄_u
;

304 
	mß_Êags
;

305 
sig£t_t
 
	mß_mask
;

308 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

311 #i‡
__XSI_VISIBLE


313 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

316 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


317 
	#SA_NOCLDSTOP
 0x0008

	)

320 #i‡
__XSI_VISIBLE


321 
	#SA_ONSTACK
 0x0001

	)

322 
	#SA_RESTART
 0x0002

	)

323 
	#SA_RESETHAND
 0x0004

	)

324 
	#SA_NODEFER
 0x0010

	)

325 
	#SA_NOCLDWAIT
 0x0020

	)

326 
	#SA_SIGINFO
 0x0040

	)

329 #i‡
__BSD_VISIBLE


330 
	#NSIG
 32

	)

333 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


334 
	#SI_NOINFO
 0

	)

335 
	#SI_USER
 0x10001

	)

336 
	#SI_QUEUE
 0x10002

	)

337 
	#SI_TIMER
 0x10003

	)

339 
	#SI_ASYNCIO
 0x10004

	)

341 
	#SI_MESGQ
 0x10005

	)

343 
	#SI_KERNEL
 0x10006

	)

344 
	#SI_LWP
 0x10007

	)

346 #i‡
__BSD_VISIBLE


347 
	#SI_UNDEFINED
 0

	)

350 #i‡
__BSD_VISIBLE


351 
__sigh™dÀr_t
 *
	tsig_t
;

352 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

355 #i‡
__XSI_VISIBLE


359 #i‡
__BSD_VISIBLE


360 
	ssigÆt°ack
 {

364 *
	mss_•
;

365 
__size_t
 
	mss_size
;

366 
	mss_Êags
;

367 } 
	t°ack_t
;

369 
	#SS_ONSTACK
 0x0001

	)

370 
	#SS_DISABLE
 0x0004

	)

371 
	#MINSIGSTKSZ
 
__MINSIGSTKSZ


	)

372 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

375 #i‡
__BSD_VISIBLE


380 
	ssigvec
 {

381 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

382 
	msv_mask
;

383 
	msv_Êags
;

386 
	#SV_ONSTACK
 
SA_ONSTACK


	)

387 
	#SV_INTERRUPT
 
SA_RESTART


	)

388 
	#SV_RESETHAND
 
SA_RESETHAND


	)

389 
	#SV_NODEFER
 
SA_NODEFER


	)

390 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

391 
	#SV_SIGINFO
 
SA_SIGINFO


	)

392 
	#sv_⁄°ack
 
sv_Êags


	)

396 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

397 !
	$deföed
(
__i386__
)

398 
	sosigc⁄ãxt
 {

399 
_nŸ_u£d
;

403 #i‡
__XSI_VISIBLE


407 
	ssig°ack
 {

409 *
ss_•
;

410 
ss_⁄°ack
;

414 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

419 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

422 #i‡
__BSD_VISIBLE


423 
	#BADSIG
 
SIG_ERR


	)

426 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


430 
	#SIG_BLOCK
 1

	)

431 
	#SIG_UNBLOCK
 2

	)

432 
	#SIG_SETMASK
 3

	)

439 
__BEGIN_DECLS


440 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

441 
__END_DECLS


	@/usr/include/sys/syslimits.h

33 #i‚de‡
_SYS_SYSLIMITS_H_


34 
	#_SYS_SYSLIMITS_H_


	)

36 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_LIMITS_H_
Ë&& !deföed(
_SYS_PARAM_H_
)

37 #i‚de‡
_SYS_CDEFS_H_


38 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


40 #ifde‡
__CC_SUPPORTS_WARNING


49 
	#ARG_MAX
 262144

	)

50 #i‚de‡
CHILD_MAX


51 
	#CHILD_MAX
 40

	)

53 
	#LINK_MAX
 32767

	)

54 
	#MAX_CANON
 255

	)

55 
	#MAX_INPUT
 255

	)

56 
	#NAME_MAX
 255

	)

57 #i‚de‡
NGROUPS_MAX


58 
	#NGROUPS_MAX
 1023

	)

60 #i‚de‡
OPEN_MAX


61 
	#OPEN_MAX
 64

	)

63 
	#PATH_MAX
 1024

	)

64 
	#PIPE_BUF
 512

	)

65 
	#IOV_MAX
 1024

	)

	@/usr/include/machine/_limits.h

33 #i‚def 
_MACHINE__LIMITS_H_


34 
	#_MACHINE__LIMITS_H_


	)

45 
	#__CHAR_BIT
 8

	)

47 
	#__SCHAR_MAX
 0x7‡

	)

48 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

50 
	#__UCHAR_MAX
 0xf‡

	)

52 
	#__USHRT_MAX
 0xfff‡

	)

53 
	#__SHRT_MAX
 0x7ff‡

	)

54 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

56 
	#__UINT_MAX
 0xfffffff‡

	)

57 
	#__INT_MAX
 0x7ffffff‡

	)

58 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

60 
	#__ULONG_MAX
 0xfffffffffffffff‡

	)

61 
	#__LONG_MAX
 0x7ffffffffffffff‡

	)

62 
	#__LONG_MIN
 (-0x7ffffffffffffff‡- 1Ë

	)

65 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

66 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

67 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

69 
	#__SSIZE_MAX
 
__LONG_MAX


	)

71 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

73 
	#__OFF_MAX
 
__LONG_MAX


	)

74 
	#__OFF_MIN
 
__LONG_MIN


	)

77 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

78 
	#__QUAD_MAX
 
__LONG_MAX


	)

79 
	#__QUAD_MIN
 
__LONG_MIN


	)

81 
	#__LONG_BIT
 64

	)

82 
	#__WORD_BIT
 32

	)

85 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@/usr/include/machine/signal.h

34 #i‚de‡
_MACHINE_SIGNAL_H_


35 
	#_MACHINE_SIGNAL_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_sig£t.h
>

44 
	tsig_©omic_t
;

46 #i‡
__BSD_VISIBLE


47 
	~<machöe/å≠.h
>

59 
	ssigc⁄ãxt
 {

60 
__sig£t
 
	msc_mask
;

61 
	msc_⁄°ack
;

62 
	msc_rdi
;

63 
	msc_rsi
;

64 
	msc_rdx
;

65 
	msc_rcx
;

66 
	msc_r8
;

67 
	msc_r9
;

68 
	msc_øx
;

69 
	msc_rbx
;

70 
	msc_rbp
;

71 
	msc_r10
;

72 
	msc_r11
;

73 
	msc_r12
;

74 
	msc_r13
;

75 
	msc_r14
;

76 
	msc_r15
;

77 
	msc_å≠no
;

78 
	msc_fs
;

79 
	msc_gs
;

80 
	msc_addr
;

81 
	msc_Êags
;

82 
	msc_es
;

83 
	msc_ds
;

84 
	msc_îr
;

85 
	msc_rù
;

86 
	msc_cs
;

87 
	msc_rÊags
;

88 
	msc_r•
;

89 
	msc_ss
;

90 
	msc_Àn
;

95 
	msc_Âf‹m©
;

96 
	msc_ow√dÂ
;

97 
	msc_Â°©e
[64] 
__Æig√d
(16);

99 
	msc_fsba£
;

100 
	msc_gsba£
;

102 
	msc_xÂu°©e
;

103 
	msc_xÂu°©e_Àn
;

105 
	msc_•¨e
[4];

	@/usr/include/machine/trap.h

36 #i‚de‡
_MACHINE_TRAP_H_


37 
	#_MACHINE_TRAP_H_


	)

44 
	#T_PRIVINFLT
 1

	)

45 
	#T_BPTFLT
 3

	)

46 
	#T_ARITHTRAP
 6

	)

47 
	#T_PROTFLT
 9

	)

48 
	#T_TRCTRAP
 10

	)

49 
	#T_PAGEFLT
 12

	)

50 
	#T_ALIGNFLT
 14

	)

52 
	#T_DIVIDE
 18

	)

53 
	#T_NMI
 19

	)

54 
	#T_OFLOW
 20

	)

55 
	#T_BOUND
 21

	)

56 
	#T_DNA
 22

	)

57 
	#T_DOUBLEFLT
 23

	)

58 
	#T_FPOPFLT
 24

	)

59 
	#T_TSSFLT
 25

	)

60 
	#T_SEGNPFLT
 26

	)

61 
	#T_STKFLT
 27

	)

62 
	#T_MCHK
 28

	)

63 
	#T_XMMFLT
 29

	)

64 
	#T_RESERVED
 30

	)

65 
	#T_DTRACE_RET
 32

	)

66 
	#T_DTRACE_PROBE
 33

	)

71 
	#ILL_RESAD_FAULT
 
T_RESADFLT


	)

72 
	#ILL_PRIVIN_FAULT
 
T_PRIVINFLT


	)

73 
	#ILL_RESOP_FAULT
 
T_RESOPFLT


	)

74 
	#ILL_ALIGN_FAULT
 
T_ALIGNFLT


	)

75 
	#ILL_FPOP_FAULT
 
T_FPOPFLT


	)

78 
	#FPE_INTOVF_TRAP
 0x1

	)

79 
	#FPE_INTDIV_TRAP
 0x2

	)

80 
	#FPE_FLTDIV_TRAP
 0x3

	)

81 
	#FPE_FLTOVF_TRAP
 0x4

	)

82 
	#FPE_FLTUND_TRAP
 0x5

	)

83 
	#FPE_FPU_NP_TRAP
 0x6

	)

84 
	#FPE_SUBRNG_TRAP
 0x7

	)

87 
	#BUS_PAGE_FAULT
 
T_PAGEFLT


	)

88 
	#BUS_SEGNP_FAULT
 
T_SEGNPFLT


	)

89 
	#BUS_STK_FAULT
 
T_STKFLT


	)

90 
	#BUS_SEGM_FAULT
 
T_RESERVED


	)

93 
	#T_USER
 0x100

	)

	@
1
.
1
/usr/include
423
14123
aros/aros_compat.c
aros/iscsi-ls.c
config.h
examples/iscsi-dd.c
examples/iscsiclient.c
lib/connect.c
lib/crc32c.c
lib/discovery.c
lib/init.c
lib/iscsi-command.c
lib/logging.c
lib/login.c
lib/md5.c
lib/nop.c
lib/pdu.c
lib/scsi-lowlevel.c
lib/socket.c
lib/sync.c
lib/task_mgmt.c
src/iscsi-inq.c
src/iscsi-ls.c
src/iscsi-readcapacity16.c
src/iscsi-swp.c
src/ld_iscsi.c
test-tool/0000_testunitready_simple.c
test-tool/0100_read10_simple.c
test-tool/0101_read10_beyond_eol.c
test-tool/0102_read10_0blocks.c
test-tool/0103_read10_rdprotect.c
test-tool/0104_read10_flags.c
test-tool/0105_read10_invalid.c
test-tool/0110_readcapacity10_simple.c
test-tool/0120_read6_simple.c
test-tool/0121_read6_beyond_eol.c
test-tool/0122_read6_invalid.c
test-tool/0130_verify10_simple.c
test-tool/0131_verify10_mismatch.c
test-tool/0132_verify10_mismatch_no_cmp.c
test-tool/0133_verify10_beyondeol.c
test-tool/0160_readcapacity16_simple.c
test-tool/0161_readcapacity16_alloclen.c
test-tool/0170_unmap_simple.c
test-tool/0171_unmap_zero.c
test-tool/0180_writesame10_unmap.c
test-tool/0181_writesame10_unmap_unaligned.c
test-tool/0182_writesame10_beyondeol.c
test-tool/0183_writesame10_wrprotect.c
test-tool/0184_writesame10_0blocks.c
test-tool/0190_writesame16_unmap.c
test-tool/0191_writesame16_unmap_unaligned.c
test-tool/0192_writesame16_beyondeol.c
test-tool/0193_writesame16_wrprotect.c
test-tool/0194_writesame16_0blocks.c
test-tool/0200_read16_simple.c
test-tool/0201_read16_rdprotect.c
test-tool/0202_read16_flags.c
test-tool/0203_read16_0blocks.c
test-tool/0204_read16_beyondeol.c
test-tool/0210_read12_simple.c
test-tool/0211_read12_rdprotect.c
test-tool/0212_read12_flags.c
test-tool/0213_read12_0blocks.c
test-tool/0214_read12_beyondeol.c
test-tool/0220_write16_simple.c
test-tool/0221_write16_wrprotect.c
test-tool/0222_write16_flags.c
test-tool/0223_write16_0blocks.c
test-tool/0224_write16_beyondeol.c
test-tool/0230_write12_simple.c
test-tool/0231_write12_wrprotect.c
test-tool/0232_write12_flags.c
test-tool/0233_write12_0blocks.c
test-tool/0234_write12_beyondeol.c
test-tool/0240_prefetch10_simple.c
test-tool/0241_prefetch10_flags.c
test-tool/0242_prefetch10_beyondeol.c
test-tool/0243_prefetch10_0blocks.c
test-tool/0250_prefetch16_simple.c
test-tool/0251_prefetch16_flags.c
test-tool/0252_prefetch16_beyondeol.c
test-tool/0253_prefetch16_0blocks.c
test-tool/0260_get_lba_status_simple.c
test-tool/0264_get_lba_status_beyondeol.c
test-tool/0270_verify16_simple.c
test-tool/0271_verify16_mismatch.c
test-tool/0272_verify16_mismatch_no_cmp.c
test-tool/0273_verify16_beyondeol.c
test-tool/0280_verify12_simple.c
test-tool/0281_verify12_mismatch.c
test-tool/0282_verify12_mismatch_no_cmp.c
test-tool/0283_verify12_beyondeol.c
test-tool/0290_write10_simple.c
test-tool/0291_write10_wrprotect.c
test-tool/0292_write10_flags.c
test-tool/0293_write10_0blocks.c
test-tool/0294_write10_beyondeol.c
test-tool/0300_readonly.c
test-tool/0310_writeverify10_simple.c
test-tool/0311_writeverify10_wrprotect.c
test-tool/0314_writeverify10_beyondeol.c
test-tool/0320_writeverify12_simple.c
test-tool/0321_writeverify12_wrprotect.c
test-tool/0324_writeverify12_beyondeol.c
test-tool/0330_writeverify16_simple.c
test-tool/0331_writeverify16_wrprotect.c
test-tool/0334_writeverify16_beyondeol.c
test-tool/0340_compareandwrite_simple.c
test-tool/0341_compareandwrite_mismatch.c
test-tool/0343_compareandwrite_beyondeol.c
test-tool/0350_orwrite_simple.c
test-tool/0351_orwrite_wrprotect.c
test-tool/0354_orwrite_beyondeol.c
test-tool/0360_startstopunit_simple.c
test-tool/0361_startstopunit_pwrcnd.c
test-tool/0362_startstopunit_noloej.c
test-tool/0370_nomedia.c
test-tool/0380_preventallow_simple.c
test-tool/0381_preventallow_eject.c
test-tool/0382_preventallow_itnexus_loss.c
test-tool/0383_preventallow_target_warm_reset.c
test-tool/0384_preventallow_target_cold_reset.c
test-tool/0385_preventallow_lun_reset.c
test-tool/0386_preventallow_2_it_nexuses.c
test-tool/0390_mandatory_opcodes_sbc.c
test-tool/0400_inquiry_basic.c
test-tool/0401_inquiry_alloclen.c
test-tool/0402_inquiry_evpd.c
test-tool/0403_inquiry_supported_vpd.c
test-tool/0404_inquiry_all_reported_vpd.c
test-tool/0410_readtoc_basic.c
test-tool/0420_reserve6_simple.c
test-tool/0421_reserve6_lun_reset.c
test-tool/0422_reserve6_logout.c
test-tool/0423_reserve6_sessionloss.c
test-tool/0424_reserve6_target_reset.c
test-tool/0430_report_all_supported_ops.c
test-tool/1000_cmdsn_invalid.c
test-tool/1010_datasn_invalid.c
test-tool/1020_bufferoffset_invalid.c
test-tool/1030_unsolicited_data_overflow.c
test-tool/1031_unsolicited_data_out.c
test-tool/1040_saturate_maxcmdsn.c
test-tool/1041_unsolicited_immediate_data.c
test-tool/1042_unsolicited_nonimmediate_data.c
test-tool/1100_persistent_reserve_in_read_keys_simple.c
test-tool/1110_persistent_reserve_in_serviceaction_range.c
test-tool/1120_persistent_register_simple.c
test-tool/1130_persistent_reserve_simple.c
test-tool/1140_persistent_reserve_access_check_ea.c
test-tool/1141_persistent_reserve_access_check_we.c
test-tool/1142_persistent_reserve_access_check_earo.c
test-tool/1143_persistent_reserve_access_check_wero.c
test-tool/1144_persistent_reserve_access_check_eaar.c
test-tool/1145_persistent_reserve_access_check_wear.c
test-tool/iscsi-support.c
test-tool/iscsi-test-cu.c
test-tool/iscsi-test.c
test-tool/test_compareandwrite_miscompare.c
test-tool/test_compareandwrite_simple.c
test-tool/test_get_lba_status_beyond_eol.c
test-tool/test_get_lba_status_simple.c
test-tool/test_inquiry_alloc_length.c
test-tool/test_inquiry_block_limits.c
test-tool/test_inquiry_evpd.c
test-tool/test_inquiry_mandatory_vpd_sbc.c
test-tool/test_inquiry_standard.c
test-tool/test_inquiry_supported_vpd.c
test-tool/test_inquiry_version_descriptors.c
test-tool/test_iscsi_cmdsn_toohigh.c
test-tool/test_iscsi_cmdsn_toolow.c
test-tool/test_iscsi_datasn_invalid.c
test-tool/test_mandatory_sbc.c
test-tool/test_modesense6_all_pages.c
test-tool/test_modesense6_residuals.c
test-tool/test_nomedia_sbc.c
test-tool/test_orwrite_0blocks.c
test-tool/test_orwrite_beyond_eol.c
test-tool/test_orwrite_flags.c
test-tool/test_orwrite_simple.c
test-tool/test_orwrite_verify.c
test-tool/test_orwrite_wrprotect.c
test-tool/test_prefetch10_0blocks.c
test-tool/test_prefetch10_beyond_eol.c
test-tool/test_prefetch10_flags.c
test-tool/test_prefetch10_simple.c
test-tool/test_prefetch16_0blocks.c
test-tool/test_prefetch16_beyond_eol.c
test-tool/test_prefetch16_flags.c
test-tool/test_prefetch16_simple.c
test-tool/test_preventallow_2_itnexuses.c
test-tool/test_preventallow_cold_reset.c
test-tool/test_preventallow_eject.c
test-tool/test_preventallow_itnexus_loss.c
test-tool/test_preventallow_logout.c
test-tool/test_preventallow_lun_reset.c
test-tool/test_preventallow_simple.c
test-tool/test_preventallow_warm_reset.c
test-tool/test_prin_read_keys_simple.c
test-tool/test_prin_serviceaction_range.c
test-tool/test_prout_register_simple.c
test-tool/test_prout_reserve_access.c
test-tool/test_prout_reserve_ownership.c
test-tool/test_prout_reserve_simple.c
test-tool/test_read10_0blocks.c
test-tool/test_read10_beyond_eol.c
test-tool/test_read10_flags.c
test-tool/test_read10_invalid.c
test-tool/test_read10_rdprotect.c
test-tool/test_read10_residuals.c
test-tool/test_read10_simple.c
test-tool/test_read12_0blocks.c
test-tool/test_read12_beyond_eol.c
test-tool/test_read12_flags.c
test-tool/test_read12_rdprotect.c
test-tool/test_read12_residuals.c
test-tool/test_read12_simple.c
test-tool/test_read16_0blocks.c
test-tool/test_read16_beyond_eol.c
test-tool/test_read16_flags.c
test-tool/test_read16_rdprotect.c
test-tool/test_read16_residuals.c
test-tool/test_read16_simple.c
test-tool/test_read6_beyond_eol.c
test-tool/test_read6_simple.c
test-tool/test_readcapacity10_simple.c
test-tool/test_readcapacity16_alloclen.c
test-tool/test_readcapacity16_protection.c
test-tool/test_readcapacity16_simple.c
test-tool/test_readonly_sbc.c
test-tool/test_report_supported_opcodes_one_command.c
test-tool/test_report_supported_opcodes_rctd.c
test-tool/test_report_supported_opcodes_servactv.c
test-tool/test_report_supported_opcodes_simple.c
test-tool/test_reserve6_2initiators.c
test-tool/test_reserve6_itnexus_loss.c
test-tool/test_reserve6_logout.c
test-tool/test_reserve6_lun_reset.c
test-tool/test_reserve6_simple.c
test-tool/test_reserve6_target_cold_reset.c
test-tool/test_reserve6_target_warm_reset.c
test-tool/test_sanitize_block_erase.c
test-tool/test_sanitize_block_erase_reserved.c
test-tool/test_sanitize_crypto_erase.c
test-tool/test_sanitize_crypto_erase_reserved.c
test-tool/test_sanitize_exit_failure_mode.c
test-tool/test_sanitize_invalid_serviceaction.c
test-tool/test_sanitize_overwrite.c
test-tool/test_sanitize_overwrite_reserved.c
test-tool/test_sanitize_readonly.c
test-tool/test_sanitize_reservations.c
test-tool/test_sanitize_reset.c
test-tool/test_startstopunit_noloej.c
test-tool/test_startstopunit_pwrcnd.c
test-tool/test_startstopunit_simple.c
test-tool/test_testunitready_simple.c
test-tool/test_unmap_0blocks.c
test-tool/test_unmap_simple.c
test-tool/test_unmap_vpd.c
test-tool/test_verify10_0blocks.c
test-tool/test_verify10_beyond_eol.c
test-tool/test_verify10_flags.c
test-tool/test_verify10_mismatch.c
test-tool/test_verify10_mismatch_no_cmp.c
test-tool/test_verify10_simple.c
test-tool/test_verify10_vrprotect.c
test-tool/test_verify12_0blocks.c
test-tool/test_verify12_beyond_eol.c
test-tool/test_verify12_flags.c
test-tool/test_verify12_mismatch.c
test-tool/test_verify12_mismatch_no_cmp.c
test-tool/test_verify12_simple.c
test-tool/test_verify12_vrprotect.c
test-tool/test_verify16_0blocks.c
test-tool/test_verify16_beyond_eol.c
test-tool/test_verify16_flags.c
test-tool/test_verify16_mismatch.c
test-tool/test_verify16_mismatch_no_cmp.c
test-tool/test_verify16_simple.c
test-tool/test_verify16_vrprotect.c
test-tool/test_write10_0blocks.c
test-tool/test_write10_beyond_eol.c
test-tool/test_write10_flags.c
test-tool/test_write10_residuals.c
test-tool/test_write10_simple.c
test-tool/test_write10_wrprotect.c
test-tool/test_write12_0blocks.c
test-tool/test_write12_beyond_eol.c
test-tool/test_write12_flags.c
test-tool/test_write12_residuals.c
test-tool/test_write12_simple.c
test-tool/test_write12_wrprotect.c
test-tool/test_write16_0blocks.c
test-tool/test_write16_beyond_eol.c
test-tool/test_write16_flags.c
test-tool/test_write16_residuals.c
test-tool/test_write16_simple.c
test-tool/test_write16_wrprotect.c
test-tool/test_writesame10_0blocks.c
test-tool/test_writesame10_beyond_eol.c
test-tool/test_writesame10_simple.c
test-tool/test_writesame10_unmap.c
test-tool/test_writesame10_unmap_unaligned.c
test-tool/test_writesame10_unmap_until_end.c
test-tool/test_writesame10_unmap_vpd.c
test-tool/test_writesame10_wrprotect.c
test-tool/test_writesame16_0blocks.c
test-tool/test_writesame16_beyond_eol.c
test-tool/test_writesame16_simple.c
test-tool/test_writesame16_unmap.c
test-tool/test_writesame16_unmap_unaligned.c
test-tool/test_writesame16_unmap_until_end.c
test-tool/test_writesame16_unmap_vpd.c
test-tool/test_writesame16_wrprotect.c
test-tool/test_writeverify10_0blocks.c
test-tool/test_writeverify10_beyond_eol.c
test-tool/test_writeverify10_flags.c
test-tool/test_writeverify10_residuals.c
test-tool/test_writeverify10_simple.c
test-tool/test_writeverify10_wrprotect.c
test-tool/test_writeverify12_0blocks.c
test-tool/test_writeverify12_beyond_eol.c
test-tool/test_writeverify12_flags.c
test-tool/test_writeverify12_residuals.c
test-tool/test_writeverify12_simple.c
test-tool/test_writeverify12_wrprotect.c
test-tool/test_writeverify16_0blocks.c
test-tool/test_writeverify16_beyond_eol.c
test-tool/test_writeverify16_flags.c
test-tool/test_writeverify16_residuals.c
test-tool/test_writeverify16_simple.c
test-tool/test_writeverify16_wrprotect.c
win32/win32_compat.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/md5.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/stdarg.h
/usr/include/stddef.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/filio.h
/usr/include/sys/ioctl.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
aros/aros_compat.h
win32/win32_compat.h
/usr/include/_ctype.h
/usr/include/machine/_align.h
/usr/include/machine/_inttypes.h
/usr/include/machine/_stdint.h
/usr/include/machine/endian.h
/usr/include/malloc.h
/usr/include/netinet6/in6.h
/usr/include/sys/_iovec.h
/usr/include/sys/_null.h
/usr/include/sys/_pthreadtypes.h
/usr/include/sys/_sockaddr_storage.h
/usr/include/sys/_stdint.h
/usr/include/sys/_timespec.h
/usr/include/sys/_timeval.h
/usr/include/sys/_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/ioccom.h
/usr/include/sys/md5.h
/usr/include/sys/mount.h
/usr/include/sys/select.h
/usr/include/sys/sockio.h
/usr/include/sys/stdint.h
/usr/include/sys/timespec.h
/usr/include/sys/ttycom.h
/usr/include/sys/unistd.h
/usr/include/xlocale/_ctype.h
/usr/include/xlocale/_inttypes.h
/usr/include/xlocale/_stdio.h
/usr/include/xlocale/_stdlib.h
/usr/include/xlocale/_string.h
/usr/include/xlocale/_time.h
/usr/include/machine/_types.h
/usr/include/runetype.h
/usr/include/sys/_mutex.h
/usr/include/sys/_sigset.h
/usr/include/sys/lock.h
/usr/include/sys/lockmgr.h
/usr/include/sys/module.h
/usr/include/sys/queue.h
/usr/include/sys/ucred.h
/usr/include/x86/_align.h
/usr/include/x86/_inttypes.h
/usr/include/bsm/audit.h
/usr/include/sys/_lock.h
/usr/include/sys/_lockmgr.h
/usr/include/sys/_rwlock.h
/usr/include/sys/linker_set.h
/usr/include/sys/_stack.h
/usr/include/sys/param.h
/usr/include/machine/param.h
/usr/include/sys/errno.h
/usr/include/sys/limits.h
/usr/include/sys/priority.h
/usr/include/sys/signal.h
/usr/include/sys/syslimits.h
/usr/include/machine/_limits.h
/usr/include/machine/signal.h
/usr/include/machine/trap.h

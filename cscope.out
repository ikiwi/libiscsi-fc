cscope 15 $HOME/libiscsi-fc               0001697174
	@aros/aros_compat.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<√tdb.h
>

25 
	~"¨os_com∑t.h
"

26 
	~<î∫o.h
>

27 
	~<bsdsockë/sockëba£ègs.h
>

29 #unde‡
pﬁl


31 
	$¨os_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

32 *
ho°
, 
size_t
 
ho°Àn
,

33 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
)

35 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

37 i‡(
ho°
) {

38 
	`¢¥ötf
(
ho°
, 
ho°Àn
, 
	`I√t_NtoA
(
sö
->
sö_addr
.
s_addr
));

42 
	}
}

44 
	$¨os_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

45 c⁄° 
addröfo
 *
höts
,

46 
addröfo
 **
ªs
)

48 
sockaddr_ö
 *
sö
;

50 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

51 
sö
->
sö_Àn
 = (
sockaddr_ö
);

52 
sö
->
sö_Ámûy
=
AF_INET
;

55 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

57 
sö
->
sö_p‹t
=0;

58 i‡(
£rvi˚
) {

59 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

62 *
ªs
 = 
	`mÆloc
((
addröfo
));

64 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

65 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

66 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

69 
	}
}

71 
	$¨os_‰ìaddröfo
(
addröfo
 *
ªs
)

73 
	`‰ì
(
ªs
->
ai_addr
);

74 
	`‰ì
(
ªs
);

75 
	}
}

77 
	$¨os_öë_±⁄
(
af
, *
§c
, *
d°
)

79 
sockaddr_ö
 
sö
;

81 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
§c
);

82 
	`mem˝y
(
d°
, &
sö
.
sö_addr
.
s_addr
, (sin.sin_addr.s_addr));

84 
	}
}

86 
Libøry
 * 
	gSockëBa£
 = 
NULL
;

88 
î∫o
;

89 
	gh_î∫o
 = 0;

92 
	$¨os_öô_sockë
()

94 i‡(!(
SockëBa£
 = 
	`O≥nLibøry
("bsdsocket.library", 4))) {

95 
	`¥ötf
("NoTCP/IP Stackávailable");

96 
	`exô
(10);

98 i‡(
	`SockëBa£Tags
(
	`SBTM_SETVAL
(
	`SBTC_ERRNOPTR
((
î∫o
))),

99 (
IPTR
)&
î∫o
,

100 
	`SBTM_SETVAL
(
SBTC_HERRNOLONGPTR
),

101 (
IPTR
)&
h_î∫o
, 
TAG_DONE
)) {

102 
	`¥ötf
("FailedÅo set ERRNO");

103 
	`exô
(10);

105 
	}
}

107 
	$¨os_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

109 
timevÆ
 
timeout
, *
t›å
;

110 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

111 
i
, 
maxfd
 = 0;

112 
rc
;

115 
	`FD_ZERO
(&
ifds
);

116 
	`FD_ZERO
(&
ofds
);

117 
	`FD_ZERO
(&
efds
);

118 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

120 
fds
[
i
].
ªvíts
 = 0;

121 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

123 
ù
 = &
ifds
;

124 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

126 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

128 
›
 = &
ofds
;

129 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

131 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

132 i‡(
fds
[
i
].
fd
 > 
maxfd
) {

133 
maxfd
 = 
fds
[
i
].
fd
;

138 if(
timo
 < 0)

140 
t›å
 = 0;

144 
t›å
 = &
timeout
;

145 
timeout
.
tv_£c
 = 
timo
 / 1000;

146 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

149 
rc
 = 
	`WaôSñe˘
(
maxfd
 + 1, 
ù
, 
›
, &
efds
, 
t›å
, 
NULL
);

151 if(
rc
 <= 0)

152  
rc
;

154 if(
rc
 > 0)

156 
i
 = 0; i < 
nfds
; ++i)

158 
fd
 = 
fds
[
i
].fd;

159 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

160 
fds
[
i
].
ªvíts
 |
POLLIN
;

161 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

162 
fds
[
i
].
ªvíts
 |
POLLOUT
;

163 if(
	`FD_ISSET
(
fd
, &
efds
))

164 
fds
[
i
].
ªvíts
 |
POLLHUP
;

167  
rc
;

168 
	}
}

170 
ssize_t
 
	$¨os_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

172  
	`ªad
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

173 
	}
}

175 
ssize_t
 
	$¨os_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

177  
	`wrôe
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

178 
	}
}

	@aros/iscsi-ls.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 #ifde‡
AROS


30 
	~"¨os/¨os_com∑t.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°döt.h
>

36 
	~<°rög.h
>

37 
	~"iscsi.h
"

38 
	~"scsi-lowÀvñ.h
"

40 #i‚de‡
disˇrd_c⁄°


41 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

44 
	gshowluns
;

45 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

47 
	s˛õ¡_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 
	mlun
;

51 
	mty≥
;

52 c⁄° *
	mu£∫ame
;

53 c⁄° *
	m∑ssw‹d
;

57 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

59 
pﬁlfd
 
pfd
;

61 
°©e
->
föished
 == 0) {

62 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

63 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

65 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

66 
	`Ârötf
(
°dîr
, "Poll failed");

67 
	`exô
(10);

69 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

70 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
	`exô
(10);

74 
	}
}

76 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

78 
scsi_èsk
 *
èsk
;

79 
scsi_öquúy_°™d¨d
 *
öq
;

80 
ty≥
, 
no_medü
;

81 
size
 = 0;

82 
size_pf
 = 0;

83 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

86 
tur_åy_agaö
:

87 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

88 
	`Ârötf
(
°dîr
, "testunitready failed\n");

89 
	`exô
(10);

91 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

92 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
tur_åy_agaö
;

98 
no_medü
 = 0;

99 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


100 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


101 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

103 
no_medü
 = 1;

104 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
	`exô
(10);

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

114 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

115 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
	`exô
(10);

118 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

119 i‡(
öq
 =
NULL
) {

120 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

121 
	`exô
(10);

123 
ty≥
 = 
öq
->
devi˚_ty≥
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

129 
scsi_ªadˇ∑côy10
 *
rc10
;

131 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

132 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

134 
	`exô
(10);

137 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

138 i‡(
rc10
 =
NULL
) {

139 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

140 
	`exô
(10);

143 
size
 = 
rc10
->
block_size
;

144 
size
 *
rc10
->
lba
;

146 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

147 
size
 /= 1024;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

155 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

156 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

158 i‡(
no_medü
) {

159 
	`¥ötf
(" (No mediaÜoaded)");

161 
	`¥ötf
("\n");

162 
	}
}

164 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

166 
iscsi_c⁄ãxt
 *
iscsi
;

167 
scsi_èsk
 *
èsk
;

168 
scsi_ªp‹éuns_li°
 *
li°
;

169 
fuŒ_ªp‹t_size
;

170 
i
;

172 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

173 i‡(
iscsi
 =
NULL
) {

174 
	`¥ötf
("FailedÅo create context\n");

175 
	`exô
(10);

177 i‡(
˛¡
->
u£∫ame
 !
NULL
) {

178 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
) != 0) {

179 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

180 
	`exô
(10);

183 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

184 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

185 
	`exô
(10);

187 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

188 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

189 i‡(
	`iscsi_c⁄√˘_sync
(
iscsi
, 
p‹èl
) != 0) {

190 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

191 
	`exô
(10);

194 i‡(
	`iscsi_logö_sync
(
iscsi
) != 0) {

195 
	`Ârötf
(
°dîr
, "logö faûed :%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
	`exô
(10);

203 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

204 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

205 
	`exô
(10);

207 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

208 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

212 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

213 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

214 
	`exô
(10);

218 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

219 i‡(
li°
 =
NULL
) {

220 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

221 
	`exô
(10);

223 
i
=0; i < ()
li°
->
num
; i++) {

224 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

227 
	`scsi_‰ì_scsi_èsk
(
èsk
);

228 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

229 
	}
}

234 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

236 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

238 i‡(
°©us
 != 0) {

239 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

240 
	`exô
(10);

243 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

244 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

245 
	`exô
(10);

248 
°©e
->
föished
 = 1;

249 
	}
}

251 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

253 
iscsi_discovîy_addªss
 *
addr
;

255 i‡(
°©us
 != 0) {

256 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

257 
	`exô
(10);

260 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

261 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

262 i‡(
showluns
 != 0) {

263 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

267 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

268 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

269 
	`exô
(10);

271 
	}
}

274 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

276 i‡(
°©us
 != 0) {

277 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

278 
	`exô
(10);

281 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

282 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

283 
	`exô
(10);

285 
	}
}

287 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

289 i‡(
°©us
 != 0) {

290 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

291 
	`exô
(10);

294 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

295 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

296 
	`exô
(10);

298 
	}
}

300 
	$¥öt_ußge
()

302 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

304 
	}
}

306 
	$¥öt_hñp
()

308 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

309 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

310 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

311 
	`Ârötf
(
°dîr
, "\n");

312 
	`Ârötf
(
°dîr
, "Help options:\n");

313 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

314 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

315 
	`Ârötf
(
°dîr
, "\n");

316 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

317 
	`Ârötf
(
°dîr
, "\n");

318 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

319 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

320 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

321 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

322 
	}
}

324 
	$maö
(
¨gc
, *
¨gv
[])

326 
iscsi_c⁄ãxt
 *
iscsi
;

327 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

328 
˛õ¡_°©e
 
°©e
;

329 c⁄° *
uæ
 = 
NULL
;

330 
c
;

331 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

333 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?udi:s")) != -1) {

334 
c
) {

337 
show_hñp
 = 1;

340 
show_ußge
 = 1;

343 
debug
 = 1;

346 
öôüt‹
 = 
›èrg
;

349 
showluns
 = 1;

352 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

353 
	`¥öt_hñp
();

354 
	`exô
(0);

358 i‡(
show_hñp
 != 0) {

359 
	`¥öt_hñp
();

360 
	`exô
(0);

363 i‡(
show_ußge
 != 0) {

364 
	`¥öt_ußge
();

365 
	`exô
(0);

368 i‡(
›töd
 !
¨gc
 -1) {

369 
	`¥öt_ußge
();

370 
	`exô
(0);

373 
	`mem£t
(&
°©e
, 0, (state));

375 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

376 i‡(
uæ
 =
NULL
) {

377 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

378 
	`¥öt_ußge
();

379 
	`exô
(10);

382 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

383 i‡(
iscsi
 =
NULL
) {

384 
	`¥ötf
("FailedÅo create context\n");

385 
	`exô
(10);

388 i‡(
debug
 > 0) {

389 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

390 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

393 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

395 i‡(
uæ
) {

396 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

399 i‡(
iscsi_uæ
 =
NULL
) {

400 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

401 
	`iscsi_gë_îr‹
(
iscsi
));

402 
	`exô
(10);

405 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

407 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

408 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

409 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

410 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

411 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

412 
	`exô
(10);

415 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

416 
	`Ârötf
(
°dîr
, "iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

417 
	`exô
(10);

420 
	`evít_lo›
(
iscsi
, &
°©e
);

422 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

423 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

425 
	}
}

	@config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_INTTYPES_H
 1

	)

26 
	#HAVE_MEMORY_H
 1

	)

29 
	#HAVE_POLL_H
 1

	)

32 
	#HAVE_SOCKADDR_IN6
 1

	)

38 
	#HAVE_STDINT_H
 1

	)

41 
	#HAVE_STDLIB_H
 1

	)

44 
	#HAVE_STRINGS_H
 1

	)

47 
	#HAVE_STRING_H
 1

	)

50 
	#HAVE_SYS_STAT_H
 1

	)

53 
	#HAVE_SYS_TYPES_H
 1

	)

56 
	#HAVE_UNISTD_H
 1

	)

60 
	#LT_OBJDIR
 ".libs/"

	)

66 
	#PACKAGE
 "libiscsi"

	)

69 
	#PACKAGE_BUGREPORT
 ""

	)

72 
	#PACKAGE_NAME
 "libiscsi"

	)

75 
	#PACKAGE_STRING
 "libiscsò1.10.0"

	)

78 
	#PACKAGE_TARNAME
 "libiscsi"

	)

81 
	#PACKAGE_URL
 ""

	)

84 
	#PACKAGE_VERSION
 "1.10.0"

	)

87 
	#STDC_HEADERS
 1

	)

90 
	#VERSION
 "1.10.0"

	)

	@config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_INTTYPES_H
 1

	)

26 
	#HAVE_MEMORY_H
 1

	)

29 
	#HAVE_POLL_H
 1

	)

32 
	#HAVE_SOCKADDR_IN6
 1

	)

38 
	#HAVE_STDINT_H
 1

	)

41 
	#HAVE_STDLIB_H
 1

	)

44 
	#HAVE_STRINGS_H
 1

	)

47 
	#HAVE_STRING_H
 1

	)

50 
	#HAVE_SYS_STAT_H
 1

	)

53 
	#HAVE_SYS_TYPES_H
 1

	)

56 
	#HAVE_UNISTD_H
 1

	)

60 
	#LT_OBJDIR
 ".libs/"

	)

66 
	#PACKAGE
 "libiscsi"

	)

69 
	#PACKAGE_BUGREPORT
 ""

	)

72 
	#PACKAGE_NAME
 "libiscsi"

	)

75 
	#PACKAGE_STRING
 "libiscsò1.10.0"

	)

78 
	#PACKAGE_TARNAME
 "libiscsi"

	)

81 
	#PACKAGE_URL
 ""

	)

84 
	#PACKAGE_VERSION
 "1.10.0"

	)

87 
	#STDC_HEADERS
 1

	)

90 
	#VERSION
 "1.10.0"

	)

	@examples/iscsi-dd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°döt.h
>

21 
	~<°rög.h
>

22 
	~<pﬁl.h
>

23 
	~<gë›t.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

27 c⁄° *
	göôüt‹
 = "iqn.2010-11.ronnie:iscsi-inq";

28 
	gmax_ö_Êight
 = 50;

29 
	gblocks_≥r_io
 = 200;

31 
	s˛õ¡
 {

32 
	mföished
;

33 
	mö_Êight
;

35 
iscsi_c⁄ãxt
 *
	m§c_iscsi
;

36 
	m§c_lun
;

37 
	m§c_blocksize
;

38 
uöt64_t
 
	m§c_num_blocks
;

39 
uöt64_t
 
	mpos
;

41 
iscsi_c⁄ãxt
 *
	md°_iscsi
;

42 
	md°_lun
;

43 
	md°_blocksize
;

44 
uöt64_t
 
	md°_num_blocks
;

48 
fûl_ªad_queue
(
˛õ¡
 *client);

50 
	swrôe_èsk
 {

51 
scsi_èsk
 *
	mπ
;

52 
˛õ¡
 *
	m˛õ¡
;

55 
	$wrôe10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

57 
wrôe_èsk
 *
wt
 = (wrôe_èsk *)
¥iv©e_d©a
;

58 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

59 
˛õ¡
 *˛õ¡ = 
wt
->client;

61 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

62 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`exô
(10);

66 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
	`exô
(10);

72 
˛õ¡
->
ö_Êight
--;

73 
	`fûl_ªad_queue
(
˛õ¡
);

75 i‡((
˛õ¡
->
ö_Êight
 =0Ë&& (˛õ¡->
pos
 =˛õ¡->
§c_num_blocks
)) {

76 
˛õ¡
->
föished
 = 1;

78 
	`scsi_‰ì_scsi_èsk
(
wt
->
π
);

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
	`‰ì
(
wt
);

81 
	}
}

83 
	$ªad10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

85 
˛õ¡
 *˛õ¡ = (˛õ¡ *)
¥iv©e_d©a
;

86 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

87 
wrôe_èsk
 *
wt
;

88 
scsi_ªad10_cdb
 *
ªad10_cdb
;

90 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

91 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

92 
	`exô
(10);

95 
wt
 = 
	`mÆloc
((
wrôe_èsk
));

96 
wt
->
π
 = 
èsk
;

97 
wt
->
˛õ¡
 = client;

99 
ªad10_cdb
 = 
	`scsi_cdb_unm¨shÆl
(
èsk
, 
SCSI_OPCODE_READ10
);

100 i‡(
ªad10_cdb
 =
NULL
) {

101 
	`¥ötf
("FailedÅo unmarshall READ10 CDB.\n");

102 
	`exô
(10);

104 i‡(
	`iscsi_wrôe10_èsk
(
˛õ¡
->
d°_iscsi
,

105 
˛õ¡
->
d°_lun
,

106 
ªad10_cdb
->
lba
,

107 
èsk
->
d©aö
.
d©a
,

108 
èsk
->
d©aö
.
size
,

109 
˛õ¡
->
d°_blocksize
,

111 
wrôe10_cb
, 
wt
Ë=
NULL
) {

112 
	`¥ötf
("failedÅo sendÑead10 command\n");

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`exô
(10);

116 
	}
}

119 
	$fûl_ªad_queue
(
˛õ¡
 *client)

121 
num_blocks
;

123 
˛õ¡
->
ö_Êight
 < 
max_ö_Êight
 && clõ¡->
pos
 < clõ¡->
§c_num_blocks
) {

124 
˛õ¡
->
ö_Êight
++;

126 
num_blocks
 = 
˛õ¡
->
§c_num_blocks
 - clõ¡->
pos
;

127 i‡(
num_blocks
 > 
blocks_≥r_io
) {

128 
num_blocks
 = 
blocks_≥r_io
;

131 i‡(
	`iscsi_ªad10_èsk
(
˛õ¡
->
§c_iscsi
,

132 
˛õ¡
->
§c_lun
, clõ¡->
pos
,

133 
num_blocks
 * 
˛õ¡
->
§c_blocksize
,

134 
˛õ¡
->
§c_blocksize
, 0, 0, 0, 0, 0,

135 
ªad10_cb
, 
˛õ¡
Ë=
NULL
) {

136 
	`¥ötf
("failedÅo sendÑead10 command\n");

137 
	`exô
(10);

139 
˛õ¡
->
pos
 +
num_blocks
;

141 
	}
}

143 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

145 *
§c_uæ
 = 
NULL
;

146 *
d°_uæ
 = 
NULL
;

147 
iscsi_uæ
 *iscsi_url;

148 
scsi_èsk
 *
èsk
;

149 
scsi_ªadˇ∑côy10
 *
rc10
;

150 
c
;

151 
pﬁlfd
 
pfd
[2];

152 
˛õ¡
 client;

154 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

155 {"d°", 
ªquúed_¨gumít
, 
NULL
, 'd'},

156 {"§c", 
ªquúed_¨gumít
, 
NULL
, 's'},

157 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

160 
›ti⁄_ödex
;

162 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:s:i:", 
l⁄g_›ti⁄s
,

163 &
›ti⁄_ödex
)) != -1) {

164 
c
) {

166 
d°
 = 
›èrg
;

169 
§c
 = 
›èrg
;

172 
öôüt‹
 = 
›èrg
;

175 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

176 
	`¥öt_hñp
();

177 
	`exô
(0);

182 i‡(
§c_uæ
 =
NULL
) {

183 
	`Ârötf
(
°dîr
, "You must specify source url\n");

184 
	`Ârötf
(
°dîr
, " --src iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

185 
	`exô
(10);

187 i‡(
d°_uæ
 =
NULL
) {

188 
	`Ârötf
(
°dîr
, "You must specify destination url\n");

189 
	`Ârötf
(
°dîr
, " --dst iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

190 
	`exô
(10);

194 
	`mem£t
(&
˛õ¡
, 0, (client));

197 
˛õ¡
.
§c_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

198 i‡(
˛õ¡
.
§c_iscsi
 =
NULL
) {

199 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

200 
	`exô
(10);

202 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
§c_iscsi
, 
§c_uæ
);

203 i‡(
iscsi_uæ
 =
NULL
) {

204 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

205 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

206 
	`exô
(10);

208 
	`iscsi_£t_èrgë«me
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
èrgë
);

209 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
§c_iscsi
, 
ISCSI_SESSION_NORMAL
);

210 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
§c_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

211 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

212 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

213 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

214 
	`exô
(10);

217 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

218 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

219 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

220 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

221 
	`exô
(10);

223 
˛õ¡
.
§c_lun
 = 
iscsi_uæ
->
lun
;

224 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

226 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
˛õ¡
.
§c_iscsi
, clõ¡.
§c_lun
, 0, 0);

227 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

228 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

229 
	`exô
(10);

231 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

232 i‡(
rc10
 =
NULL
) {

233 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

234 
	`exô
(10);

236 
˛õ¡
.
§c_blocksize
 = 
rc10
->
block_size
;

237 
˛õ¡
.
§c_num_blocks
 = 
rc10
->
lba
;

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

244 
˛õ¡
.
d°_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

245 i‡(
˛õ¡
.
d°_iscsi
 =
NULL
) {

246 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

247 
	`exô
(10);

249 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
d°_iscsi
, 
d°_uæ
);

250 i‡(
iscsi_uæ
 =
NULL
) {

251 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

252 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

253 
	`exô
(10);

255 
	`iscsi_£t_èrgë«me
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
èrgë
);

256 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
d°_iscsi
, 
ISCSI_SESSION_NORMAL
);

257 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
d°_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

258 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

259 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

260 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

261 
	`exô
(10);

264 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

265 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

266 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

267 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

268 
	`exô
(10);

270 
˛õ¡
.
d°_lun
 = 
iscsi_uæ
->
lun
;

271 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

273 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
˛õ¡
.
d°_iscsi
, clõ¡.
d°_lun
, 0, 0);

274 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

275 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

276 
	`exô
(10);

278 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

279 i‡(
rc10
 =
NULL
) {

280 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

281 
	`exô
(10);

283 
˛õ¡
.
d°_blocksize
 = 
rc10
->
block_size
;

284 
˛õ¡
.
d°_num_blocks
 = 
rc10
->
lba
;

285 
	`scsi_‰ì_scsi_èsk
(
èsk
);

287 
	`fûl_ªad_queue
(&
˛õ¡
);

289 
˛õ¡
.
föished
 == 0) {

290 
pfd
[0].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
§c_iscsi
);

291 
pfd
[0].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
§c_iscsi
);

292 
pfd
[1].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
d°_iscsi
);

293 
pfd
[1].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
d°_iscsi
);

295 i‡(
	`pﬁl
(&
pfd
[0], 2, -1) < 0) {

296 
	`¥ötf
("Poll failed");

297 
	`exô
(10);

299 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
§c_iscsi
, 
pfd
[0].
ªvíts
) < 0) {

300 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

303 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
d°_iscsi
, 
pfd
[1].
ªvíts
) < 0) {

304 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

309 
	`iscsi_logout_sync
(
˛õ¡
.
§c_iscsi
);

310 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

311 
	`iscsi_logout_sync
(
˛õ¡
.
d°_iscsi
);

312 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

315 
	}
}

	@examples/iscsiclient.c

35 
	#TARGET
 "127.0.0.1:3260"

	)

37 #i‡
deföed
(
WIN32
)

38 
	~<wösock2.h
>

39 
	~"wö32/wö32_com∑t.h
"

40 #¥agm®
commít
(
lib
, "ws2_32.lib")

41 
WSADATA
 
	gwßD©a
;

43 
	~<pﬁl.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°döt.h
>

49 
	~<°rög.h
>

50 
	~"iscsi.h
"

51 
	~"scsi-lowÀvñ.h
"

53 
	s˛õ¡_°©e
 {

54 
	mföished
;

55 c⁄° *
	mmesßge
;

56 
	mhas_discovîed_èrgë
;

57 *
	mèrgë_«me
;

58 *
	mèrgë_addªss
;

59 
	mlun
;

60 
	mblock_size
;

63 
	gsmÆl_buf„r
[512];

65 
	$tm_©_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
)

67 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

69 
	`¥ötf
("tmát cb !\n");

70 
	`¥ötf
("ª•⁄£ : %d\n", *((
uöt32_t
 *)
comm™d_d©a
));

72 
˛¡
->
föished
 = 1;

73 
	}
}

76 
	$syncˇche10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
 _U_)

78 
	`¥ötf
("SYNCCACHE10 sètus:%d\n", 
°©us
);

79 
	}
}

81 
	$n›_out_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

83 
iscsi_d©a
 *
d©a
 = 
comm™d_d©a
;

84 
scsi_èsk
 *
èsk
;

86 
	`¥ötf
("NOP-IN sètus:%d\n", 
°©us
);

87 i‡(
d©a
->
size
 > 0) {

88 
	`¥ötf
("NOP-IN d©a:%s\n", 
d©a
->data);

90 
	`¥ötf
("Send SYNCHRONIZECACHE10\n");

91 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 2, 0, 0, 0, 0, 
syncˇche10_cb
, 
¥iv©e_d©a
);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("failedÅo send sync cache10\n");

94 
	`exô
(10);

96 
	`¥ötf
("sendÅask managementÅoÅryÅoábortÅhe sync10Åask\n");

97 i‡(
	`iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi
, 
èsk
, 
tm_©_cb
, 
¥iv©e_d©a
) != 0) {

98 
	`¥ötf
("failedÅo sendÅask managementÅoábortÅhe sync10Åask\n");

99 
	`exô
(10);

101 
	}
}

104 
	$wrôe10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

106 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

108 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

109 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
	`exô
(10);

113 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`exô
(10);

119 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
	`exô
(10);

122 
	}
}

124 
	$wrôe10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

126 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

127 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

128 
i
;

129 
wb
[512];

130 
scsi_iovec
 
iov
[3];

132 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

133 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`exô
(10);

137 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
	`exô
(10);

143 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

146 
	`¥ötf
("writeÅhe block usingán iovector\n");

147 
i
 = 0;i < 512; i++) {

148 
wb
[
i
] = (511 - i) & 0xff;

150 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
NULL
, 512, 512,

152 
wrôe10_1_cb
, 
¥iv©e_d©a
);

153 i‡(
èsk
 =
NULL
) {

154 
	`¥ötf
("failedÅo send write10 command\n");

155 
	`exô
(10);

159 
iov
[0].
iov_ba£
 = &
wb
[0];

160 
iov
[0].
iov_Àn
 = 4;

161 
iov
[1].
iov_ba£
 = &
wb
[4];

162 
iov
[1].
iov_Àn
 = 11;

163 
iov
[2].
iov_ba£
 = &
wb
[15];

164 
iov
[2].
iov_Àn
 = 512 - 15;

165 
	`scsi_èsk_£t_iov_out
(
èsk
, &
iov
[0], 3);

166 
	}
}

168 
	$ªad10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

170 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

171 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

172 
i
;

173 
wb
[512];

175 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

176 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`exô
(10);

181 
	`¥ötf
("READ10 using scsi_task_set_iov_in() successful. Block content:\n");

182 
i
=0;i<512;i++) {

183 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

184 i‡(
i
%16==15)

185 
	`¥ötf
("\n");

186 i‡(
i
==69)

189 
	`¥ötf
("...\n");

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
	`¥ötf
("Finished, wontÅryÅo write data sinceÅhat willÜikely destroy your LUN :-(\n");

194 
	`¥ötf
("Send NOP-OUT\n");

195 i‡(
	`iscsi_n›_out_async
(
iscsi
, 
n›_out_cb
, (*)"Pög!", 6, 
¥iv©e_d©a
) != 0) {

196 
	`¥ötf
("failedÅo sendÇop-out\n");

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
	`exô
(10);

201 
	`¥ötf
("writeÅhe blockÇormally\n");

202 
i
 = 0;i < 512; i++) {

203 
wb
[
i
] = i & 0xff;

205 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
wb
, 512, 512,

207 
wrôe10_cb
, 
¥iv©e_d©a
);

208 i‡(
èsk
 =
NULL
) {

209 
	`¥ötf
("failedÅo send write10 command\n");

210 
	`exô
(10);

213 
	}
}

215 
	$ªad10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

217 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

218 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

219 
i
;

220 
scsi_iovec
 
iov
[3];

222 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

223 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
	`exô
(10);

228 
	`¥ötf
("READ10 using scsi_task_add_data_in_buffer() successful. Block content:\n");

229 
i
=0;i<512;i++) {

230 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

231 i‡(
i
%16==15)

232 
	`¥ötf
("\n");

233 i‡(
i
==69)

236 
	`¥ötf
("...\n");

237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
	`mem£t
(&
smÆl_buf„r
[0], 0, 512);

241 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_1_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

242 
	`¥ötf
("failedÅo sendÑead10 command\n");

243 
	`exô
(10);

247 
iov
[0].
iov_ba£
 = &
smÆl_buf„r
[0];

248 
iov
[0].
iov_Àn
 = 7;

249 
iov
[1].
iov_ba£
 = &
smÆl_buf„r
[7];

250 
iov
[1].
iov_Àn
 = 8;

251 
iov
[2].
iov_ba£
 = &
smÆl_buf„r
[15];

252 
iov
[2].
iov_Àn
 = 512 - 15;

253 
	`scsi_èsk_£t_iov_ö
(
èsk
, &
iov
[0], 3);

254 
	}
}

256 
	$ªad6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

258 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

259 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

260 
i
;

262 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

263 
	`¥ötf
("Ród6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

264 
	`scsi_‰ì_scsi_èsk
(
èsk
);

265 
	`exô
(10);

268 
	`¥ötf
("READ6 successful. Block content:\n");

269 
i
=0;i<
èsk
->
d©aö
.
size
;i++) {

270 
	`¥ötf
("%02x ", 
èsk
->
d©aö
.
d©a
[
i
]);

271 i‡(
i
%16==15)

272 
	`¥ötf
("\n");

273 i‡(
i
==69)

276 
	`¥ötf
("...\n");

278 
	`scsi_‰ì_scsi_èsk
(
èsk
);

280 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

281 
	`¥ötf
("failedÅo sendÑead10 command\n");

282 
	`exô
(10);

289 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 7, &
smÆl_buf„r
[0]);

290 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 8, &
smÆl_buf„r
[7]);

291 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 512-15, &
smÆl_buf„r
[15]);

292 
	}
}

294 
	$ªadˇ∑côy10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

296 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

297 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

298 
scsi_ªadˇ∑côy10
 *
rc10
;

299 
fuŒ_size
;

301 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

302 
	`¥ötf
("Ródˇ∑côy10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

303 
	`scsi_‰ì_scsi_èsk
(
èsk
);

304 
	`exô
(10);

307 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

308 i‡(
fuŒ_size
 < 
èsk
->
d©aö
.
size
) {

309 
	`¥ötf
("notÉnough data for full sizeÑeadcapacity10\n");

310 
	`scsi_‰ì_scsi_èsk
(
èsk
);

311 
	`exô
(10);

314 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

315 i‡(
rc10
 =
NULL
) {

316 
	`¥ötf
("failedÅo unmarshallÑeadcapacity10 data\n");

317 
	`scsi_‰ì_scsi_èsk
(
èsk
);

318 
	`exô
(10);

320 
˛¡
->
block_size
 = 
rc10
->block_size;

321 
	`¥ötf
("READCAPACITY10 suc˚ssful. Size:%d block† blocksize:%d. Ród fú° block\n", 
rc10
->
lba
,Ñc10->
block_size
);

323 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 
ªad6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

324 
	`¥ötf
("failedÅo sendÑead6 command\n");

325 
	`scsi_‰ì_scsi_èsk
(
èsk
);

326 
	`exô
(10);

328 
	`scsi_‰ì_scsi_èsk
(
èsk
);

329 
	}
}

331 
	$mode£n£6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

333 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

334 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

335 
scsi_mode_£n£
 *
ms
;

336 
fuŒ_size
;

338 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

339 
	`¥ötf
("Mode£n£6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

340 
	`exô
(10);

342 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

343 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

344 
	`¥ötf
("didÇot getÉnough data for mode sense, sening modesenseágainásking for bigger buffer\n");

345 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 
fuŒ_size
, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

346 
	`¥ötf
("failedÅo send modesense6 command\n");

347 
	`scsi_‰ì_scsi_èsk
(
èsk
);

348 
	`exô
(10);

350 
	`scsi_‰ì_scsi_èsk
(
èsk
);

355 
	`¥ötf
("MODESENSE6 successful.\n");

356 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

357 i‡(
ms
 =
NULL
) {

358 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

359 
	`scsi_‰ì_scsi_èsk
(
èsk
);

360 
	`exô
(10);

363 
	`¥ötf
("Send READCAPACITY10\n");

364 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 
ªadˇ∑côy10_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

365 
	`¥ötf
("failedÅo sendÑeadcapacity command\n");

366 
	`scsi_‰ì_scsi_èsk
(
èsk
);

367 
	`exô
(10);

369 
	`scsi_‰ì_scsi_èsk
(
èsk
);

370 
	}
}

372 
	$öquúy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

374 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

375 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

376 
scsi_öquúy_°™d¨d
 *
öq
;

378 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

379 
	`¥ötf
("Inquúy faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

380 
	`scsi_‰ì_scsi_èsk
(
èsk
);

381 
	`exô
(10);

384 
	`¥ötf
("INQUIRY successful for standard data.\n");

385 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

386 i‡(
öq
 =
NULL
) {

387 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

388 
	`scsi_‰ì_scsi_èsk
(
èsk
);

389 
	`exô
(10);

392 
	`¥ötf
("Devi˚ Ty≥ i†%d. Víd‹Id:%†Produ˘Id:%s\n", 
öq
->
devi˚_ty≥
, inq->
víd‹_idítifiˇti⁄
, inq->
¥odu˘_idítifiˇti⁄
);

393 
	`¥ötf
("Send MODESENSE6\n");

394 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 4, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

395 
	`¥ötf
("failedÅo send modesense6 command\n");

396 
	`scsi_‰ì_scsi_èsk
(
èsk
);

397 
	`exô
(10);

399 
	`scsi_‰ì_scsi_èsk
(
èsk
);

400 
	}
}

402 
	$ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

404 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

405 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

407 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

408 
	`¥ötf
("Fú°Åe°unôªady faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

409 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

410 
	`¥ötf
("target device just came online,Åryágain\n");

412 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

413 
	`¥ötf
("failedÅo sendÅestunitready command\n");

414 
	`scsi_‰ì_scsi_èsk
(
èsk
);

415 
	`exô
(10);

418 
	`scsi_‰ì_scsi_èsk
(
èsk
);

422 
	`¥ötf
("TESTUNITREADY suc˚ssful, dÿ™ inquúy o¿lun:%d\n", 
˛¡
->
lun
);

423 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 64, 
öquúy_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

424 
	`¥ötf
("ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

425 
	`scsi_‰ì_scsi_èsk
(
èsk
);

426 
	`exô
(10);

428 
	`scsi_‰ì_scsi_èsk
(
èsk
);

429 
	}
}

432 
	$ªp‹éuns_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

434 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

435 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

436 
scsi_ªp‹éuns_li°
 *
li°
;

437 
fuŒ_ªp‹t_size
;

438 
i
;

440 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

441 
	`¥ötf
("Rï‹éun†Áûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

442 
	`scsi_‰ì_scsi_èsk
(
èsk
);

446 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

448 
	`¥ötf
("REPORTLUNS sètus:%d d©®size:%d, fuŒÑï‹t†lun†d©®size:%d\n", 
°©us
, 
èsk
->
d©aö
.
size
, 
fuŒ_ªp‹t_size
);

449 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

450 
	`¥ötf
("We didÇot getállÅhe data weÇeed inÑeportluns,áskágain\n");

451 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 
fuŒ_ªp‹t_size
, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

452 
	`¥ötf
("failedÅo sendÑeportluns command\n");

453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`exô
(10);

456 
	`scsi_‰ì_scsi_èsk
(
èsk
);

461 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

462 i‡(
li°
 =
NULL
) {

463 
	`¥ötf
("failedÅo unmarshallÑeportluns datain blob\n");

464 
	`scsi_‰ì_scsi_èsk
(
èsk
);

465 
	`exô
(10);

467 
i
=0; i < ()
li°
->
num
; i++) {

468 
	`¥ötf
("LUN:%d found\n", 
li°
->
luns
[
i
]);

469 
˛¡
->
lun
 = 
li°
->
luns
[
i
];

472 
	`¥ötf
("Wû»u£ LUN:%d\n", 
˛¡
->
lun
);

473 
	`¥ötf
("SídÅe°unôªadyÅÿlu¿%d\n", 
˛¡
->
lun
);

474 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

475 
	`¥ötf
("ÁûedÅÿ£ndÅe°unôªady comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

477 
	`exô
(10);

479 
	`scsi_‰ì_scsi_èsk
(
èsk
);

480 
	}
}

483 
	$n‹mÆlogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

485 i‡(
°©us
 != 0) {

486 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

487 
	`exô
(10);

490 
	`¥ötf
("Logged inÇormal session, sendÑeportluns\n");

491 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 16, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

492 
	`¥ötf
("ÁûedÅÿ£ndÑï‹éun†comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

493 
	`exô
(10);

495 
	}
}

498 
	$n‹mÆc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

500 
	`¥ötf
("ConnectedÅo iscsi socket\n");

502 i‡(
°©us
 != 0) {

503 
	`¥ötf
("n‹mÆc⁄√˘_cb: c⁄√˘i⁄ faûed sètus:%d\n", 
°©us
);

504 
	`exô
(10);

507 
	`¥ötf
("connected, sendÜogin command\n");

508 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

509 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_CRC32C_NONE
);

510 i‡(
	`iscsi_logö_async
(
iscsi
, 
n‹mÆlogö_cb
, 
¥iv©e_d©a
) != 0) {

511 
	`¥ötf
("iscsi_login_async failed\n");

512 
	`exô
(10);

514 
	}
}

518 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

520 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

522 
	`¥ötf
("discovîy sessi⁄Üogged out, Mesßgê‰om maö(Ëwas:[%s]\n", 
˛¡
->
mesßge
);

524 i‡(
°©us
 != 0) {

525 
	`¥ötf
("FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

526 
	`exô
(10);

529 
	`¥ötf
("disconnect socket\n");

530 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

531 
	`¥ötf
("FailedÅo disconnect old socket\n");

532 
	`exô
(10);

535 
	`¥ötf
("ªc⁄√˘ wôhÇ‹mÆÜogöÅÿ[%s]\n", 
˛¡
->
èrgë_addªss
);

536 
	`¥ötf
("U£Å¨gë«mê[%s] whí c⁄√˘ög\n", 
˛¡
->
èrgë_«me
);

537 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
˛¡
->
èrgë_«me
)) {

538 
	`¥ötf
("FailedÅo setÅargetÇame\n");

539 
	`exô
(10);

541 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

542 
	`¥ötf
("FailedÅoáddálias\n");

543 
	`exô
(10);

545 i‡(
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
) != 0) {

546 
	`¥ötf
("FailedÅo set settionÅypeÅoÇormal\n");

547 
	`exô
(10);

550 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
˛¡
->
èrgë_addªss
, 
n‹mÆc⁄√˘_cb
, clnt) != 0) {

551 
	`¥ötf
("iscsi_c⁄√˘ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

552 
	`exô
(10);

554 
	}
}

556 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

558 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

559 
iscsi_discovîy_addªss
 *
addr
;

561 
	`¥ötf
("discovîy cÆlback sètus:%04x\n", 
°©us
);

563 i‡(
°©us
 != 0) {

564 
	`¥ötf
("FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

565 
	`exô
(10);

568 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

569 
	`¥ötf
("T¨gë:%†Addªss:%s\n", 
addr
->
èrgë_«me
,áddr->
p‹èls
->
p‹èl
);

572 
addr
=
comm™d_d©a
;

573 
˛¡
->
has_discovîed_èrgë
 = 1;

574 
˛¡
->
èrgë_«me
 = 
	`°rdup
(
addr
->target_name);

575 
˛¡
->
èrgë_addªss
 = 
	`°rdup
(
addr
->
p‹èls
->
p‹èl
);

578 
	`¥ötf
("discovery complete, sendÜogout command\n");

580 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

581 
	`¥ötf
("iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

582 
	`exô
(10);

584 
	}
}

587 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

589 i‡(
°©us
 != 0) {

590 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

591 
	`exô
(10);

594 
	`¥ötf
("Logged inÅoÅarget, send discovery command\n");

595 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

596 
	`¥ötf
("ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

597 
	`exô
(10);

600 
	}
}

602 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

604 
	`¥ötf
("C⁄√˘edÅÿiscsòsockë sètus:0x%08x\n", 
°©us
);

606 i‡(
°©us
 != 0) {

607 
	`¥ötf
("discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

608 
	`exô
(10);

611 
	`¥ötf
("connected, sendÜogin command\n");

612 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

613 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

614 
	`¥ötf
("iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

615 
	`exô
(10);

617 
	}
}

620 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

622 
iscsi_c⁄ãxt
 *
iscsi
;

623 
pﬁlfd
 
pfd
;

624 
˛õ¡_°©e
 
˛¡
;

626 
	`¥ötf
("iscsi client\n");

627 #i‡
	`deföed
(
WIN32
)

628 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

629 
	`¥ötf
("FailedÅo start Winsock2\n");

630 
	`exô
(10);

635 
	`mem£t
(&
˛¡
, 0, (clnt));

637 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
("iqn.2002-10.com.ronnie:client");

638 i‡(
iscsi
 =
NULL
) {

639 
	`¥ötf
("FailedÅo create context\n");

640 
	`exô
(10);

643 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

644 
	`¥ötf
("FailedÅoáddálias\n");

645 
	`exô
(10);

648 
˛¡
.
mesßge
 = "Hello iSCSI";

649 
˛¡
.
has_discovîed_èrgë
 = 0;

650 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
TARGET
, 
discovîyc⁄√˘_cb
, &
˛¡
) != 0) {

651 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

652 
	`exô
(10);

655 
˛¡
.
föished
 == 0) {

656 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

657 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

659 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

660 
	`¥ötf
("Poll failed");

661 
	`exô
(10);

663 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

664 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

670 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

672 i‡(
˛¡
.
èrgë_«me
 !
NULL
) {

673 
	`‰ì
(
˛¡
.
èrgë_«me
);

675 i‡(
˛¡
.
èrgë_addªss
 !
NULL
) {

676 
	`‰ì
(
˛¡
.
èrgë_addªss
);

679 
	`¥ötf
("ok\n");

681 
	}
}

	@lib/connect.c

17 #i‡
deföed
(
WIN32
)

18 
	~"wö32/wö32_com∑t.h
"

20 
	~<uni°d.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<î∫o.h
>

27 
	~<time.h
>

28 
	~"¶i°.h
"

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

33 
	sc⁄√˘_èsk
 {

34 
iscsi_comm™d_cb
 
	mcb
;

35 *
	m¥iv©e_d©a
;

36 
	mlun
;

40 
iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

41 *
¥iv©e_d©a
);

44 
	$iscsi_ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

45 *
comm™d_d©a
, *
¥iv©e_d©a
)

47 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

48 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

50 i‡(
°©us
 != 0) {

51 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


52 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
 ||

53 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_POWER_ON_OCCURED
 ||

54 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_NEXUS_LOSS
)) {

59 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˘
->
lun
,

60 
iscsi_ã°unôªady_cb
,

61 
˘
Ë=
NULL
) {

62 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready "

64 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

65 
˘
->
¥iv©e_d©a
);

66 
	`iscsi_‰ì
(
iscsi
, 
˘
);

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 i‡(
°©us
 != 0

75 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


76 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


77 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED


78 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
)) {

79 
°©us
 = 0;

83 i‡(
°©us
 =
SCSI_STATUS_RESERVATION_CONFLICT
) {

84 
°©us
 = 0;

88 i‡(
°©us
 != 0

89 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


90 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

91 
°©us
 = 0;

94 
˘
->
	`cb
(
iscsi
, 
°©us
?
SCSI_STATUS_ERROR
:
SCSI_STATUS_GOOD
, 
NULL
,

95 
˘
->
¥iv©e_d©a
);

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`iscsi_‰ì
(
iscsi
, 
˘
);

98 
	}
}

101 
	$iscsi_logö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

102 *
¥iv©e_d©a
)

104 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

106 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

107 
	`iscsi_disc⁄√˘
(
iscsi
);

108 i‡(
iscsi
->
böd_öãrÁ˚s
[0]Ë
	`iscsi_de¸emít_iÁ˚_º
();

109 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, iscsi->
èrgë_addªss
, 
iscsi_c⁄√˘_cb
, iscsi->
c⁄√˘_d©a
) != 0) {

110 
	`iscsi_‰ì
(
iscsi
, 
˘
);

116 i‡(
°©us
 != 0) {

117 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

118 
	`iscsi_‰ì
(
iscsi
, 
˘
);

122 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˘
->
lun
,

123 
iscsi_ã°unôªady_cb
, 
˘
Ë=
NULL
) {

124 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready_async failed.");

125 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

127 
	}
}

130 
	$iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

131 *
¥iv©e_d©a
)

133 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

135 i‡(
°©us
 != 0) {

136 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo connectÅo iSCSI socket. "

137 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

138 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

139 
	`iscsi_‰ì
(
iscsi
, 
˘
);

143 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_logö_cb
, 
˘
) != 0) {

144 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_login_async failed.");

145 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

146 
	`iscsi_‰ì
(
iscsi
, 
˘
);

148 
	}
}

152 
	$iscsi_fuŒ_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

153 
lun
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

155 
c⁄√˘_èsk
 *
˘
;

157 
iscsi
->
lun
 =Üun;

158 i‡(
iscsi
->
p‹èl
 !=Öortal)

159 
	`°∫˝y
(
iscsi
->
p‹èl
,p‹èl,
MAX_STRING_SIZE
);

161 
˘
 = 
	`iscsi_mÆloc
(
iscsi
, (
c⁄√˘_èsk
));

162 i‡(
˘
 =
NULL
) {

163 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory. FailedÅoállocate "

165  -
ENOMEM
;

167 
˘
->
cb
 = cb;

168 
˘
->
lun
 =Üun;

169 
˘
->
¥iv©e_d©a
 =Örivate_data;

170 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
iscsi_c⁄√˘_cb
, 
˘
) != 0) {

171 
	`iscsi_‰ì
(
iscsi
, 
˘
);

172  -
ENOMEM
;

175 
	}
}

180 
	$iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
)

182 
iscsi
->
no_auto_ªc⁄√˘
 = 
°©e
;

187 i‡(!
°©e
 && 
iscsi
->
ªc⁄√˘_de„ºed
) {

188 
iscsi
->
ªc⁄√˘_de„ºed
 = 0;

189 
	`iscsi_ªc⁄√˘
(
iscsi
);

191 
	}
}

193 
	$iscsi_£t_ªc⁄√˘_max_ªåõs
(
iscsi_c⁄ãxt
 *
iscsi
, 
cou¡
)

195 
iscsi
->
ªc⁄√˘_max_ªåõs
 = 
cou¡
;

196 
	}
}

198 
	$iscsi_de„r_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

200 
iscsi_pdu
 *
pdu
;

202 
iscsi
->
ªc⁄√˘_de„ºed
 = 1;

204 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect deferred, cancellingállÅasks");

206 (
pdu
 = 
iscsi
->
outqueue
)) {

207 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

208 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

212 i‡(
iscsi
->
is_loggedö
) {

213 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

214 
NULL
, 
pdu
->
¥iv©e_d©a
);

217 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

219 (
pdu
 = 
iscsi
->
waôpdu
)) {

220 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

224 i‡(
iscsi
->
is_loggedö
) {

225 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

226 
NULL
, 
pdu
->
¥iv©e_d©a
);

228 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

230 
	}
}

232 
	$iscsi_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
ﬁd_iscsi
)

234 
iscsi_c⁄ãxt
 *
iscsi
;

235 
ªåy
 = 0;

238 i‡(
ﬁd_iscsi
->
ªc⁄√˘_de„ºed
) {

239 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect initiated, butÑeconnect isálready deferred");

243 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect initiated");

249 i‡(
ﬁd_iscsi
->
no_auto_ªc⁄√˘
) {

250 
	`iscsi_de„r_ªc⁄√˘
(
ﬁd_iscsi
);

254 i‡(
ﬁd_iscsi
->
œ°_ªc⁄√˘
) {

255 i‡(
	`time
(
NULL
Ë- 
ﬁd_iscsi
->
œ°_ªc⁄√˘
 < 5Ë
	`¶ìp
(5);

258 
åy_agaö
:

260 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
ﬁd_iscsi
->
öôüt‹_«me
);

261 i‡(
iscsi
 =
NULL
) {

262 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "failedÅo createÇew context forÑeconnection");

266 
iscsi
->
is_ªc⁄√˘ög
 = 1;

268 
	`iscsi_£t_èrgë«me
(
iscsi
, 
ﬁd_iscsi
->
èrgë_«me
);

270 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ﬁd_iscsi
->
w™t_hódî_dige°
);

272 i‡(
ﬁd_iscsi
->
u£r
[0]) {

273 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
ﬁd_iscsi
->
u£r
, old_iscsi->
∑sswd
);

276 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

278 
iscsi
->
lun
 = 
ﬁd_iscsi
->lun;

280 
	`°∫˝y
(
iscsi
->
p‹èl
,
ﬁd_iscsi
->p‹èl,
MAX_STRING_SIZE
);

282 
	`°∫˝y
(
iscsi
->
böd_öãrÁ˚s
,
ﬁd_iscsi
->böd_öãrÁ˚s,
MAX_STRING_SIZE
);

283 
iscsi
->
böd_öãrÁ˚s_˙t
 = 
ﬁd_iscsi
->bind_interfaces_cnt;

285 
iscsi
->
log_Àvñ
 = 
ﬁd_iscsi
->log_level;

286 
iscsi
->
log_‚
 = 
ﬁd_iscsi
->log_fn;

287 
iscsi
->
t˝_u£r_timeout
 = 
ﬁd_iscsi
->tcp_user_timeout;

288 
iscsi
->
t˝_kìpidÀ
 = 
ﬁd_iscsi
->tcp_keepidle;

289 
iscsi
->
t˝_kìp˙t
 = 
ﬁd_iscsi
->tcp_keepcnt;

290 
iscsi
->
t˝_kìpötvl
 = 
ﬁd_iscsi
->tcp_keepintvl;

291 
iscsi
->
t˝_syn˙t
 = 
ﬁd_iscsi
->tcp_syncnt;

293 
iscsi
->
ªc⁄√˘_max_ªåõs
 = 
ﬁd_iscsi
->reconnect_max_retries;

295 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, iscsi->
p‹èl
, iscsi->
lun
) != 0) {

296 
backoff
 = 
ªåy
;

298 i‡(
iscsi
->
ªc⁄√˘_max_ªåõs
 !-1 && 
ªåy
 >= iscsi->reconnect_max_retries) {

299 
	`iscsi_de„r_ªc⁄√˘
(
ﬁd_iscsi
);

300 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

303 i‡(
backoff
 > 10) {

304 
backoff
 +
	`ønd
() % 10;

305 
backoff
 -= 5;

307 i‡(
backoff
 > 30) {

308 
backoff
 = 30;

310 
	`ISCSI_LOG
(
ﬁd_iscsi
, 1, "ªc⁄√˘Åry %d faûed, waôög %d sec⁄ds", 
ªåy
, 
backoff
);

311 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

312 
	`¶ìp
(
backoff
);

313 
ªåy
++;

314 
åy_agaö
;

317 
ﬁd_iscsi
->
outqueue
) {

318 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
outqueue
;

319 
	`SLIST_REMOVE
(&
ﬁd_iscsi
->
outqueue
, 
pdu
);

320 
	`SLIST_ADD_END
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

323 
ﬁd_iscsi
->
waôpdu
) {

324 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
waôpdu
;

326 
	`SLIST_REMOVE
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

327 i‡(
pdu
->
ôt
 == 0xffffffff) {

331 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DROP_ON_RECONNECT
) {

337 
	`iscsi_‰ì_pdu
(
ﬁd_iscsi
, 
pdu
);

341 
pdu
->
ôt
 = 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
);

342 
	`iscsi_pdu_£t_ôt
(
pdu
,Ödu->
ôt
);

346 
pdu
->
cmd¢
 = (pdu->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
)?
iscsi
->cmdsn:iscsi->cmdsn++;

347 
	`iscsi_pdu_£t_cmd¢
(
pdu
,Ödu->
cmd¢
);

349 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
);

350 
iscsi
->
°©¢
++;

352 
pdu
->
outd©a_wrôãn
 = 0;

353 
pdu
->
∑ylﬂd_wrôãn
 = 0;

354 
	`iscsi_queue_pdu
(
iscsi
, 
pdu
);

357 i‡(
	`dup2
(
iscsi
->
fd
, 
ﬁd_iscsi
->fd) == -1) {

358 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

359 
åy_agaö
;

362 i‡(
ﬁd_iscsi
->
öcomög
 !
NULL
) {

363 
	`iscsi_‰ì_iscsi_ö_pdu
(
ﬁd_iscsi
, old_iscsi->
öcomög
);

365 i‡(
ﬁd_iscsi
->
öqueue
 !
NULL
) {

366 
	`iscsi_‰ì_iscsi_öqueue
(
ﬁd_iscsi
, old_iscsi->
öqueue
);

369 i‡(
ﬁd_iscsi
->
outqueue_cuºít
 !
NULL
 && old_iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

370 
	`iscsi_‰ì_pdu
(
ﬁd_iscsi
, old_iscsi->
outqueue_cuºít
);

373 
	`˛o£
(
iscsi
->
fd
);

374 
iscsi
->
fd
 = 
ﬁd_iscsi
->fd;

375 
iscsi
->
mÆlocs
+=
ﬁd_iscsi
->mallocs;

376 
iscsi
->
‰ìs
+=
ﬁd_iscsi
->frees;

378 
	`mem˝y
(
ﬁd_iscsi
, 
iscsi
, (
iscsi_c⁄ãxt
));

379 
	`‰ì
(
iscsi
);

381 
	`ISCSI_LOG
(
ﬁd_iscsi
, 2, "reconnect was successful");

383 
ﬁd_iscsi
->
is_ªc⁄√˘ög
 = 0;

384 
ﬁd_iscsi
->
œ°_ªc⁄√˘
 = 
	`time
(
NULL
);

387 
	}
}

	@lib/crc32c.c

17 #i‡
deföed
(
WIN32
)

19 
	~<uni°d.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

45 
	g¸˘abÀ
[256] = {

112 
	$¸c32c
(*
buf
, 
Àn
)

114 
¸c
 = 0xffffffff;

115 
Àn
-- > 0) {

116 
¸c
 = (¸c>>8Ë^ 
¸˘abÀ
[(¸¯^ (*
buf
++)) & 0xFF];

118  
¸c
^0xffffffff;

119 
	}
}

	@lib/discovery.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~"iscsi.h
"

33 
	~"iscsi-¥iv©e.h
"

36 
	$iscsi_discovîy_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

37 *
¥iv©e_d©a
)

39 
iscsi_pdu
 *
pdu
;

40 *
°r
;

42 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_DISCOVERY
) {

43 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo do discovery on "

48 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_TEXT_REQUEST
,

49 
ISCSI_PDU_TEXT_RESPONSE
);

50 i‡(
pdu
 =
NULL
) {

51 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

57 
	`iscsi_pdu_£t_immedüã
(
pdu
);

60 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
ISCSI_PDU_TEXT_FINAL
);

63 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

66 
°r
 = (*)"SendTargets=All";

67 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

69 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

70 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

74 
pdu
->
ˇŒback
 = 
cb
;

75 
pdu
->
¥iv©e_d©a
 =Örivate_data;

77 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

78 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

80 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

85 
	}
}

88 
	$iscsi_‰ì_discovîy_addªs£s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_discovîy_addªss
 *
addªs£s
)

90 
addªs£s
 !
NULL
) {

91 
iscsi_discovîy_addªss
 *
√xt
 = 
addªs£s
->next;

93 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
èrgë_«me
));

94 
addªs£s
->
èrgë_«me
 = 
NULL
;

96 
addªs£s
->
p‹èls
 !
NULL
) {

97 
iscsi_èrgë_p‹èl
 *
√xt_p‹èl
 = 
addªs£s
->
p‹èls
->
√xt
;

99 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
->
p‹èl
));

100 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
));

102 
addªs£s
->
p‹èls
 = 
√xt_p‹èl
;

104 
addªs£s
->
p‹èls
 = 
NULL
;

106 
addªs£s
->
√xt
 = 
NULL
;

107 
	`iscsi_‰ì
(
iscsi
, 
addªs£s
);

108 
addªs£s
 = 
√xt
;

110 
	}
}

113 
	$iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

114 
iscsi_ö_pdu
 *
ö
)

116 
iscsi_discovîy_addªss
 *
èrgës
 = 
NULL
;

117 *
±r
 = 
ö
->
d©a
;

118 
size
 = 
ö
->
d©a_pos
;

121 i‡(
ö
->
hdr
[1] !
ISCSI_PDU_TEXT_FINAL
) {

122 
	`iscsi_£t_îr‹
(
iscsi
, "unsupported flags inÅext "

123 "ª∂y %02x", 
ö
->
hdr
[1]);

124 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

125 
pdu
->
¥iv©e_d©a
);

129 
size
 > 0) {

130 *
íd
;

131 
Àn
;

133 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

134 i‡(
íd
 =
NULL
) {

135 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

137 
±r
 - 
ö
->
d©a
);

138 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

139 
pdu
->
¥iv©e_d©a
);

140 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

144 
Àn
 = 
íd
 - 
±r
;

145 i‡(
Àn
 == 0) {

150 i‡(!
	`°∫cmp
((*)
±r
, "TargetName=", 11)) {

151 
iscsi_discovîy_addªss
 *
èrgë
;

153 
èrgë
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_discovîy_addªss
));

154 i‡(
èrgë
 =
NULL
) {

155 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

158 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

159 
pdu
->
¥iv©e_d©a
);

160 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

163 
èrgë
->
èrgë_«me
 = 
	`iscsi_°rdup
(
iscsi
,(*)
±r
+11);

164 i‡(
èrgë
->
èrgë_«me
 =
NULL
) {

165 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

168 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

169 
pdu
->
¥iv©e_d©a
);

170 
	`iscsi_‰ì
(
iscsi
, 
èrgë
);

171 
èrgë
 = 
NULL
;

172 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

175 
èrgë
->
√xt
 = 
èrgës
;

176 
èrgës
 = 
èrgë
;

177 } i‡(!
	`°∫cmp
((*)
±r
, "TargetAddress=", 14)) {

178 
iscsi_èrgë_p‹èl
 *
p‹èl
;

180 i‡(
èrgës
 =
NULL
) {

181 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid discovery "

183 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

184 
pdu
->
¥iv©e_d©a
);

185 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

188 
p‹èl
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_èrgë_p‹èl
));

189 i‡(
p‹èl
 =
NULL
) {

190 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo malloc "

192 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

193 
pdu
->
¥iv©e_d©a
);

194 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

198 
p‹èl
->
√xt
 = 
èrgës
->
p‹èls
;

199 
èrgës
->
p‹èls
 = 
p‹èl
;

201 
p‹èl
->p‹è»
	`iscsi_°rdup
(
iscsi
, (*)
±r
+14);

202 i‡(
p‹èl
->p‹è»=
NULL
) {

203 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

206 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

207 
pdu
->
¥iv©e_d©a
);

208 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

212 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

213 "discovîy såög : %s", 
±r
);

214 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

215 
pdu
->
¥iv©e_d©a
);

216 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

220 
±r
 +
Àn
 + 1;

221 
size
 -
Àn
 + 1;

224 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èrgës
,Ödu->
¥iv©e_d©a
);

225 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

228 
	}
}

	@lib/init.c

17 
	#_GNU_SOURCE


	)

19 #i‡
deföed
(
WIN32
)

21 
	~<°rögs.h
>

22 
	~<uni°d.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 
	~<°d¨g.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<time.h
>

32 
	~"iscsi.h
"

33 
	~"iscsi-¥iv©e.h
"

34 
	~"¶i°.h
"

36 * 
	$iscsi_mÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

37 * 
±r
 = 
	`mÆloc
(
size
);

38 i‡(
±r
 !
NULL
Ë
iscsi
->
mÆlocs
++;

39  
±r
;

40 
	}
}

42 * 
	$iscsi_zmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

43 * 
±r
 = 
	`mÆloc
(
size
);

44 i‡(
±r
 !
NULL
) {

45 
	`mem£t
(
±r
,0x00,
size
);

46 
iscsi
->
mÆlocs
++;

48  
±r
;

49 
	}
}

51 * 
	$iscsi_ªÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
, 
size_t
 
size
) {

52 * 
_±r
 = 
	`ªÆloc
(
±r
, 
size
);

53 i‡(
_±r
 !
NULL
) {

54 
iscsi
->
ªÆlocs
++;

56  
_±r
;

57 
	}
}

59 
	$iscsi_‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

60 i‡(
±r
 =
NULL
) ;

61 
	`‰ì
(
±r
);

62 
iscsi
->
‰ìs
++;

63 
	}
}

65 * 
	$iscsi_°rdup
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° * 
°r
) {

66 *
°r2
 = 
	`°rdup
(
°r
);

67 i‡(
°r2
 !
NULL
Ë
iscsi
->
mÆlocs
++;

68  
°r2
;

69 
	}
}

71 * 
	$iscsi_szmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

72 *
±r
;

73 i‡(
size
 > 
iscsi
->
smÆloc_size
Ë 
NULL
;

74 i‡(
iscsi
->
smÆloc_‰ì
 > 0) {

75 
±r
 = 
iscsi
->
smÆloc_±rs
[--iscsi->
smÆloc_‰ì
];

76 
	`mem£t
(
±r
, 0, 
iscsi
->
smÆloc_size
);

77 
iscsi
->
smÆlocs
++;

79 
±r
 = 
	`iscsi_zmÆloc
(
iscsi
, iscsi->
smÆloc_size
);

81  
±r
;

82 
	}
}

84 
	$iscsi_s‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

85 i‡(
±r
 =
NULL
) {

88 i‡(
iscsi
->
smÆloc_‰ì
 =
SMALL_ALLOC_MAX_FREE
) {

89 
i
;

91 
	`ISCSI_LOG
(
iscsi
, 6, "smalloc free == SMALLOC_MAX_FREE");

94 
iscsi
->
smÆloc_‰ì
 >>= 1;

95 
i
 = 0; i < 
iscsi
->
smÆloc_‰ì
; i++) {

96 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

97 
iscsi
->
smÆloc_±rs
[
i
] = iscsi->smÆloc_±rs[ò+ iscsi->
smÆloc_‰ì
];

100 
iscsi
->
smÆloc_±rs
[iscsi->
smÆloc_‰ì
++] = 
±r
;

101 
	}
}

103 
iscsi_c⁄ãxt
 *

104 
	$iscsi_¸óã_c⁄ãxt
(c⁄° *
öôüt‹_«me
)

106 
iscsi_c⁄ãxt
 *
iscsi
;

107 
size_t
 
ªquúed
 = 
ISCSI_RAW_HEADER_SIZE
 + 
ISCSI_DIGEST_SIZE
;

109 i‡(!
öôüt‹_«me
[0]) {

110  
NULL
;

113 
iscsi
 = 
	`mÆloc
((
iscsi_c⁄ãxt
));

114 i‡(
iscsi
 =
NULL
) {

115  
NULL
;

118 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

120 
	`°∫˝y
(
iscsi
->
öôüt‹_«me
,öôüt‹_«me,
MAX_STRING_SIZE
);

122 
iscsi
->
fd
 = -1;

124 
	`§™d
(
	`time
(
NULL
Ë^ 
	`gëpid
(Ë^ (
uöt32_t
Ë((
uöçå_t
Ë
iscsi
));

127 
	`iscsi_£t_isid_øndom
(
iscsi
, 
	`ønd
(), 0);

130 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_SECNEG
;

131 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

132 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
;

134 
iscsi
->
max_bur°_Àngth
 = 262144;

135 
iscsi
->
fú°_bur°_Àngth
 = 262144;

136 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
 = 262144;

137 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 8192;

138 
iscsi
->
w™t_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

139 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

140 
iscsi
->
w™t_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

141 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

142 
iscsi
->
w™t_hódî_dige°
 = 
ISCSI_HEADER_DIGEST_NONE_CRC32C
;

144 
iscsi
->
t˝_kìp˙t
=3;

145 
iscsi
->
t˝_kìpötvl
=30;

146 
iscsi
->
t˝_kìpidÀ
=30;

148 
iscsi
->
ªc⁄√˘_max_ªåõs
 = -1;

150 i‡(
	`gëív
("LIBISCSI_DEBUG"Ë!
NULL
) {

151 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
	`©oi
(
	`gëív
("LIBISCSI_DEBUG")));

152 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

155 i‡(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT"Ë!
NULL
) {

156 
	`iscsi_£t_t˝_u£r_timeout
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT")));

159 i‡(
	`gëív
("LIBISCSI_TCP_KEEPCNT"Ë!
NULL
) {

160 
	`iscsi_£t_t˝_kìp˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPCNT")));

163 i‡(
	`gëív
("LIBISCSI_TCP_KEEPINTVL"Ë!
NULL
) {

164 
	`iscsi_£t_t˝_kìpötvl
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPINTVL")));

167 i‡(
	`gëív
("LIBISCSI_TCP_KEEPIDLE"Ë!
NULL
) {

168 
	`iscsi_£t_t˝_kìpidÀ
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPIDLE")));

171 i‡(
	`gëív
("LIBISCSI_TCP_SYNCNT"Ë!
NULL
) {

172 
	`iscsi_£t_t˝_syn˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_SYNCNT")));

175 i‡(
	`gëív
("LIBISCSI_BIND_INTERFACES"Ë!
NULL
) {

176 
	`iscsi_£t_böd_öãrÁ˚s
(
iscsi
,
	`gëív
("LIBISCSI_BIND_INTERFACES"));

182 
iscsi
->
smÆloc_size
 = 1;

183 i‡((
iscsi_pdu
Ë> 
ªquúed
) {

184 
ªquúed
 = (
iscsi_pdu
);

186 i‡((
iscsi_ö_pdu
Ë> 
ªquúed
) {

187 
ªquúed
 = (
iscsi_ö_pdu
);

189 
iscsi
->
smÆloc_size
 < 
ªquúed
) {

190 
iscsi
->
smÆloc_size
 <<= 1;

192 
	`ISCSI_LOG
(
iscsi
,5,"smÆ»Æloˇti⁄ sizêi†%d byã", iscsi->
smÆloc_size
);

194  
iscsi
;

195 
	}
}

198 
	$iscsi_£t_isid_oui
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
oui
, uöt32_à
quÆifõr
)

200 
iscsi
->
isid
[0] = (
oui
 >> 16) & 0x3f;

201 
iscsi
->
isid
[1] = (
oui
 >> 8) & 0xff;

202 
iscsi
->
isid
[2] = (
oui
 ) & 0xff;

204 
iscsi
->
isid
[3] = (
quÆifõr
 >> 16) & 0xff;

205 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

206 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

209 
	}
}

212 
	$iscsi_£t_isid_í
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
í
, uöt32_à
quÆifõr
)

214 
iscsi
->
isid
[0] = 0x40;

216 
iscsi
->
isid
[1] = (
í
 >> 16) & 0xff;

217 
iscsi
->
isid
[2] = (
í
 >> 8) & 0xff;

218 
iscsi
->
isid
[3] = (
í
 ) & 0xff;

220 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

221 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

224 
	}
}

227 
	$iscsi_£t_isid_øndom
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
∫d
, uöt32_à
quÆifõr
)

229 
iscsi
->
isid
[0] = 0x80;

231 
iscsi
->
isid
[1] = (
∫d
 >> 16) & 0xff;

232 
iscsi
->
isid
[2] = (
∫d
 >> 8) & 0xff;

233 
iscsi
->
isid
[3] = (
∫d
 ) & 0xff;

235 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

236 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

239 
	}
}

243 
	$iscsi_£t_isid_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
)

245 
iscsi
->
isid
[0] = 0xc0;

247 
iscsi
->
isid
[1] = 0x00;

248 
iscsi
->
isid
[2] = 0x00;

249 
iscsi
->
isid
[3] = 0x00;

250 
iscsi
->
isid
[4] = 0x00;

251 
iscsi
->
isid
[5] = 0x00;

254 
	}
}

257 
	$iscsi_£t_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
Æüs
)

259 i‡(
iscsi
->
is_loggedö
 != 0) {

260 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenáddingálias");

264 
	`°∫˝y
(
iscsi
->
Æüs
,Æüs,
MAX_STRING_SIZE
);

266 
	}
}

269 
	$iscsi_£t_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
èrgë_«me
)

271 i‡(
iscsi
->
is_loggedö
 != 0) {

272 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenádding "

277 
	`°∫˝y
(
iscsi
->
èrgë_«me
,èrgë_«me,
MAX_STRING_SIZE
);

280 
	}
}

283 
	$iscsi_de°roy_c⁄ãxt
(
iscsi_c⁄ãxt
 *
iscsi
)

285 
iscsi_pdu
 *
pdu
;

286 
i
;

288 i‡(
iscsi
 =
NULL
) {

292 i‡(
iscsi
->
fd
 != -1) {

293 
	`iscsi_disc⁄√˘
(
iscsi
);

296 (
pdu
 = 
iscsi
->
outqueue
)) {

297 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

298 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

302 i‡(
iscsi
->
is_loggedö
) {

303 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

304 
pdu
->
¥iv©e_d©a
);

307 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

309 (
pdu
 = 
iscsi
->
waôpdu
)) {

310 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

314 i‡(
iscsi
->
is_loggedö
) {

315 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

316 
pdu
->
¥iv©e_d©a
);

318 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

321 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 && iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

322 
	`iscsi_‰ì_pdu
(
iscsi
, iscsi->
outqueue_cuºít
);

325 i‡(
iscsi
->
öcomög
 !
NULL
) {

326 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, iscsi->
öcomög
);

328 i‡(
iscsi
->
öqueue
 !
NULL
) {

329 
	`iscsi_‰ì_iscsi_öqueue
(
iscsi
, iscsi->
öqueue
);

332 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

334 
i
=0;i<
iscsi
->
smÆloc_‰ì
;i++) {

335 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

338 i‡(
iscsi
->
mÆlocs
 !iscsi->
‰ìs
) {

339 
	`ISCSI_LOG
(
iscsi
,1,"%d mem‹y block†lo°áàiscsi_de°roy_c⁄ãxt(Ëa·î %d mÆloc(s), %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
-iscsi->
‰ìs
,iscsi->mÆlocs,iscsi->
ªÆlocs
,iscsi->‰ìs,iscsi->
smÆlocs
);

341 
	`ISCSI_LOG
(
iscsi
,5,"mem‹y i†˛ó¿© iscsi_de°roy_c⁄ãxt(Ëa·î %d mÆlocs, %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
,iscsi->
ªÆlocs
,iscsi->
‰ìs
,iscsi->
smÆlocs
);

344 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

345 
	`‰ì
(
iscsi
);

348 
	}
}

351 
	$iscsi_£t_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
îr‹_°rög
, ...)

353 
va_li°
 
≠
;

354 
îr°r
[
MAX_STRING_SIZE
 + 1] = {0};

356 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

357 i‡(
	`v¢¥ötf
(
îr°r
, 
MAX_STRING_SIZE
, 
îr‹_°rög
, 
≠
) < 0) {

358 
	`°∫˝y
(
îr°r
, "couldÇŸ f‹m©Éº‹ såög!", 
MAX_STRING_SIZE
);

360 
	`va_íd
(
≠
);

362 i‡(
iscsi
 !
NULL
) {

363 
	`°∫˝y
(
iscsi
->
îr‹_°rög
, 
îr°r
,
MAX_STRING_SIZE
);

364 
	`ISCSI_LOG
(
iscsi
, 1, "%s",iscsi->
îr‹_°rög
);

366 
	}
}

369 
	$iscsi_£t_log_Àvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
)

371 
iscsi
->
log_Àvñ
 = 
Àvñ
;

372 
	`ISCSI_LOG
(
iscsi
, 2, "£àlogÜevñÅÿ%d", 
Àvñ
);

373 
	}
}

376 
	$iscsi_gë_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
)

378  
iscsi
 ? iscsi->
îr‹_°rög
 : "";

379 
	}
}

382 
	$iscsi_gë_èrgë_addªss
(
iscsi_c⁄ãxt
 *
iscsi
)

384  
iscsi
->
èrgë_addªss
;

385 
	}
}

389 
	$iscsi_£t_hódî_dige°
(
iscsi_c⁄ãxt
 *
iscsi
,

390 
iscsi_hódî_dige°
 
hódî_dige°
)

392 i‡(
iscsi
->
is_loggedö
) {

393 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo set header digest while "

397 i‡(()
hódî_dige°
 > 
ISCSI_HEADER_DIGEST_LAST
) {

398 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

402 
iscsi
->
w™t_hódî_dige°
 = 
hódî_dige°
;

405 
	}
}

408 
	$iscsi_is_logged_ö
(
iscsi_c⁄ãxt
 *
iscsi
)

410  
iscsi
->
is_loggedö
;

411 
	}
}

414 
	$h2i
(
h
)

416 i‡(
h
 >= 'a' && h <= 'f') {

417  
h
 - 'a' + 10;

419 i‡(
h
 >= 'A' && h <= 'F') {

420  
h
 - 'A' + 10;

422  
h
 - '0';

423 
	}
}

426 
	$iscsi_decode_uæ_°rög
(*
°r
)

428 *
°r
) {

429 *
tmp
 = 
°r
;

430 
c
;

432 i‡(*
°r
++ != '%') {

436 i‡(*
°r
 == 0) {

439 
c
 = 
	`h2i
(*
°r
++) << 4;

441 i‡(*
°r
 == 0) {

444 
c
 |
	`h2i
(*
°r
++);

446 *
tmp
++ = 
c
;

447 
	`memmove
(
tmp
, 
°r
, 
	`°æí
(str));

448 
tmp
[
	`°æí
(
°r
)] = 0;

450 
	}
}

452 
iscsi_uæ
 *

453 
	$iscsi_∑r£_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
, 
fuŒ
)

455 
iscsi_uæ
 *iscsi_url;

456 
°r
[
MAX_STRING_SIZE
+1];

457 *
p‹èl
;

458 *
u£r
 = 
NULL
;

459 *
∑sswd
 = 
NULL
;

460 *
èrgë
 = 
NULL
;

461 *
lun
;

462 *
tmp
;

463 
l
 = 0;

465 i‡(!
uæ
) {

467 i‡(
iscsi
 !
NULL
) {

468 
iscsi_uæ
 = 
	`iscsi_mÆloc
(
iscsi
, (iscsi_url));

470 
iscsi_uæ
 = 
	`mÆloc
((iscsi_url));

473 i‡(
iscsi_uæ
 =
NULL
) {

474 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

476  
NULL
;

478 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

479 
iscsi_uæ
->
iscsi
= iscsi;

481 
	`°∫˝y
(
iscsi_uæ
->
p‹èl
," ",
MAX_STRING_SIZE
);

482 
iscsi_uæ
->
lun
 = 1;

483  
iscsi_uæ
;

485 i‡(
	`°∫cmp
(
uæ
, "iscsi://", 8)) {

486 i‡(
fuŒ
) {

487 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI URL must "

489 
uæ
, 
ISCSI_URL_SYNTAX
);

491 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI Portal "

493 
uæ
, 
ISCSI_PORTAL_URL_SYNTAX
);

496  
NULL
;

499 
	`°∫˝y
(
°r
,
uæ
 + 8, 
MAX_STRING_SIZE
);

500 
p‹èl
 = 
°r
;

502 
u£r
 = 
	`gëív
("LIBISCSI_CHAP_USERNAME");

503 
∑sswd
 = 
	`gëív
("LIBISCSI_CHAP_PASSWORD");

505 
tmp
 = 
	`°rchr
(
p‹èl
, '@');

506 i‡(
tmp
 !
NULL
) {

507 
u£r
 = 
p‹èl
;

508 *
tmp
++ = 0;

509 
p‹èl
 = 
tmp
;

511 
tmp
 = 
	`°rchr
(
u£r
, '%');

512 i‡(
tmp
 =
NULL
) {

513 
tmp
 = 
	`°rchr
(
u£r
, ':');

515 i‡(
tmp
 !
NULL
) {

516 *
tmp
++ = 0;

517 
∑sswd
 = 
tmp
;

521 i‡(
fuŒ
) {

522 
èrgë
 = 
	`°rchr
(
p‹èl
, '/');

523 i‡(
èrgë
 =
NULL
) {

524 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

527 
uæ
, 
ISCSI_URL_SYNTAX
);

528  
NULL
;

530 *
èrgë
++ = 0;

532 i‡(*
èrgë
 == 0) {

533 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

536 
uæ
, 
ISCSI_URL_SYNTAX
);

537  
NULL
;

540 
lun
 = 
	`°rchr
(
èrgë
, '/');

541 i‡(
lun
 =
NULL
) {

542 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

545 
uæ
, 
ISCSI_URL_SYNTAX
);

546  
NULL
;

548 *
lun
++ = 0;

550 
l
 = 
	`°πﬁ
(
lun
, &
tmp
, 10);

551 i‡(*
lun
 =0 || *
tmp
 != 0) {

552 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

555 
uæ
, 
ISCSI_URL_SYNTAX
);

556  
NULL
;

559 
tmp
=
	`°rchr
(
p‹èl
,'/');

560 i‡(
tmp
) {

561 *
tmp
=0;

565 i‡(
iscsi
 !
NULL
) {

566 
iscsi_uæ
 = 
	`iscsi_mÆloc
(
iscsi
, (iscsi_url));

568 
iscsi_uæ
 = 
	`mÆloc
((iscsi_url));

571 i‡(
iscsi_uæ
 =
NULL
) {

572 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

574  
NULL
;

576 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

577 
iscsi_uæ
->
iscsi
= iscsi;

579 
	`°∫˝y
(
iscsi_uæ
->
p‹èl
,p‹èl,
MAX_STRING_SIZE
);

581 i‡(
u£r
 !
NULL
 && 
∑sswd
 != NULL) {

582 
	`°∫˝y
(
iscsi_uæ
->
u£r
, u£r, 
MAX_STRING_SIZE
);

583 
	`°∫˝y
(
iscsi_uæ
->
∑sswd
,Öasswd, 
MAX_STRING_SIZE
);

586 i‡(
fuŒ
) {

587 
	`°∫˝y
(
iscsi_uæ
->
èrgë
,Å¨gë, 
MAX_STRING_SIZE
);

588 
iscsi_uæ
->
lun
 = 
l
;

591 
	`iscsi_decode_uæ_°rög
(&
iscsi_uæ
->
èrgë
[0]);

593  
iscsi_uæ
;

594 
	}
}

596 
iscsi_uæ
 *

597 
	$iscsi_∑r£_fuŒ_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

599  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,1);

600 
	}
}

602 
iscsi_uæ
 *

603 
	$iscsi_∑r£_p‹èl_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

605  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,0);

606 
	}
}

609 
	$iscsi_de°roy_uæ
(
iscsi_uæ
 *iscsi_url)

611 
iscsi_c⁄ãxt
 *
iscsi
 = 
iscsi_uæ
->iscsi;

612 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

613 i‡(
iscsi
 !
NULL
)

614 
	`iscsi_‰ì
(
iscsi
, 
iscsi_uæ
);

616 
	`‰ì
(
iscsi_uæ
);

617 
	}
}

621 
	$iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

622 c⁄° *
u£r
, c⁄° *
∑sswd
)

624 
	`°∫˝y
(
iscsi
->
u£r
,u£r,
MAX_STRING_SIZE
);

625 
	`°∫˝y
(
iscsi
->
∑sswd
,∑sswd,
MAX_STRING_SIZE
);

627 
	}
}

630 
	$iscsi_£t_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_immedüã_d©a
 
immedüã_d©a
)

632 i‡(
iscsi
->
is_loggedö
 != 0) {

633 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set immediate_data");

637 
iscsi
->
w™t_immedüã_d©a
 = 
immedüã_d©a
;

638 
iscsi
->
u£_immedüã_d©a
 = 
immedüã_d©a
;

640 
	}
}

643 
	$iscsi_£t_öôül_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_öôül_r2t
 
öôül_r2t
)

645 i‡(
iscsi
->
is_loggedö
 != 0) {

646 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set initial_r2t");

650 
iscsi
->
w™t_öôül_r2t
 = 
öôül_r2t
;

652 
	}
}

655 
	$iscsi_£t_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
timeout
)

657 
iscsi
->
scsi_timeout
 = 
timeout
;

659 
	}
}

	@lib/iscsi-command.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~"iscsi.h
"

37 
	~"iscsi-¥iv©e.h
"

38 
	~"scsi-lowÀvñ.h
"

39 
	~"¶i°.h
"

42 
	$iscsi_scsi_ª•⁄£_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

43 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

45 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 =

46 (
iscsi_scsi_cbd©a
 *)
¥iv©e_d©a
;

48 
°©us
) {

49 
SCSI_STATUS_RESERVATION_CONFLICT
:

50 
SCSI_STATUS_CHECK_CONDITION
:

51 
SCSI_STATUS_GOOD
:

52 
SCSI_STATUS_BUSY
:

53 
SCSI_STATUS_CONDITION_MET
:

54 
SCSI_STATUS_TASK_SET_FULL
:

55 
SCSI_STATUS_ACA_ACTIVE
:

56 
SCSI_STATUS_TASK_ABORTED
:

57 
SCSI_STATUS_ERROR
:

58 
SCSI_STATUS_CANCELLED
:

59 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
°©us
, scsi_cbd©a->
èsk
,

60 
scsi_cbd©a
->
¥iv©e_d©a
);

63 
	`iscsi_£t_îr‹
(
iscsi
, "Cant handle scsi status %d yet.",

64 
°©us
);

65 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, scsi_cbd©a->
èsk
,

66 
scsi_cbd©a
->
¥iv©e_d©a
);

68 
	}
}

71 
	$iscsi_£nd_d©a_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
cmd_pdu
,

72 
uöt32_t
 
ât
, uöt32_à
off£t
, uöt32_à
tŸ_Àn
)

74 
tŸ_Àn
 > 0) {

75 
uöt32_t
 
Àn
 = 
tŸ_Àn
;

76 
iscsi_pdu
 *
pdu
;

77 
Êags
;

79 i‡(
Àn
 > 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
) {

80 
Àn
 = 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
;

83 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_DATA_OUT
,

84 
ISCSI_PDU_NO_PDU
,

85 
cmd_pdu
->
ôt
,

86 
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

87 i‡(
pdu
 =
NULL
) {

88 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

90 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
cmd_pdu
);

91 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
cmd_pdu
);

92 
cmd_pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

93 
cmd_pdu
->
¥iv©e_d©a
);

94 
	`iscsi_‰ì_pdu
(
iscsi
, 
cmd_pdu
);

98 
pdu
->
scsi_cbd©a
.
èsk
 = 
cmd_pdu
->scsi_cbdata.task;

102 
pdu
->
cmd¢
 = 
cmd_pdu
->cmdsn;

104 i‡(
tŸ_Àn
 =
Àn
) {

105 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
;

107 
Êags
 = 0;

111 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

114 
	`iscsi_pdu_£t_lun
(
pdu
, 
cmd_pdu
->
lun
);

117 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

120 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

123 
	`iscsi_pdu_£t_d©a¢
(
pdu
, 
cmd_pdu
->
d©a¢
++);

126 
	`iscsi_pdu_£t_buf„roff£t
(
pdu
, 
off£t
);

128 
pdu
->
∑ylﬂd_off£t
 = 
off£t
;

129 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

132 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

134 
pdu
->
ˇŒback
 = 
cmd_pdu
->callback;

135 
pdu
->
¥iv©e_d©a
 = 
cmd_pdu
->private_data;

137 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

138 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

140 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
cmd_pdu
);

141 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
cmd_pdu
);

142 
cmd_pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

143 
cmd_pdu
->
¥iv©e_d©a
);

144 
	`iscsi_‰ì_pdu
(
iscsi
, 
cmd_pdu
);

145 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

149 
tŸ_Àn
 -
Àn
;

150 
off£t
 +
Àn
;

153 
	}
}

156 
	$iscsi_timeout_sˇn
(
iscsi_c⁄ãxt
 *
iscsi
)

158 
iscsi_pdu
 *
pdu
;

159 
iscsi_pdu
 *
√xt_pdu
;

160 
time_t
 
t
 = 
	`time
(
NULL
);

162 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu = 
√xt_pdu
) {

163 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
;

164 
scsi_èsk
 *
èsk
;

166 
√xt_pdu
 = 
pdu
->
√xt
;

168 i‡(
pdu
->
scsi_timeout
 == 0) {

172 i‡(
t
 < 
pdu
->
scsi_timeout
) {

176 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_SCSI_REQUEST
) {

180 
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

181 
èsk
 = 
scsi_cbd©a
->task;

183 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

184 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TIMEOUT
,

185 
èsk
, 
pdu
->
¥iv©e_d©a
);

186 
	`iscsi_£t_îr‹
(
iscsi
, "SCSI commandÅimed out");

189 
èsk
->
°©us
 = 
SCSI_STATUS_TIMEOUT
;

191 
	}
}

198 
	$iscsi_scsi_comm™d_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

199 
scsi_èsk
 *
èsk
, 
iscsi_comm™d_cb
 
cb
,

200 
iscsi_d©a
 *
d
, *
¥iv©e_d©a
)

204 
iscsi_pdu
 *
pdu
;

205 
Êags
;

207 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_NORMAL
) {

208 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command on "

213 i‡(
iscsi
->
is_loggedö
 == 0) {

214 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command while "

218 
	`Ârötf
(
°dîr
, "kalai calling iscsi_queue_pdu\n");

222 i‡(
d
 !
NULL
 && d->
d©a
 != NULL) {

223 
scsi_iovec
 *
iov
;

225 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

226 i‡(
iov
 =
NULL
) {

229 
iov
->
iov_ba£
 = 
d
->
d©a
;

230 
iov
->
iov_Àn
 = 
d
->
size
;

231 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

234 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_SCSI_REQUEST
,

235 
ISCSI_PDU_SCSI_RESPONSE
);

236 i‡(
pdu
 =
NULL
) {

237 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

242 
pdu
->
scsi_cbd©a
.
èsk
 =Åask;

243 
pdu
->
scsi_cbd©a
.
ˇŒback
 = 
cb
;

244 
pdu
->
scsi_cbd©a
.
¥iv©e_d©a
 =Örivate_data;

246 
pdu
->
∑ylﬂd_off£t
 = 0;

247 
pdu
->
∑ylﬂd_Àn
 = 0;

249 
	`scsi_£t_èsk_¥iv©e_±r
(
èsk
, &
pdu
->
scsi_cbd©a
);

252 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
|
ISCSI_PDU_SCSI_ATTR_SIMPLE
;

253 
èsk
->
x„r_dú
) {

254 
SCSI_XFER_NONE
:

256 
SCSI_XFER_READ
:

257 
Êags
 |
ISCSI_PDU_SCSI_READ
;

259 
SCSI_XFER_WRITE
:

260 
Êags
 |
ISCSI_PDU_SCSI_WRITE
;

263 i‡(
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_YES
) {

264 
uöt32_t
 
Àn
 = 
èsk
->
expx„æí
;

266 i‡(
Àn
 > 
iscsi
->
fú°_bur°_Àngth
) {

267 
Àn
 = 
iscsi
->
fú°_bur°_Àngth
;

270 i‡(
Àn
 > 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
) {

271 
Àn
 = 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
;

274 
pdu
->
∑ylﬂd_off£t
 = 0;

275 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

278 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

285 i‡(
iscsi
->
u£_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO


286 && 
pdu
->
∑ylﬂd_Àn
 < (
uöt32_t
)
èsk
->
expx„æí


287 && 
pdu
->
∑ylﬂd_Àn
 < 
iscsi
->
fú°_bur°_Àngth
) {

291 
Êags
 &~
ISCSI_PDU_SCSI_FINAL
;

295 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

298 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

299 
pdu
->
lun
 =Üun;

302 
	`iscsi_pdu_£t_expx„æí
(
pdu
, 
èsk
->
expx„æí
);

305 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

306 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

307 
iscsi
->
cmd¢
++;

310 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

313 
	`iscsi_pdu_£t_cdb
(
pdu
, 
èsk
);

315 
pdu
->
ˇŒback
 = 
iscsi_scsi_ª•⁄£_cb
;

316 
pdu
->
¥iv©e_d©a
 = &pdu->
scsi_cbd©a
;

318 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

319 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

321 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

330 i‡(!(
Êags
 & 
ISCSI_PDU_SCSI_FINAL
)) {

331 
uöt32_t
 
Àn
 = 
èsk
->
expx„æí
;

333 i‡(
Àn
 + 
pdu
->
∑ylﬂd_Àn
 > 
iscsi
->
fú°_bur°_Àngth
) {

334 
Àn
 = 
iscsi
->
fú°_bur°_Àngth
 - 
pdu
->
∑ylﬂd_Àn
;

336 
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 0xffffffff,

337 
pdu
->
∑ylﬂd_Àn
, 
Àn
);

341 
èsk
->
cmd¢
 = 
pdu
->cmdsn;

342 
èsk
->
ôt
 = 
pdu
->itt;

343 
èsk
->
lun
 =Üun;

346 
	}
}

349 
	$iscsi_¥o˚ss_scsi_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

350 
iscsi_ö_pdu
 *
ö
)

352 
	`Ârötf
(
°dîr
, "kalaiÑeply\n");

353 i‡(
iscsi
 && 
pdu
 && 
ö
)

356 
uöt32_t
 
°©¢
, 
maxcmd¢
, 
expcmd¢
, 
Êags
, 
°©us
;

357 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

358 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

360 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

361 i‡(
°©¢
 > 
iscsi
->statsn) {

362 
iscsi
->
°©¢
 = statsn;

365 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

366 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

367 
iscsi
->
maxcmd¢
 = maxcmdsn;

369 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

370 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

371 
iscsi
->
expcmd¢
 =Éxpcmdsn;

374 
Êags
 = 
ö
->
hdr
[1];

375 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

376 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseÖdu but Final bit is "

377 "nŸ së: 0x%02x.", 
Êags
);

378 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

379 
pdu
->
¥iv©e_d©a
);

382 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

383 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

384 "0x%02x.", 
Êags
);

385 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

386 
pdu
->
¥iv©e_d©a
);

390 
°©us
 = 
ö
->
hdr
[3];

392 
°©us
) {

393 
SCSI_STATUS_GOOD
:

394 
SCSI_STATUS_CONDITION_MET
:

395 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

396 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

398 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

399 
èsk
->
ªsiduÆ
 = 0;

404 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

405 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

406 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

407 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

409 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

417 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

419 
pdu
->
öd©a
.
d©a
 = 
NULL
;

420 
pdu
->
öd©a
.
size
 = 0;

422 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èsk
,

423 
pdu
->
¥iv©e_d©a
);

425 
SCSI_STATUS_CHECK_CONDITION
:

426 
èsk
->
d©aö
.
size
 = 
ö
->
d©a_pos
;

427 
èsk
->
d©aö
.
d©a
 = 
	`mÆloc
—ask->d©aö.
size
);

428 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

429 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate blob for "

433 
	`mem˝y
(
èsk
->
d©aö
.
d©a
, 
ö
->d©a,Åask->d©aö.
size
);

435 
èsk
->
£n£
.
îr‹_ty≥
 =Åask->
d©aö
.
d©a
[2] & 0x7f;

436 
èsk
->
£n£
.
îr‹_ty≥
) {

439 
èsk
->
£n£
.
key
 =Åask->
d©aö
.
d©a
[4] & 0x0f;

440 
èsk
->
£n£
.
ascq
 = 
	`scsi_gë_uöt16
(

441 &(
èsk
->
d©aö
.
d©a
[14]));

445 
èsk
->
£n£
.
key
 =Åask->
d©aö
.
d©a
[3] & 0x0f;

446 
èsk
->
£n£
.
ascq
 = 
	`scsi_gë_uöt16
(

447 &(
èsk
->
d©aö
.
d©a
[4]));

450 
	`iscsi_£t_îr‹
(
iscsi
, "SENSE KEY:%s(%d) ASCQ:%s(0x%04x)",

451 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),

452 
èsk
->
£n£
.
key
,

453 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),

454 
èsk
->
£n£
.
ascq
);

455 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CHECK_CONDITION
, 
èsk
,

456 
pdu
->
¥iv©e_d©a
);

458 
SCSI_STATUS_RESERVATION_CONFLICT
:

459 
	`iscsi_£t_îr‹
(
iscsi
, "RESERVATION CONFLICT");

460 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_RESERVATION_CONFLICT
,

461 
èsk
, 
pdu
->
¥iv©e_d©a
);

463 
SCSI_STATUS_TASK_SET_FULL
:

464 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_SET_FULL");

465 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_SET_FULL
,

466 
èsk
, 
pdu
->
¥iv©e_d©a
);

468 
SCSI_STATUS_ACA_ACTIVE
:

469 
	`iscsi_£t_îr‹
(
iscsi
, "ACA_ACTIVE");

470 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ACA_ACTIVE
,

471 
èsk
, 
pdu
->
¥iv©e_d©a
);

473 
SCSI_STATUS_TASK_ABORTED
:

474 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_ABORTED");

475 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_ABORTED
,

476 
èsk
, 
pdu
->
¥iv©e_d©a
);

478 
SCSI_STATUS_BUSY
:

479 
	`iscsi_£t_îr‹
(
iscsi
, "BUSY");

480 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_BUSY
,

481 
èsk
, 
pdu
->
¥iv©e_d©a
);

484 
	`iscsi_£t_îr‹
(
iscsi
, "Unknow¿SCSI sètu†:%d.", 
°©us
);

486 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

487 
pdu
->
¥iv©e_d©a
);

492 
	}
}

495 
	$iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

496 
iscsi_ö_pdu
 *
ö
, *
is_föished
)

498 
uöt32_t
 
°©¢
, 
maxcmd¢
, 
expcmd¢
, 
Êags
, 
°©us
;

499 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

500 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

501 
d¶
;

503 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

504 i‡(
°©¢
 > 
iscsi
->statsn) {

505 
iscsi
->
°©¢
 = statsn;

508 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

509 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

510 
iscsi
->
maxcmd¢
 = maxcmdsn;

512 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

513 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

514 
iscsi
->
expcmd¢
 =Éxpcmdsn;

517 
Êags
 = 
ö
->
hdr
[1];

518 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

519 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

520 "0x%02x.", 
Êags
);

521 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

522 
pdu
->
¥iv©e_d©a
);

525 
d¶
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[4]) & 0x00ffffff;

528 i‡(
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

529 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
öd©a
, 
ö
->
d©a
, 
d¶
, 0) != 0) {

530 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅoádd data "

536 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

537 *
is_föished
 = 0;

539 i‡((
Êags
&
ISCSI_PDU_DATA_CONTAINS_STATUS
) == 0) {

540 *
is_föished
 = 0;

543 i‡(*
is_föished
 == 0) {

547 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

548 
èsk
->
ªsiduÆ
 = 0;

553 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

554 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

555 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

556 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

558 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

566 
°©us
 = 
ö
->
hdr
[3];

567 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

568 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

574 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

576 
pdu
->
öd©a
.
d©a
 = 
NULL
;

577 
pdu
->
öd©a
.
size
 = 0;

579 
pdu
->
	`ˇŒback
(
iscsi
, 
°©us
, 
èsk
,Ödu->
¥iv©e_d©a
);

582 
	}
}

585 
	$iscsi_¥o˚ss_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

586 
iscsi_ö_pdu
 *
ö
)

588 
uöt32_t
 
ât
, 
off£t
, 
Àn
, 
maxcmd¢
, 
expcmd¢
;

590 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

591 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

592 
Àn
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

594 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

595 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

596 
iscsi
->
maxcmd¢
 = maxcmdsn;

598 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

599 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

600 
iscsi
->
expcmd¢
 =Éxpcmdsn;

603 
pdu
->
d©a¢
 = 0;

604 
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 
ât
, 
off£t
, 
Àn
);

606 
	}
}

612 
scsi_èsk
 *

613 
	$iscsi_ã°unôªady_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

614 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

616 
scsi_èsk
 *
èsk
;

618 
èsk
 = 
	`scsi_cdb_ã°unôªady
();

619 i‡(
èsk
 =
NULL
) {

620 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

622  
NULL
;

624 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

625 
NULL
, 
¥iv©e_d©a
) != 0) {

626 
	`scsi_‰ì_scsi_èsk
(
èsk
);

627  
NULL
;

630  
èsk
;

631 
	}
}

633 
scsi_èsk
 *

634 
	$iscsi_ªp‹éuns_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

635 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

637 
scsi_èsk
 *
èsk
;

639 i‡(
Æloc_Àn
 < 16) {

640 
	`iscsi_£t_îr‹
(
iscsi
, "MinimumállowedállocÜen for "

642 
Æloc_Àn
);

643  
NULL
;

646 
èsk
 = 
	`scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
);

647 i‡(
èsk
 =
NULL
) {

648 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

650  
NULL
;

653 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 0, 
èsk
, 
cb
,

654 
NULL
, 
¥iv©e_d©a
) != 0) {

655 
	`scsi_‰ì_scsi_èsk
(
èsk
);

656  
NULL
;

659  
èsk
;

660 
	}
}

662 
scsi_èsk
 *

663 
	$iscsi_öquúy_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

664 
∑ge_code
, 
maxsize
,

665 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

667 
scsi_èsk
 *
èsk
;

669 
èsk
 = 
	`scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
maxsize
);

670 i‡(
èsk
 =
NULL
) {

671 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

673  
NULL
;

675 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

676 
NULL
, 
¥iv©e_d©a
) != 0) {

677 
	`scsi_‰ì_scsi_èsk
(
èsk
);

678  
NULL
;

681  
èsk
;

682 
	}
}

684 
scsi_èsk
 *

685 
	$iscsi_ªadˇ∑côy10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

686 
pmi
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

688 
scsi_èsk
 *
èsk
;

690 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
);

691 
	`Ârötf
(
°dîr
, "kalai calling iscsi_queue_pdu\n");

692 i‡(
èsk
 =
NULL
) {

693 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

695  
NULL
;

697 
	`Ârötf
(
°dîr
, "kalai calling iscsi_queue_pdu\n");

698 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

699 
NULL
, 
¥iv©e_d©a
) != 0) {

700 
	`scsi_‰ì_scsi_èsk
(
èsk
);

701  
NULL
;

704  
èsk
;

705 
	}
}

707 
scsi_èsk
 *

708 
	$iscsi_ªadˇ∑côy16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

709 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

711 
scsi_èsk
 *
èsk
;

713 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy16
();

714 i‡(
èsk
 =
NULL
) {

715 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

717  
NULL
;

719 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

720 
NULL
, 
¥iv©e_d©a
) != 0) {

721 
	`scsi_‰ì_scsi_èsk
(
èsk
);

722  
NULL
;

725  
èsk
;

726 
	}
}

728 
scsi_èsk
 *

729 
	$iscsi_gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

730 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
,

731 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

733 
scsi_èsk
 *
èsk
;

735 
èsk
 = 
	`scsi_cdb_gë_lba_°©us
(
°¨tög_lba
, 
Æloc_Àn
);

736 i‡(
èsk
 =
NULL
) {

737 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

739  
NULL
;

741 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

742 
NULL
, 
¥iv©e_d©a
) != 0) {

743 
	`scsi_‰ì_scsi_èsk
(
èsk
);

744  
NULL
;

747  
èsk
;

748 
	}
}

750 
scsi_èsk
 *

751 
	$iscsi_ªad6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

752 
uöt32_t
 
d©Æí
, 
blocksize
,

753 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

755 
scsi_èsk
 *
èsk
;

757 i‡(
d©Æí
 % 
blocksize
 != 0) {

758 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

759 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

760  
NULL
;

763 
èsk
 = 
	`scsi_cdb_ªad6
(
lba
, 
d©Æí
, 
blocksize
);

764 i‡(
èsk
 =
NULL
) {

765 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

767  
NULL
;

769 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

770 
NULL
, 
¥iv©e_d©a
) != 0) {

771 
	`scsi_‰ì_scsi_èsk
(
èsk
);

772  
NULL
;

775  
èsk
;

776 
	}
}

778 
scsi_èsk
 *

779 
	$iscsi_ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

780 
uöt32_t
 
d©Æí
, 
blocksize
,

781 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

782 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

784 
scsi_èsk
 *
èsk
;

786 i‡(
d©Æí
 % 
blocksize
 != 0) {

787 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

788 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

789  
NULL
;

792 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

793 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

794 i‡(
èsk
 =
NULL
) {

795 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

797  
NULL
;

799 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

800 
NULL
, 
¥iv©e_d©a
) != 0) {

801 
	`scsi_‰ì_scsi_èsk
(
èsk
);

802  
NULL
;

805  
èsk
;

806 
	}
}

808 
scsi_èsk
 *

809 
	$iscsi_ªad12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

810 
uöt32_t
 
d©Æí
, 
blocksize
,

811 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

812 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

814 
scsi_èsk
 *
èsk
;

816 i‡(
d©Æí
 % 
blocksize
 != 0) {

817 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

818 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

819  
NULL
;

822 
èsk
 = 
	`scsi_cdb_ªad12
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

823 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

824 i‡(
èsk
 =
NULL
) {

825 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

827  
NULL
;

829 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

830 
NULL
, 
¥iv©e_d©a
) != 0) {

831 
	`scsi_‰ì_scsi_èsk
(
èsk
);

832  
NULL
;

835  
èsk
;

836 
	}
}

838 
scsi_èsk
 *

839 
	$iscsi_ªad16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

840 
uöt32_t
 
d©Æí
, 
blocksize
,

841 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

842 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

844 
scsi_èsk
 *
èsk
;

846 i‡(
d©Æí
 % 
blocksize
 != 0) {

847 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

848 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

849  
NULL
;

852 
èsk
 = 
	`scsi_cdb_ªad16
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

853 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

854 i‡(
èsk
 =
NULL
) {

855 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

857  
NULL
;

859 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

860 
NULL
, 
¥iv©e_d©a
) != 0) {

861 
	`scsi_‰ì_scsi_èsk
(
èsk
);

862  
NULL
;

865  
èsk
;

866 
	}
}

868 
scsi_èsk
 *

869 
	$iscsi_wrôe10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

870 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

871 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

872 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

874 
scsi_èsk
 *
èsk
;

875 
iscsi_d©a
 
d
;

877 i‡(
d©Æí
 % 
blocksize
 != 0) {

878 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

879 "blocksize:%d.", 
d©Æí
, 
blocksize
);

880  
NULL
;

883 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

884 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

885 i‡(
èsk
 =
NULL
) {

886 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

888  
NULL
;

890 
d
.
d©a
 = data;

891 
d
.
size
 = 
d©Æí
;

893 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

894 &
d
, 
¥iv©e_d©a
) != 0) {

895 
	`scsi_‰ì_scsi_èsk
(
èsk
);

896  
NULL
;

899  
èsk
;

900 
	}
}

902 
scsi_èsk
 *

903 
	$iscsi_wrôe12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

904 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

905 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

906 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

908 
scsi_èsk
 *
èsk
;

909 
iscsi_d©a
 
d
;

911 i‡(
d©Æí
 % 
blocksize
 != 0) {

912 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

913 "blocksize:%d.", 
d©Æí
, 
blocksize
);

914  
NULL
;

917 
èsk
 = 
	`scsi_cdb_wrôe12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

918 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

919 i‡(
èsk
 =
NULL
) {

920 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

922  
NULL
;

924 
d
.
d©a
 = data;

925 
d
.
size
 = 
d©Æí
;

927 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

928 &
d
, 
¥iv©e_d©a
) != 0) {

929 
	`scsi_‰ì_scsi_èsk
(
èsk
);

930  
NULL
;

933  
èsk
;

934 
	}
}

936 
scsi_èsk
 *

937 
	$iscsi_wrôe16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

938 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

939 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

940 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

942 
scsi_èsk
 *
èsk
;

943 
iscsi_d©a
 
d
;

945 i‡(
d©Æí
 % 
blocksize
 != 0) {

946 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

947 "blocksize:%d.", 
d©Æí
, 
blocksize
);

948  
NULL
;

951 
èsk
 = 
	`scsi_cdb_wrôe16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

952 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

953 i‡(
èsk
 =
NULL
) {

954 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

956  
NULL
;

958 
d
.
d©a
 = data;

959 
d
.
size
 = 
d©Æí
;

961 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

962 &
d
, 
¥iv©e_d©a
) != 0) {

963 
	`scsi_‰ì_scsi_èsk
(
èsk
);

964  
NULL
;

967  
èsk
;

968 
	}
}

970 
scsi_èsk
 *

971 
	$iscsi_‹wrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

972 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

973 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

974 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

976 
scsi_èsk
 *
èsk
;

977 
iscsi_d©a
 
d
;

979 i‡(
d©Æí
 % 
blocksize
 != 0) {

980 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

981 "blocksize:%d.", 
d©Æí
, 
blocksize
);

982  
NULL
;

985 
èsk
 = 
	`scsi_cdb_‹wrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

986 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

987 i‡(
èsk
 =
NULL
) {

988 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

990  
NULL
;

992 
d
.
d©a
 = data;

993 
d
.
size
 = 
d©Æí
;

995 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

996 &
d
, 
¥iv©e_d©a
) != 0) {

997 
	`scsi_‰ì_scsi_èsk
(
èsk
);

998  
NULL
;

1001  
èsk
;

1002 
	}
}

1004 
scsi_èsk
 *

1005 
	$iscsi_com∑ª™dwrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1006 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1007 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1008 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1010 
scsi_èsk
 *
èsk
;

1011 
iscsi_d©a
 
d
;

1013 i‡(
d©Æí
 % (
blocksize
 * 2) != 0) {

1014 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1015 "blocksizê* 2:%d.", 
d©Æí
, 
blocksize
 * 2);

1016  
NULL
;

1019 
èsk
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1020 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1021 i‡(
èsk
 =
NULL
) {

1022 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1024  
NULL
;

1026 
d
.
d©a
 = data;

1027 
d
.
size
 = 
d©Æí
;

1029 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1030 &
d
, 
¥iv©e_d©a
) != 0) {

1031 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1032  
NULL
;

1035  
èsk
;

1036 
	}
}

1038 
scsi_èsk
 *

1039 
	$iscsi_wrôevîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1040 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1041 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1042 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1044 
scsi_èsk
 *
èsk
;

1045 
iscsi_d©a
 
d
;

1047 i‡(
d©Æí
 % 
blocksize
 != 0) {

1048 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1049 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1050  
NULL
;

1053 
èsk
 = 
	`scsi_cdb_wrôevîify10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1054 
dpo
, 
bytchk
, 
group_numbî
);

1055 i‡(
èsk
 =
NULL
) {

1056 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1058  
NULL
;

1060 
d
.
d©a
 = data;

1061 
d
.
size
 = 
d©Æí
;

1063 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1064 &
d
, 
¥iv©e_d©a
) != 0) {

1065 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1066  
NULL
;

1069  
èsk
;

1070 
	}
}

1072 
scsi_èsk
 *

1073 
	$iscsi_wrôevîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1074 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1075 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1076 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1078 
scsi_èsk
 *
èsk
;

1079 
iscsi_d©a
 
d
;

1081 i‡(
d©Æí
 % 
blocksize
 != 0) {

1082 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1083 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1084  
NULL
;

1087 
èsk
 = 
	`scsi_cdb_wrôevîify12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1088 
dpo
, 
bytchk
, 
group_numbî
);

1089 i‡(
èsk
 =
NULL
) {

1090 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1092  
NULL
;

1094 
d
.
d©a
 = data;

1095 
d
.
size
 = 
d©Æí
;

1097 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1098 &
d
, 
¥iv©e_d©a
) != 0) {

1099 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1100  
NULL
;

1103  
èsk
;

1104 
	}
}

1106 
scsi_èsk
 *

1107 
	$iscsi_wrôevîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1108 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1109 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1110 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1112 
scsi_èsk
 *
èsk
;

1113 
iscsi_d©a
 
d
;

1115 i‡(
d©Æí
 % 
blocksize
 != 0) {

1116 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1117 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1118  
NULL
;

1121 
èsk
 = 
	`scsi_cdb_wrôevîify16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1122 
dpo
, 
bytchk
, 
group_numbî
);

1123 i‡(
èsk
 =
NULL
) {

1124 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1126  
NULL
;

1128 
d
.
d©a
 = data;

1129 
d
.
size
 = 
d©Æí
;

1131 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1132 &
d
, 
¥iv©e_d©a
) != 0) {

1133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1134  
NULL
;

1137  
èsk
;

1138 
	}
}

1140 
scsi_èsk
 *

1141 
	$iscsi_vîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1142 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1143 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1145 
scsi_èsk
 *
èsk
;

1146 
iscsi_d©a
 
d
;

1148 i‡(
d©Æí
 % 
blocksize
 != 0) {

1149 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1150 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1151  
NULL
;

1154 
èsk
 = 
	`scsi_cdb_vîify10
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1155 i‡(
èsk
 =
NULL
) {

1156 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1158  
NULL
;

1160 
d
.
d©a
 = data;

1161 
d
.
size
 = 
d©Æí
;

1163 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1164 &
d
, 
¥iv©e_d©a
) != 0) {

1165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1166  
NULL
;

1169  
èsk
;

1170 
	}
}

1172 
scsi_èsk
 *

1173 
	$iscsi_vîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1174 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1175 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1177 
scsi_èsk
 *
èsk
;

1178 
iscsi_d©a
 
d
;

1180 i‡(
d©Æí
 % 
blocksize
 != 0) {

1181 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1182 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1183  
NULL
;

1186 
èsk
 = 
	`scsi_cdb_vîify12
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1187 i‡(
èsk
 =
NULL
) {

1188 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1190  
NULL
;

1192 
d
.
d©a
 = data;

1193 
d
.
size
 = 
d©Æí
;

1195 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1196 &
d
, 
¥iv©e_d©a
) != 0) {

1197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1198  
NULL
;

1201  
èsk
;

1202 
	}
}

1204 
scsi_èsk
 *

1205 
	$iscsi_vîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1206 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1207 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1209 
scsi_èsk
 *
èsk
;

1210 
iscsi_d©a
 
d
;

1212 i‡(
d©Æí
 % 
blocksize
 != 0) {

1213 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1214 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1215  
NULL
;

1218 
èsk
 = 
	`scsi_cdb_vîify16
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1219 i‡(
èsk
 =
NULL
) {

1220 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1222  
NULL
;

1224 
d
.
d©a
 = data;

1225 
d
.
size
 = 
d©Æí
;

1227 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1228 &
d
, 
¥iv©e_d©a
) != 0) {

1229 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1230  
NULL
;

1233  
èsk
;

1234 
	}
}

1236 
scsi_èsk
 *

1237 
	$iscsi_mode£À˘6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1238 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1239 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1241 
scsi_èsk
 *
èsk
;

1242 
scsi_d©a
 *
d©a
;

1243 
iscsi_d©a
 
d
;

1245 
èsk
 = 
	`scsi_cdb_mode£À˘6
(
pf
, 
•
, 255);

1246 i‡(
èsk
 =
NULL
) {

1247 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1249  
NULL
;

1251 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 1);

1252 i‡(
d©a
 =
NULL
) {

1253 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1256  
NULL
;

1259 
d
.
d©a
 = data->data;

1260 
d
.
size
 = 
d©a
->size;

1261 
èsk
->
cdb
[4] = 
d©a
->
size
;

1262 
èsk
->
expx„æí
 = 
d©a
->
size
;

1264 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1265 &
d
, 
¥iv©e_d©a
) != 0) {

1266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1267  
NULL
;

1270  
èsk
;

1271 
	}
}

1273 
scsi_èsk
 *

1274 
	$iscsi_mode£À˘10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1275 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1276 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1278 
scsi_èsk
 *
èsk
;

1279 
scsi_d©a
 *
d©a
;

1280 
iscsi_d©a
 
d
;

1282 
èsk
 = 
	`scsi_cdb_mode£À˘10
(
pf
, 
•
, 255);

1283 i‡(
èsk
 =
NULL
) {

1284 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1286  
NULL
;

1288 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 0);

1289 i‡(
d©a
 =
NULL
) {

1290 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1293  
NULL
;

1296 
d
.
d©a
 = data->data;

1297 
d
.
size
 = 
d©a
->size;

1298 
èsk
->
cdb
[7] = 
d©a
->
size
 >> 8;

1299 
èsk
->
cdb
[8] = 
d©a
->
size
 & 0xff;

1301 
èsk
->
expx„æí
 = 
d©a
->
size
;

1303 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1304 &
d
, 
¥iv©e_d©a
) != 0) {

1305 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1306  
NULL
;

1309  
èsk
;

1310 
	}
}

1312 
scsi_èsk
 *

1313 
	$iscsi_mode£n£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
, 
pc
,

1314 
∑ge_code
, 
sub_∑ge_code
,

1315 
Æloc_Àn
,

1316 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1318 
scsi_èsk
 *
èsk
;

1320 
èsk
 = 
	`scsi_cdb_mode£n£6
(
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1321 
Æloc_Àn
);

1322 i‡(
èsk
 =
NULL
) {

1323 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1325  
NULL
;

1327 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1328 
NULL
, 
¥iv©e_d©a
) != 0) {

1329 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1330  
NULL
;

1333  
èsk
;

1334 
	}
}

1336 
scsi_èsk
 *

1337 
	$iscsi_mode£n£10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1338 
ŒbØ
, 
dbd
, 
pc
,

1339 
∑ge_code
, 
sub_∑ge_code
,

1340 
Æloc_Àn
,

1341 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1343 
scsi_èsk
 *
èsk
;

1345 
èsk
 = 
	`scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1346 
Æloc_Àn
);

1347 i‡(
èsk
 =
NULL
) {

1348 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1350  
NULL
;

1352 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1353 
NULL
, 
¥iv©e_d©a
) != 0) {

1354 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1355  
NULL
;

1358  
èsk
;

1359 
	}
}

1361 
scsi_èsk
 *

1362 
	$iscsi_°¨t°›unô_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1363 
immed
, 
pcm
, 
pc
,

1364 
no_Êush
, 
l€j
, 
°¨t
,

1365 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1367 
scsi_èsk
 *
èsk
;

1369 
èsk
 = 
	`scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
,

1370 
l€j
, 
°¨t
);

1371 i‡(
èsk
 =
NULL
) {

1372 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1374  
NULL
;

1376 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1377 
NULL
, 
¥iv©e_d©a
) != 0) {

1378 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1379  
NULL
;

1382  
èsk
;

1383 
	}
}

1385 
scsi_èsk
 *

1386 
	$iscsi_¥evíèŒow_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1387 
¥evít
,

1388 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1390 
scsi_èsk
 *
èsk
;

1392 
èsk
 = 
	`scsi_cdb_¥evíèŒow
(
¥evít
);

1393 i‡(
èsk
 =
NULL
) {

1394 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1396  
NULL
;

1398 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1399 
NULL
, 
¥iv©e_d©a
) != 0) {

1400 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1401  
NULL
;

1404  
èsk
;

1405 
	}
}

1407 
scsi_èsk
 *

1408 
	$iscsi_synchr⁄izeˇche10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

1409 
num_blocks
, 
syn˙v
, 
immed
,

1410 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1412 
scsi_èsk
 *
èsk
;

1414 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
,

1415 
immed
);

1416 i‡(
èsk
 =
NULL
) {

1417 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1419  
NULL
;

1421 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1422 
NULL
, 
¥iv©e_d©a
) != 0) {

1423 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1424  
NULL
;

1427  
èsk
;

1428 
	}
}

1430 
scsi_èsk
 *

1431 
	$iscsi_synchr⁄izeˇche16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1432 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
,

1433 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1435 
scsi_èsk
 *
èsk
;

1437 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche16
(
lba
, 
num_blocks
, 
syn˙v
,

1438 
immed
);

1439 i‡(
èsk
 =
NULL
) {

1440 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1442  
NULL
;

1444 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1445 
NULL
, 
¥iv©e_d©a
) != 0) {

1446 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1447  
NULL
;

1450  
èsk
;

1451 
	}
}

1453 
scsi_èsk
 *

1454 
	$iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1455 
ß
, 
uöt16_t
 
x„æí
,

1456 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1458 
scsi_èsk
 *
èsk
;

1460 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
ß
, 
x„æí
);

1461 i‡(
èsk
 =
NULL
) {

1462 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1464  
NULL
;

1466 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1467 
NULL
, 
¥iv©e_d©a
) != 0) {

1468 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1469  
NULL
;

1472  
èsk
;

1473 
	}
}

1475 
scsi_èsk
 *

1476 
	$iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1477 
ß
, 
sc›e
, 
ty≥
, *
∑øm
,

1478 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1480 
scsi_èsk
 *
èsk
;

1482 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(
ß
, 
sc›e
, 
ty≥
, 
∑øm
);

1483 i‡(
èsk
 =
NULL
) {

1484 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1486  
NULL
;

1488 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1489 
NULL
, 
¥iv©e_d©a
) != 0) {

1490 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1491  
NULL
;

1494  
èsk
;

1495 
	}
}

1497 
scsi_èsk
 *

1498 
	$iscsi_¥e„tch10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1499 
num_blocks
, 
immed
, 
group
,

1500 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1502 
scsi_èsk
 *
èsk
;

1504 
èsk
 = 
	`scsi_cdb_¥e„tch10
(
lba
, 
num_blocks
, 
immed
, 
group
);

1505 i‡(
èsk
 =
NULL
) {

1506 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1508  
NULL
;

1510 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1511 
NULL
, 
¥iv©e_d©a
) != 0) {

1512 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1513  
NULL
;

1516  
èsk
;

1517 
	}
}

1519 
scsi_èsk
 *

1520 
	$iscsi_¥e„tch16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1521 
num_blocks
, 
immed
, 
group
,

1522 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1524 
scsi_èsk
 *
èsk
;

1526 
èsk
 = 
	`scsi_cdb_¥e„tch16
(
lba
, 
num_blocks
, 
immed
, 
group
);

1527 i‡(
èsk
 =
NULL
) {

1528 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1530  
NULL
;

1532 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1533 
NULL
, 
¥iv©e_d©a
) != 0) {

1534 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1535  
NULL
;

1538  
èsk
;

1539 
	}
}

1541 
scsi_èsk
 *

1542 
	$iscsi_wrôeßme10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1543 *
d©a
, 
uöt32_t
 
d©Æí
,

1544 
uöt16_t
 
num_blocks
,

1545 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1546 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1548 
scsi_èsk
 *
èsk
;

1549 
iscsi_d©a
 
d
;

1551 
èsk
 = 
	`scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
, 
num_blocks
);

1552 i‡(
èsk
 =
NULL
) {

1553 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1555  
NULL
;

1557 
d
.
d©a
 = data;

1558 
d
.
size
 = 
d©Æí
;

1560 i‡(
d©a
 !
NULL
) {

1561 
èsk
->
expx„æí
 = 
d©Æí
;

1563 
èsk
->
expx„æí
 = 0;

1564 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1566 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1567 &
d
, 
¥iv©e_d©a
) != 0) {

1568 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1569  
NULL
;

1571  
èsk
;

1572 
	}
}

1574 
scsi_èsk
 *

1575 
	$iscsi_wrôeßme16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1576 *
d©a
, 
uöt32_t
 
d©Æí
,

1577 
uöt32_t
 
num_blocks
,

1578 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1579 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1581 
scsi_èsk
 *
èsk
;

1582 
iscsi_d©a
 
d
;

1584 
èsk
 = 
	`scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
, 
num_blocks
);

1585 i‡(
èsk
 =
NULL
) {

1586 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1588  
NULL
;

1590 
d
.
d©a
 = data;

1591 
d
.
size
 = 
d©Æí
;

1593 i‡(
d©a
 !
NULL
) {

1594 
èsk
->
expx„æí
 = 
d©Æí
;

1596 
èsk
->
expx„æí
 = 0;

1597 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1600 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1601 &
d
, 
¥iv©e_d©a
) != 0) {

1602 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1603  
NULL
;

1606  
èsk
;

1607 
	}
}

1609 
scsi_èsk
 *

1610 
	$iscsi_unm≠_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1611 
unm≠_li°
 *
li°
, 
li°_Àn
,

1612 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1614 
scsi_èsk
 *
èsk
;

1615 
scsi_iovec
 *
iov
;

1616 *
d©a
;

1617 
x„æí
;

1618 
i
;

1620 
x„æí
 = 8 + 
li°_Àn
 * 16;

1622 
èsk
 = 
	`scsi_cdb_unm≠
(
™ch‹
, 
group
, 
x„æí
);

1623 i‡(
èsk
 =
NULL
) {

1624 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1626  
NULL
;

1629 
d©a
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

1630 i‡(
d©a
 =
NULL
) {

1631 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1633 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1634  
NULL
;

1636 
	`scsi_£t_uöt16
(&
d©a
[0], 
x„æí
 - 2);

1637 
	`scsi_£t_uöt16
(&
d©a
[2], 
x„æí
 - 8);

1638 
i
 = 0; i < 
li°_Àn
; i++) {

1639 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
], 
li°
[i].
lba
 >> 32);

1640 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 4], 
li°
[i].
lba
 & 0xffffffff);

1641 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 8], 
li°
[i].
num
);

1644 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

1645 i‡(
iov
 =
NULL
) {

1646 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1647  
NULL
;

1649 
iov
->
iov_ba£
 = 
d©a
;

1650 
iov
->
iov_Àn
 = 
x„æí
;

1651 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

1653 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1654 
NULL
, 
¥iv©e_d©a
) != 0) {

1655 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1656  
NULL
;

1659  
èsk
;

1660 
	}
}

1662 
scsi_iove˘‹
 *

1663 
	$iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

1665 
iscsi_pdu
 *
pdu
;

1666 
uöt32_t
 
ôt
;

1668 i‡((
ö
->
hdr
[0] & 0x3fË!
ISCSI_PDU_DATA_IN
) {

1669  
NULL
;

1672 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

1673 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

1674 i‡(
pdu
->
ôt
 == itt) {

1679 i‡(
pdu
 =
NULL
) {

1680  
NULL
;

1683 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

1684  
NULL
;

1687  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
;

1688 
	}
}

1690 
scsi_iove˘‹
 *

1691 
	$iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

1693 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
.
iov
 =
NULL
) {

1694  
NULL
;

1697  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
;

1698 
	}
}

1700 
scsi_èsk
 *

1701 
	$iscsi_ªadtoc_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
,

1702 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
,

1703 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1705 
scsi_èsk
 *
èsk
;

1707 
èsk
 = 
	`scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
);

1708 i‡(
èsk
 =
NULL
) {

1709 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1711  
NULL
;

1713 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1714 
NULL
, 
¥iv©e_d©a
) != 0) {

1715 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1716  
NULL
;

1719  
èsk
;

1720 
	}
}

1722 
scsi_èsk
 *

1723 
	$iscsi_ª£rve6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1724 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1726 
scsi_èsk
 *
èsk
;

1728 
èsk
 = 
	`scsi_cdb_ª£rve6
();

1729 i‡(
èsk
 =
NULL
) {

1730 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1732  
NULL
;

1734 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1735 
NULL
, 
¥iv©e_d©a
) != 0) {

1736 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1737  
NULL
;

1740  
èsk
;

1741 
	}
}

1743 
scsi_èsk
 *

1744 
	$iscsi_ªÀa£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1745 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1747 
scsi_èsk
 *
èsk
;

1749 
èsk
 = 
	`scsi_cdb_ªÀa£6
();

1750 i‡(
èsk
 =
NULL
) {

1751 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1753  
NULL
;

1755 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1756 
NULL
, 
¥iv©e_d©a
) != 0) {

1757 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1758  
NULL
;

1761  
èsk
;

1762 
	}
}

1765 
scsi_èsk
 *

1766 
	$iscsi_ßnôize_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1767 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1768 
iscsi_d©a
 *
d©a
,

1769 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1771 
scsi_èsk
 *
èsk
;

1773 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1774 i‡(
èsk
 =
NULL
) {

1775 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1777  
NULL
;

1779 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1780 
d©a
, 
¥iv©e_d©a
) != 0) {

1781 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1782  
NULL
;

1785  
èsk
;

1786 
	}
}

1788 
scsi_èsk
 *

1789 
	$iscsi_ßnôize_block_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1790 
immed
, 
au£
,

1791 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1793 
scsi_èsk
 *
èsk
;

1795 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_BLOCK_ERASE
, 0);

1796 i‡(
èsk
 =
NULL
) {

1797 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1799  
NULL
;

1801 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1802 
NULL
, 
¥iv©e_d©a
) != 0) {

1803 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1804  
NULL
;

1807  
èsk
;

1808 
	}
}

1810 
scsi_èsk
 *

1811 
	$iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1812 
immed
, 
au£
,

1813 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1815 
scsi_èsk
 *
èsk
;

1817 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0);

1818 i‡(
èsk
 =
NULL
) {

1819 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1821  
NULL
;

1823 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1824 
NULL
, 
¥iv©e_d©a
) != 0) {

1825 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1826  
NULL
;

1829  
èsk
;

1830 
	}
}

1832 
scsi_èsk
 *

1833 
	$iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1834 
immed
, 
au£
,

1835 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1837 
scsi_èsk
 *
èsk
;

1839 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
,

1840 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 0);

1841 i‡(
èsk
 =
NULL
) {

1842 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1844  
NULL
;

1846 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1847 
NULL
, 
¥iv©e_d©a
) != 0) {

1848 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1849  
NULL
;

1852  
èsk
;

1853 
	}
}

1855 
scsi_èsk
 *

1856 
	$iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1857 
r˘d
, 
›ti⁄s
,

1858 
›code
, 
ß
,

1859 
uöt32_t
 
Æloc_Àn
,

1860 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1862 
scsi_èsk
 *
èsk
;

1864 
èsk
 = 
	`scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
›code
, 
ß
,

1865 
Æloc_Àn
);

1866 i‡(
èsk
 =
NULL
) {

1867 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1869  
NULL
;

1871 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1872 
NULL
, 
¥iv©e_d©a
) != 0) {

1873 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1874  
NULL
;

1877  
èsk
;

1878 
	}
}

1880 
scsi_èsk
 *

1881 
	$iscsi_scsi_gë_èsk_‰om_pdu
(
iscsi_pdu
 *
pdu
)

1883  
pdu
->
scsi_cbd©a
.
èsk
;

1884 
	}
}

1887 
	$iscsi_scsi_ˇn˚l_èsk
(
iscsi_c⁄ãxt
 *
iscsi
,

1888 
scsi_èsk
 *
èsk
)

1890 
iscsi_pdu
 *
pdu
;

1892 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

1893 i‡(
pdu
->
ôt
 =
èsk
->itt) {

1894 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

1895 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1896 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1897 
pdu
->
¥iv©e_d©a
);

1899 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1903 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

1904 i‡(
pdu
->
ôt
 =
èsk
->itt) {

1905 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

1906 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1907 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1908 
pdu
->
¥iv©e_d©a
);

1910 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1915 
	}
}

1918 
	$iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi_c⁄ãxt
 *
iscsi
)

1920 
iscsi_pdu
 *
pdu
;

1922 (
pdu
 = 
iscsi
->
waôpdu
)) {

1923 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

1924 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1925 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1926 
pdu
->
¥iv©e_d©a
);

1928 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1930 (
pdu
 = 
iscsi
->
outqueue
)) {

1931 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

1932 i‡–!(
pdu
->
Êags
 & 
ISCSI_PDU_NO_CALLBACK
)) {

1933 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

1934 
pdu
->
¥iv©e_d©a
);

1936 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1938 
	}
}

	@lib/logging.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 #i‡
deföed
(
WIN32
)

34 
	~"wö32/wö32_com∑t.h
"

37 
	~<°dio.h
>

38 
	~<°d¨g.h
>

39 
	~"iscsi.h
"

40 
	~"iscsi-¥iv©e.h
"

41 
	~"scsi-lowÀvñ.h
"

44 
	$iscsi_log_to_°dîr
(
Àvñ
, c⁄° *
mesßge
)

46 
	`Ârötf
(
°dîr
, "libiscsi:%d %s\n", 
Àvñ
, 
mesßge
);

47 
	}
}

50 
	$iscsi_£t_log_‚
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_log_‚
 
‚
)

52 
iscsi
->
log_‚
 = 
‚
;

53 
	}
}

56 
	$iscsi_log_mesßge
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
, c⁄° *
f‹m©
, ...)

58 
va_li°
 
≠
;

59 
mesßge
[1024];

60 
ªt
;

62 i‡(
iscsi
->
log_‚
 =
NULL
) {

66 
	`va_°¨t
(
≠
, 
f‹m©
);

67 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

68 
	`va_íd
(
≠
);

70 i‡(
ªt
 < 0) {

74 i‡(
iscsi
->
èrgë_«me
[0]) {

75 
mesßge2
[1024];

77 
	`¢¥ötf
(
mesßge2
, 1024, "%†[%s]", 
mesßge
, 
iscsi
->
èrgë_«me
);

78 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge2
);

81 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge
);

82 
	}
}

	@lib/login.c

18 #i‚de‡
_GNU_SOURCE


19 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 #ifde‡
HAVE_ARPA_INET_H


31 
	~<¨∑/öë.h
>

34 #i‡
deföed
(
WIN32
)

35 
	~<wösock2.h
>

36 
	~"wö32/wö32_com∑t.h
"

39 
	~<°dio.h
>

40 
	~<as£π.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~"iscsi.h
"

44 
	~"iscsi-¥iv©e.h
"

45 
	~"scsi-lowÀvñ.h
"

46 
	~"md5.h
"

47 #ifde‡
HAVE_LIBGCRYPT


48 
	~<g¸y±.h
>

52 
	$iscsi_logö_add_öôüt‹«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

54 
°r
[
MAX_STRING_SIZE
+1];

57 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


58 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

62 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Name=%s", 
iscsi
->
öôüt‹_«me
) == -1) {

63 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

66 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

68 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

72 
	}
}

75 
	$iscsi_logö_add_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

77 
°r
[
MAX_STRING_SIZE
+1];

80 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


81 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

85 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Alüs=%s", 
iscsi
->
Æüs
) == -1) {

86 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

90 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

92 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

96 
	}
}

99 
	$iscsi_logö_add_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

101 
°r
[
MAX_STRING_SIZE
+1];

104 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


105 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

109 i‡(!
iscsi
->
èrgë_«me
[0]) {

110 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÇormal connect but "

115 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "T¨gëName=%s", 
iscsi
->
èrgë_«me
) == -1) {

116 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

120 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

122 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

126 
	}
}

129 
	$iscsi_logö_add_£ssi⁄ty≥
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

131 
°r
[
MAX_STRING_SIZE
+1];

134 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


135 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

139 
iscsi
->
£ssi⁄_ty≥
) {

140 
ISCSI_SESSION_DISCOVERY
:

141 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=Discovîy",
MAX_STRING_SIZE
);

143 
ISCSI_SESSION_NORMAL
:

144 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=N‹mÆ",
MAX_STRING_SIZE
);

147 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot handle sessions %d yet.",

148 
iscsi
->
£ssi⁄_ty≥
);

151 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

153 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

158 
	}
}

161 
	$iscsi_logö_add_hódîdige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

163 
°r
[
MAX_STRING_SIZE
+1];

166 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

170 
iscsi
->
w™t_hódî_dige°
) {

171 
ISCSI_HEADER_DIGEST_NONE
:

172 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e",
MAX_STRING_SIZE
);

174 
ISCSI_HEADER_DIGEST_NONE_CRC32C
:

175 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e,CRC32C",
MAX_STRING_SIZE
);

177 
ISCSI_HEADER_DIGEST_CRC32C_NONE
:

178 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C,N⁄e",
MAX_STRING_SIZE
);

180 
ISCSI_HEADER_DIGEST_CRC32C
:

181 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C",
MAX_STRING_SIZE
);

184 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

188 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

190 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

195 
	}
}

198 
	$iscsi_logö_add_d©adige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

200 
°r
[
MAX_STRING_SIZE
+1];

203 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

207 
	`°∫˝y
(
°r
,"D©aDige°=N⁄e",
MAX_STRING_SIZE
);

208 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

210 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

215 
	}
}

218 
	$iscsi_logö_add_öôüÃ2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

220 
°r
[
MAX_STRING_SIZE
+1];

223 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

227 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "InôülR2T=%s", 
iscsi
->
w™t_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO
 ?

229 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

233 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

235 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

240 
	}
}

243 
	$iscsi_logö_add_immedüãd©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

245 
°r
[
MAX_STRING_SIZE
+1];

248 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

252 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "ImmedüãD©a=%s", 
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
 ?

254 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

258 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

260 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

265 
	}
}

268 
	$iscsi_logö_add_maxbur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

270 
°r
[
MAX_STRING_SIZE
+1];

273 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

277 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxBur°Lígth=%d", 
iscsi
->
max_bur°_Àngth
) == -1) {

278 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

282 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

284 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

288 
	}
}

291 
	$iscsi_logö_add_fú°bur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

293 
°r
[
MAX_STRING_SIZE
+1];

296 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

300 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Fú°Bur°Lígth=%d", 
iscsi
->
fú°_bur°_Àngth
) == -1) {

301 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

305 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

307 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

311 
	}
}

314 
	$iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

316 
°r
[
MAX_STRING_SIZE
+1];

319 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

323 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxRecvD©aSegmítLígth=%d", 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) == -1) {

324 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

328 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

330 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

334 
	}
}

337 
	$iscsi_logö_add_d©≠duö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

339 
°r
[
MAX_STRING_SIZE
+1];

342 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

346 
	`°∫˝y
(
°r
,"D©aPDUInOrdî=Yes",
MAX_STRING_SIZE
);

347 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

349 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

354 
	}
}

357 
	$iscsi_logö_add_deÁu…time2waô
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

359 
°r
[
MAX_STRING_SIZE
+1];

362 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

366 
	`°∫˝y
(
°r
,"DeÁu…Time2Waô=2",
MAX_STRING_SIZE
);

367 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

369 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

374 
	}
}

377 
	$iscsi_logö_add_deÁu…time2ªèö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

379 
°r
[
MAX_STRING_SIZE
+1];

382 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

386 
	`°∫˝y
(
°r
,"DeÁu…Time2Rëaö=0",
MAX_STRING_SIZE
);

387 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

389 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

394 
	}
}

397 
	$iscsi_logö_add_ifm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

399 
°r
[
MAX_STRING_SIZE
+1];

402 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

406 
	`°∫˝y
(
°r
,"IFM¨kî=No",
MAX_STRING_SIZE
);

407 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

409 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

414 
	}
}

417 
	$iscsi_logö_add_ofm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

419 
°r
[
MAX_STRING_SIZE
+1];

422 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

426 
	`°∫˝y
(
°r
,"OFM¨kî=No",
MAX_STRING_SIZE
);

427 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

429 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

434 
	}
}

437 
	$iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

439 
°r
[
MAX_STRING_SIZE
+1];

442 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

446 
	`°∫˝y
(
°r
,"MaxC⁄√˘i⁄s=1",
MAX_STRING_SIZE
);

447 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

449 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

454 
	}
}

457 
	$iscsi_logö_add_maxout°™dögr2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

459 
°r
[
MAX_STRING_SIZE
+1];

462 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

466 
	`°∫˝y
(
°r
,"MaxOut°™dögR2T=1",
MAX_STRING_SIZE
);

467 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

469 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

474 
	}
}

477 
	$iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

479 
°r
[
MAX_STRING_SIZE
+1];

482 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

486 
	`°∫˝y
(
°r
,"Eº‹RecovîyLevñ=0",
MAX_STRING_SIZE
);

487 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

489 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

494 
	}
}

497 
	$iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

499 
°r
[
MAX_STRING_SIZE
+1];

502 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

506 
	`°∫˝y
(
°r
,"D©aSequí˚InOrdî=Yes",
MAX_STRING_SIZE
);

507 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

509 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

514 
	}
}

517 
	$iscsi_logö_add_authmëhod
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

519 
°r
[
MAX_STRING_SIZE
+1];

521 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


522 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

526 
	`°∫˝y
(
°r
,"AuthMëhod=CHAP,N⁄e",
MAX_STRING_SIZE
);

527 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

529 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

534 
	}
}

537 
	$iscsi_logö_add_authÆg‹ôhm
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

539 
°r
[
MAX_STRING_SIZE
+1];

541 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


542 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
) {

546 
	`°∫˝y
(
°r
,"CHAP_A=5",
MAX_STRING_SIZE
);

547 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

549 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

554 
	}
}

557 
	$iscsi_logö_add_ch≠_u£∫ame
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

559 
°r
[
MAX_STRING_SIZE
+1];

561 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


562 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

566 
	`°∫˝y
(
°r
,"CHAP_N=",
MAX_STRING_SIZE
);

567 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

569 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

572 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
,

573 (*)
iscsi
->
u£r
,

574 
	`°æí
(
iscsi
->
u£r
) +1) != 0) {

575 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

581 
	}
}

584 
	$h2i
(
h
)

586 i‡(
h
 >= 'a' && h <= 'f') {

587  
h
 - 'a' + 10;

589 i‡(
h
 >= 'A' && h <= 'F') {

590  
h
 - 'A' + 10;

592  
h
 - '0';

593 
	}
}

596 
	$i2h
(
i
)

598 i‡(
i
 >= 10) {

599  
i
 - 10 + 'A';

602  
i
 + '0';

603 
	}
}

605 #i‚de‡
HAVE_LIBGCRYPT


606 
MD5C⁄ãxt
 *
	tg¸y_md_hd_t
;

607 
	#g¸y_md_wrôe
 
MD5Upd©e


	)

608 
	#GCRY_MD_MD5
 1

	)

610 
	$g¸y_md_›í
(
g¸y_md_hd_t
 *
hd
, 
Ægo
, 
Êags
)

612 
	`as£π
(
Ægo
 =
GCRY_MD_MD5
 && 
Êags
 == 0);

613 *
hd
 = 
	`mÆloc
((
MD5C⁄ãxt
));

614 i‡(*
hd
) {

615 
	`MD5Inô
(*
hd
);

617 
	}
}

619 
	$g¸y_md_putc
(
g¸y_md_hd_t
 
h
, 
c
)

621 
	`MD5Upd©e
(
h
, &
c
, 1);

622 
	}
}

624 *
	$g¸y_md_ªad
(
g¸y_md_hd_t
 
h
, 
Ægo
)

626 
dige°
[16];

627 
	`as£π
(
Ægo
 =0 ||álgÿ=
GCRY_MD_MD5
);

629 
	`MD5FöÆ
(
dige°
, 
h
);

630  
	`mem˝y
(
h
->
buf
, 
dige°
, (digest));

631 
	}
}

633 
	$g¸y_md_˛o£
(
g¸y_md_hd_t
 
h
)

635 
	`mem£t
(
h
, 0, (*h));

636 
	`‰ì
(
h
);

637 
	}
}

641 
	$iscsi_logö_add_ch≠_ª•⁄£
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

643 
°r
[
MAX_STRING_SIZE
+1];

644 * 
°Ω
;

645 
c
, 
cc
[2];

646 
dige°
[16];

647 
g¸y_md_hd_t
 
˘x
;

648 
i
;

650 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


651 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

655 
	`g¸y_md_›í
(&
˘x
, 
GCRY_MD_MD5
, 0);

656 i‡(!
˘x
) {

657 
	`iscsi_£t_îr‹
(
iscsi
, "Cannot create MD5álgorithm");

661 i‡(!
iscsi
->
ch≠_c
[0]) {

662 
	`iscsi_£t_îr‹
(
iscsi
, "No CHAP challenge found");

665 
	`g¸y_md_putc
(
˘x
, 
iscsi
->
ch≠_i
);

666 
	`g¸y_md_wrôe
(
˘x
, (*)
iscsi
->
∑sswd
, 
	`°æí
(iscsi->passwd));

668 
°Ω
 = 
iscsi
->
ch≠_c
;

669 *
°Ω
 != 0) {

670 
c
 = (
	`h2i
(
°Ω
[0]) << 4) | h2i(strp[1]);

671 
°Ω
 += 2;

672 
	`g¸y_md_putc
(
˘x
, 
c
);

674 
	`mem˝y
(
dige°
, 
	`g¸y_md_ªad
(
˘x
, 0), (digest));

675 
	`g¸y_md_˛o£
(
˘x
);

677 
	`°∫˝y
(
°r
,"CHAP_R=0x",
MAX_STRING_SIZE
);

678 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

680 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

684 
i
=0; i<16; i++) {

685 
c
 = 
dige°
[
i
];

686 
cc
[0] = 
	`i2h
((
c
 >> 4)&0x0f);

687 
cc
[1] = 
	`i2h
((
c
 )&0x0f);

688 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
cc
[0], 2) != 0) {

689 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

694 
c
 = 0;

695 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
c
, 1) != 0) {

696 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

702 
	}
}

705 
	$iscsi_logö_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

706 *
¥iv©e_d©a
)

708 
iscsi_pdu
 *
pdu
;

709 
å™sô
;

711 i‡(
iscsi
->
logö_©ãm±s
++ > 10) {

712 
	`iscsi_£t_îr‹
(
iscsi
, "loginÅookÅoo manyÅries."

717 i‡(
iscsi
->
is_loggedö
 != 0) {

718 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogin whileálreadyÜogged "

723 
iscsi
->
£ssi⁄_ty≥
) {

724 
ISCSI_SESSION_DISCOVERY
:

725 
ISCSI_SESSION_NORMAL
:

728 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoÜogin without setting "

733 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
,

734 
ISCSI_PDU_LOGIN_REQUEST
,

735 
ISCSI_PDU_LOGIN_RESPONSE
,

736 
iscsi
->
ôt
, 0);

737 i‡(
pdu
 =
NULL
) {

738 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

744 
	`iscsi_pdu_£t_immedüã
(
pdu
);

746 i‡(!
iscsi
->
u£r
[0]) {

747 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_OPNEG
;

750 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

751 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

753 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

754 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_FF
;

757 
å™sô
 = 0;

758 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

759 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

761 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

762 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

763 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

765 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

766 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

771 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
å™sô


772 | 
iscsi
->
cuºít_pha£


773 | 
iscsi
->
√xt_pha£
);

777 i‡(
	`iscsi_logö_add_öôüt‹«me
(
iscsi
, 
pdu
) != 0) {

778 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

783 i‡(
iscsi
->
Æüs
[0]) {

784 i‡(
	`iscsi_logö_add_Æüs
(
iscsi
, 
pdu
) != 0) {

785 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

791 i‡(
iscsi
->
£ssi⁄_ty≥
 =
ISCSI_SESSION_NORMAL
) {

792 i‡(
	`iscsi_logö_add_èrgë«me
(
iscsi
, 
pdu
) != 0) {

793 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

799 i‡(
	`iscsi_logö_add_£ssi⁄ty≥
(
iscsi
, 
pdu
) != 0) {

800 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

805 i‡(
	`iscsi_logö_add_hódîdige°
(
iscsi
, 
pdu
) != 0) {

806 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

811 i‡(
	`iscsi_logö_add_authmëhod
(
iscsi
, 
pdu
) != 0) {

812 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

817 i‡(
	`iscsi_logö_add_authÆg‹ôhm
(
iscsi
, 
pdu
) != 0) {

818 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

823 i‡(
	`iscsi_logö_add_ch≠_u£∫ame
(
iscsi
, 
pdu
) != 0) {

824 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

829 i‡(
	`iscsi_logö_add_ch≠_ª•⁄£
(
iscsi
, 
pdu
) != 0) {

830 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

835 i‡(
	`iscsi_logö_add_d©adige°
(
iscsi
, 
pdu
) != 0) {

836 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

841 i‡(
	`iscsi_logö_add_öôüÃ2t
(
iscsi
, 
pdu
) != 0) {

842 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

847 i‡(
	`iscsi_logö_add_immedüãd©a
(
iscsi
, 
pdu
) != 0) {

848 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

853 i‡(
	`iscsi_logö_add_maxbur°Àngth
(
iscsi
, 
pdu
) != 0) {

854 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

859 i‡(
	`iscsi_logö_add_fú°bur°Àngth
(
iscsi
, 
pdu
) != 0) {

860 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

865 i‡(
	`iscsi_logö_add_deÁu…time2waô
(
iscsi
, 
pdu
) != 0) {

866 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

871 i‡(
	`iscsi_logö_add_deÁu…time2ªèö
(
iscsi
, 
pdu
) != 0) {

872 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

877 i‡(
	`iscsi_logö_add_maxout°™dögr2t
(
iscsi
, 
pdu
) != 0) {

878 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

883 i‡(
	`iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi
, 
pdu
) != 0) {

884 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

889 i‡(
	`iscsi_logö_add_ifm¨kî
(
iscsi
, 
pdu
) != 0) {

890 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

895 i‡(
	`iscsi_logö_add_ofm¨kî
(
iscsi
, 
pdu
) != 0) {

896 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

901 i‡(
	`iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi
, 
pdu
) != 0) {

902 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

907 i‡(
	`iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi
, 
pdu
) != 0) {

908 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

913 i‡(
	`iscsi_logö_add_d©≠duö‹dî
(
iscsi
, 
pdu
) != 0) {

914 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

919 i‡(
	`iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi
, 
pdu
) != 0) {

920 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

925 
pdu
->
ˇŒback
 = 
cb
;

926 
pdu
->
¥iv©e_d©a
 =Örivate_data;

928 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

929 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

931 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

936 
	}
}

938 c⁄° *
	$logö_îr‹_°r
(
°©us
)

940 
°©us
) {

961 
	}
}

965 
	$iscsi_¥o˚ss_logö_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

966 
iscsi_ö_pdu
 *
ö
)

968 
uöt32_t
 
°©us
, 
maxcmd¢
, 
expcmd¢
;

969 *
±r
 = (*)
ö
->
d©a
;

970 
size
 = 
ö
->
d©a_pos
;

972 
°©us
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[36]);

974 
iscsi
->
°©¢
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[24]);

976 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

977 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

978 
iscsi
->
maxcmd¢
 = maxcmdsn;

980 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

981 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

982 
iscsi
->
expcmd¢
 =Éxpcmdsn;

991 
size
 > 0) {

992 *
íd
;

993 
Àn
;

995 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

996 i‡(
íd
 =
NULL
) {

997 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

999 (*)
±r
 - 
ö
->
d©a
);

1000 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1001 
pdu
->
¥iv©e_d©a
);

1005 
Àn
 = 
íd
 - 
±r
;

1006 i‡(
Àn
 == 0) {

1011 i‡(!
	`°∫cmp
(
±r
, "TargetAddress=", 14)) {

1012 
	`°∫˝y
(
iscsi
->
èrgë_addªss
,
±r
+14,
MAX_STRING_SIZE
);

1015 i‡(!
	`°∫cmp
(
±r
, "HeaderDigest=", 13)) {

1016 i‡(!
	`°rcmp
(
±r
 + 13, "CRC32C")) {

1017 
iscsi
->
w™t_hódî_dige°


1018 
ISCSI_HEADER_DIGEST_CRC32C
;

1020 
iscsi
->
w™t_hódî_dige°


1021 
ISCSI_HEADER_DIGEST_NONE
;

1025 i‡(!
	`°∫cmp
(
±r
, "FirstBurstLength=", 17)) {

1026 
iscsi
->
fú°_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 17, 
NULL
, 10);

1029 i‡(!
	`°∫cmp
(
±r
, "InitialR2T=", 11)) {

1030 i‡(!
	`°rcmp
(
±r
 + 11, "No")) {

1031 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

1033 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

1037 i‡(!
	`°∫cmp
(
±r
, "ImmediateData=", 14)) {

1038 i‡(!
	`°rcmp
(
±r
 + 14, "No")) {

1039 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1040 } i‡(
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
) {

1044 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1047 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

1051 i‡(!
	`°∫cmp
(
±r
, "MaxBurstLength=", 15)) {

1052 
iscsi
->
max_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 15, 
NULL
, 10);

1055 i‡(!
	`°∫cmp
(
±r
, "MaxRecvDataSegmentLength=", 25)) {

1056 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
	`°πﬁ
(
±r
 + 25, 
NULL
, 10);

1059 i‡(!
	`°∫cmp
(
±r
, "AuthMethod=", 11)) {

1060 i‡(!
	`°rcmp
(
±r
 + 11, "CHAP")) {

1061 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
;

1065 i‡(!
	`°∫cmp
(
±r
, "CHAP_A=", 7)) {

1066 
iscsi
->
ch≠_a
 = 
	`©oi
(
±r
+7);

1067 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1070 i‡(!
	`°∫cmp
(
±r
, "CHAP_I=", 7)) {

1071 
iscsi
->
ch≠_i
 = 
	`©oi
(
±r
+7);

1072 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1075 i‡(!
	`°∫cmp
(
±r
, "CHAP_C=0x", 9)) {

1076 
	`°∫˝y
(
iscsi
->
ch≠_c
,
±r
+9,
MAX_STRING_SIZE
);

1077 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1080 
±r
 +
Àn
 + 1;

1081 
size
 -
Àn
 + 1;

1084 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

1085 
	`ISCSI_LOG
(
iscsi
, 2, "èrgëÑeque°†ªdúe˘Åÿ%s",iscsi->
èrgë_addªss
);

1086 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_REDIRECT
, 
NULL
,

1087 
pdu
->
¥iv©e_d©a
);

1091 i‡(
°©us
 != 0) {

1092 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅoÅarget. Status: %s(%d)",

1093 
	`logö_îr‹_°r
(
°©us
), status);

1094 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1095 
pdu
->
¥iv©e_d©a
);

1099 i‡(
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
) {

1100 
iscsi
->
cuºít_pha£
 = (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) << 2;

1103 i‡((
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
)

1104 && (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) == ISCSI_PDU_LOGIN_NSG_FF) {

1105 
iscsi
->
is_loggedö
 = 1;

1106 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
);

1107 
iscsi
->
hódî_dige°
 = iscsi->
w™t_hódî_dige°
;

1108 
	`ISCSI_LOG
(
iscsi
, 2, "login successful");

1109 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1111 i‡(
	`iscsi_logö_async
(
iscsi
, 
pdu
->
ˇŒback
,Ödu->
¥iv©e_d©a
) != 0) {

1112 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send continuationÜoginÖdu");

1113 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,Ödu->
¥iv©e_d©a
);

1118 
	}
}

1122 
	$iscsi_logout_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

1123 *
¥iv©e_d©a
)

1125 
iscsi_pdu
 *
pdu
;

1127 
iscsi
->
logö_©ãm±s
 = 0;

1129 i‡(
iscsi
->
is_loggedö
 == 0) {

1130 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogout whileÇotÜogged in.");

1134 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_LOGOUT_REQUEST
,

1135 
ISCSI_PDU_LOGOUT_RESPONSE
);

1136 i‡(
pdu
 =
NULL
) {

1137 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

1143 
	`iscsi_pdu_£t_immedüã
(
pdu
);

1146 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

1149 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

1150 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

1153 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

1155 
pdu
->
ˇŒback
 = 
cb
;

1156 
pdu
->
¥iv©e_d©a
 =Örivate_data;

1158 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

1159 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

1161 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

1166 
	}
}

1169 
	$iscsi_¥o˚ss_logout_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

1170 
iscsi_ö_pdu
 *
ö
)

1172 
uöt32_t
 
maxcmd¢
, 
expcmd¢
;

1174 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

1175 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

1176 
iscsi
->
maxcmd¢
 = maxcmdsn;

1178 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

1179 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

1180 
iscsi
->
expcmd¢
 =Éxpcmdsn;

1183 
iscsi
->
is_loggedö
 = 1;

1184 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1187 
	}
}

1190 
	$iscsi_£t_£ssi⁄_ty≥
(
iscsi_c⁄ãxt
 *
iscsi
,

1191 
iscsi_£ssi⁄_ty≥
 
£ssi⁄_ty≥
)

1198 
iscsi
->
£ssi⁄_ty≥
 = session_type;

1201 
	}
}

	@lib/md5.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 
	~"md5.h
"

32 #ifde‡
WORDS_BIGENDIAN


34 
	$byãSw≠
(
UWORD32
 *
buf
, 
w‹ds
)

36 
md5byã
 *
p
 = (md5byã *)
buf
;

39 *
buf
++ = (
UWORD32
)(()
p
[3] << 8 |Ö[2]) << 16 |

40 (()
p
[1] << 8 |Ö[0]);

41 
p
 += 4;

42 } --
w‹ds
);

43 
	}
}

45 
	#byãSw≠
(
buf
,
w‹ds
)

	)

53 
	$MD5Inô
(
MD5C⁄ãxt
 *
˘x
)

55 
˘x
->
buf
[0] = 0x67452301;

56 
˘x
->
buf
[1] = 0xefcdab89;

57 
˘x
->
buf
[2] = 0x98badcfe;

58 
˘x
->
buf
[3] = 0x10325476;

60 
˘x
->
byãs
[0] = 0;

61 
˘x
->
byãs
[1] = 0;

62 
	}
}

69 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
˘x
, 
md5byã
 c⁄° *
buf
, 
Àn
)

71 
UWORD32
 
t
;

75 
t
 = 
˘x
->
byãs
[0];

76 i‡((
˘x
->
byãs
[0] = 
t
 + 
Àn
) <Å)

77 
˘x
->
byãs
[1]++;

79 
t
 = 64 - (t & 0x3f);

80 i‡(
t
 > 
Àn
) {

81 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
, 
Àn
);

85 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
,Å);

86 
	`byãSw≠
(
˘x
->
ö
, 16);

87 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

88 
buf
 +
t
;

89 
Àn
 -
t
;

92 
Àn
 >= 64) {

93 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

94 
	`byãSw≠
(
˘x
->
ö
, 16);

95 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

96 
buf
 += 64;

97 
Àn
 -= 64;

101 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

102 
	}
}

109 
	$MD5FöÆ
(
md5byã
 
dige°
[16], 
MD5C⁄ãxt
 *
˘x
)

111 
cou¡
 = 
˘x
->
byãs
[0] & 0x3f;

112 
md5byã
 *
p
 = (md5byã *)
˘x
->
ö
 + 
cou¡
;

115 *
p
++ = 0x80;

118 
cou¡
 = 56 - 1 - count;

120 i‡(
cou¡
 < 0) {

121 
	`mem£t
(
p
, 0, 
cou¡
 + 8);

122 
	`byãSw≠
(
˘x
->
ö
, 16);

123 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

124 
p
 = (
md5byã
 *)
˘x
->
ö
;

125 
cou¡
 = 56;

127 
	`mem£t
(
p
, 0, 
cou¡
);

128 
	`byãSw≠
(
˘x
->
ö
, 14);

131 
˘x
->
ö
[14] = ctx->
byãs
[0] << 3;

132 
˘x
->
ö
[15] = ctx->
byãs
[1] << 3 | ctx->bytes[0] >> 29;

133 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

135 
	`byãSw≠
(
˘x
->
buf
, 4);

136 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

137 
	`mem£t
(
˘x
, 0, (*ctx));

138 
	}
}

140 #i‚de‡
ASM_MD5


145 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

146 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

147 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

148 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

151 
	#MD5STEP
(
f
,
w
,
x
,
y
,
z
,
ö
,
s
) \

152 (
w
 +
	`f
(
x
,
y
,
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

160 
	$MD5Tønsf‹m
(
UWORD32
 
buf
[4], UWORD32 c⁄° 
ö
[16])

162 
UWORD32
 
a
, 
b
, 
c
, 
d
;

164 
a
 = 
buf
[0];

165 
b
 = 
buf
[1];

166 
c
 = 
buf
[2];

167 
d
 = 
buf
[3];

169 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

170 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

171 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

172 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

173 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

174 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

175 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

176 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

177 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

178 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

179 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

180 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

181 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

182 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

183 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

184 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

186 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

187 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

188 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

189 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

190 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

191 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

192 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

193 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

194 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

195 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

196 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

197 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

198 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

199 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

200 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

201 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

203 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

204 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

205 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

206 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

207 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

208 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

209 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

210 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

211 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

212 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

213 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

214 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

215 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

216 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

217 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

218 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

220 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

221 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

222 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

223 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

224 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

225 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

226 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

227 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

228 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

229 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

230 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

231 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

232 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

233 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

234 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

235 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

237 
buf
[0] +
a
;

238 
buf
[1] +
b
;

239 
buf
[2] +
c
;

240 
buf
[3] +
d
;

241 
	}
}

	@lib/nop.c

18 #i‡
deföed
(
WIN32
)

20 
	~<uni°d.h
>

23 
	~<°dio.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

28 
	$iscsi_n›_out_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

29 *
d©a
, 
Àn
, *
¥iv©e_d©a
)

31 
iscsi_pdu
 *
pdu
;

33 i‡(
iscsi
->
is_loggedö
 == 0) {

34 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÇop-out whileÇot "

39 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_NOP_OUT
, 
ISCSI_PDU_NOP_IN
);

40 i‡(
pdu
 =
NULL
) {

41 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

46 
pdu
->
Êags
 |
ISCSI_PDU_DROP_ON_RECONNECT
;

49 
	`iscsi_pdu_£t_immedüã
(
pdu
);

52 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

55 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

58 
	`iscsi_pdu_£t_lun
(
pdu
, 0);

61 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

62 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

65 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

67 
pdu
->
ˇŒback
 = 
cb
;

68 
pdu
->
¥iv©e_d©a
 =Örivate_data;

70 i‡(
d©a
 !
NULL
 && 
Àn
 > 0) {

71 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, 
d©a
, 
Àn
) != 0) {

72 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoádd outdataÅoÇop-out");

73 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

78 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

79 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

80 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

84 
iscsi
->
n›s_ö_Êight
++;

87 
	}
}

90 
	$iscsi_£nd_èrgë_n›_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
ât
)

92 
iscsi_pdu
 *
pdu
;

94 
pdu
 = 
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_NOP_OUT
, 
ISCSI_PDU_NO_PDU
,

95 0xffffffff,
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

96 i‡(
pdu
 =
NULL
) {

97 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

102 
	`iscsi_pdu_£t_immedüã
(
pdu
);

105 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

108 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

111 
	`iscsi_pdu_£t_lun
(
pdu
, 0);

114 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

115 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

118 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

120 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

121 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

122 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

127 
	}
}

130 
	$iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

131 
iscsi_ö_pdu
 *
ö
)

133 
iscsi_d©a
 
d©a
;

135 
iscsi
->
n›s_ö_Êight
 = 0;

137 i‡(
pdu
->
ˇŒback
 =
NULL
) {

141 
d©a
.d©®
NULL
;

142 
d©a
.
size
 = 0;

144 i‡(
ö
->
d©a_pos
 > 
ISCSI_HEADER_SIZE
) {

145 
d©a
.d©®
ö
->data;

146 
d©a
.
size
 = 
ö
->
d©a_pos
;

149 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
d©a
,Ödu->
¥iv©e_d©a
);

152 
	}
}

154 
	$iscsi_gë_n›s_ö_Êight
(
iscsi_c⁄ãxt
 *
iscsi
)

156  
iscsi
->
n›s_ö_Êight
;

157 
	}
}

	@lib/pdu.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

32 
	~<°rögs.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

41 
	~"¶i°.h
"

51 
	$iscsi_£rül32_com∑ª
(
uöt32_t
 
s1
, uöt32_à
s2
) {

52 i‡(
s1
 =
s2
)  0;

53 i‡(
s1
 < 
s2
 && s2-s1 < (
uöt32_t
)1<<31)  -1;

54 i‡(
s1
 > 
s2
 && s1-s2 < (
uöt32_t
)1<<31)  1;

55 i‡(
s1
 > 
s2
 && s1-s2 > (
uöt32_t
)1<<31)  -1;

56 i‡(
s1
 < 
s2
 && s2-s1 > (
uöt32_t
)1<<31)  1;

59 
	}
}

61 
uöt32_t


62 
	$iscsi_ôt_po°_ö¸emít
(
iscsi_c⁄ãxt
 *
iscsi
) {

63 
uöt32_t
 
ﬁd_ôt
 = 
iscsi
->
ôt
;

64 
iscsi
->
ôt
++;

66 i‡(
iscsi
->
ôt
 == 0xffffffff) {

67 
iscsi
->
ôt
 = 0;

69  
ﬁd_ôt
;

70 
	}
}

72 
	$iscsi_dump_pdu_hódî
(
iscsi_c⁄ãxt
 *
iscsi
, *
d©a
) {

73 
dump
[
ISCSI_RAW_HEADER_SIZE
*3+1]={0};

74 
i
;

75 
i
=0;i<
ISCSI_RAW_HEADER_SIZE
;i++) {

76 
	`¢¥ötf
(&
dump
[
i
 * 3], 4, " %02x", 
d©a
[i]);

78 
	`ISCSI_LOG
(
iscsi
, 0, "PDU hódî:%s",
dump
);

79 
	}
}

81 
iscsi_pdu
 *

82 
	$iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

83 
iscsi_›code
 
ª•⁄£_›code
, 
uöt32_t
 
ôt
, uöt32_à
Êags
)

85 
iscsi_pdu
 *
pdu
;

87 
pdu
 = 
	`iscsi_szmÆloc
(
iscsi
, (
iscsi_pdu
));

88 i‡(
pdu
 =
NULL
) {

89 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu");

90  
NULL
;

93 
pdu
->
outd©a
.
size
 = 
ISCSI_HEADER_SIZE
;

94 
pdu
->
outd©a
.
d©a
 = 
	`iscsi_szmÆloc
(
iscsi
,Ödu->outd©a.
size
);

96 i‡(
pdu
->
outd©a
.
d©a
 =
NULL
) {

97 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu header");

98 
	`iscsi_‰ì
(
iscsi
, 
pdu
);

99  
NULL
;

103 
pdu
->
outd©a
.
d©a
[0] = 
›code
;

104 
pdu
->
ª•⁄£_›code
 =Ñesponse_opcode;

107 i‡(
›code
 =
ISCSI_PDU_LOGIN_REQUEST
) {

108 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[8], &
iscsi
->
isid
[0], 6);

112 
	`iscsi_pdu_£t_ôt
(
pdu
, 
ôt
);

113 
pdu
->
ôt
 = itt;

116 
pdu
->
Êags
 = flags;

118  
pdu
;

119 
	}
}

121 
iscsi_pdu
 *

122 
	$iscsi_Æloˇã_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

123 
iscsi_›code
 
ª•⁄£_›code
)

125  
	`iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
›code
, 
ª•⁄£_›code
, 
	`iscsi_ôt_po°_ö¸emít
(iscsi), 0);

126 
	}
}

129 
	$iscsi_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

131 i‡(
pdu
 =
NULL
) {

132 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo free NULLÖdu");

136 i‡(
pdu
->
outd©a
.
size
 <
iscsi
->
smÆloc_size
) {

137 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

139 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

141 
pdu
->
outd©a
.
d©a
 = 
NULL
;

143 i‡(
pdu
->
öd©a
.
size
 <
iscsi
->
smÆloc_size
) {

144 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

146 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

148 
pdu
->
öd©a
.
d©a
 = 
NULL
;

150 
	`iscsi_s‰ì
(
iscsi
, 
pdu
);

151 
	}
}

155 
	$iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_d©a
 *
d©a
,

156 *
d±r
, 
dsize
, 
pduÆignmít
)

158 
size_t
 
Àn
, 
Æig√d
;

160 i‡(
dsize
 == 0) {

161 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

166 
Àn
 = 
d©a
->
size
 + 
dsize
;

168 
Æig√d
 = 
Àn
;

169 i‡(
pduÆignmít
) {

170 
Æig√d
 = (aligned+3)&0xfffffffc;

173 i‡(
d©a
->
size
 == 0) {

174 i‡(
Æig√d
 <
iscsi
->
smÆloc_size
) {

175 
d©a
->d©®
	`iscsi_szmÆloc
(
iscsi
, 
Æig√d
);

177 
d©a
->d©®
	`iscsi_mÆloc
(
iscsi
, 
Æig√d
);

180 i‡(
Æig√d
 > 
iscsi
->
smÆloc_size
) {

181 
d©a
->d©®
	`iscsi_ªÆloc
(
iscsi
, d©a->d©a, 
Æig√d
);

184 i‡(
d©a
->d©®=
NULL
) {

185 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate buffer for %d "

186 "byãs", (Ë
Àn
);

190 
	`mem˝y
(
d©a
->d©®+ d©a->
size
, 
d±r
, 
dsize
);

191 
d©a
->
size
 +
dsize
;

193 i‡(
Àn
 !
Æig√d
) {

195 
	`mem£t
(
d©a
->d©®+ 
Àn
, 0, 
Æig√d
 -Üen);

199 
	}
}

202 
	$iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

203 *
d±r
, 
dsize
)

205 i‡(
pdu
 =
NULL
) {

206 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoádd dataÅo NULLÖdu");

209 i‡(
dsize
 == 0) {

210 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

215 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
outd©a
, 
d±r
, 
dsize
, 1) != 0) {

216 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoádd dataÅoÖdu buffer");

221 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->outd©a.
size


222 - 
ISCSI_HEADER_SIZE
);

225 
	}
}

228 
	$iscsi_gë_pdu_d©a_size
(c⁄° *
hdr
)

230 
size
;

232 
size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

234  
size
;

235 
	}
}

239 
	$iscsi_gë_pdu_∑ddög_size
(c⁄° *
hdr
)

241 
d©a_size
, 
∑dded_size
;

243 
d©a_size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

244 
∑dded_size
 = (
d©a_size
+3) & 0xfffffffc;

246  
∑dded_size
 - 
d©a_size
;

247 
	}
}

249 
	eiscsi_ªje˘_ªas⁄
 {

250 
	mISCSI_REJECT_RESERVED
 = 0x01,

251 
	mISCSI_REJECT_DATA_DIGEST_ERROR
 = 0x02,

252 
	mISCSI_REJECT_SNACK_REJECT
 = 0x03,

253 
	mISCSI_REJECT_PROTOCOL_ERROR
 = 0x04,

254 
	mISCSI_REJECT_COMMAND_NOT_SUPPORTED
 = 0x05,

255 
	mISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
 = 0x06,

256 
	mISCSI_REJECT_TASK_IN_PROCESS
 = 0x07,

257 
	mISCSI_REJECT_INVALID_DATA_ACK
 = 0x08,

258 
	mISCSI_REJECT_INVALID_PDU_FIELD
 = 0x09,

259 
	mISCSI_REJECT_LONG_OPERATION_REJECT
 = 0x0a,

260 
	mISCSI_REJECT_NEGOTIATION_RESET
 = 0x0b,

261 
	mISCSI_REJECT_WAITING_FOR_LOGOUT
 = 0x0c

264 c⁄° *
	$iscsi_ªje˘_ªas⁄_°r
(
iscsi_ªje˘_ªas⁄
 
ªas⁄
)

266 
ªas⁄
) {

267 
ISCSI_REJECT_RESERVED
:

269 
ISCSI_REJECT_DATA_DIGEST_ERROR
:

271 
ISCSI_REJECT_SNACK_REJECT
:

273 
ISCSI_REJECT_PROTOCOL_ERROR
:

275 
ISCSI_REJECT_COMMAND_NOT_SUPPORTED
:

277 
ISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
:

279 
ISCSI_REJECT_TASK_IN_PROCESS
:

281 
ISCSI_REJECT_INVALID_DATA_ACK
:

283 
ISCSI_REJECT_INVALID_PDU_FIELD
:

285 
ISCSI_REJECT_LONG_OPERATION_REJECT
:

287 
ISCSI_REJECT_NEGOTIATION_RESET
:

289 
ISCSI_REJECT_WAITING_FOR_LOGOUT
:

294 
	}
}

296 
	$iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi_c⁄ãxt
 *
iscsi
,

297 
iscsi_ö_pdu
 *
ö
)

299 
uöt32_t
 
ât
;

300 
uöt32_t
 
°©¢
;

302 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

304 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

305 i‡(
°©¢
 > 
iscsi
->statsn) {

306 
iscsi
->
°©¢
 = statsn;

310 i‡(
ât
 == 0xffffffff) {

314 
	`iscsi_£nd_èrgë_n›_out
(
iscsi
, 
ât
);

317 
	}
}

320 
	$iscsi_¥o˚ss_ªje˘
(
iscsi_c⁄ãxt
 *
iscsi
,

321 
iscsi_ö_pdu
 *
ö
)

323 
size
 = 
ö
->
d©a_pos
;

324 
uöt32_t
 
ôt
;

325 
iscsi_pdu
 *
pdu
;

327 i‡(
size
 < 
ISCSI_RAW_HEADER_SIZE
) {

328 
	`iscsi_£t_îr‹
(
iscsi
, "size of REJECTÖayload isÅoo small."

330 
ISCSI_RAW_HEADER_SIZE
, ()
size
);

334 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
d©a
[16]);

336 i‡(
iscsi
->
log_Àvñ
 > 1) {

337 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
ö
->
d©a
);

340 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

341 i‡(
pdu
->
ôt
 == itt) {

346 i‡(
pdu
 =
NULL
) {

347 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot match REJECT with"

349 
ôt
);

353 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

354 
pdu
->
¥iv©e_d©a
);

356 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

357 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

359 
	}
}

363 
	$iscsi_¥o˚ss_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

365 
uöt32_t
 
ôt
;

366 
iscsi_›code
 
›code
;

367 
iscsi_pdu
 *
pdu
;

368 
uöt8_t
 
ah¶í
;

370 
›code
 = 
ö
->
hdr
[0] & 0x3f;

371 
ah¶í
 = 
ö
->
hdr
[4];

372 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

374 i‡(
ah¶í
 != 0) {

375 
	`iscsi_£t_îr‹
(
iscsi
, "cant handleÉxpanded headers yet");

379 i‡(
›code
 =
ISCSI_PDU_REJECT
) {

380 
	`iscsi_£t_îr‹
(
iscsi
, "Reque° wa†ªje˘ed wôhÑós⁄: 0x%02x (%s)", 
ö
->
hdr
[2], 
	`iscsi_ªje˘_ªas⁄_°r
(in->hdr[2]));

382 i‡(
	`iscsi_¥o˚ss_ªje˘
(
iscsi
, 
ö
) != 0) {

388 i‡(
›code
 =
ISCSI_PDU_NOP_IN
 && 
ôt
 == 0xffffffff) {

389 i‡(
	`iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi
, 
ö
) != 0) {

395 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

396 
iscsi_›code
 
ex≥˘ed_ª•⁄£
 = 
pdu
->
ª•⁄£_›code
;

397 
is_föished
 = 1;

399 i‡(
pdu
->
ôt
 != itt) {

407 i‡(
›code
 =
ISCSI_PDU_DATA_IN


408 && 
ex≥˘ed_ª•⁄£
 =
ISCSI_PDU_SCSI_RESPONSE
) {

409 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_DATA_IN
;

416 i‡(
›code
 =
ISCSI_PDU_R2T
) {

417 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_R2T
;

420 i‡(
›code
 !
ex≥˘ed_ª•⁄£
) {

421 
	`iscsi_£t_îr‹
(
iscsi
, "Got wrong opcode back for "

423 
ôt
, 
›code
, 
pdu
->
ª•⁄£_›code
);

426 
›code
) {

427 
ISCSI_PDU_LOGIN_RESPONSE
:

428 i‡(
	`iscsi_¥o˚ss_logö_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

429 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

430 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

431 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜoginÑeply "

436 
ISCSI_PDU_TEXT_RESPONSE
:

437 i‡(
	`iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

438 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

439 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

440 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅextÑeply "

445 
ISCSI_PDU_LOGOUT_RESPONSE
:

446 i‡(
	`iscsi_¥o˚ss_logout_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

447 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

448 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

449 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜogoutÑeply "

454 
ISCSI_PDU_SCSI_RESPONSE
:

455 i‡(
	`iscsi_¥o˚ss_scsi_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

456 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

457 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

458 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑesponseÑeply "

463 
ISCSI_PDU_DATA_IN
:

464 i‡(
	`iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi
, 
pdu
, 
ö
,

465 &
is_föished
) != 0) {

466 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

467 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

468 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi data in "

473 
ISCSI_PDU_NOP_IN
:

474 i‡(
	`iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

475 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

476 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

477 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÇop-in failed");

481 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
:

482 i‡(
	`iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi
, 
pdu
,

483 
ö
) != 0) {

484 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

485 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

486 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅask-mgmt failed");

490 
ISCSI_PDU_R2T
:

491 i‡(
	`iscsi_¥o˚ss_r2t
(
iscsi
, 
pdu
, 
ö
) != 0) {

492 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

493 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

494 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑ2t "

498 
is_föished
 = 0;

501 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

502 "›codê0x%02x", 
›code
);

506 i‡(
is_föished
) {

507 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

508 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

514 
	}
}

517 
	$iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
)

519 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[16], 
ôt
);

520 
	}
}

523 
	$iscsi_pdu_£t_rôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rôt
)

525 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
rôt
);

526 
	}
}

529 
	$iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
)

531 
pdu
->
outd©a
.
d©a
[1] = 
Êags
;

532 
	}
}

535 
	$iscsi_pdu_£t_immedüã
(
iscsi_pdu
 *
pdu
)

537 
pdu
->
outd©a
.
d©a
[0] |
ISCSI_PDU_IMMEDIATE
;

538 
	}
}

541 
	$iscsi_pdu_£t_ât
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ât
)

543 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
ât
);

544 
	}
}

547 
	$iscsi_pdu_£t_cmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
cmd¢
)

549 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
cmd¢
);

550 
	}
}

553 
	$iscsi_pdu_£t_rcmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rcmd¢
)

555 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[32], 
rcmd¢
);

556 
	}
}

559 
	$iscsi_pdu_£t_d©a¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
d©a¢
)

561 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 
d©a¢
);

562 
	}
}

565 
	$iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
)

567 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[28], 
exp°©¢¢
);

568 
	}
}

571 
	$iscsi_pdu_£t_buf„roff£t
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
buf„roff£t
)

573 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„roff£t
);

574 
	}
}

577 
	$iscsi_pdu_£t_cdb
(
iscsi_pdu
 *
pdu
, 
scsi_èsk
 *
èsk
)

579 
	`mem£t
(&
pdu
->
outd©a
.
d©a
[32], 0, 16);

580 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[32], 
èsk
->
cdb
,Åask->
cdb_size
);

581 
	}
}

584 
	$iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
)

586 
pdu
->
outd©a
.
d©a
[8] = 
lun
 >> 8;

587 
pdu
->
outd©a
.
d©a
[9] = 
lun
 & 0xff;

588 
	}
}

591 
	$iscsi_pdu_£t_expx„æí
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
expx„æí
)

593 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
expx„æí
);

594 
	}
}

	@lib/scsi-lowlevel.c

24 #ifde‡
HAVE_CONFIG_H


25 
	~"c⁄fig.h
"

28 #ifde‡
HAVE_SYS_TYPES_H


29 
	~<sys/ty≥s.h
>

32 #ifde‡
HAVE_ARPA_INET_H


33 
	~<¨∑/öë.h
>

36 #ifde‡
AROS


37 
	~"¨os/¨os_com∑t.h
"

40 #i‡
deföed
(
WIN32
)

41 
	~<wösock2.h
>

42 
	~"wö32/wö32_com∑t.h
"

44 
	~<°rögs.h
>

47 
	~<sys/sockë.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°ddef.h
>

51 
	~<°rög.h
>

52 
	~<°döt.h
>

53 
	~<î∫o.h
>

54 
	~"¶i°.h
"

55 
	~"scsi-lowÀvñ.h
"

57 
scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
);

59 
	sscsi_Æloˇãd_mem‹y
 {

60 
scsi_Æloˇãd_mem‹y
 *
	m√xt
;

61 
	mbuf
[0];

65 
	$scsi_‰ì_scsi_èsk
(
scsi_èsk
 *
èsk
)

67 
scsi_Æloˇãd_mem‹y
 *
mem
;

69 i‡(!
èsk
)

72 (
mem
 = 
èsk
->mem)) {

73 
	`SLIST_REMOVE
(&
èsk
->
mem
, mem);

74 
	`‰ì
(
mem
);

77 
	`‰ì
(
èsk
->
d©aö
.
d©a
);

78 
	`‰ì
(
èsk
);

79 
	}
}

81 
scsi_èsk
 *

82 
	$scsi_¸óã_èsk
(
cdb_size
, *
cdb
, 
x„r_dú
, 
expx„æí
)

84 
scsi_èsk
 *
èsk
;

86 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

87 i‡(
èsk
 =
NULL
) {

88  
NULL
;

91 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

93 
	`mem˝y
(&
èsk
->
cdb
[0], cdb, 
cdb_size
);

94 
èsk
->
x„r_dú
 = xfer_dir;

95 
èsk
->
expx„æí
 =Éxpxferlen;

97  
èsk
;

98 
	}
}

102 
	$scsi_mÆloc
(
scsi_èsk
 *
èsk
, 
size_t
 
size
)

104 
scsi_Æloˇãd_mem‹y
 *
mem
;

106 
mem
 = 
	`mÆloc
((
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

107 i‡(
mem
 =
NULL
) {

108  
NULL
;

110 
	`mem£t
(
mem
, 0, (
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

111 
	`SLIST_ADD
(&
èsk
->
mem
, mem);

112  &
mem
->
buf
[0];

113 
	}
}

115 
	svÆue_°rög
 {

116 
	mvÆue
;

117 c⁄° *
	m°rög
;

121 
	$vÆue_°rög_föd
(
vÆue_°rög
 *
vÆues
, 
vÆue
)

123 ; 
vÆues
->
°rög
; values++) {

124 i‡(
vÆue
 =
vÆues
->value) {

125  
vÆues
->
°rög
;

128  
NULL
;

129 
	}
}

132 
	$scsi_£n£_key_°r
(
key
)

134 
vÆue_°rög
 
keys
[] = {

135 {
SCSI_SENSE_NO_SENSE
,

137 {
SCSI_SENSE_RECOVERED_ERROR
,

139 {
SCSI_SENSE_NOT_READY
,

141 {
SCSI_SENSE_HARDWARE_ERROR
,

143 {
SCSI_SENSE_ILLEGAL_REQUEST
,

145 {
SCSI_SENSE_UNIT_ATTENTION
,

147 {
SCSI_SENSE_DATA_PROTECTION
,

149 {
SCSI_SENSE_BLANK_CHECK
,

151 {
SCSI_SENSE_VENDOR_SPECIFIC
,

153 {
SCSI_SENSE_COPY_ABORTED
,

155 {
SCSI_SENSE_COMMAND_ABORTED
,

157 {
SCSI_SENSE_OBSOLETE_ERROR_CODE
,

159 {
SCSI_SENSE_OVERFLOW_COMMAND
,

161 {
SCSI_SENSE_MISCOMPARE
,

163 {0, 
NULL
}

166  
	`vÆue_°rög_föd
(
keys
, 
key
);

167 
	}
}

170 
	$scsi_£n£_ascq_°r
(
ascq
)

172 
vÆue_°rög
 
ascqs
[] = {

173 {
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
,

175 {
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
,

177 {
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
,

179 {
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
,

181 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
,

183 {
SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED
,

185 {
SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR
,

187 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
,

189 {
SCSI_SENSE_ASCQ_WRITE_PROTECTED
,

191 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
,

193 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
,

195 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
,

197 {
SCSI_SENSE_ASCQ_BUS_RESET
,

199 {
SCSI_SENSE_ASCQ_POWER_ON_OCCURED
,

201 {
SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED
,

203 {
SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED
,

205 {
SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET
,

207 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED
,

209 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD
,

211 {
SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED
,

213 {
SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED
,

215 {
SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED
,

217 {
SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED
,

219 {
SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE
,

221 {
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
,

223 {
SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA
,

225 { 
SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED
,

227 {
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
,

229 {0, 
NULL
}

232  
	`vÆue_°rög_föd
(
ascqs
, 
ascq
);

233 
	}
}

236 
	$scsi_¥_ty≥_°r
(
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

238 
vÆue_°rög
 
¥_ty≥_°rögs
[] = {

239 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

241 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

243 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

245 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

247 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

249 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

251 {0, 
NULL
}

254  
	`vÆue_°rög_föd
(
¥_ty≥_°rögs
, 
¥_ty≥
);

255 
	}
}

257 
uöt64_t


258 
	$scsi_gë_uöt64
(c⁄° *
c
)

260 
uöt64_t
 
vÆ
;

262 
vÆ
 = 
	`scsi_gë_uöt32
(
c
);

263 
vÆ
 <<= 32;

264 
c
 += 4;

265 
vÆ
 |
	`scsi_gë_uöt32
(
c
);

267  
vÆ
;

268 
	}
}

270 
uöt32_t


271 
	$scsi_gë_uöt32
(c⁄° *
c
)

273 
uöt32_t
 
vÆ
;

274 
vÆ
 = 
c
[0];

275 
vÆ
 = (vÆ << 8Ë| 
c
[1];

276 
vÆ
 = (vÆ << 8Ë| 
c
[2];

277 
vÆ
 = (vÆ << 8Ë| 
c
[3];

278  
vÆ
;

279 
	}
}

281 
uöt16_t


282 
	$scsi_gë_uöt16
(c⁄° *
c
)

284 
uöt16_t
 
vÆ
;

285 
vÆ
 = 
c
[0];

286 
vÆ
 = (vÆ << 8Ë| 
c
[1];

287  
vÆ
;

288 
	}
}

290 
ölöe
 
uöt64_t


291 
	$èsk_gë_uöt64
(
scsi_èsk
 *
èsk
, 
off£t
)

293 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 8) {

294 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

296  
	`scsi_gë_uöt64
(
c
);

300 
	}
}

302 
ölöe
 
uöt32_t


303 
	$èsk_gë_uöt32
(
scsi_èsk
 *
èsk
, 
off£t
)

305 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 4) {

306 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

308  
	`scsi_gë_uöt32
(
c
);

312 
	}
}

314 
ölöe
 
uöt16_t


315 
	$èsk_gë_uöt16
(
scsi_èsk
 *
èsk
, 
off£t
)

317 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 2) {

318 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

320  
	`scsi_gë_uöt16
(
c
);

324 
	}
}

326 
ölöe
 
uöt8_t


327 
	$èsk_gë_uöt8
(
scsi_èsk
 *
èsk
, 
off£t
)

329 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 1) {

330  
èsk
->
d©aö
.
d©a
[
off£t
];

334 
	}
}

337 
	$scsi_£t_uöt64
(*
c
, 
uöt64_t
 
v
)

339 
uöt32_t
 
vÆ
;

341 
vÆ
 = (
v
 >> 32) & 0xffffffff;

342 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

344 
c
 += 4;

345 
vÆ
 = 
v
 & 0xffffffff;

346 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

347 
	}
}

350 
	$scsi_£t_uöt32
(*
c
, 
uöt32_t
 
vÆ
)

352 
c
[0] = 
vÆ
 >> 24;

353 
c
[1] = 
vÆ
 >> 16;

354 
c
[2] = 
vÆ
 >> 8;

355 
c
[3] = 
vÆ
;

356 
	}
}

359 
	$scsi_£t_uöt16
(*
c
, 
uöt16_t
 
vÆ
)

361 
c
[0] = 
vÆ
 >> 8;

362 
c
[1] = 
vÆ
;

363 
	}
}

368 
scsi_èsk
 *

369 
	$scsi_cdb_ã°unôªady
()

371 
scsi_èsk
 *
èsk
;

373 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

374 i‡(
èsk
 =
NULL
) {

375  
NULL
;

378 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

379 
èsk
->
cdb
[0] = 
SCSI_OPCODE_TESTUNITREADY
;

381 
èsk
->
cdb_size
 = 6;

382 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

383 
èsk
->
expx„æí
 = 0;

385  
èsk
;

386 
	}
}

391 
scsi_èsk
 *

392 
	$scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
)

394 
scsi_èsk
 *
èsk
;

396 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

397 i‡(
èsk
 =
NULL
) {

398  
NULL
;

401 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

402 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SANITIZE
;

404 
èsk
->
cdb
[1] = 
ß
 & 0x1f;

405 i‡(
immed
) {

406 
èsk
->
cdb
[1] |= 0x80;

408 i‡(
au£
) {

409 
èsk
->
cdb
[1] |= 0x20;

412 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

414 
èsk
->
cdb_size
 = 10;

415 i‡(
∑øm_Àn
 != 0) {

416 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

418 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

420 
èsk
->
expx„æí
 = (
∑øm_Àn
 + 3) & 0xfffc;

422  
èsk
;

423 
	}
}

428 
scsi_èsk
 *

429 
	$scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
)

431 
scsi_èsk
 *
èsk
;

433 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

434 i‡(
èsk
 =
NULL
) {

435  
NULL
;

438 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

439 
èsk
->
cdb
[0] = 
SCSI_OPCODE_REPORTLUNS
;

440 
èsk
->
cdb
[2] = 
ªp‹t_ty≥
;

441 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

443 
èsk
->
cdb_size
 = 12;

444 i‡(
Æloc_Àn
 != 0) {

445 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

447 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

449 
èsk
->
expx„æí
 = 
Æloc_Àn
;

451  
èsk
;

452 
	}
}

459 
	$scsi_ªp‹éuns_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

461 
uöt32_t
 
li°_size
;

463 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

465  
li°_size
;

466 
	}
}

471 
scsi_ªp‹éuns_li°
 *

472 
	$scsi_ªp‹éuns_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

474 
scsi_ªp‹éuns_li°
 *
li°
;

475 
li°_size
;

476 
i
, 
num_luns
;

478 i‡(
èsk
->
d©aö
.
size
 < 4) {

479  
NULL
;

482 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

483 i‡(
li°_size
 < 
èsk
->
d©aö
.
size
) {

484  
NULL
;

487 
num_luns
 = 
li°_size
 / 8 - 1;

488 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªp‹éuns_li°
, 
luns
)

489 + (
uöt16_t
Ë* 
num_luns
);

490 i‡(
li°
 =
NULL
) {

491  
NULL
;

494 
li°
->
num
 = 
num_luns
;

495 
i
 = 0; i < 
num_luns
; i++) {

496 
li°
->
luns
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, i * 8 + 8);

499  
li°
;

500 
	}
}

505 
scsi_èsk
 *

506 
	$scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
)

508 
scsi_èsk
 *
èsk
;

510 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

511 i‡(
èsk
 =
NULL
) {

512  
NULL
;

515 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

516 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READCAPACITY10
;

518 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

520 i‡(
pmi
) {

521 
èsk
->
cdb
[8] |= 0x01;

524 
èsk
->
cdb_size
 = 10;

525 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

526 
èsk
->
expx„æí
 = 8;

528  
èsk
;

529 
	}
}

534 
scsi_èsk
 *

535 
	$scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
uöt16_t
 
Æloc_Àn
)

537 
scsi_èsk
 *
èsk
;

539 i‡(
f‹m©
 !
SCSI_READ_TOC
 && f‹m© !
SCSI_READ_SESSION_INFO


540 && 
f‹m©
 !
SCSI_READ_FULL_TOC
){

541 
	`Ârötf
(
°dîr
, "Ród TOC f‹m© %dÇŸ fuŒy suµ‹ãd yë\n", 
f‹m©
);

542  
NULL
;

545 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

546 i‡(
èsk
 =
NULL
) {

547  
NULL
;

550 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

551 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READTOC
;

553 i‡(
msf
) {

554 
èsk
->
cdb
[1] |= 0x02;

557 
èsk
->
cdb
[2] = 
f‹m©
 & 0xf;

560 i‡(
f‹m©
 =
SCSI_READ_TOC
 || f‹m© =
SCSI_READ_FULL_TOC
) {

561 
èsk
->
cdb
[6] = 0xf‡& 
åack_£ssi⁄
;

564 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

566 
èsk
->
cdb_size
 = 10;

567 i‡(
Æloc_Àn
 != 0) {

568 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

570 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

572 
èsk
->
expx„æí
 = 
Æloc_Àn
;

574  
èsk
;

575 
	}
}

582 
	$scsi_ªadtoc_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

584 
uöt16_t
 
toc_d©a_Àn
;

586 
toc_d©a_Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

588  
toc_d©a_Àn
;

589 
	}
}

591 
ölöe
 
scsi_ªadtoc_fmt


592 
	$scsi_ªadtoc_f‹m©
(c⁄° 
scsi_èsk
 *
èsk
)

594  
èsk
->
cdb
[2] & 0xf;

595 
	}
}

598 
	$scsi_ªadtoc_desc_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_ªadtoc_li°
 *
li°
, 
i
)

600 
	`scsi_ªadtoc_f‹m©
(
èsk
)) {

601 
SCSI_READ_TOC
:

602 
li°
->
desc
[
i
].desc.
toc
.
adr


603 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

604 
li°
->
desc
[
i
].desc.
toc
.
c⁄åﬁ


605 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

606 
li°
->
desc
[
i
].desc.
toc
.
åack


607 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

608 
li°
->
desc
[
i
].desc.
toc
.
lba


609 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

611 
SCSI_READ_SESSION_INFO
:

612 
li°
->
desc
[
i
].desc.
£s
.
adr


613 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

614 
li°
->
desc
[
i
].desc.
£s
.
c⁄åﬁ


615 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

616 
li°
->
desc
[
i
].desc.
£s
.
fú°_ö_œ°


617 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

618 
li°
->
desc
[
i
].desc.
£s
.
lba


619 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

621 
SCSI_READ_FULL_TOC
:

622 
li°
->
desc
[
i
].desc.
fuŒ
.
£ssi⁄


623 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 0) & 0xf0;

624 
li°
->
desc
[
i
].desc.
fuŒ
.
adr


625 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0xf0;

626 
li°
->
desc
[
i
].desc.
fuŒ
.
c⁄åﬁ


627 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0x0f;

628 
li°
->
desc
[
i
].desc.
fuŒ
.
äo


629 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 2);

630 
li°
->
desc
[
i
].desc.
fuŒ
.
poöt


631 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 3);

632 
li°
->
desc
[
i
].desc.
fuŒ
.
mö


633 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 4);

634 
li°
->
desc
[
i
].desc.
fuŒ
.
£c


635 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 5);

636 
li°
->
desc
[
i
].desc.
fuŒ
.
‰ame


637 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 6);

638 
li°
->
desc
[
i
].desc.
fuŒ
.
zîo


639 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 7);

640 
li°
->
desc
[
i
].desc.
fuŒ
.
pmö


641 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 8);

642 
li°
->
desc
[
i
].desc.
fuŒ
.
p£c


643 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 9);

644 
li°
->
desc
[
i
].desc.
fuŒ
.
p‰ame


645 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 10);

650 
	}
}

655 
scsi_ªadtoc_li°
 *

656 
	$scsi_ªadtoc_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

658 
scsi_ªadtoc_li°
 *
li°
;

659 
d©a_Àn
;

660 
i
, 
num_desc
;

662 i‡(
èsk
->
d©aö
.
size
 < 4) {

663  
NULL
;

667 
d©a_Àn
 = 
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
) - 2;

668 if(
èsk
->
d©aö
.
size
 < 
d©a_Àn
) {

669  
NULL
;

673 
num_desc
 = (
d©a_Àn
 - 4) / 8;

675 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªadtoc_li°
, 
desc
)

676 + (
scsi_ªadtoc_desc
Ë* 
num_desc
);

677 i‡(
li°
 =
NULL
) {

678  
NULL
;

681 
li°
->
num
 = 
num_desc
;

682 
li°
->
fú°
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

683 
li°
->
œ°
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

685 
i
 = 0; i < 
num_desc
; i++) {

686 
	`scsi_ªadtoc_desc_unm¨shÆl
(
èsk
, 
li°
, 
i
);

689  
li°
;

690 
	}
}

695 
scsi_èsk
 *

696 
	$scsi_cdb_ª£rve6
()

698 
scsi_èsk
 *
èsk
;

700 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

701 i‡(
èsk
 =
NULL
) {

702  
NULL
;

705 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

706 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RESERVE6
;

708 
èsk
->
cdb_size
 = 6;

709 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

711  
èsk
;

712 
	}
}

716 
scsi_èsk
 *

717 
	$scsi_cdb_ªÀa£6
()

719 
scsi_èsk
 *
èsk
;

721 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

722 i‡(
èsk
 =
NULL
) {

723  
NULL
;

726 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

727 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RELEASE6
;

729 
èsk
->
cdb_size
 = 6;

730 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

732  
èsk
;

733 
	}
}

735 
ölöe
 
uöt8_t


736 
	$scsi_£rvi˚a˘i⁄ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

738  
èsk
->
cdb
[1];

739 
	}
}

745 
	$scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

747 
	`scsi_£rvi˚a˘i⁄ö_ß
(
èsk
)) {

748 
SCSI_READCAPACITY16
: {

749 
scsi_ªadˇ∑côy16
 *
rc16
 = 
	`scsi_mÆloc
(
èsk
,

750 (*
rc16
));

751 i‡(
rc16
 =
NULL
) {

752  
NULL
;

754 
rc16
->
ªtu∫ed_lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

755 
rc16
->
ªtu∫ed_lba
 = (rc16->ªtu∫ed_lb®<< 32Ë| 
	`èsk_gë_uöt32
(
èsk
, 4);

756 
rc16
->
block_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

757 
rc16
->
p_ty≥
 = (
	`èsk_gë_uöt8
(
èsk
, 12) >> 1) & 0x07;

758 
rc16
->
¥Ÿ_í
 = 
	`èsk_gë_uöt8
(
èsk
, 12) & 0x01;

759 
rc16
->
p_i_exp
 = (
	`èsk_gë_uöt8
(
èsk
, 13) >> 4) & 0x0f;

760 
rc16
->
lbµbe
 = 
	`èsk_gë_uöt8
(
èsk
, 13) & 0x0f;

761 
rc16
->
lbpme
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x80);

762 
rc16
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x40);

763 
rc16
->
œlba
 = 
	`èsk_gë_uöt16
(
èsk
, 14) & 0x3fff;

764  
rc16
;

766 
SCSI_GET_LBA_STATUS
: {

767 
scsi_gë_lba_°©us
 *
gls
 = 
	`scsi_mÆloc
(
èsk
,

768 (*
gls
));

769 
öt32_t
 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

770 
i
;

772 i‡(
gls
 =
NULL
) {

773  
NULL
;

776 i‡(
Àn
 > 
èsk
->
d©aö
.
size
 - 4) {

777 
Àn
 = 
èsk
->
d©aö
.
size
 - 4;

779 
Àn
 =Üen / 16;

781 
gls
->
num_des¸ùt‹s
 = 
Àn
;

782 
gls
->
des¸ùt‹s
 = 
	`scsi_mÆloc
(
èsk
,

783 (*
gls
->
des¸ùt‹s
Ë* 
Àn
);

784 i‡(
gls
->
des¸ùt‹s
 =
NULL
) {

785 
	`‰ì
(
gls
);

786  
NULL
;

789 
i
 = 0; i < ()
gls
->
num_des¸ùt‹s
; i++) {

790 
gls
->
des¸ùt‹s
[
i
].
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 0);

791 
gls
->
des¸ùt‹s
[
i
].
lba
 <<= 32;

792 
gls
->
des¸ùt‹s
[
i
].
lba
 |
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 4);

794 
gls
->
des¸ùt‹s
[
i
].
num_blocks
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 8);

796 
gls
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 = 
	`èsk_gë_uöt8
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 12) & 0x0f;

799  
gls
;

802  
NULL
;

804 
	}
}

809 
ölöe
 
uöt8_t


810 
	$scsi_≥rsi°íåe£rveö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

812  
èsk
->
cdb
[1] & 0x1f;

813 
	}
}

816 
	$scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

818 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

819 
SCSI_PERSISTENT_RESERVE_READ_KEYS
:

820  
	`èsk_gë_uöt32
(
èsk
, 4) + 8;

821 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
:

823 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

828 
	}
}

831 
	$scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

833 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
;

834 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
;

835 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 *
rc
;

836 
i
;

838 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

839 
SCSI_PERSISTENT_RESERVE_READ_KEYS
:

840 
i
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

842 
rk
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
, 
keys
Ë+ 
i
);

843 i‡(
rk
 =
NULL
) {

844  
NULL
;

846 
rk
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

847 
rk
->
addôi⁄Æ_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

849 
rk
->
num_keys
 =Ñk->
addôi⁄Æ_Àngth
 / 8;

850 
i
 = 0; i < ()
rk
->
num_keys
; i++) {

851 
rk
->
keys
[
i
] = 
	`èsk_gë_uöt64
(
èsk
, 8 + i * 8);

853  
rk
;

854 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
: {

855 
size_t
 
Æloc_sz
;

857 
i
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

858 
Æloc_sz
 = (
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
);

860 
º
 = 
	`scsi_mÆloc
(
èsk
, 
Æloc_sz
);

861 i‡(
º
 =
NULL
) {

862  
NULL
;

864 
	`mem£t
(
º
, 0, 
Æloc_sz
);

865 
º
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

867 i‡(
i
 > 0) {

868 
º
->
ª£rved
 = 1;

869 
º
->
ª£rv©i⁄_key
 =

870 
	`èsk_gë_uöt64
(
èsk
, 8);

871 
º
->
¥_sc›e
 = 
	`èsk_gë_uöt8
(
èsk
, 21) >> 4;

872 
º
->
¥_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 21) & 0xf;

875  
º
;

877 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

878 
rc
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
));

879 i‡(
rc
 =
NULL
) {

880  
NULL
;

882 
rc
->
Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

883 
rc
->
¸h
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x10);

884 
rc
->
sù_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x08);

885 
rc
->
©p_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x04);

886 
rc
->
±∂_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x01);

887 
rc
->
tmv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x80);

888 
rc
->
Ælow_comm™ds
 = 
	`èsk_gë_uöt8
(
èsk
, 3) >> 4;

889 
rc
->
≥rsi°ít_ª£rv©i⁄_ty≥_mask
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

891  
rc
;

893  
NULL
;

895 
	}
}

897 
ölöe
 
uöt8_t


898 
	$scsi_maöã«n˚ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

900  
èsk
->
cdb
[1];

901 
	}
}

903 
ölöe
 
uöt8_t


904 
	$scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(c⁄° 
scsi_èsk
 *
èsk
)

906  
èsk
->
cdb
[2] & 0x07;

907 
	}
}

914 
	$scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

917 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

918 
SCSI_REPORT_SUPPORTED_OP_CODES
:

919 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

920 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

921  
	`èsk_gë_uöt32
(
èsk
, 0) + 4;

922 
SCSI_REPORT_SUPPORTING_OPCODE
:

923 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

925 (
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80) ? 12 : 0 +

926 
	`èsk_gë_uöt16
(
èsk
, 2);

931 
	}
}

937 
	$scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

939 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

940 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

941 
Àn
, 
i
;

943 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

944 
SCSI_REPORT_SUPPORTED_OP_CODES
:

945 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

946 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

947 i‡(
èsk
->
d©aö
.
size
 < 4) {

948  
NULL
;

951 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

959 
rsoc
 = 
	`scsi_mÆloc
(
èsk
,

960 
	`off£tof
(
scsi_ªp‹t_suµ‹ãd_›_codes
,

961 
des¸ùt‹s
) +

962 
Àn
 / 8 * (
scsi_comm™d_des¸ùt‹
));

963 i‡(
rsoc
 =
NULL
) {

964  
NULL
;

967 
rsoc
->
num_des¸ùt‹s
 = 0;

968 
i
 = 4;

969 
Àn
 >= 8) {

970 
scsi_comm™d_des¸ùt‹
 *
desc
;

972 
desc
 = &
rsoc
->
des¸ùt‹s
[rsoc->
num_des¸ùt‹s
++];

973 
desc
->
›code
 =

974 
	`èsk_gë_uöt8
(
èsk
, 
i
);

975 
desc
->
ß
 =

976 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 2);

977 
desc
->
˘dp
 =

978 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x02);

979 
desc
->
£rva˘v
 =

980 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x01);

981 
desc
->
cdb_Àn
 =

982 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 6);

984 
Àn
 -= 8;

985 
i
 += 8;

988 i‡(!
desc
->
˘dp
) {

992 
desc
->
to
.
des¸ùt‹_Àngth
 =

993 
	`èsk_gë_uöt16
(
èsk
, 
i
);

994 
desc
->
to
.
comm™d_•ecific
 =

995 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

996 
desc
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

997 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

998 
desc
->
to
.
ªcommíded_timeout
 =

999 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1001 
Àn
 -
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1002 
i
 +
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1004  
rsoc
;

1005 
SCSI_REPORT_SUPPORTING_OPCODE
:

1006 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

1007 
rsoc_⁄e
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
));

1008 i‡(
rsoc_⁄e
 =
NULL
) {

1009  
NULL
;

1012 
rsoc_⁄e
->
˘dp
 =

1013 !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1014 
rsoc_⁄e
->
suµ‹t
 =

1015 
	`èsk_gë_uöt8
(
èsk
, 1) & 0x07;

1016 
rsoc_⁄e
->
cdb_Àngth
 =

1017 
	`èsk_gë_uöt16
(
èsk
, 2);

1018 if(
rsoc_⁄e
->
cdb_Àngth
 <= 16) {

1019 
	`mem˝y
(
rsoc_⁄e
->
cdb_ußge_d©a
,

1020 &
èsk
->
d©aö
.
d©a
[4],

1021 
rsoc_⁄e
->
cdb_Àngth
);

1024 i‡(
rsoc_⁄e
->
˘dp
) {

1025 
i
 = 4 + 
rsoc_⁄e
->
cdb_Àngth
;

1027 
rsoc_⁄e
->
to
.
des¸ùt‹_Àngth
 =

1028 
	`èsk_gë_uöt16
(
èsk
, 
i
);

1029 
rsoc_⁄e
->
to
.
comm™d_•ecific
 =

1030 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

1031 
rsoc_⁄e
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

1032 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

1033 
rsoc_⁄e
->
to
.
ªcommíded_timeout
 =

1034 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1036  
rsoc_⁄e
;

1040  
NULL
;

1041 
	}
}

1046 
scsi_èsk
 *

1047 
	$scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
scsi_›code
 
›code
, 
ß
, 
uöt32_t
 
Æloc_Àn
)

1049 
scsi_èsk
 *
èsk
;

1051 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1052 i‡(
èsk
 =
NULL
) {

1053  
NULL
;

1056 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1057 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MAINTENANCE_IN
;

1058 
èsk
->
cdb
[1] = 
SCSI_REPORT_SUPPORTED_OP_CODES
;

1059 
èsk
->
cdb
[2] = 
›ti⁄s
 & 0x07;

1061 i‡(
r˘d
) {

1062 
èsk
->
cdb
[2] |= 0x80;

1065 
èsk
->
cdb
[3] = 
›code
;

1067 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[4], 
ß
);

1069 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

1071 
èsk
->
cdb_size
 = 12;

1072 i‡(
Æloc_Àn
 != 0) {

1073 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1075 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1077 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1079  
èsk
;

1080 
	}
}

1087 
	$scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
 
_U_
)

1090 
	}
}

1095 
scsi_ªadˇ∑côy10
 *

1096 
	$scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1098 
scsi_ªadˇ∑côy10
 *
rc10
;

1100 i‡(
èsk
->
d©aö
.
size
 < 8) {

1101  
NULL
;

1103 
rc10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªadˇ∑côy10
));

1104 i‡(
rc10
 =
NULL
) {

1105  
NULL
;

1108 
rc10
->
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1109 
rc10
->
block_size
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

1111  
rc10
;

1112 
	}
}

1117 
scsi_èsk
 *

1118 
	$scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
Æloc_Àn
)

1120 
scsi_èsk
 *
èsk
;

1122 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1123 i‡(
èsk
 =
NULL
) {

1124  
NULL
;

1127 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1128 
èsk
->
cdb
[0] = 
SCSI_OPCODE_INQUIRY
;

1130 i‡(
evpd
) {

1131 
èsk
->
cdb
[1] |= 0x01;

1134 
èsk
->
cdb
[2] = 
∑ge_code
;

1136 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[3], 
Æloc_Àn
);

1138 
èsk
->
cdb_size
 = 6;

1139 i‡(
Æloc_Àn
 != 0) {

1140 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1142 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1144 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1146  
èsk
;

1147 
	}
}

1149 
ölöe
 

1150 
	$scsi_öquúy_evpd_£t
(c⁄° 
scsi_èsk
 *
èsk
)

1152  
èsk
->
cdb
[1] & 0x1;

1153 
	}
}

1155 
ölöe
 
uöt8_t


1156 
	$scsi_öquúy_∑ge_code
(c⁄° 
scsi_èsk
 *
èsk
)

1158  
èsk
->
cdb
[2];

1159 
	}
}

1166 
	$scsi_öquúy_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

1168 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1169  
	`èsk_gë_uöt8
(
èsk
, 4) + 5;

1172 
	`scsi_öquúy_∑ge_code
(
èsk
)) {

1173 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1174 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1175 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1176  
	`èsk_gë_uöt8
(
èsk
, 3) + 4;

1177 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1178 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1179 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1180  
	`èsk_gë_uöt16
(
èsk
, 2) + 4;

1184 
	}
}

1186 
scsi_öquúy_°™d¨d
 *

1187 
	$scsi_öquúy_unm¨shÆl_°™d¨d
(
scsi_èsk
 *
èsk
)

1189 
i
;

1191 
scsi_öquúy_°™d¨d
 *
öq
 = 
	`scsi_mÆloc
(
èsk
, (*inq));

1192 i‡(
öq
 =
NULL
) {

1193  
NULL
;

1196 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1197 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1198 
öq
->
rmb
 = !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1199 
öq
->
vîsi⁄
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

1200 
öq
->
n‹maˇ
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x20);

1201 
öq
->
hisup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x10);

1202 
öq
->
ª•⁄£_d©a_f‹m©
 = 
	`èsk_gë_uöt8
(
èsk
, 3) & 0x0f;

1204 
öq
->
addôi⁄Æ_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1206 
öq
->
sccs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1207 
öq
->
acc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1208 
öq
->
çgs
 = (
	`èsk_gë_uöt8
(
èsk
, 5) >> 4) & 0x03;

1209 
öq
->
thªïc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x08);

1210 
öq
->
¥Ÿe˘
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1212 
öq
->
íc£rv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x40);

1213 
öq
->
mu…ù
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x10);

1214 
öq
->
addr16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x01);

1215 
öq
->
wbus16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x20);

1216 
öq
->
sync
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x10);

1217 
öq
->
cmdque
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x02);

1219 
	`mem˝y
(&
öq
->
víd‹_idítifiˇti⁄
[0],

1220 &
èsk
->
d©aö
.
d©a
[8], 8);

1221 
	`mem˝y
(&
öq
->
¥odu˘_idítifiˇti⁄
[0],

1222 &
èsk
->
d©aö
.
d©a
[16], 16);

1223 
	`mem˝y
(&
öq
->
¥odu˘_ªvisi⁄_Àvñ
[0],

1224 &
èsk
->
d©aö
.
d©a
[32], 4);

1226 
öq
->
˛ockög
 = (
	`èsk_gë_uöt8
(
èsk
, 56) >> 2) & 0x03;

1227 
öq
->
qas
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x02);

1228 
öq
->
ius
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x01);

1230 
i
 = 0; i < 8; i++) {

1231 
öq
->
vîsi⁄_des¸ùt‹
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, 58 + i * 2);

1234  
öq
;

1235 
	}
}

1237 
scsi_öquúy_suµ‹ãd_∑ges
 *

1238 
	$scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
scsi_èsk
 *
èsk
)

1240 
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1241 (*
öq
));

1242 i‡(
öq
 =
NULL
) {

1243  
NULL
;

1245 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1246 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1247 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1249 
öq
->
num_∑ges
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

1250 
öq
->
∑ges
 = 
	`scsi_mÆloc
(
èsk
, inq->
num_∑ges
);

1251 i‡(
öq
->
∑ges
 =
NULL
) {

1252 
	`‰ì
 (
öq
);

1253  
NULL
;

1255 
	`mem˝y
(
öq
->
∑ges
, &
èsk
->
d©aö
.
d©a
[4], inq->
num_∑ges
);

1256  
öq
;

1257 
	}
}

1259 
scsi_öquúy_unô_£rül_numbî
 *

1260 
	$scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
scsi_èsk
* 
èsk
)

1262 
scsi_öquúy_unô_£rül_numbî
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1263 (*
öq
));

1264 i‡(
öq
 =
NULL
) {

1265  
NULL
;

1267 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1268 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1269 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1271 
öq
->
u¢
 = 
	`scsi_mÆloc
(
èsk
, 
	`èsk_gë_uöt8
(task, 3) + 1);

1272 i‡(
öq
->
u¢
 =
NULL
) {

1273 
	`‰ì
(
öq
);

1274  
NULL
;

1276 
	`mem˝y
(
öq
->
u¢
, &
èsk
->
d©aö
.
d©a
[4], 
	`èsk_gë_uöt8
(task, 3));

1277 
öq
->
u¢
[
	`èsk_gë_uöt8
(
èsk
, 3)] = 0;

1278  
öq
;

1279 
	}
}

1281 
scsi_öquúy_devi˚_idítifiˇti⁄
 *

1282 
	$scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
scsi_èsk
 *
èsk
)

1284 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1285 (*
öq
));

1286 
ªmaöög
 = 
	`èsk_gë_uöt16
(
èsk
, 2);

1287 *
d±r
;

1289 i‡(
öq
 =
NULL
) {

1290  
NULL
;

1292 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1293 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1294 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1296 
d±r
 = &
èsk
->
d©aö
.
d©a
[4];

1297 
ªmaöög
 > 0) {

1298 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 =

1299 
	`scsi_mÆloc
(
èsk
, (*
dev
));

1300 i‡(
dev
 =
NULL
) {

1301 
îr
;

1304 
dev
->
√xt
 = 
öq
->
desig«t‹s
;

1305 
öq
->
desig«t‹s
 = 
dev
;

1307 
dev
->
¥Ÿocﬁ_idítifõr
 = (
d±r
[0]>>4) & 0x0f;

1308 
dev
->
code_£t
 = 
d±r
[0] & 0x0f;

1309 
dev
->
piv
 = !!(
d±r
[1]&0x80);

1310 
dev
->
assocüti⁄
 = (
d±r
[1]>>4)&0x03;

1311 
dev
->
desig«t‹_ty≥
 = 
d±r
[1]&0x0f;

1313 
dev
->
desig«t‹_Àngth
 = 
d±r
[3];

1314 
dev
->
desig«t‹
 = 
	`scsi_mÆloc
(
èsk
, dev->
desig«t‹_Àngth
 + 1);

1315 i‡(
dev
->
desig«t‹
 =
NULL
) {

1316 
îr
;

1318 
dev
->
desig«t‹
[dev->
desig«t‹_Àngth
] = 0;

1319 
	`mem˝y
(
dev
->
desig«t‹
, &
d±r
[4],

1320 
dev
->
desig«t‹_Àngth
);

1322 
ªmaöög
 -= 4;

1323 
ªmaöög
 -
dev
->
desig«t‹_Àngth
;

1325 
d±r
 +
dev
->
desig«t‹_Àngth
 + 4;

1327  
öq
;

1329 
îr
:

1330 
öq
->
desig«t‹s
) {

1331 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 = 
öq
->
desig«t‹s
;

1332 
öq
->
desig«t‹s
 = 
dev
->
√xt
;

1333 
	`‰ì
(
dev
->
desig«t‹
);

1334 
	`‰ì
(
dev
);

1337 
	`‰ì
(
öq
);

1338  
NULL
;

1339 
	}
}

1341 
scsi_öquúy_block_limôs
 *

1342 
	$scsi_öquúy_unm¨shÆl_block_limôs
(
scsi_èsk
 *
èsk
)

1344 
scsi_öquúy_block_limôs
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1345 (*
öq
));

1346 i‡(
öq
 =
NULL
) {

1347  
NULL
;

1349 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1350 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1351 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1353 
öq
->
w¢z
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

1354 
öq
->
max_cmp
 = 
	`èsk_gë_uöt8
(
èsk
, 5);

1355 
öq
->
›t_gøn
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

1356 
öq
->
max_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

1357 
öq
->
›t_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 12);

1358 
öq
->
max_¥e„tch
 = 
	`èsk_gë_uöt32
(
èsk
, 16);

1359 
öq
->
max_unm≠
 = 
	`èsk_gë_uöt32
(
èsk
, 20);

1360 
öq
->
max_unm≠_bdc
 = 
	`èsk_gë_uöt32
(
èsk
, 24);

1361 
öq
->
›t_unm≠_gøn
 = 
	`èsk_gë_uöt32
(
èsk
, 28);

1362 
öq
->
ugavÆid
 = !!(
	`èsk_gë_uöt8
(
èsk
, 32)&0x80);

1363 
öq
->
unm≠_gøn_Æign
 = 
	`èsk_gë_uöt32
(
èsk
, 32) & 0x7fffffff;

1364 
öq
->
max_ws_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 36);

1365 
öq
->
max_ws_Àn
 = (inq->max_ws_len << 32)

1366 | 
	`èsk_gë_uöt32
(
èsk
, 40);

1368  
öq
;

1369 
	}
}

1371 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *

1372 
	$scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
scsi_èsk
 *
èsk
)

1374 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
 =

1375 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1376 i‡(
öq
 =
NULL
) {

1377  
NULL
;

1379 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1380 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1381 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1383 
öq
->
medium_rŸ©i⁄_øã
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

1384 
öq
->
¥odu˘_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6);

1385 
öq
->
wabîeq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 6) & 0x03;

1386 
öq
->
wa˚ªq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 4) & 0x03;

1387 
öq
->
nomöÆ_f‹m_Á˘‹
 = 
	`èsk_gë_uöt8
(
èsk
, 7) & 0x0f;

1388 
öq
->
fuab
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x02);

1389 
öq
->
vbuls
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x01);

1390  
öq
;

1391 
	}
}

1393 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *

1394 
	$scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
scsi_èsk
 *
èsk
)

1396 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
 =

1397 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1398 i‡(
öq
 =
NULL
) {

1399  
NULL
;

1401 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1402 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1403 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1405 
öq
->
thªshﬁd_exp⁄ít
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1406 
öq
->
lbpu
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1407 
öq
->
lbpws
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1408 
öq
->
lbpws10
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x20);

1409 
öq
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x04);

1410 
öq
->
™c_sup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x02);

1411 
öq
->
dp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1412 
öq
->
¥ovisi⁄ög_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6) & 0x07;

1414  
öq
;

1415 
	}
}

1421 
	$scsi_öquúy_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1423 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1424  
	`scsi_öquúy_unm¨shÆl_°™d¨d
(
èsk
);

1427 
	`scsi_öquúy_∑ge_code
(
èsk
))

1429 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1430  
	`scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
èsk
);

1431 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1432  
	`scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
èsk
);

1433 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1434  
	`scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
èsk
);

1435 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1436  
	`scsi_öquúy_unm¨shÆl_block_limôs
(
èsk
);

1437 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1438  
	`scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
èsk
);

1439 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1440  
	`scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
èsk
);

1442  
NULL
;

1444 
	}
}

1449 
scsi_èsk
 *

1450 
	$scsi_cdb_ªad6
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
)

1452 
scsi_èsk
 *
èsk
;

1453 
num_blocks
;

1455 
num_blocks
 = 
x„æí
/
blocksize
;

1456 i‡(
num_blocks
 > 256) {

1457  
NULL
;

1460 i‡(
lba
 > 0x1fffff) {

1461  
NULL
;

1464 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1465 i‡(
èsk
 =
NULL
) {

1466  
NULL
;

1469 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1470 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

1471 
èsk
->
cdb_size
 = 6;

1473 
èsk
->
cdb
[1] = (
lba
>>16)&0x1f;

1474 
èsk
->
cdb
[2] = (
lba
>> 8)&0xff;

1475 
èsk
->
cdb
[3] = (
lba
 )&0xff;

1477 i‡(
num_blocks
 < 256) {

1478 
èsk
->
cdb
[4] = 
num_blocks
 & 0xff;

1481 i‡(
x„æí
 != 0) {

1482 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1484 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1486 
èsk
->
expx„æí
 = 
x„æí
;

1488  
èsk
;

1489 
	}
}

1494 
scsi_èsk
 *

1495 
	$scsi_cdb_ªad10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1497 
scsi_èsk
 *
èsk
;

1499 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1500 i‡(
èsk
 =
NULL
) {

1501  
NULL
;

1504 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1505 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

1507 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1508 i‡(
dpo
) {

1509 
èsk
->
cdb
[1] |= 0x10;

1511 i‡(
fua
) {

1512 
èsk
->
cdb
[1] |= 0x08;

1514 i‡(
fua_nv
) {

1515 
èsk
->
cdb
[1] |= 0x02;

1518 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1519 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1521 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1523 
èsk
->
cdb_size
 = 10;

1524 i‡(
x„æí
 != 0) {

1525 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1527 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1529 
èsk
->
expx„æí
 = 
x„æí
;

1531  
èsk
;

1532 
	}
}

1537 
scsi_èsk
 *

1538 
	$scsi_cdb_ªad12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1540 
scsi_èsk
 *
èsk
;

1542 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1543 i‡(
èsk
 =
NULL
) {

1544  
NULL
;

1547 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1548 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

1550 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1551 i‡(
dpo
) {

1552 
èsk
->
cdb
[1] |= 0x10;

1554 i‡(
fua
) {

1555 
èsk
->
cdb
[1] |= 0x08;

1557 i‡(
fua_nv
) {

1558 
èsk
->
cdb
[1] |= 0x02;

1561 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1562 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1564 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1566 
èsk
->
cdb_size
 = 12;

1567 i‡(
x„æí
 != 0) {

1568 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1570 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1572 
èsk
->
expx„æí
 = 
x„æí
;

1574  
èsk
;

1575 
	}
}

1580 
scsi_èsk
 *

1581 
	$scsi_cdb_ªad16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1583 
scsi_èsk
 *
èsk
;

1585 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1586 i‡(
èsk
 =
NULL
) {

1587  
NULL
;

1590 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1591 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

1593 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1594 i‡(
dpo
) {

1595 
èsk
->
cdb
[1] |= 0x10;

1597 i‡(
fua
) {

1598 
èsk
->
cdb
[1] |= 0x08;

1600 i‡(
fua_nv
) {

1601 
èsk
->
cdb
[1] |= 0x02;

1604 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1605 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1606 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1608 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1610 
èsk
->
cdb_size
 = 16;

1611 i‡(
x„æí
 != 0) {

1612 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1614 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1616 
èsk
->
expx„æí
 = 
x„æí
;

1618  
èsk
;

1619 
	}
}

1624 
scsi_èsk
 *

1625 
	$scsi_cdb_wrôe10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1627 
scsi_èsk
 *
èsk
;

1629 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1630 i‡(
èsk
 =
NULL
) {

1631  
NULL
;

1634 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1635 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

1637 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1638 i‡(
dpo
) {

1639 
èsk
->
cdb
[1] |= 0x10;

1641 i‡(
fua
) {

1642 
èsk
->
cdb
[1] |= 0x08;

1644 i‡(
fua_nv
) {

1645 
èsk
->
cdb
[1] |= 0x02;

1648 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1649 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1651 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1653 
èsk
->
cdb_size
 = 10;

1654 i‡(
x„æí
 != 0) {

1655 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1657 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1659 
èsk
->
expx„æí
 = 
x„æí
;

1661  
èsk
;

1662 
	}
}

1667 
scsi_èsk
 *

1668 
	$scsi_cdb_wrôe12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1670 
scsi_èsk
 *
èsk
;

1672 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1673 i‡(
èsk
 =
NULL
) {

1674  
NULL
;

1677 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1678 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

1680 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1681 i‡(
dpo
) {

1682 
èsk
->
cdb
[1] |= 0x10;

1684 i‡(
fua
) {

1685 
èsk
->
cdb
[1] |= 0x08;

1687 i‡(
fua_nv
) {

1688 
èsk
->
cdb
[1] |= 0x02;

1691 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1692 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1694 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1696 
èsk
->
cdb_size
 = 12;

1697 i‡(
x„æí
 != 0) {

1698 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1700 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1702 
èsk
->
expx„æí
 = 
x„æí
;

1704  
èsk
;

1705 
	}
}

1710 
scsi_èsk
 *

1711 
	$scsi_cdb_wrôe16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1713 
scsi_èsk
 *
èsk
;

1715 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1716 i‡(
èsk
 =
NULL
) {

1717  
NULL
;

1720 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1721 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

1723 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1724 i‡(
dpo
) {

1725 
èsk
->
cdb
[1] |= 0x10;

1727 i‡(
fua
) {

1728 
èsk
->
cdb
[1] |= 0x08;

1730 i‡(
fua_nv
) {

1731 
èsk
->
cdb
[1] |= 0x02;

1734 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1735 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1736 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
 / 
blocksize
);

1738 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1740 
èsk
->
cdb_size
 = 16;

1741 i‡(
x„æí
 != 0) {

1742 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1744 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1746 
èsk
->
expx„æí
 = 
x„æí
;

1748  
èsk
;

1749 
	}
}

1754 
scsi_èsk
 *

1755 
	$scsi_cdb_‹wrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1757 
scsi_èsk
 *
èsk
;

1759 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1760 i‡(
èsk
 =
NULL
) {

1761  
NULL
;

1764 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1765 
èsk
->
cdb
[0] = 
SCSI_OPCODE_ORWRITE
;

1767 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1768 i‡(
dpo
) {

1769 
èsk
->
cdb
[1] |= 0x10;

1771 i‡(
fua
) {

1772 
èsk
->
cdb
[1] |= 0x08;

1774 i‡(
fua_nv
) {

1775 
èsk
->
cdb
[1] |= 0x02;

1778 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1779 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1780 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1782 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1784 
èsk
->
cdb_size
 = 16;

1785 i‡(
x„æí
 != 0) {

1786 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1788 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1790 
èsk
->
expx„æí
 = 
x„æí
;

1792  
èsk
;

1793 
	}
}

1798 
scsi_èsk
 *

1799 
	$scsi_cdb_com∑ª™dwrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1801 
scsi_èsk
 *
èsk
;

1803 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1804 i‡(
èsk
 =
NULL
) {

1805  
NULL
;

1808 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1809 
èsk
->
cdb
[0] = 
SCSI_OPCODE_COMPARE_AND_WRITE
;

1811 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1812 i‡(
dpo
) {

1813 
èsk
->
cdb
[1] |= 0x10;

1815 i‡(
fua
) {

1816 
èsk
->
cdb
[1] |= 0x08;

1818 i‡(
fua_nv
) {

1819 
èsk
->
cdb
[1] |= 0x02;

1822 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1823 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1824 
èsk
->
cdb
[13] = 
x„æí
 / 
blocksize
 / 2;

1826 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1827 
èsk
->
cdb_size
 = 16;

1828 i‡(
x„æí
 != 0) {

1829 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1831 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1833 
èsk
->
expx„æí
 = 
x„æí
;

1835  
èsk
;

1836 
	}
}

1841 
scsi_èsk
 *

1842 
	$scsi_cdb_vîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1844 
scsi_èsk
 *
èsk
;

1846 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1847 i‡(
èsk
 =
NULL
) {

1848  
NULL
;

1851 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1852 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY10
;

1854 i‡(
v¥Ÿe˘
) {

1855 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1857 i‡(
dpo
) {

1858 
èsk
->
cdb
[1] |= 0x10;

1860 i‡(
bytchk
) {

1861 
èsk
->
cdb
[1] |= 0x02;

1864 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1865 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1867 
èsk
->
cdb_size
 = 10;

1868 i‡(
x„æí
 !0 && 
bytchk
) {

1869 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1870 
èsk
->
expx„æí
 = 
x„æí
;

1872 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1873 
èsk
->
expx„æí
 = 0;

1876  
èsk
;

1877 
	}
}

1882 
scsi_èsk
 *

1883 
	$scsi_cdb_vîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1885 
scsi_èsk
 *
èsk
;

1887 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1888 i‡(
èsk
 =
NULL
) {

1889  
NULL
;

1892 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1893 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY12
;

1895 i‡(
v¥Ÿe˘
) {

1896 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1898 i‡(
dpo
) {

1899 
èsk
->
cdb
[1] |= 0x10;

1901 i‡(
bytchk
) {

1902 
èsk
->
cdb
[1] |= 0x02;

1905 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1906 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1908 
èsk
->
cdb_size
 = 12;

1909 i‡(
x„æí
 !0 && 
bytchk
) {

1910 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1911 
èsk
->
expx„æí
 = 
x„æí
;

1913 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1914 
èsk
->
expx„æí
 = 0;

1917  
èsk
;

1918 
	}
}

1923 
scsi_èsk
 *

1924 
	$scsi_cdb_vîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1926 
scsi_èsk
 *
èsk
;

1928 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1929 i‡(
èsk
 =
NULL
) {

1930  
NULL
;

1933 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1934 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY16
;

1936 i‡(
v¥Ÿe˘
) {

1937 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

1939 i‡(
dpo
) {

1940 
èsk
->
cdb
[1] |= 0x10;

1942 i‡(
bytchk
) {

1943 
èsk
->
cdb
[1] |= 0x02;

1946 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1947 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1948 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1950 
èsk
->
cdb_size
 = 16;

1951 i‡(
x„æí
 !0 && 
bytchk
) {

1952 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1953 
èsk
->
expx„æí
 = 
x„æí
;

1955 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1956 
èsk
->
expx„æí
 = 0;

1959  
èsk
;

1960 
	}
}

1965 
scsi_èsk
 *

1966 
	$scsi_cdb_unm≠
(
™ch‹
, 
group
, 
uöt16_t
 
x„æí
)

1968 
scsi_èsk
 *
èsk
;

1970 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1971 i‡(
èsk
 =
NULL
) {

1972  
NULL
;

1975 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1976 
èsk
->
cdb
[0] = 
SCSI_OPCODE_UNMAP
;

1978 i‡(
™ch‹
) {

1979 
èsk
->
cdb
[1] |= 0x01;

1981 
èsk
->
cdb
[6] |
group
 & 0x1f;

1983 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

1985 
èsk
->
cdb_size
 = 10;

1986 i‡(
x„æí
 != 0) {

1987 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1989 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1991 
èsk
->
expx„æí
 = 
x„æí
;

1993  
èsk
;

1994 
	}
}

1999 
scsi_èsk
 *

2000 
	$scsi_cdb_≥rsi°ít_ª£rve_ö
(
scsi_≥rsi°ít_ö_ß
 
ß
, 
uöt16_t
 
x„æí
)

2002 
scsi_èsk
 *
èsk
;

2004 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2005 i‡(
èsk
 =
NULL
) {

2006  
NULL
;

2009 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2010 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
;

2012 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2014 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

2016 
èsk
->
cdb_size
 = 10;

2017 i‡(
x„æí
 != 0) {

2018 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2020 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2022 
èsk
->
expx„æí
 = 
x„æí
;

2024  
èsk
;

2025 
	}
}

2030 
scsi_èsk
 *

2031 
	$scsi_cdb_≥rsi°ít_ª£rve_out
(
scsi_≥rsi°ít_out_ß
 
ß
, 
scsi_≥rsi°ít_out_sc›e
 
sc›e
, 
scsi_≥rsi°ít_out_ty≥
 
ty≥
, *
∑øm
)

2033 
scsi_èsk
 *
èsk
;

2034 
scsi_≥rsi°ít_ª£rve_out_basic
 *
basic
;

2035 
scsi_iovec
 *
iov
;

2036 *
buf
;

2037 
x„æí
;

2039 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2040 i‡(
èsk
 =
NULL
)

2041 
îr
;

2043 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2045 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

2046 i‡(
iov
 =
NULL
)

2047 
îr
;

2049 
ß
) {

2050 
SCSI_PERSISTENT_RESERVE_REGISTER
:

2051 
SCSI_PERSISTENT_RESERVE_RESERVE
:

2052 
SCSI_PERSISTENT_RESERVE_RELEASE
:

2053 
SCSI_PERSISTENT_RESERVE_CLEAR
:

2054 
SCSI_PERSISTENT_RESERVE_PREEMPT
:

2055 
SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT
:

2056 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
:

2057 
basic
 = 
∑øm
;

2059 
x„æí
 = 24;

2060 
buf
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

2061 i‡(
buf
 =
NULL
)

2062 
îr
;

2064 
	`mem£t
(
buf
, 0, 
x„æí
);

2065 
	`scsi_£t_uöt64
(&
buf
[0], 
basic
->
ª£rv©i⁄_key
);

2066 
	`scsi_£t_uöt64
(&
buf
[8], 
basic
->
£rvi˚_a˘i⁄_ª£rv©i⁄_key
);

2067 i‡(
basic
->
•ec_i_±
) {

2068 
buf
[20] |= 0x08;

2070 i‡(
basic
->
Æl_tg_±
) {

2071 
buf
[20] |= 0x04;

2073 i‡(
basic
->
≠çl
) {

2074 
buf
[20] |= 0x01;

2077 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE
:

2079 
îr
;

2081 
îr
;

2084 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_OUT
;

2085 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2086 
èsk
->
cdb
[2] = ((
sc›e
 << 4Ë& 0xf0Ë| (
ty≥
 & 0x0f);

2088 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[5], 
x„æí
);

2090 
èsk
->
cdb_size
 = 10;

2091 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2092 
èsk
->
expx„æí
 = 
x„æí
;

2094 
iov
->
iov_ba£
 = 
buf
;

2095 
iov
->
iov_Àn
 = 
x„æí
;

2096 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

2098  
èsk
;

2100 
îr
:

2101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2102  
NULL
;

2103 
	}
}

2108 
scsi_èsk
 *

2109 
	$scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt32_t
 
lba
, 
group
, 
uöt16_t
 
num_blocks
)

2111 
scsi_èsk
 *
èsk
;

2113 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2114 i‡(
èsk
 =
NULL
) {

2115  
NULL
;

2118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME10
;

2121 i‡(
wΩrŸe˘
) {

2122 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2124 i‡(
™ch‹
) {

2125 
èsk
->
cdb
[1] |= 0x10;

2127 i‡(
unm≠
) {

2128 
èsk
->
cdb
[1] |= 0x08;

2130 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2131 i‡(
group
) {

2132 
èsk
->
cdb
[6] |(
group
 & 0x1f);

2134 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2136 
èsk
->
cdb_size
 = 10;

2137 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2138 
èsk
->
expx„æí
 = 512;

2140  
èsk
;

2141 
	}
}

2146 
scsi_èsk
 *

2147 
	$scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt64_t
 
lba
, 
group
, 
uöt32_t
 
num_blocks
)

2149 
scsi_èsk
 *
èsk
;

2151 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2152 i‡(
èsk
 =
NULL
) {

2153  
NULL
;

2156 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2157 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME16
;

2159 i‡(
wΩrŸe˘
) {

2160 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2162 i‡(
™ch‹
) {

2163 
èsk
->
cdb
[1] |= 0x10;

2165 i‡(
unm≠
) {

2166 
èsk
->
cdb
[1] |= 0x08;

2168 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2169 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2170 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

2171 i‡(
group
) {

2172 
èsk
->
cdb
[14] |(
group
 & 0x1f);

2175 
èsk
->
cdb_size
 = 16;

2176 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2177 
èsk
->
expx„æí
 = 512;

2179  
èsk
;

2180 
	}
}

2185 
scsi_èsk
 *

2186 
	$scsi_cdb_mode£n£6
(
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2187 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2188 
sub_∑ge_code
, 
Æloc_Àn
)

2190 
scsi_èsk
 *
èsk
;

2192 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2193 i‡(
èsk
 =
NULL
) {

2194  
NULL
;

2197 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2198 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE6
;

2200 i‡(
dbd
) {

2201 
èsk
->
cdb
[1] |= 0x08;

2203 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2204 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2205 
èsk
->
cdb
[4] = 
Æloc_Àn
;

2207 
èsk
->
cdb_size
 = 6;

2208 i‡(
Æloc_Àn
 != 0) {

2209 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2211 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2213 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2215  
èsk
;

2216 
	}
}

2221 
scsi_èsk
 *

2222 
	$scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2223 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2224 
sub_∑ge_code
, 
Æloc_Àn
)

2226 
scsi_èsk
 *
èsk
;

2228 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2229 i‡(
èsk
 =
NULL
) {

2230  
NULL
;

2233 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2234 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE10
;

2236 i‡(
ŒbØ
) {

2237 
èsk
->
cdb
[1] |= 0x10;

2239 i‡(
dbd
) {

2240 
èsk
->
cdb
[1] |= 0x08;

2242 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2243 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2245 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

2247 
èsk
->
cdb_size
 = 10;

2248 i‡(
Æloc_Àn
 != 0) {

2249 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2251 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2253 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2255  
èsk
;

2256 
	}
}

2261 
scsi_èsk
 *

2262 
	$scsi_cdb_mode£À˘6
(
pf
, 
•
, 
∑øm_Àn
)

2264 
scsi_èsk
 *
èsk
;

2266 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2267 i‡(
èsk
 =
NULL
) {

2268  
NULL
;

2271 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2272 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT6
;

2274 i‡(
pf
) {

2275 
èsk
->
cdb
[1] |= 0x10;

2277 i‡(
•
) {

2278 
èsk
->
cdb
[1] |= 0x01;

2280 
èsk
->
cdb
[4] = 
∑øm_Àn
;

2282 
èsk
->
cdb_size
 = 6;

2283 i‡(
∑øm_Àn
 != 0) {

2284 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2286 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2288 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2290  
èsk
;

2291 
	}
}

2296 
scsi_èsk
 *

2297 
	$scsi_cdb_mode£À˘10
(
pf
, 
•
, 
∑øm_Àn
)

2299 
scsi_èsk
 *
èsk
;

2301 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2302 i‡(
èsk
 =
NULL
) {

2303  
NULL
;

2306 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2307 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT10
;

2309 i‡(
pf
) {

2310 
èsk
->
cdb
[1] |= 0x10;

2312 i‡(
•
) {

2313 
èsk
->
cdb
[1] |= 0x01;

2316 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

2318 
èsk
->
cdb_size
 = 10;

2319 i‡(
∑øm_Àn
 != 0) {

2320 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2322 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2324 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2326  
èsk
;

2327 
	}
}

2329 
scsi_mode_∑ge
 *

2330 
	$scsi_mode£n£_gë_∑ge
(
scsi_mode_£n£
 *
ms
,

2331 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2332 
sub∑ge_code
)

2334 
scsi_mode_∑ge
 *
mp
;

2336 
mp
 = 
ms
->
∑ges
; mp; m∞mp->
√xt
) {

2337 i‡(
mp
->
∑ge_code
 ==Öage_code

2338 && 
mp
->
sub∑ge_code
 == subpage_code) {

2339  
mp
;

2342  
NULL
;

2343 
	}
}

2351 
	$scsi_mode£n£_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2353 
Àn
;

2355 i‡(
is_mode£n£6
) {

2356 
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 0) + 1;

2358 
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

2361  
Àn
;

2362 
	}
}

2365 
	$scsi_∑r£_mode_ˇchög
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2367 
mp
->
ˇchög
.
ic
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2368 
mp
->
ˇchög
.
abpf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40);

2369 
mp
->
ˇchög
.
ˇp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2370 
mp
->
ˇchög
.
disc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2371 
mp
->
ˇchög
.
size
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2372 
mp
->
ˇchög
.
w˚
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2373 
mp
->
ˇchög
.
mf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2374 
mp
->
ˇchög
.
rcd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2376 
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 =

2377 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2378 
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 =

2379 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2381 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
 =

2382 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2383 
mp
->
ˇchög
.
möimum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2384 
mp
->
ˇchög
.
maximum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2385 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2387 
mp
->
ˇchög
.
fsw
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2388 
mp
->
ˇchög
.
lbcss
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x40);

2389 
mp
->
ˇchög
.
dø
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x20);

2390 
mp
->
ˇchög
.
nv_dis
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x01);

2392 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 11);

2393 
mp
->
ˇchög
.
ˇche_£gmít_size
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2394 
	}
}

2397 
	$scsi_∑r£_mode_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2399 
mp
->
c⁄åﬁ
.
t°
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 5) & 0x07;

2400 
mp
->
c⁄åﬁ
.
tmf_⁄ly
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2401 
mp
->
c⁄åﬁ
.
dpicz
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2402 
mp
->
c⁄åﬁ
.
d_£n£
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2403 
mp
->
c⁄åﬁ
.
g…sd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2404 
mp
->
c⁄åﬁ
.
æec
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2406 
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 =

2407 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2408 
mp
->
c⁄åﬁ
.
nu¨
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08;

2409 
mp
->
c⁄åﬁ
.
qîr
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 1) & 0x03;

2411 
mp
->
c⁄åﬁ
.
vs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x80);

2412 
mp
->
c⁄åﬁ
.
øc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x40);

2413 
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 =

2414 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) >> 4) & 0x0f;

2415 
mp
->
c⁄åﬁ
.
swp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x08);

2417 
mp
->
c⁄åﬁ
.
©o
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x80);

2418 
mp
->
c⁄åﬁ
.
ès
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x40);

2419 
mp
->
c⁄åﬁ
.
©m≥
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x20);

2420 
mp
->
c⁄åﬁ
.
rwwp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x10);

2421 
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x07);

2423 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
 =

2424 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2425 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
 =

2426 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2427 
	}
}

2430 
	$scsi_∑r£_mode_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2432 
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 =

2433 (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 6) & 0x03;

2434 
mp
->
powî_c⁄dôi⁄
.
°™dby_y
 =

2435 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2437 
mp
->
powî_c⁄dôi⁄
.
idÀ_c
 =

2438 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08);

2439 
mp
->
powî_c⁄dôi⁄
.
idÀ_b
 =

2440 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x04);

2441 
mp
->
powî_c⁄dôi⁄
.
idÀ_a
 =

2442 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x02);

2443 
mp
->
powî_c⁄dôi⁄
.
°™dby_z
 =

2444 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x01);

2446 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
 =

2447 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2448 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
 =

2449 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2450 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
 =

2451 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 10);

2452 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
 =

2453 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 14);

2454 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
 =

2455 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 18);

2457 
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 =

2458 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 6) & 0x03;

2459 
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 =

2460 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 4) & 0x03;

2461 
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 =

2462 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 2) & 0x03;

2463 
	}
}

2466 
	$scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2468 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
 =

2469 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2470 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
 =

2471 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1);

2472 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
 =

2473 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2474 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
 =

2475 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2476 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
 =

2477 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2478 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
 =

2479 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2480 
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
 =

2481 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2482 
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 =

2483 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) >> 4) & 0x0f;

2484 
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
 =

2485 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x08);

2486 
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 =

2487 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x07;

2488 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
 =

2489 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2490 
	}
}

2493 
	$scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2495 
mp
->
õc
.
≥rf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2496 
mp
->
õc
.
ebf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2497 
mp
->
õc
.
ewasc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2498 
mp
->
õc
.
dex˝t
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2499 
mp
->
õc
.
ã°
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2500 
mp
->
õc
.
ebackîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2501 
mp
->
õc
.
logîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2502 
mp
->
õc
.
mrõ
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2503 
mp
->
õc
.
öãrvÆ_timî
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2504 
mp
->
õc
.
ªp‹t_cou¡
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2505 
	}
}

2511 
scsi_mode_£n£
 *

2512 
	$scsi_mode£n£_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2514 
scsi_mode_£n£
 *
ms
;

2515 
hdr_Àn
;

2516 
pos
;

2518 i‡(
is_mode£n£6
) {

2519 
hdr_Àn
 = 4;

2521 
hdr_Àn
 = 8;

2524 i‡(
èsk
->
d©aö
.
size
 < 
hdr_Àn
) {

2525  
NULL
;

2528 
ms
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_£n£
));

2529 i‡(
ms
 =
NULL
) {

2530  
NULL
;

2533 i‡(
is_mode£n£6
) {

2534 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 0);

2535 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

2536 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2537 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2538 
ms
->
∑ges
 = 
NULL
;

2540 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

2541 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2542 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2543 
ms
->
l⁄glba
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

2544 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

2545 
ms
->
∑ges
 = 
NULL
;

2548 i‡(
ms
->
mode_d©a_Àngth
 + 1 > 
èsk
->
d©aö
.
size
) {

2549  
NULL
;

2552 
pos
 = 
hdr_Àn
 + 
ms
->
block_des¸ùt‹_Àngth
;

2553 
pos
 < 
èsk
->
d©aö
.
size
) {

2554 
scsi_mode_∑ge
 *
mp
;

2556 
mp
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_∑ge
));

2557 i‡(
mp
 =
NULL
) {

2558  
ms
;

2560 
mp
->
ps
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80;

2561 
mp
->
•f
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40;

2562 
mp
->
∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x3f;

2563 
pos
++;

2565 i‡(
mp
->
•f
) {

2566 
mp
->
sub∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2567 
mp
->
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 1);

2568 
pos
 += 3;

2570 
mp
->
sub∑ge_code
 = 0;

2571 
mp
->
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2572 
pos
++;

2575 
mp
->
∑ge_code
) {

2576 
SCSI_MODEPAGE_CACHING
:

2577 
	`scsi_∑r£_mode_ˇchög
(
èsk
, 
pos
, 
mp
);

2579 
SCSI_MODEPAGE_CONTROL
:

2580 
	`scsi_∑r£_mode_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2582 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

2583 
	`scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
èsk
, 
pos
, 
mp
);

2585 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

2586 
	`scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2588 
SCSI_MODEPAGE_POWER_CONDITION
:

2589 
	`scsi_∑r£_mode_powî_c⁄dôi⁄
(
èsk
, 
pos
, 
mp
);

2597 
mp
->
√xt
 = 
ms
->
∑ges
;

2598 
ms
->
∑ges
 = 
mp
;

2600 
pos
 +
mp
->
Àn
;

2603  
ms
;

2604 
	}
}

2606 
scsi_d©a
 *

2607 
	$scsi_mode£n£_m¨shÆl_ˇchög
(
scsi_èsk
 *
èsk
,

2608 
scsi_mode_∑ge
 *
mp
,

2609 
hdr_size
)

2611 
scsi_d©a
 *
d©a
;

2613 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2615 
d©a
->
size
 = 20 + 
hdr_size
;

2616 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2618 i‡(
mp
->
ˇchög
.
ic
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2619 i‡(
mp
->
ˇchög
.
abpf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x40;

2620 i‡(
mp
->
ˇchög
.
ˇp
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2621 i‡(
mp
->
ˇchög
.
disc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2622 i‡(
mp
->
ˇchög
.
size
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2623 i‡(
mp
->
ˇchög
.
w˚
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2624 i‡(
mp
->
ˇchög
.
mf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2625 i‡(
mp
->
ˇchög
.
rcd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2627 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 << 4) & 0xf0;

2628 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 & 0x0f;

2630 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
);

2631 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
ˇchög
.
möimum_¥e„tch
);

2632 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
ˇchög
.
maximum_¥e„tch
);

2633 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
);

2635 i‡(
mp
->
ˇchög
.
fsw
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2636 i‡(
mp
->
ˇchög
.
lbcss
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x40;

2637 i‡(
mp
->
ˇchög
.
dø
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x20;

2638 i‡(
mp
->
ˇchög
.
nv_dis
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x01;

2640 
d©a
->d©a[
hdr_size
 + 13] = 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
;

2642 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
ˇchög
.
ˇche_£gmít_size
);

2644  
d©a
;

2645 
	}
}

2647 
scsi_d©a
 *

2648 
	$scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2649 
scsi_mode_∑ge
 *
mp
,

2650 
hdr_size
)

2652 
scsi_d©a
 *
d©a
;

2654 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2656 
d©a
->
size
 = 12 + 
hdr_size
;

2657 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2659 
d©a
->d©a[
hdr_size
 + 2] |(
mp
->
c⁄åﬁ
.
t°
 << 5) & 0xe0;

2660 i‡(
mp
->
c⁄åﬁ
.
tmf_⁄ly
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2661 i‡(
mp
->
c⁄åﬁ
.
dpicz
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2662 i‡(
mp
->
c⁄åﬁ
.
d_£n£
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2663 i‡(
mp
->
c⁄åﬁ
.
g…sd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2664 i‡(
mp
->
c⁄åﬁ
.
æec
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2666 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 << 4) & 0xf0;

2667 i‡(
mp
->
c⁄åﬁ
.
nu¨
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2668 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
qîr
 << 1) & 0x06;

2670 i‡(
mp
->
c⁄åﬁ
.
vs
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x80;

2671 i‡(
mp
->
c⁄åﬁ
.
øc
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x40;

2672 
d©a
->d©a[
hdr_size
 + 4] |(
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 << 4) & 0x30;

2673 i‡(
mp
->
c⁄åﬁ
.
swp
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x08;

2675 i‡(
mp
->
c⁄åﬁ
.
©o
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x80;

2676 i‡(
mp
->
c⁄åﬁ
.
ès
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x40;

2677 i‡(
mp
->
c⁄åﬁ
.
©m≥
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x20;

2678 i‡(
mp
->
c⁄åﬁ
.
rwwp
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x10;

2679 
d©a
->d©a[
hdr_size
 + 5] |
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 & 0x07;

2681 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
);

2682 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
);

2684  
d©a
;

2685 
	}
}

2687 
scsi_d©a
 *

2688 
	$scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
,

2689 
scsi_mode_∑ge
 *
mp
,

2690 
hdr_size
)

2692 
scsi_d©a
 *
d©a
;

2694 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2696 
d©a
->
size
 = 40 + 
hdr_size
;

2697 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2699 
d©a
->d©a[
hdr_size
 + 2] |=

2700 (
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 << 6) & 0xc0;

2701 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_y
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2703 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_c
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2704 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_b
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x04;

2705 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_a
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x02;

2706 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_z
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x01;

2708 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4],

2709 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
);

2710 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8],

2711 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
);

2712 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 12],

2713 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
);

2714 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 16],

2715 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
);

2716 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 20],

2717 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
);

2719 
d©a
->d©a[
hdr_size
 + 39] |=

2720 (
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 << 6) & 0xc0;

2721 
d©a
->d©a[
hdr_size
 + 39] |=

2722 (
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 << 4) & 0x30;

2723 
d©a
->d©a[
hdr_size
 + 39] |=

2724 (
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 << 2) & 0x0c;

2726  
d©a
;

2727 
	}
}

2729 
scsi_d©a
 *

2730 
	$scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
,

2731 
scsi_mode_∑ge
 *
mp
,

2732 
hdr_size
)

2734 
scsi_d©a
 *
d©a
;

2736 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2738 
d©a
->
size
 = 16 + 
hdr_size
;

2739 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2741 
d©a
->d©a[
hdr_size
 + 2] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
;

2742 
d©a
->d©a[
hdr_size
 + 3] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
;

2743 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
);

2744 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
);

2745 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
);

2746 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
);

2748 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2749 
d©a
->d©a[
hdr_size
 + 12] |(
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 << 4) & 0x70;

2750 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x08;

2751 
d©a
->d©a[
hdr_size
 + 12] |
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 & 0x07;

2753 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
);

2755  
d©a
;

2756 
	}
}

2758 
scsi_d©a
 *

2759 
	$scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2760 
scsi_mode_∑ge
 *
mp
,

2761 
hdr_size
)

2763 
scsi_d©a
 *
d©a
;

2765 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2767 
d©a
->
size
 = 12 + 
hdr_size
;

2768 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2770 i‡(
mp
->
õc
.
≥rf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2771 i‡(
mp
->
õc
.
ebf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2772 i‡(
mp
->
õc
.
ewasc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2773 i‡(
mp
->
õc
.
dex˝t
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2774 i‡(
mp
->
õc
.
ã°
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2775 i‡(
mp
->
õc
.
ebackîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2776 i‡(
mp
->
õc
.
logîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2778 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
õc
.
mrõ
 & 0x0f;

2780 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
õc
.
öãrvÆ_timî
);

2781 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
õc
.
ªp‹t_cou¡
);

2783  
d©a
;

2784 
	}
}

2789 
scsi_d©a
 *

2790 
	$scsi_mode£n£_d©aout_m¨shÆl
(
scsi_èsk
 *
èsk
,

2791 
scsi_mode_∑ge
 *
mp
,

2792 
is_mode£À˘6
)

2794 
scsi_d©a
 *
d©a
;

2795 
hdr_size
 = 
is_mode£À˘6
 ? 4 : 8;

2797 
mp
->
∑ge_code
) {

2798 
SCSI_MODEPAGE_CACHING
:

2799 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_ˇchög
(
èsk
, 
mp
, 
hdr_size
);

2801 
SCSI_MODEPAGE_CONTROL
:

2802 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

2804 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

2805 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
èsk
, 
mp
, 
hdr_size
);

2807 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

2808 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

2810 
SCSI_MODEPAGE_POWER_CONDITION
:

2811 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
èsk
, 
mp
, 
hdr_size
);

2815  
NULL
;

2818 i‡(
d©a
 =
NULL
) {

2819  
NULL
;

2822 
d©a
->d©a[
hdr_size
 + 0] = 
mp
->
∑ge_code
 & 0x3f;

2823 i‡(
mp
->
ps
) {

2824 
d©a
->d©a[
hdr_size
 + 0] |= 0x80;

2826 i‡(
mp
->
•f
) {

2827 
d©a
->d©a[
hdr_size
 + 0] |= 0x40;

2828 
d©a
->d©a[
hdr_size
 + 1] = 
mp
->
sub∑ge_code
;

2829 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 2], d©a->
size
 -hdr_size - 4);

2831 
d©a
->d©a[
hdr_size
 + 1] = (d©a->
size
 - hdr_size - 2) & 0xff;

2834  
d©a
;

2835 
	}
}

2841 
scsi_èsk
 *

2842 
	$scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

2844 
scsi_èsk
 *
èsk
;

2846 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2847 i‡(
èsk
 =
NULL
) {

2848  
NULL
;

2851 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2852 
èsk
->
cdb
[0] = 
SCSI_OPCODE_STARTSTOPUNIT
;

2854 i‡(
immed
) {

2855 
èsk
->
cdb
[1] |= 0x01;

2857 
èsk
->
cdb
[3] |
pcm
 & 0x0f;

2858 
èsk
->
cdb
[4] |(
pc
 << 4) & 0xf0;

2859 i‡(
no_Êush
) {

2860 
èsk
->
cdb
[4] |= 0x04;

2862 i‡(
l€j
) {

2863 
èsk
->
cdb
[4] |= 0x02;

2865 i‡(
°¨t
) {

2866 
èsk
->
cdb
[4] |= 0x01;

2870 
èsk
->
cdb_size
 = 6;

2871 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2872 
èsk
->
expx„æí
 = 0;

2874  
èsk
;

2875 
	}
}

2880 
scsi_èsk
 *

2881 
	$scsi_cdb_¥evíèŒow
(
¥evít
)

2883 
scsi_èsk
 *
èsk
;

2885 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2886 i‡(
èsk
 =
NULL
) {

2887  
NULL
;

2890 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2891 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREVENTALLOW
;

2893 
èsk
->
cdb
[4] = 
¥evít
 & 0x03;

2895 
èsk
->
cdb_size
 = 6;

2896 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2897 
èsk
->
expx„æí
 = 0;

2899  
èsk
;

2900 
	}
}

2905 
scsi_èsk
 *

2906 
	$scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
, 
immed
)

2908 
scsi_èsk
 *
èsk
;

2910 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2911 i‡(
èsk
 =
NULL
) {

2912  
NULL
;

2915 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2916 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE10
;

2918 i‡(
syn˙v
) {

2919 
èsk
->
cdb
[1] |= 0x04;

2921 i‡(
immed
) {

2922 
èsk
->
cdb
[1] |= 0x02;

2924 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2925 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2927 
èsk
->
cdb_size
 = 10;

2928 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2929 
èsk
->
expx„æí
 = 0;

2931  
èsk
;

2932 
	}
}

2937 
scsi_èsk
 *

2938 
	$scsi_cdb_synchr⁄izeˇche16
(
uöt64_t
 
lba
, 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

2940 
scsi_èsk
 *
èsk
;

2942 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2943 i‡(
èsk
 =
NULL
) {

2944  
NULL
;

2947 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2948 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE16
;

2950 i‡(
syn˙v
) {

2951 
èsk
->
cdb
[1] |= 0x04;

2953 i‡(
immed
) {

2954 
èsk
->
cdb
[1] |= 0x02;

2956 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2957 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2958 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

2960 
èsk
->
cdb_size
 = 16;

2961 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2962 
èsk
->
expx„æí
 = 0;

2964  
èsk
;

2965 
	}
}

2970 
scsi_èsk
 *

2971 
	$scsi_cdb_¥e„tch10
(
uöt32_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

2973 
scsi_èsk
 *
èsk
;

2975 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2976 i‡(
èsk
 =
NULL
) {

2977  
NULL
;

2980 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2981 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH10
;

2983 i‡(
immed
) {

2984 
èsk
->
cdb
[1] |= 0x02;

2986 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2987 
èsk
->
cdb
[6] |
group
 & 0x1f;

2988 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2990 
èsk
->
cdb_size
 = 10;

2991 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2992 
èsk
->
expx„æí
 = 0;

2994  
èsk
;

2995 
	}
}

3000 
scsi_èsk
 *

3001 
	$scsi_cdb_¥e„tch16
(
uöt64_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

3003 
scsi_èsk
 *
èsk
;

3005 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3006 i‡(
èsk
 =
NULL
) {

3007  
NULL
;

3010 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3011 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH16
;

3013 i‡(
immed
) {

3014 
èsk
->
cdb
[1] |= 0x02;

3016 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3017 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3018 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

3020 
èsk
->
cdb
[14] |
group
 & 0x1f;

3022 
èsk
->
cdb_size
 = 16;

3023 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3024 
èsk
->
expx„æí
 = 0;

3026  
èsk
;

3027 
	}
}

3032 
scsi_èsk
 *

3033 
	$scsi_cdb_£rvi˚a˘i⁄ö16
(
scsi_£rvi˚_a˘i⁄_ö
 
ß
, 
uöt32_t
 
x„æí
)

3035 
scsi_èsk
 *
èsk
;

3037 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3038 i‡(
èsk
 =
NULL
) {

3039  
NULL
;

3042 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3043 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3045 
èsk
->
cdb
[1] = 
ß
;

3047 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
);

3049 
èsk
->
cdb_size
 = 16;

3050 i‡(
x„æí
 != 0) {

3051 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3053 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3055 
èsk
->
expx„æí
 = 
x„æí
;

3057  
èsk
;

3058 
	}
}

3063 
scsi_èsk
 *

3064 
	$scsi_cdb_ªadˇ∑côy16
()

3066  
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 32);

3067 
	}
}

3072 
scsi_èsk
 *

3073 
	$scsi_cdb_gë_lba_°©us
(
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

3075 
scsi_èsk
 *
èsk
;

3077 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3078 i‡(
èsk
 =
NULL
) {

3079  
NULL
;

3082 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3083 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3085 
èsk
->
cdb
[1] = 
SCSI_GET_LBA_STATUS
;

3087 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
°¨tög_lba
 >> 32);

3088 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
°¨tög_lba
 & 0xffffffff);

3089 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
Æloc_Àn
);

3091 
èsk
->
cdb_size
 = 16;

3092 i‡(
Æloc_Àn
 != 0) {

3093 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3095 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3097 
èsk
->
expx„æí
 = 
Æloc_Àn
;

3099  
èsk
;

3100 
	}
}

3105 
scsi_èsk
 *

3106 
	$scsi_cdb_wrôevîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3108 
scsi_èsk
 *
èsk
;

3110 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3111 i‡(
èsk
 =
NULL
) {

3112  
NULL
;

3115 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3116 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

3118 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3119 i‡(
dpo
) {

3120 
èsk
->
cdb
[1] |= 0x10;

3122 i‡(
bytchk
) {

3123 
èsk
->
cdb
[1] |= 0x02;

3126 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3127 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

3129 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

3131 
èsk
->
cdb_size
 = 10;

3132 i‡(
x„æí
 != 0) {

3133 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3135 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3137 
èsk
->
expx„æí
 = 
x„æí
;

3139  
èsk
;

3140 
	}
}

3145 
scsi_èsk
 *

3146 
	$scsi_cdb_wrôevîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3148 
scsi_èsk
 *
èsk
;

3150 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3151 i‡(
èsk
 =
NULL
) {

3152  
NULL
;

3155 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3156 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

3158 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3159 i‡(
dpo
) {

3160 
èsk
->
cdb
[1] |= 0x10;

3162 i‡(
bytchk
) {

3163 
èsk
->
cdb
[1] |= 0x02;

3166 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3167 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

3169 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

3171 
èsk
->
cdb_size
 = 12;

3172 i‡(
x„æí
 != 0) {

3173 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3175 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3177 
èsk
->
expx„æí
 = 
x„æí
;

3179  
èsk
;

3180 
	}
}

3185 
scsi_èsk
 *

3186 
	$scsi_cdb_wrôevîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3188 
scsi_èsk
 *
èsk
;

3190 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3191 i‡(
èsk
 =
NULL
) {

3192  
NULL
;

3195 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3196 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

3198 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3199 i‡(
dpo
) {

3200 
èsk
->
cdb
[1] |= 0x10;

3202 i‡(
bytchk
) {

3203 
èsk
->
cdb
[1] |= 0x02;

3206 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3207 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3208 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

3210 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

3212 
èsk
->
cdb_size
 = 16;

3213 i‡(
x„æí
 != 0) {

3214 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3216 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3218 
èsk
->
expx„æí
 = 
x„æí
;

3220  
èsk
;

3221 
	}
}

3224 
	$scsi_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

3226 
èsk
->
cdb
[0]) {

3227 
SCSI_OPCODE_TESTUNITREADY
:

3229 
SCSI_OPCODE_INQUIRY
:

3230  
	`scsi_öquúy_d©aö_gëfuŒsize
(
èsk
);

3231 
SCSI_OPCODE_MODESENSE6
:

3232  
	`scsi_mode£n£_d©aö_gëfuŒsize
(
èsk
, 1);

3233 
SCSI_OPCODE_READCAPACITY10
:

3234  
	`scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
èsk
);

3235 
SCSI_OPCODE_SYNCHRONIZECACHE10
:

3237 
SCSI_OPCODE_READTOC
:

3238  
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
);

3239 
SCSI_OPCODE_REPORTLUNS
:

3240  
	`scsi_ªp‹éuns_d©aö_gëfuŒsize
(
èsk
);

3241 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3242  
	`scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
èsk
);

3243 
SCSI_OPCODE_MAINTENANCE_IN
:

3244  
	`scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
èsk
);

3247 
	}
}

3250 
	$scsi_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3252 
èsk
->
cdb
[0]) {

3253 
SCSI_OPCODE_TESTUNITREADY
:

3254  
NULL
;

3255 
SCSI_OPCODE_INQUIRY
:

3256  
	`scsi_öquúy_d©aö_unm¨shÆl
(
èsk
);

3257 
SCSI_OPCODE_MODESENSE6
:

3258  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 1);

3259 
SCSI_OPCODE_MODESENSE10
:

3260  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 0);

3261 
SCSI_OPCODE_READCAPACITY10
:

3262  
	`scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
èsk
);

3263 
SCSI_OPCODE_SYNCHRONIZECACHE10
:

3264  
NULL
;

3265 
SCSI_OPCODE_READTOC
:

3266  
	`scsi_ªadtoc_d©aö_unm¨shÆl
(
èsk
);

3267 
SCSI_OPCODE_REPORTLUNS
:

3268  
	`scsi_ªp‹éuns_d©aö_unm¨shÆl
(
èsk
);

3269 
SCSI_OPCODE_SERVICE_ACTION_IN
:

3270  
	`scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
èsk
);

3271 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3272  
	`scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
èsk
);

3273 
SCSI_OPCODE_MAINTENANCE_IN
:

3274  
	`scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
èsk
);

3276  
NULL
;

3277 
	}
}

3280 
scsi_ªad6_cdb
 *

3281 
	$scsi_ªad6_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3283 
scsi_ªad6_cdb
 *
ªad6
;

3285 
ªad6
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad6_cdb
));

3286 i‡(
ªad6
 =
NULL
) {

3287  
NULL
;

3290 
ªad6
->
›code
 = 
SCSI_OPCODE_READ6
;

3291 
ªad6
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[0]) & 0x001fffff;

3292 
ªad6
->
å™s„r_Àngth
 = 
èsk
->
cdb
[4];

3293 
ªad6
->
c⁄åﬁ
 = 
èsk
->
cdb
[5];

3295  
ªad6
;

3296 
	}
}

3298 
scsi_ªad10_cdb
 *

3299 
	$scsi_ªad10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3301 
scsi_ªad10_cdb
 *
ªad10
;

3303 
ªad10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad10_cdb
));

3304 i‡(
ªad10
 =
NULL
) {

3305  
NULL
;

3308 
ªad10
->
›code
 = 
SCSI_OPCODE_READ10
;

3309 
ªad10
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3310 
ªad10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3311 
ªad10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3312 
ªad10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3313 
ªad10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3314 
ªad10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3315 
ªad10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3316 
ªad10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3318  
ªad10
;

3319 
	}
}

3321 
scsi_ªad12_cdb
 *

3322 
	$scsi_ªad12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3324 
scsi_ªad12_cdb
 *
ªad12
;

3326 
ªad12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad12_cdb
));

3327 i‡(
ªad12
 =
NULL
) {

3328  
NULL
;

3331 
ªad12
->
›code
 = 
SCSI_OPCODE_READ12
;

3332 
ªad12
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3333 
ªad12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3334 
ªad12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3335 
ªad12
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3336 
ªad12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3337 
ªad12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3338 
ªad12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3339 
ªad12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3340 
ªad12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3342  
ªad12
;

3343 
	}
}

3345 
scsi_ªad16_cdb
 *

3346 
	$scsi_ªad16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3348 
scsi_ªad16_cdb
 *
ªad16
;

3350 
ªad16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad16_cdb
));

3351 i‡(
ªad16
 =
NULL
) {

3352  
NULL
;

3355 
ªad16
->
›code
 = 
SCSI_OPCODE_READ16
;

3356 
ªad16
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3357 
ªad16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3358 
ªad16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3359 
ªad16
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3360 
ªad16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3361 
ªad16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3362 
ªad16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3363 
ªad16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3364 
ªad16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3366  
ªad16
;

3367 
	}
}

3369 
scsi_vîify10_cdb
 *

3370 
	$scsi_vîify10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3372 
scsi_vîify10_cdb
 *
vîify10
;

3374 
vîify10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify10_cdb
));

3375 i‡(
vîify10
 =
NULL
) {

3376  
NULL
;

3379 
vîify10
->
›code
 = 
SCSI_OPCODE_VERIFY10
;

3380 
vîify10
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3381 
vîify10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3382 
vîify10
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3383 
vîify10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3384 
vîify10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3385 
vîify10
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3386 
vîify10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3388  
vîify10
;

3389 
	}
}

3391 
scsi_vîify12_cdb
 *

3392 
	$scsi_vîify12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3394 
scsi_vîify12_cdb
 *
vîify12
;

3396 
vîify12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify12_cdb
));

3397 i‡(
vîify12
 =
NULL
) {

3398  
NULL
;

3401 
vîify12
->
›code
 = 
SCSI_OPCODE_VERIFY12
;

3402 
vîify12
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3403 
vîify12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3404 
vîify12
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3405 
vîify12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3406 
vîify12
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3407 
vîify12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3408 
vîify12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3410  
vîify12
;

3411 
	}
}

3413 
scsi_vîify16_cdb
 *

3414 
	$scsi_vîify16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3416 
scsi_vîify16_cdb
 *
vîify16
;

3418 
vîify16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify16_cdb
));

3419 i‡(
vîify16
 =
NULL
) {

3420  
NULL
;

3423 
vîify16
->
›code
 = 
SCSI_OPCODE_VERIFY16
;

3424 
vîify16
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3425 
vîify16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3426 
vîify16
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3427 
vîify16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3428 
vîify16
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3429 
vîify16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3430 
vîify16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3432  
vîify16
;

3433 
	}
}

3435 
scsi_wrôe10_cdb
 *

3436 
	$scsi_wrôe10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3438 
scsi_wrôe10_cdb
 *
wrôe10
;

3440 
wrôe10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe10_cdb
));

3441 i‡(
wrôe10
 =
NULL
) {

3442  
NULL
;

3445 
wrôe10
->
›code
 = 
SCSI_OPCODE_WRITE10
;

3446 
wrôe10
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3447 
wrôe10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3448 
wrôe10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3449 
wrôe10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3450 
wrôe10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3451 
wrôe10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3452 
wrôe10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3453 
wrôe10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3455  
wrôe10
;

3456 
	}
}

3458 
scsi_wrôe12_cdb
 *

3459 
	$scsi_wrôe12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3461 
scsi_wrôe12_cdb
 *
wrôe12
;

3463 
wrôe12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe12_cdb
));

3464 i‡(
wrôe12
 =
NULL
) {

3465  
NULL
;

3468 
wrôe12
->
›code
 = 
SCSI_OPCODE_WRITE12
;

3469 
wrôe12
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3470 
wrôe12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3471 
wrôe12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3472 
wrôe12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3473 
wrôe12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3474 
wrôe12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3475 
wrôe12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3476 
wrôe12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3478  
wrôe12
;

3479 
	}
}

3481 
scsi_wrôe16_cdb
 *

3482 
	$scsi_wrôe16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3484 
scsi_wrôe16_cdb
 *
wrôe16
;

3486 
wrôe16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe16_cdb
));

3487 i‡(
wrôe16
 =
NULL
) {

3488  
NULL
;

3491 
wrôe16
->
›code
 = 
SCSI_OPCODE_WRITE16
;

3492 
wrôe16
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3493 
wrôe16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3494 
wrôe16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3495 
wrôe16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3496 
wrôe16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3497 
wrôe16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3498 
wrôe16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3499 
wrôe16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3501  
wrôe16
;

3502 
	}
}

3505 
	$scsi_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_›code
 
›code
)

3507 i‡(
èsk
->
cdb
[0] !
›code
) {

3508  
NULL
;

3511 
èsk
->
cdb
[0]) {

3512 
SCSI_OPCODE_READ6
:

3513  
	`scsi_ªad6_cdb_unm¨shÆl
(
èsk
);

3514 
SCSI_OPCODE_READ10
:

3515  
	`scsi_ªad10_cdb_unm¨shÆl
(
èsk
);

3516 
SCSI_OPCODE_READ12
:

3517  
	`scsi_ªad12_cdb_unm¨shÆl
(
èsk
);

3518 
SCSI_OPCODE_READ16
:

3519  
	`scsi_ªad16_cdb_unm¨shÆl
(
èsk
);

3520 
SCSI_OPCODE_VERIFY10
:

3521  
	`scsi_vîify10_cdb_unm¨shÆl
(
èsk
);

3522 
SCSI_OPCODE_VERIFY12
:

3523  
	`scsi_vîify12_cdb_unm¨shÆl
(
èsk
);

3524 
SCSI_OPCODE_VERIFY16
:

3525  
	`scsi_vîify16_cdb_unm¨shÆl
(
èsk
);

3526 
SCSI_OPCODE_WRITE10
:

3527  
	`scsi_wrôe10_cdb_unm¨shÆl
(
èsk
);

3528 
SCSI_OPCODE_WRITE12
:

3529  
	`scsi_wrôe12_cdb_unm¨shÆl
(
èsk
);

3530 
SCSI_OPCODE_WRITE16
:

3531  
	`scsi_wrôe16_cdb_unm¨shÆl
(
èsk
);

3533  
NULL
;

3534 
	}
}

3537 
	$scsi_devty≥_to_°r
(
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
ty≥
)

3539 
ty≥
) {

3540 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

3542 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

3544 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER
:

3546 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR
:

3548 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE
:

3550 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

3552 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER
:

3554 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY
:

3556 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER
:

3558 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS
:

3560 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER
:

3562 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES
:

3564 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS
:

3566 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER
:

3568 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER
:

3570 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD
:

3572 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION
:

3574 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER
:

3576 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN
:

3578 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN
:

3582 
	}
}

3585 
	$scsi_devquÆifõr_to_°r
(
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
)

3587 
quÆifõr
) {

3588 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
:

3590 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED
:

3592 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED
:

3596 
	}
}

3599 
	$scsi_vîsi⁄_to_°r
(
scsi_vîsi⁄
 
vîsi⁄
)

3601 
vîsi⁄
) {

3602 
SCSI_VERSION_SPC
:

3604 
SCSI_VERSION_SPC2
:

3606 
SCSI_VERSION_SPC3
:

3610 
	}
}

3613 
	$scsi_vîsi⁄_des¸ùt‹_to_°r
(
scsi_vîsi⁄_des¸ùt‹
 
vîsi⁄_des¸ùt‹
)

3615 
vîsi⁄_des¸ùt‹
) {

3616 
SCSI_VERSION_DESCRIPTOR_ISCSI
:

3618 
SCSI_VERSION_DESCRIPTOR_SBC
:

3620 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

3622 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

3624 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

3626 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

3628 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

3630 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

3632 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

3634 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

3636 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

3638 
SCSI_VERSION_DESCRIPTOR_SPC
:

3640 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

3642 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

3644 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

3646 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

3648 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

3650 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

3652 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

3654 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

3656 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

3658 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

3660 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

3662 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

3664 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

3666 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

3668 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

3670 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

3672 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

3674 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

3676 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

3678 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

3680 
SCSI_VERSION_DESCRIPTOR_SSC
:

3682 
SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04
:

3686 
	}
}

3689 
	$scsi_öquúy_∑gecode_to_°r
(
∑gecode
)

3691 
∑gecode
) {

3692 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

3694 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

3696 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

3698 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

3702 
	}
}

3706 
	$scsi_¥Ÿocﬁ_idítifõr_to_°r
(
idítifõr
)

3708 
idítifõr
) {

3709 
SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL
:

3711 
SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI
:

3713 
SCSI_PROTOCOL_IDENTIFIER_SSA
:

3715 
SCSI_PROTOCOL_IDENTIFIER_IEEE_1394
:

3717 
SCSI_PROTOCOL_IDENTIFIER_RDMA
:

3719 
SCSI_PROTOCOL_IDENTIFIER_ISCSI
:

3721 
SCSI_PROTOCOL_IDENTIFIER_SAS
:

3723 
SCSI_PROTOCOL_IDENTIFIER_ADT
:

3725 
SCSI_PROTOCOL_IDENTIFIER_ATA
:

3729 
	}
}

3732 
	$scsi_code£t_to_°r
(
code£t
)

3734 
code£t
) {

3735 
SCSI_CODESET_BINARY
:

3737 
SCSI_CODESET_ASCII
:

3739 
SCSI_CODESET_UTF8
:

3743 
	}
}

3746 
	$scsi_assocüti⁄_to_°r
(
assocüti⁄
)

3748 
assocüti⁄
) {

3749 
SCSI_ASSOCIATION_LOGICAL_UNIT
:

3751 
SCSI_ASSOCIATION_TARGET_PORT
:

3753 
SCSI_ASSOCIATION_TARGET_DEVICE
:

3757 
	}
}

3760 
	$scsi_desig«t‹_ty≥_to_°r
(
ty≥
)

3762 
ty≥
) {

3763 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
:

3765 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
:

3767 
SCSI_DESIGNATOR_TYPE_EUI_64
:

3769 
SCSI_DESIGNATOR_TYPE_NAA
:

3771 
SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT
:

3773 
SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP
:

3775 
SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP
:

3777 
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
:

3779 
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING
:

3783 
	}
}

3786 
	$scsi_£t_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
, *
±r
)

3788 
èsk
->
±r
 =Ötr;

3789 
	}
}

3792 
	$scsi_gë_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
)

3794  
èsk
->
±r
;

3795 
	}
}

3798 
	$scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

3800 
èsk
->
iove˘‹_out
.
iov
 = iov;

3801 
èsk
->
iove˘‹_out
.
niov
 =Çiov;

3802 
	}
}

3805 
	$scsi_èsk_£t_iov_ö
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

3807 
èsk
->
iove˘‹_ö
.
iov
 = iov;

3808 
èsk
->
iove˘‹_ö
.
niov
 =Çiov;

3809 
	}
}

3811 
	#IOVECTOR_INITAL_ALLOC
 (16)

	)

3814 
	$scsi_iove˘‹_add
(
scsi_èsk
 *
èsk
, 
scsi_iove˘‹
 *
iove˘‹
, 
Àn
, *
buf
)

3816 i‡(
Àn
 < 0) {

3820 i‡(
iove˘‹
->
iov
 =
NULL
) {

3821 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 
IOVECTOR_INITAL_ALLOC
*(
iovec
));

3822 i‡(
iove˘‹
->
iov
 =
NULL
) {

3825 
iove˘‹
->
«Œoc
 = 
IOVECTOR_INITAL_ALLOC
;

3829 i‡(
iove˘‹
->
«Œoc
 < iove˘‹->
niov
 + 1) {

3830 
scsi_iovec
 *
ﬁd_iov
 = 
iove˘‹
->
iov
;

3831 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 2 * iove˘‹->
«Œoc
 * (
iovec
));

3832 i‡(
iove˘‹
->
iov
 =
NULL
) {

3835 
	`mem˝y
(
iove˘‹
->
iov
, 
ﬁd_iov
, iove˘‹->
niov
 * (
iovec
));

3836 
iove˘‹
->
«Œoc
 <<= 1;

3839 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_Àn
 = 
Àn
;

3840 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_ba£
 = 
buf
;

3841 
iove˘‹
->
niov
++;

3844 
	}
}

3847 
	$scsi_èsk_add_d©a_ö_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

3849  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_ö
, 
Àn
, 
buf
);

3850 
	}
}

3853 
	$scsi_èsk_add_d©a_out_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

3855  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_out
, 
Àn
, 
buf
);

3856 
	}
}

	@lib/socket.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 #ifde‡
HAVE_POLL_H


34 
	~<pﬁl.h
>

37 #ifde‡
AROS


38 
	~"¨os/¨os_com∑t.h
"

41 #i‡
deföed
(
WIN32
)

42 
	~<wösock2.h
>

43 
	~<ws2t˝ù.h
>

44 
	~"wö32/wö32_com∑t.h
"

45 
	#io˘l
 
io˘lsockë


	)

46 
	#˛o£
 
˛o£sockë


	)

48 
	~<°rögs.h
>

49 
	~<√tdb.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<√töë/t˝.h
>

53 
	~<sys/io˘l.h
>

56 #ifde‡
NEED_SYS_FILIO_H


57 
	~<sys/fûio.h
>

60 
	~<sys/uio.h
>

61 
	~<°döt.h
>

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<°rög.h
>

65 
	~<î∫o.h
>

66 
	~<f˙é.h
>

67 
	~<time.h
>

68 
	~"scsi-lowÀvñ.h
"

69 
	~"iscsi.h
"

70 
	~"iscsi-¥iv©e.h
"

71 
	~"¶i°.h
"

73 
uöt32_t
 
	giÁ˚_º
 = 0;

76 
	$iscsi_add_to_outqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

78 
iscsi_pdu
 *
cuºít
 = 
iscsi
->
outqueue
;

79 
iscsi_pdu
 *
œ°
 = 
NULL
;

81 
	`Ârötf
(
°dîr
, "kalaiáddingÅo outqueue");

82 i‡(
iscsi
->
scsi_timeout
 > 0) {

83 
pdu
->
scsi_timeout
 = 
	`time
(
NULL
Ë+ 
iscsi
->scsi_timeout;

85 
pdu
->
scsi_timeout
 = 0;

88 i‡(
iscsi
->
outqueue
 =
NULL
) {

89 
iscsi
->
outqueue
 = 
pdu
;

90 
pdu
->
√xt
 = 
NULL
;

98 i‡(
	`iscsi_£rül32_com∑ª
(
pdu
->
cmd¢
, 
cuºít
->cmdsn) < 0) {

100 i‡(
œ°
 !
NULL
) {

101 
œ°
->
√xt
=
pdu
;

103 
iscsi
->
outqueue
=
pdu
;

105 
pdu
->
√xt
 = 
cuºít
;

108 
œ°
=
cuºít
;

109 
cuºít
=cuºít->
√xt
;

110 } 
cuºít
 !
NULL
);

112 
œ°
->
√xt
 = 
pdu
;

113 
pdu
->
√xt
 = 
NULL
;

114 
	}
}

116 
	$iscsi_de¸emít_iÁ˚_º
() {

117 
iÁ˚_º
--;

118 
	}
}

120 
	$£t_n⁄blockög
(
fd
)

122 #i‡
	`deföed
(
WIN32
)

123 
›t
 = 1;

124 
	`io˘lsockë
(
fd
, 
FIONBIO
, &
›t
);

126 
v
;

127 
v
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

128 
	`f˙é
(
fd
, 
F_SETFL
, 
v
 | 
O_NONBLOCK
);

130 
	}
}

132 
	$£t_t˝_sock›t
(
sockfd
, 
›äame
, 
vÆue
)

134 
Àvñ
;

136 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__sun
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

137 
¥Ÿ€¡
 *
buf
;

139 i‡((
buf
 = 
	`gë¥Ÿoby«me
("t˝")Ë!
NULL
)

140 
Àvñ
 = 
buf
->
p_¥Ÿo
;

144 
Àvñ
 = 
SOL_TCP
;

147  
	`£tsock›t
(
sockfd
, 
Àvñ
, 
›äame
, (*)&
vÆue
, (value));

148 
	}
}

150 #i‚de‡
TCP_USER_TIMEOUT


151 
	#TCP_USER_TIMEOUT
 18

	)

154 
	$£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
)

156 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_USER_TIMEOUT
, iscsi->
t˝_u£r_timeout
) != 0) {

157 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ u£∏timeout. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

160 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_USER_TIMEOUT sëÅÿ%d",iscsi->
t˝_u£r_timeout
);

162 
	}
}

164 #i‚de‡
TCP_SYNCNT


165 
	#TCP_SYNCNT
 7

	)

168 
	$£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
)

170 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_SYNCNT
, iscsi->
t˝_syn˙t
) != 0) {

171 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ sy¿ªåõs. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

174 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_SYNCNT sëÅÿ%d",iscsi->
t˝_syn˙t
);

176 
	}
}

178 
	usockë_addªss
 {

179 
sockaddr_ö
 
	msö
;

180 
sockaddr_ö6
 
	msö6
;

181 
sockaddr
 
	mß
;

185 
	$iscsi_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

186 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

188 
p‹t
 = 3260;

189 *
°r
;

190 *
addr
, *
ho°
;

191 
addröfo
 *
ai
 = 
NULL
;

192 
sockë_addªss
 
ß
;

193 
socksize
;

195 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘ögÅÿp‹è»%s",
p‹èl
);

197 i‡(
iscsi
->
fd
 != -1) {

198 
	`iscsi_£t_îr‹
(
iscsi
,

203 
addr
 = 
	`iscsi_°rdup
(
iscsi
, 
p‹èl
);

204 i‡(
addr
 =
NULL
) {

205 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: "

209 
ho°
 = 
addr
;

212 
°r
 = 
	`°ºchr
(
ho°
, ',');

213 i‡(
°r
 !
NULL
) {

214 
°r
[0] = 0;

217 
°r
 = 
	`°ºchr
(
ho°
, ':');

218 i‡(
°r
 !
NULL
) {

219 i‡(
	`°rchr
(
°r
, ']'Ë=
NULL
) {

220 i‡(
°r
 !
NULL
) {

221 
p‹t
 = 
	`©oi
(
°r
+1);

222 
°r
[0] = 0;

228 i‡(
ho°
[0] == '[') {

229 
ho°
 ++;

230 
°r
 = 
	`°rchr
(
ho°
, ']');

231 i‡(
°r
 =
NULL
) {

232 
	`iscsi_‰ì
(
iscsi
, 
addr
);

233 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

234 "Missög ']' i¿IPv6áddªss", 
p‹èl
);

237 *
°r
 = 0;

239 
‰ìai
 = 1;

241 i‡(
	`gëaddröfo
(
ho°
, 
NULL
, NULL, &
ai
) != 0) {

242 
	`iscsi_‰ì
(
iscsi
, 
addr
);

243 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

244 "C™ÇŸÑesﬁv i¡ÿIPv4/v6.", 
p‹èl
);

245 
‰ìai
 = 0;

246 
sockaddr_ö
 *
sö
;

248 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

249 
sö
->
sö_Ámûy
=
AF_INET
;

252 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
ho°
);

254 
sö
->
sö_p‹t
=0;

256 
ai
 = 
	`mÆloc
((
addröfo
));

258 
ai
->
ai_Ámûy
 = 
AF_INET
;

259 
ai
->
ai_addæí
 = (
sockaddr_ö
);

260 
ai
->
ai_addr
 = (
sockaddr
 *)
sö
;

264 
	`iscsi_‰ì
(
iscsi
, 
addr
);

266 
	`mem£t
(&
ß
, 0, (sa));

267 
ai
->
ai_Ámûy
) {

268 
AF_INET
:

269 
socksize
 = (
sockaddr_ö
);

270 
	`mem˝y
(&
ß
.
sö
, 
ai
->
ai_addr
, 
socksize
);

271 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

272 #ifde‡
HAVE_SOCK_SIN_LEN


273 
ß
.
sö
.
sö_Àn
 = 
socksize
;

276 #ifde‡
HAVE_SOCKADDR_IN6


277 
AF_INET6
:

278 
socksize
 = (
sockaddr_ö6
);

279 
	`mem˝y
(&
ß
.
sö6
, 
ai
->
ai_addr
, 
socksize
);

280 
ß
.
sö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

281 #ifde‡
HAVE_SOCK_SIN_LEN


282 
ß
.
sö6
.
sö6_Àn
 = 
socksize
;

287 
	`iscsi_£t_îr‹
(
iscsi
, "Unknownáddress family :%d. "

289 
ai
->
ai_Ámûy
);

290 
	`‰ìaddröfo
(
ai
);

295 
iscsi
->
fd
 = 
	`sockë
(
ai
->
ai_Ámûy
, 
SOCK_STREAM
, 0);

296 i‡(
iscsi
->
fd
 == -1) {

297 
	`‰ìaddröfo
(
ai
);

298 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo open iscsi socket. "

299 "Eºno:%s(%d).", 
	`°ªº‹
(
î∫o
),Érrno);

304 
iscsi
->
sockë_°©us_cb
 = 
cb
;

305 
iscsi
->
c⁄√˘_d©a
 = 
¥iv©e_d©a
;

307 
	`£t_n⁄blockög
(
iscsi
->
fd
);

309 
	`iscsi_£t_t˝_kì∑live
(
iscsi
, iscsi->
t˝_kìpidÀ
, iscsi->
t˝_kìp˙t
, iscsi->
t˝_kìpötvl
);

311 i‡(
iscsi
->
t˝_u£r_timeout
 > 0) {

312 
	`£t_t˝_u£r_timeout
(
iscsi
);

315 i‡(
iscsi
->
t˝_syn˙t
 > 0) {

316 
	`£t_t˝_syn˙t
(
iscsi
);

318 #i‡
__löux


319 i‡(
iscsi
->
böd_öãrÁ˚s
[0]) {

320 *
pchr
 = 
iscsi
->
böd_öãrÁ˚s
, *
pchr2
;

321 
iÁ˚_n
 = 
iÁ˚_º
++%
iscsi
->
böd_öãrÁ˚s_˙t
;

322 
iÁ˚_c
 = 0;

324 
pchr2
 = 
	`°rchr
(
pchr
,',');

325 i‡(
iÁ˚_c
 =
iÁ˚_n
) {

326 i‡(
pchr2
)Öchr2[0]=0x00;

329 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

330 
iÁ˚_c
++;

331 } 
pchr2
);

333 
ªs
 = 
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
pchr
, 
	`°æí
(pchr));

334 i‡(
ªs
 < 0) {

335 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿbödÅÿöãrÁ˚ '%s': %s",
pchr
,
	`°ªº‹
(
î∫o
));

337 
	`ISCSI_LOG
(
iscsi
,3,"suc˚ssfuŒy boundÅÿöãrÁ˚ '%s'",
pchr
);

339 i‡(
pchr2
)Öchr2[0]=',';

343 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_NODELAY
, 1) != 0) {

344 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿ£àTCP_NODELAY sock›t: %s",
	`°ªº‹
(
î∫o
));

346 
	`ISCSI_LOG
(
iscsi
,3,"TCP_NODELAY setÅo 1");

349 i‡(
	`c⁄√˘
(
iscsi
->
fd
, &
ß
.ß, 
socksize
) != 0

350 #i‡
	`deföed
(
WIN32
)

351 && 
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK
) {

353 && 
î∫o
 !
EINPROGRESS
) {

355 
	`iscsi_£t_îr‹
(
iscsi
, "Connect failed withÉrrno : "

356 "%s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

357 
	`˛o£
(
iscsi
->
fd
);

358 
iscsi
->
fd
 = -1;

359 
	`‰ìaddröfo
(
ai
);

363 i‡(
‰ìai
 == 1)

364 
	`‰ìaddröfo
(
ai
);

366 
	`°∫˝y
(
iscsi
->
c⁄√˘ed_p‹èl
,
p‹èl
,
MAX_STRING_SIZE
);

369 
	}
}

372 
	$iscsi_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

374 i‡(
iscsi
->
fd
 == -1) {

375 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo disconnect "

380 
	`˛o£
(
iscsi
->
fd
);

382 i‡(
iscsi
->
c⁄√˘ed_p‹èl
[0]) {

383 
	`ISCSI_LOG
(
iscsi
, 2, "disc⁄√˘ed fromÖ‹è»%s",iscsi->
c⁄√˘ed_p‹èl
);

386 
iscsi
->
fd
 = -1;

387 
iscsi
->
is_c⁄√˘ed
 = 0;

390 
	}
}

393 
	$iscsi_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
)

395 
iscsi
->
fd
 = 0;

396  
iscsi
->
fd
;

397 
	}
}

400 
	$iscsi_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
)

402 
evíts
 = 
iscsi
->
is_c⁄√˘ed
 ? 
POLLIN
 : 
POLLOUT
;

404 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 || (iscsi->
outqueue
 !NULL && 
	`iscsi_£rül32_com∑ª
(iscsi->outqueue->
cmd¢
, iscsi->
maxcmd¢
) <= 0)) {

405 
evíts
 |
POLLOUT
;

407  
evíts
;

408 
	}
}

411 
	$iscsi_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
)

413 
i
 = 0;

414 
iscsi_pdu
 *
pdu
;

416 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

417 
i
++;

419 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

420 
i
++;

422 i‡(
iscsi
->
is_c⁄√˘ed
 == 0) {

423 
i
++;

426  
i
;

427 
	}
}

429 
ssize_t


430 
	$iscsi_iove˘‹_ªadv_wrôev
(
iscsi_c⁄ãxt
 *
iscsi
, 
scsi_iove˘‹
 *
iove˘‹
, 
uöt32_t
 
pos
, 
size_t
 
cou¡
, 
do_wrôe
)

432 
iovec
 *
iovs
;

433 
iovec
 *
fú°_iov
;

434 
iovec
 *
œ°_iov
;

435 
i
, 
niov
;

436 
size_t
 
skù_fú°
, 
skù_œ°
;

438 i‡(
iove˘‹
->
iov
 =
NULL
) {

439 
î∫o
 = 
EINVAL
;

443 
niov
 = 
iove˘‹
->niov;

444 
iovs
 = 
	`Æloˇ
((
iovec
Ë* 
niov
);

445 i‡(
iovs
 =
NULL
) {

446 
î∫o
 = 
ENOMEM
;

449 
i
 = 0; i < 
niov
; i++) {

450 
iovs
[
i
].
iov_ba£
 = 
iove˘‹
->
iov
[i].iov_base;

451 
iovs
[
i
].
iov_Àn
 = 
iove˘‹
->
iov
[i].iov_len;

454 
fú°_iov
 = &
iovs
[0];

457 
pos
 >
fú°_iov
->
iov_Àn
) {

458 
pos
 -
fú°_iov
->
iov_Àn
;

459 
fú°_iov
++;

460 
niov
--;

461 i‡(
niov
 <= 0) {

463 
î∫o
 = 
EINVAL
;

468 
skù_fú°
 = 
pos
;

469 i‡(
skù_fú°
 > 0) {

470 *
buf
 = 
fú°_iov
->
iov_ba£
;

471 
fú°_iov
->
iov_ba£
 = &
buf
[
skù_fú°
];

472 
fú°_iov
->
iov_Àn
 -
skù_fú°
;

477 
œ°_iov
 = 
fú°_iov
;

478 
cou¡
 >
œ°_iov
->
iov_Àn
) {

479 
cou¡
 -
œ°_iov
->
iov_Àn
;

480 
œ°_iov
++;

481 
niov
--;

482 i‡(
niov
 <= 0) {

484 
î∫o
 = 
EINVAL
;

489 
skù_œ°
 = 
œ°_iov
->
iov_Àn
 - 
cou¡
;

490 i‡(
skù_œ°
 > 0) {

491 
œ°_iov
->
iov_Àn
 -
skù_œ°
;

496 
niov
 = 
œ°_iov
 - 
fú°_iov
 + 1;

498 i‡(
do_wrôe
) {

499 
cou¡
 = 
	`wrôev
(
iscsi
->
fd
, 
fú°_iov
, 
niov
);

501 
cou¡
 = 
	`ªadv
(
iscsi
->
fd
, 
fú°_iov
, 
niov
);

504  
cou¡
;

505 
	}
}

508 
	$iscsi_ªad_‰om_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

510 
iscsi_ö_pdu
 *
ö
;

511 
ssize_t
 
d©a_size
, 
cou¡
, 
∑ddög_size
;

512 i‡(
iscsi
->
fd
 != 0) {

513 i‡(
iscsi
->
öcomög
 =
NULL
) {

514 
iscsi
->
öcomög
 = 
	`iscsi_szmÆloc
(iscsi, (
iscsi_ö_pdu
));

515 i‡(
iscsi
->
öcomög
 =
NULL
) {

516 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo malloc iscsi_in_pdu");

520 
ö
 = 
iscsi
->
öcomög
;

523 i‡(
ö
->
hdr_pos
 < 
ISCSI_HEADER_SIZE
) {

527 
cou¡
 = 
ISCSI_HEADER_SIZE
 - 
ö
->
hdr_pos
;

528 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, &
ö
->
hdr
[ö->
hdr_pos
], count, 0);

529 i‡(
cou¡
 == 0) {

532 i‡(
cou¡
 < 0) {

533 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

536 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

537 "î∫o:%d", 
î∫o
);

540 
ö
->
hdr_pos
 +
cou¡
;

543 i‡(
ö
->
hdr_pos
 < 
ISCSI_HEADER_SIZE
) {

548 
∑ddög_size
 = 
	`iscsi_gë_pdu_∑ddög_size
(&
ö
->
hdr
[0]);

549 
d©a_size
 = 
	`iscsi_gë_pdu_d©a_size
(&
ö
->
hdr
[0]Ë+ 
∑ddög_size
;

551 i‡(
d©a_size
 < 0 || d©a_sizê> (
ssize_t
)
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) {

552 
	`iscsi_£t_îr‹
(
iscsi
, "InvÆid d©®sizêª˚ived fromÅ¨gë (%d)", ()
d©a_size
);

555 i‡(
d©a_size
 != 0) {

556 
∑ddög_buf
[3];

557 *
buf
 = 
∑ddög_buf
;

558 
scsi_iove˘‹
 * 
iove˘‹_ö
;

560 
cou¡
 = 
d©a_size
 - 
ö
->
d©a_pos
;

563 
iove˘‹_ö
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi
, 
ö
);

564 i‡(
iove˘‹_ö
 !
NULL
 && 
cou¡
 > 
∑ddög_size
) {

565 
uöt32_t
 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

566 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
, 
iove˘‹_ö
, 
ö
->
d©a_pos
 + 
off£t
, cou¡ - 
∑ddög_size
, 0);

568 i‡(
iove˘‹_ö
 =
NULL
) {

569 i‡(
ö
->
d©a
 =
NULL
) {

570 
ö
->
d©a
 = 
	`iscsi_mÆloc
(
iscsi
, 
d©a_size
);

571 i‡(
ö
->
d©a
 =
NULL
) {

572 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-mem‹y: faûedÅÿmÆlo¯iscsi_ö_pdu->d©a(%d)", ()
d©a_size
);

576 
buf
 = &
ö
->
d©a
[ö->
d©a_pos
];

578 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, 
buf
, count, 0);

581 i‡(
cou¡
 == 0) {

584 i‡(
cou¡
 < 0) {

585 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

588 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

589 "î∫o:%d", 
î∫o
);

593 
ö
->
d©a_pos
 +
cou¡
;

596 i‡(
ö
->
d©a_pos
 < 
d©a_size
) {

600 
	`SLIST_ADD_END
(&
iscsi
->
öqueue
, 
ö
);

601 
iscsi
->
öcomög
 = 
NULL
;

603 
iscsi
->
öqueue
 !
NULL
) {

604 
iscsi_ö_pdu
 *
cuºít
 = 
iscsi
->
öqueue
;

606 i‡(
	`iscsi_¥o˚ss_pdu
(
iscsi
, 
cuºít
) != 0) {

609 
	`SLIST_REMOVE
(&
iscsi
->
öqueue
, 
cuºít
);

610 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
cuºít
);

615 
	}
}

618 
	$iscsi_wrôe_to_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

620 
ssize_t
 
cou¡
;

621 
size_t
 
tŸÆ
;

622 
iscsi_pdu
 *
pdu
;

623 
∑ddög_buf
[3];

625 i‡(
iscsi
->
fd
 == -1) {

626 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo write butÇot connected");

629 i‡(
iscsi
->
fd
 == 0) {

632 
iscsi
->
outqueue
 !
NULL
 || iscsi->
outqueue_cuºít
 != NULL) {

633 i‡(
iscsi
->
outqueue_cuºít
 =
NULL
) {

634 i‡(
	`iscsi_£rül32_com∑ª
(
iscsi
->
outqueue
->
cmd¢
, iscsi->
maxcmd¢
) > 0) {

639 
iscsi
->
outqueue_cuºít
 = iscsi->
outqueue
;

640 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, iscsi->
outqueue_cuºít
);

641 i‡(!(
iscsi
->
outqueue_cuºít
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
)) {

646 
	`SLIST_ADD_END
(&
iscsi
->
waôpdu
, iscsi->
outqueue_cuºít
);

650 
pdu
 = 
iscsi
->
outqueue_cuºít
;

651 
pdu
->
outd©a
.
size
 = (pdu->outdata.size + 3) & 0xfffffffc;

654 i‡(
pdu
->
outd©a_wrôãn
 <Ödu->
outd©a
.
size
) {

655 
cou¡
 = 
	`£nd
(
iscsi
->
fd
,

656 
pdu
->
outd©a
.
d©a
 +Ödu->
outd©a_wrôãn
,

657 
pdu
->
outd©a
.
size
 -Ödu->
outd©a_wrôãn
,

667 
pdu
->
outd©a_wrôãn
 +
cou¡
;

671 
pdu
->
∑ylﬂd_wrôãn
 <Ödu->
∑ylﬂd_Àn
) {

672 
scsi_iove˘‹
* 
iove˘‹_out
;

674 
iove˘‹_out
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi
, 
pdu
);

676 i‡(
iove˘‹_out
 =
NULL
) {

677 
	`iscsi_£t_îr‹
(
iscsi
, "Can't find iovector data for DATA-OUT");

681 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
,

682 
iove˘‹_out
,

683 
pdu
->
∑ylﬂd_off£t
 +Ödu->
∑ylﬂd_wrôãn
,

684 
pdu
->
∑ylﬂd_Àn
 -Ödu->
∑ylﬂd_wrôãn
, 1);

685 i‡(
cou¡
 == -1) {

686 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

689 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

690 "sockë :%d", 
î∫o
);

694 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

697 
tŸÆ
 = 
pdu
->
∑ylﬂd_Àn
;

698 
tŸÆ
 = (total + 3) & 0xfffffffc;

701 i‡(
pdu
->
∑ylﬂd_wrôãn
 < 
tŸÆ
) {

702 
cou¡
 = 
	`£nd
(
iscsi
->
fd
, 
∑ddög_buf
, 
tŸÆ
 - 
pdu
->
∑ylﬂd_wrôãn
, 0);

703 i‡(
cou¡
 == -1) {

704 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

707 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

708 "sockë :%d", 
î∫o
);

711 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

714 i‡(
pdu
->
∑ylﬂd_wrôãn
 !
tŸÆ
) {

718 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

719 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

721 
iscsi
->
outqueue_cuºít
 = 
NULL
;

724 
	}
}

727 
	$iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi_c⁄ãxt
 *
iscsi
)

729 i‡(
iscsi
->
is_loggedö
) {

730 i‡(
	`iscsi_ªc⁄√˘
(
iscsi
) == 0) {

735 
	}
}

738 
	$iscsi_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
)

740 i‡(
iscsi
->
fd
 < 0) {

743 i‡(
ªvíts
 & 
POLLERR
) {

744 
îr
 = 0;

745 
sockÀn_t
 
îr_size
 = (
îr
);

747 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

748 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

749 i‡(
îr
 == 0) {

750 
îr
 = 
î∫o
;

752 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

754 
	`°ªº‹
(
îr
),Érr);

756 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLERR, "

759 i‡(
iscsi
->
sockë_°©us_cb
) {

760 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

761 
iscsi
->
c⁄√˘_d©a
);

762 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

764  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

766 i‡(
ªvíts
 & 
POLLHUP
) {

767 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLHUP, "

769 i‡(
iscsi
->
sockë_°©us_cb
) {

770 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

771 
iscsi
->
c⁄√˘_d©a
);

772 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

774  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

777 i‡(
iscsi
->
is_c⁄√˘ed
 =0 && 
ªvíts
&
POLLOUT
) {

778 
îr
 = 0;

779 
sockÀn_t
 
îr_size
 = (
îr
);

780 
sockaddr_ö
 
loˇl
;

781 
sockÀn_t
 
loˇl_l
 = (
loˇl
);

783 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

784 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

785 i‡(
îr
 == 0) {

786 
îr
 = 
î∫o
;

788 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

790 
	`°ªº‹
(
îr
),Érr);

791 i‡(
iscsi
->
sockë_°©us_cb
) {

792 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
,

793 
NULL
, 
iscsi
->
c⁄√˘_d©a
);

794 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

797  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

800 i‡(
	`gësock«me
(
iscsi
->
fd
, (
sockaddr
 *Ë&
loˇl
, &
loˇl_l
) == 0) {

801 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘i⁄É°ablished (%s:%u -> %s)", 
	`öë_¡ﬂ
(
loˇl
.
sö_addr
),

802 ()
	`¡ohs
(
loˇl
.
sö_p‹t
),
iscsi
->
c⁄√˘ed_p‹èl
);

805 
iscsi
->
is_c⁄√˘ed
 = 1;

806 i‡(
iscsi
->
sockë_°©us_cb
) {

807 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_GOOD
, 
NULL
,

808 
iscsi
->
c⁄√˘_d©a
);

809 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

813 
	`Ârötf
(
°dîr
, "kÆaòªvít†%d\n", 
ªvíts
 & 
POLLOUT
);

814 i‡(
ªvíts
 & 
POLLOUT
 && (
iscsi
->
outqueue
 !
NULL
 || iscsi->
outqueue_cuºít
 != NULL)) {

815 i‡(
	`iscsi_wrôe_to_sockë
(
iscsi
) != 0) {

816  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

819 
	`Ârötf
(
°dîr
, "kÆaòªvít†%d\n", 
ªvíts
 & 
POLLIN
);

820 i‡(
ªvíts
 & 
POLLIN
) {

821 i‡(
	`iscsi_ªad_‰om_sockë
(
iscsi
) != 0) {

822  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

827 
	}
}

830 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

832 i‡(
pdu
 =
NULL
) {

833 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo queue NULLÖdu");

837 i‡(
iscsi
->
hódî_dige°
 !
ISCSI_HEADER_DIGEST_NONE
) {

838 
¸c
;

840 i‡(
pdu
->
outd©a
.
size
 < 
ISCSI_RAW_HEADER_SIZE
 + 4) {

841 
	`iscsi_£t_îr‹
(
iscsi
, "PDUÅoo small (%u)Åo contain header digest",

842 (Ë
pdu
->
outd©a
.
size
);

846 
¸c
 = 
	`¸c32c
((*)
pdu
->
outd©a
.
d©a
, 
ISCSI_RAW_HEADER_SIZE
);

848 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+3] = (
¸c
 >> 24)&0xff;

849 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+2] = (
¸c
 >> 16)&0xff;

850 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+1] = (
¸c
 >> 8)&0xff;

851 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+0] = (
¸c
) &0xff;

854 
	`iscsi_add_to_outqueue
(
iscsi
, 
pdu
);

857 
	}
}

860 
	$iscsi_‰ì_iscsi_ö_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

862 
	`iscsi_‰ì
(
iscsi
, 
ö
->
d©a
);

863 
ö
->
d©a
=
NULL
;

864 
	`iscsi_s‰ì
(
iscsi
, 
ö
);

865 
ö
=
NULL
;

866 
	}
}

869 
	$iscsi_‰ì_iscsi_öqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
öqueue
)

871 
öqueue
 !
NULL
) {

872 
iscsi_ö_pdu
 *
√xt
 = 
öqueue
->next;

873 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
öqueue
);

874 
öqueue
 = 
√xt
;

876 
	}
}

878 
	$iscsi_£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

880 
iscsi
->
t˝_syn˙t
=
vÆue
;

881 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_SYNCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

882 
	}
}

884 
	$iscsi_£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

886 
iscsi
->
t˝_u£r_timeout
=
vÆue
;

887 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_USER_TIMEOUT wû»bê£àtÿ%dm†⁄Çexàsockë cª©i⁄",
vÆue
);

888 
	}
}

890 
	$iscsi_£t_t˝_kìpidÀ
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

892 
iscsi
->
t˝_kìpidÀ
=
vÆue
;

893 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPIDLE wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

894 
	}
}

896 
	$iscsi_£t_t˝_kìp˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

898 
iscsi
->
t˝_kìp˙t
=
vÆue
;

899 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

900 
	}
}

902 
	$iscsi_£t_t˝_kìpötvl
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

904 
iscsi
->
t˝_kìpötvl
=
vÆue
;

905 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPINTVL wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

906 
	}
}

908 
	$iscsi_£t_t˝_kì∑live
(
iscsi_c⁄ãxt
 *
iscsi
, 
idÀ
 
_U_
, 
cou¡
 _U_, 
öãrvÆ
 _U_)

910 #ifde‡
SO_KEEPALIVE


911 
vÆue
 = 1;

912 i‡(
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
vÆue
, (value)) != 0) {

913 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àsockë o±i⁄ SO_KEEPALIVE. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

916 
	`ISCSI_LOG
(
iscsi
, 3, "SO_KEEPALIVE sëÅÿ%d",
vÆue
);

917 #ifde‡
TCP_KEEPCNT


918 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPCNT
, 
cou¡
) != 0) {

919 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêcou¡. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

922 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPCNT sëÅÿ%d",
cou¡
);

924 #ifde‡
TCP_KEEPINTVL


925 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPINTVL
, 
öãrvÆ
) != 0) {

926 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêöãrvÆ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

929 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPINTVL sëÅÿ%d",
öãrvÆ
);

931 #ifde‡
TCP_KEEPIDLE


932 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPIDLE
, 
idÀ
) != 0) {

933 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêidÀ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

936 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPIDLE sëÅÿ%d",
idÀ
);

941 
	}
}

943 
	$iscsi_£t_böd_öãrÁ˚s
(
iscsi_c⁄ãxt
 *
iscsi
, * 
öãrÁ˚s
 
_U_
)

945 #i‡
__löux


946 
	`°∫˝y
(
iscsi
->
böd_öãrÁ˚s
,
öãrÁ˚s
,
MAX_STRING_SIZE
);

947 
iscsi
->
böd_öãrÁ˚s_˙t
=0;

948 * 
pchr
 = 
öãrÁ˚s
;

949 * 
pchr2
 = 
NULL
;

951 
pchr2
 = 
	`°rchr
(
pchr
,',');

952 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

953 
iscsi
->
böd_öãrÁ˚s_˙t
++;

954 } 
pchr2
);

955 
	`ISCSI_LOG
(
iscsi
,2,"wû»bödÅÿ⁄êo‡thêfﬁlowög %d i¡îÁ˚(sË⁄Çexàsockë cª©i⁄: %s",iscsi->
böd_öãrÁ˚s_˙t
,
öãrÁ˚s
);

956 i‡(!
iÁ˚_º
ËiÁ˚_º=
	`ønd
()%
iscsi
->
böd_öãrÁ˚s_˙t
+1;

958 
	`ISCSI_LOG
(
iscsi
,1,"bindingÅoán interface isÇot supported on your OS");

960 
	}
}

	@lib/sync.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
AROS


26 
	~"¨os/¨os_com∑t.h
"

29 #i‡
deföed
(
WIN32
)

30 
	~<wösock2.h
>

31 
	~"wö32/wö32_com∑t.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<time.h
>

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

43 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_sync_°©e
 *
°©e
)

45 
pﬁlfd
 
pfd
;

46 
ªt
;

48 
°©e
->
föished
 == 0) {

49 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

50 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

51 i‡((
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000)) < 0) {

52 
	`iscsi_£t_îr‹
(
iscsi
, "Poll failed");

53 
°©e
->
°©us
 = -1;

56 i‡(
ªt
 == 0) {

57 
	`iscsi_timeout_sˇn
(
iscsi
);

60 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

61 
	`iscsi_£t_îr‹
(
iscsi
,

63 
	`iscsi_gë_îr‹
(
iscsi
));

64 
°©e
->
°©us
 = -1;

68 
	`Ârötf
(
°dîr
, "kalai complete\n");

69 
	}
}

75 
	$iscsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

76 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

78 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

80 
	`Ârötf
(
°dîr
, "kalai iscsi_sync_cb\n");

81 i‡(
°©e
 !
NULL
) {

82 
°©e
->
°©us
 = status;

83 
°©e
->
föished
 = 1;

85 
	}
}

88 
	$iscsi_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
)

90 
iscsi_sync_°©e
 
°©e
;

92 
	`mem£t
(&
°©e
, 0, (state));

94 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
,

95 
iscsi_sync_cb
, &
°©e
) != 0) {

96 
	`iscsi_£t_îr‹
(
iscsi
,

98 
	`iscsi_gë_îr‹
(
iscsi
));

102 
	`evít_lo›
(
iscsi
, &
°©e
);

105 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

107  
°©e
.
°©us
;

108 
	}
}

111 
	$iscsi_fuŒ_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

112 c⁄° *
p‹èl
, 
lun
)

114 
iscsi_sync_°©e
 
°©e
;

116 
	`mem£t
(&
°©e
, 0, (state));

117 
	`Ârötf
(
°dîr
, "kalai iscsi_full_connect_sync\n");

118 i‡(
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
lun
,

119 
iscsi_sync_cb
, &
°©e
) != 0) {

120 
	`iscsi_£t_îr‹
(
iscsi
,

122 
	`iscsi_gë_îr‹
(
iscsi
));

126 
	`evít_lo›
(
iscsi
, &
°©e
);

128  
°©e
.
°©us
;

129 
	}
}

131 
	$iscsi_logö_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

133 
iscsi_sync_°©e
 
°©e
;

135 
	`mem£t
(&
°©e
, 0, (state));

137 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

138 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜogin. %s",

139 
	`iscsi_gë_îr‹
(
iscsi
));

143 
	`evít_lo›
(
iscsi
, &
°©e
);

145  
°©e
.
°©us
;

146 
	}
}

148 
	$iscsi_logout_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

150 
iscsi_sync_°©e
 
°©e
;

152 
	`mem£t
(&
°©e
, 0, (state));

154 i‡(
	`iscsi_logout_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

155 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo startÜogout() %s",

156 
	`iscsi_gë_îr‹
(
iscsi
));

160 
	`evít_lo›
(
iscsi
, &
°©e
);

162  
°©e
.
°©us
;

163 
	}
}

166 
	$iscsi_èsk_mgmt_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

167 *
comm™d_d©a
, *
¥iv©e_d©a
)

169 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

171 i‡(
°©e
 !
NULL
) {

172 
°©e
->
°©us
 = status;

173 
°©e
->
föished
 = 1;

180 i‡(
comm™d_d©a
 && *(
uöt32_t
 *)command_data) {

181 *(
uöt32_t
 *)
comm™d_d©a
) {

182 1: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Does Not Exist");

184 2: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded LUN Does Not Exist");

186 3: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Still Allegiant");

188 4: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Allegiance Reassignment Not Supported");

190 5: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Mgmt Function Not Supported");

192 6: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Authorization Failed");

194 255: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Rejected");

198 
°©e
->
°©us
 = 
SCSI_STATUS_ERROR
;

200 
	}
}

203 
	$iscsi_èsk_mgmt_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

204 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

205 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
)

207 
iscsi_sync_°©e
 
°©e
;

209 
	`mem£t
(&
°©e
, 0, (state));

211 i‡(
	`iscsi_èsk_mgmt_async
(
iscsi
, 
lun
, 
fun˘i⁄
,

212 
rôt
, 
rcmd¢
,

213 
iscsi_èsk_mgmt_sync_cb
, &
°©e
) != 0) {

214 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send TASK MGMT function: %s",

215 
	`iscsi_gë_îr‹
(
iscsi
));

219 
	`evít_lo›
(
iscsi
, &
°©e
);

221  
°©e
.
°©us
;

222 
	}
}

225 
	$iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

226 
scsi_èsk
 *
èsk
)

228 
	`iscsi_scsi_ˇn˚l_èsk
(
iscsi
, 
èsk
);

230  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
èsk
->
lun
,

231 
ISCSI_TM_ABORT_TASK
,

232 
èsk
->
ôt
,Åask->
cmd¢
);

233 
	}
}

236 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

237 
uöt32_t
 
lun
)

239 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

241  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

242 
ISCSI_TM_ABORT_TASK_SET
,

244 
	}
}

247 
	$iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

248 
uöt32_t
 
lun
)

250 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

252  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

253 
ISCSI_TM_LUN_RESET
,

255 
	}
}

258 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

260 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

262  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

263 
ISCSI_TM_TARGET_WARM_RESET
,

265 
	}
}

269 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

271 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

273  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

274 
ISCSI_TM_TARGET_COLD_RESET
,

276 
	}
}

283 
	$scsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
,

284 *
¥iv©e_d©a
)

286 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

287 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

289 
èsk
->
°©us
 = status;

291 
°©e
->
°©us
 = status;

292 
°©e
->
föished
 = 1;

293 
°©e
->
èsk
 =Åask;

294 
	}
}

296 
scsi_èsk
 *

297 
	$iscsi_ªp‹éuns_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

298 
Æloc_Àn
)

300 
iscsi_sync_°©e
 
°©e
;

302 
	`mem£t
(&
°©e
, 0, (state));

304 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 
ªp‹t_ty≥
, 
Æloc_Àn
,

305 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

306 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send ReportLuns command");

307  
NULL
;

310 
	`evít_lo›
(
iscsi
, &
°©e
);

312  
°©e
.
èsk
;

313 
	}
}

316 
scsi_èsk
 *

317 
	$iscsi_ã°unôªady_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

319 
iscsi_sync_°©e
 
°©e
;

321 
	`mem£t
(&
°©e
, 0, (state));

323 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
lun
,

324 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

325 
	`iscsi_£t_îr‹
(
iscsi
,

327  
NULL
;

330 
	`evít_lo›
(
iscsi
, &
°©e
);

332  
°©e
.
èsk
;

333 
	}
}

335 
scsi_èsk
 *

336 
	$iscsi_öquúy_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

337 
∑ge_code
, 
maxsize
)

339 
iscsi_sync_°©e
 
°©e
;

341 
	`mem£t
(&
°©e
, 0, (state));

343 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
,

344 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

345 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Inquiry command");

346  
NULL
;

349 
	`evít_lo›
(
iscsi
, &
°©e
);

351  
°©e
.
èsk
;

352 
	}
}

354 
scsi_èsk
 *

355 
	$iscsi_ªad6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

356 
uöt32_t
 
d©Æí
, 
blocksize
)

358 
iscsi_sync_°©e
 
°©e
;

360 
	`mem£t
(&
°©e
, 0, (state));

362 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

363 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

364 
	`iscsi_£t_îr‹
(
iscsi
,

366  
NULL
;

369 
	`evít_lo›
(
iscsi
, &
°©e
);

371  
°©e
.
èsk
;

372 
	}
}

374 
scsi_èsk
 *

375 
	$iscsi_ªad10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

376 
uöt32_t
 
d©Æí
, 
blocksize
,

377 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

379 
iscsi_sync_°©e
 
°©e
;

381 
	`mem£t
(&
°©e
, 0, (state));

383 i‡(
	`iscsi_ªad10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

384 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

385 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

386 
	`iscsi_£t_îr‹
(
iscsi
,

388  
NULL
;

391 
	`evít_lo›
(
iscsi
, &
°©e
);

393  
°©e
.
èsk
;

394 
	}
}

396 
scsi_èsk
 *

397 
	$iscsi_ªad12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

398 
uöt32_t
 
d©Æí
, 
blocksize
,

399 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

401 
iscsi_sync_°©e
 
°©e
;

403 
	`mem£t
(&
°©e
, 0, (state));

405 i‡(
	`iscsi_ªad12_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

406 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

407 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

408 
	`iscsi_£t_îr‹
(
iscsi
,

410  
NULL
;

413 
	`evít_lo›
(
iscsi
, &
°©e
);

415  
°©e
.
èsk
;

416 
	}
}

418 
scsi_èsk
 *

419 
	$iscsi_ªad16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

420 
uöt32_t
 
d©Æí
, 
blocksize
,

421 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

423 
iscsi_sync_°©e
 
°©e
;

425 
	`mem£t
(&
°©e
, 0, (state));

427 i‡(
	`iscsi_ªad16_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

428 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

429 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

430 
	`iscsi_£t_îr‹
(
iscsi
,

432  
NULL
;

435 
	`evít_lo›
(
iscsi
, &
°©e
);

437  
°©e
.
èsk
;

438 
	}
}

440 
scsi_èsk
 *

441 
	$iscsi_ªadˇ∑côy10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

442 
pmi
)

444 
iscsi_sync_°©e
 
°©e
;

446 
	`mem£t
(&
°©e
, 0, (state));

448 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
lun
, 
lba
, 
pmi
,

449 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

450 
	`iscsi_£t_îr‹
(
iscsi
,

452  
NULL
;

454 
	`evít_lo›
(
iscsi
, &
°©e
);

456  
°©e
.
èsk
;

457 
	}
}

459 
scsi_èsk
 *

460 
	$iscsi_ªadˇ∑côy16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

462 
iscsi_sync_°©e
 
°©e
;

464 
	`mem£t
(&
°©e
, 0, (state));

466 i‡(
	`iscsi_ªadˇ∑côy16_èsk
(
iscsi
, 
lun
,

467 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

468 
	`iscsi_£t_îr‹
(
iscsi
,

470  
NULL
;

473 
	`evít_lo›
(
iscsi
, &
°©e
);

475  
°©e
.
èsk
;

476 
	}
}

478 
scsi_èsk
 *

479 
	$iscsi_ßnôize_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

480 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

481 
iscsi_d©a
 *
d©a
)

483 
iscsi_sync_°©e
 
°©e
;

485 
	`mem£t
(&
°©e
, 0, (state));

487 i‡(
	`iscsi_ßnôize_èsk
(
iscsi
, 
lun
,

488 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
d©a
,

489 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

490 
	`iscsi_£t_îr‹
(
iscsi
,

492  
NULL
;

495 
	`evít_lo›
(
iscsi
, &
°©e
);

497  
°©e
.
èsk
;

498 
	}
}

500 
scsi_èsk
 *

501 
	$iscsi_ßnôize_block_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

502 
immed
, 
au£
)

504 
iscsi_sync_°©e
 
°©e
;

506 
	`mem£t
(&
°©e
, 0, (state));

508 i‡(
	`iscsi_ßnôize_block_îa£_èsk
(
iscsi
, 
lun
,

509 
immed
, 
au£
,

510 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

511 
	`iscsi_£t_îr‹
(
iscsi
,

513  
NULL
;

516 
	`evít_lo›
(
iscsi
, &
°©e
);

518  
°©e
.
èsk
;

519 
	}
}

521 
scsi_èsk
 *

522 
	$iscsi_ßnôize_¸y±o_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

523 
immed
, 
au£
)

525 
iscsi_sync_°©e
 
°©e
;

527 
	`mem£t
(&
°©e
, 0, (state));

529 i‡(
	`iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi
, 
lun
,

530 
immed
, 
au£
,

531 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

532 
	`iscsi_£t_îr‹
(
iscsi
,

534  
NULL
;

537 
	`evít_lo›
(
iscsi
, &
°©e
);

539  
°©e
.
èsk
;

540 
	}
}

542 
scsi_èsk
 *

543 
	$iscsi_ßnôize_exô_Áûuª_mode_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

544 
immed
, 
au£
)

546 
iscsi_sync_°©e
 
°©e
;

548 
	`mem£t
(&
°©e
, 0, (state));

550 i‡(
	`iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi
, 
lun
,

551 
immed
, 
au£
,

552 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

553 
	`iscsi_£t_îr‹
(
iscsi
,

555  
NULL
;

558 
	`evít_lo›
(
iscsi
, &
°©e
);

560  
°©e
.
èsk
;

561 
	}
}

563 
scsi_èsk
 *

564 
	$iscsi_gë_lba_°©us_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

566 
iscsi_sync_°©e
 
°©e
;

568 
	`mem£t
(&
°©e
, 0, (state));

570 i‡(
	`iscsi_gë_lba_°©us_èsk
(
iscsi
, 
lun
, 
°¨tög_lba
, 
Æloc_Àn
,

571 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

572 
	`iscsi_£t_îr‹
(
iscsi
,

574  
NULL
;

577 
	`evít_lo›
(
iscsi
, &
°©e
);

579  
°©e
.
èsk
;

580 
	}
}

582 
scsi_èsk
 *

583 
	$iscsi_synchr⁄izeˇche10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

584 
num_blocks
, 
syn˙v
, 
immed
)

586 
iscsi_sync_°©e
 
°©e
;

588 
	`mem£t
(&
°©e
, 0, (state));

590 i‡(
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

591 
syn˙v
, 
immed
,

592 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

593 
	`iscsi_£t_îr‹
(
iscsi
,

595  
NULL
;

598 
	`evít_lo›
(
iscsi
, &
°©e
);

600  
°©e
.
èsk
;

601 
	}
}

603 
scsi_èsk
 *

604 
	$iscsi_°¨t°›unô_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

605 
immed
, 
pcm
, 
pc
,

606 
no_Êush
, 
l€j
, 
°¨t
)

608 
iscsi_sync_°©e
 
°©e
;

610 
	`mem£t
(&
°©e
, 0, (state));

612 i‡(
	`iscsi_°¨t°›unô_èsk
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
,

613 
no_Êush
, 
l€j
, 
°¨t
,

614 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

615 
	`iscsi_£t_îr‹
(
iscsi
,

617  
NULL
;

620 
	`evít_lo›
(
iscsi
, &
°©e
);

622  
°©e
.
èsk
;

623 
	}
}

625 
scsi_èsk
 *

626 
	$iscsi_¥evíèŒow_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

627 
¥evít
)

629 
iscsi_sync_°©e
 
°©e
;

631 
	`mem£t
(&
°©e
, 0, (state));

633 i‡(
	`iscsi_¥evíèŒow_èsk
(
iscsi
, 
lun
, 
¥evít
,

634 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

635 
	`iscsi_£t_îr‹
(
iscsi
,

637  
NULL
;

640 
	`evít_lo›
(
iscsi
, &
°©e
);

642  
°©e
.
èsk
;

643 
	}
}

645 
scsi_èsk
 *

646 
	$iscsi_synchr⁄izeˇche16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

647 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

649 
iscsi_sync_°©e
 
°©e
;

651 
	`mem£t
(&
°©e
, 0, (state));

653 i‡(
	`iscsi_synchr⁄izeˇche16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

654 
syn˙v
, 
immed
,

655 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

656 
	`iscsi_£t_îr‹
(
iscsi
,

658  
NULL
;

661 
	`evít_lo›
(
iscsi
, &
°©e
);

663  
°©e
.
èsk
;

664 
	}
}

666 
scsi_èsk
 *

667 
	$iscsi_¥e„tch10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

668 
num_blocks
, 
immed
, 
group
)

670 
iscsi_sync_°©e
 
°©e
;

672 
	`mem£t
(&
°©e
, 0, (state));

674 i‡(
	`iscsi_¥e„tch10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

675 
immed
, 
group
,

676 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

677 
	`iscsi_£t_îr‹
(
iscsi
,

679  
NULL
;

682 
	`evít_lo›
(
iscsi
, &
°©e
);

684  
°©e
.
èsk
;

685 
	}
}

687 
scsi_èsk
 *

688 
	$iscsi_¥e„tch16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

689 
num_blocks
, 
immed
, 
group
)

691 
iscsi_sync_°©e
 
°©e
;

693 
	`mem£t
(&
°©e
, 0, (state));

695 i‡(
	`iscsi_¥e„tch16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

696 
immed
, 
group
,

697 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

698 
	`iscsi_£t_îr‹
(
iscsi
,

700  
NULL
;

703 
	`evít_lo›
(
iscsi
, &
°©e
);

705  
°©e
.
èsk
;

706 
	}
}

708 
scsi_èsk
 *

709 
	$iscsi_wrôe10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

710 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

711 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

713 
iscsi_sync_°©e
 
°©e
;

715 
	`mem£t
(&
°©e
, 0, (state));

717 i‡(
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

718 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

719 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

720 
	`iscsi_£t_îr‹
(
iscsi
,

722  
NULL
;

725 
	`evít_lo›
(
iscsi
, &
°©e
);

727  
°©e
.
èsk
;

728 
	}
}

730 
scsi_èsk
 *

731 
	$iscsi_wrôe12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

732 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

733 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

735 
iscsi_sync_°©e
 
°©e
;

737 
	`mem£t
(&
°©e
, 0, (state));

739 i‡(
	`iscsi_wrôe12_èsk
(
iscsi
, 
lun
, 
lba
,

740 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

741 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

742 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

743 
	`iscsi_£t_îr‹
(
iscsi
,

745  
NULL
;

748 
	`evít_lo›
(
iscsi
, &
°©e
);

750  
°©e
.
èsk
;

751 
	}
}

753 
scsi_èsk
 *

754 
	$iscsi_wrôe16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

755 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

756 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

758 
iscsi_sync_°©e
 
°©e
;

760 
	`mem£t
(&
°©e
, 0, (state));

762 i‡(
	`iscsi_wrôe16_èsk
(
iscsi
, 
lun
, 
lba
,

763 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

764 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

765 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

766 
	`iscsi_£t_îr‹
(
iscsi
,

768  
NULL
;

771 
	`evít_lo›
(
iscsi
, &
°©e
);

773  
°©e
.
èsk
;

774 
	}
}

776 
scsi_èsk
 *

777 
	$iscsi_‹wrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

778 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

779 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

781 
iscsi_sync_°©e
 
°©e
;

783 
	`mem£t
(&
°©e
, 0, (state));

785 i‡(
	`iscsi_‹wrôe_èsk
(
iscsi
, 
lun
, 
lba
,

786 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

787 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

788 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

789 
	`iscsi_£t_îr‹
(
iscsi
,

791  
NULL
;

794 
	`evít_lo›
(
iscsi
, &
°©e
);

796  
°©e
.
èsk
;

797 
	}
}

799 
scsi_èsk
 *

800 
	$iscsi_com∑ª™dwrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

801 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

802 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

804 
iscsi_sync_°©e
 
°©e
;

806 
	`mem£t
(&
°©e
, 0, (state));

808 i‡(
	`iscsi_com∑ª™dwrôe_èsk
(
iscsi
, 
lun
, 
lba
,

809 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

810 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

811 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

812 
	`iscsi_£t_îr‹
(
iscsi
,

814  
NULL
;

817 
	`evít_lo›
(
iscsi
, &
°©e
);

819  
°©e
.
èsk
;

820 
	}
}

822 
scsi_èsk
 *

823 
	$iscsi_wrôevîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

824 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

825 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

827 
iscsi_sync_°©e
 
°©e
;

829 
	`mem£t
(&
°©e
, 0, (state));

831 i‡(
	`iscsi_wrôevîify10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

832 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

833 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

834 
	`iscsi_£t_îr‹
(
iscsi
,

836  
NULL
;

839 
	`evít_lo›
(
iscsi
, &
°©e
);

841  
°©e
.
èsk
;

842 
	}
}

844 
scsi_èsk
 *

845 
	$iscsi_wrôevîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

846 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

847 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

849 
iscsi_sync_°©e
 
°©e
;

851 
	`mem£t
(&
°©e
, 0, (state));

853 i‡(
	`iscsi_wrôevîify12_èsk
(
iscsi
, 
lun
, 
lba
,

854 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

855 
dpo
, 
bytchk
, 
group_numbî
,

856 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

857 
	`iscsi_£t_îr‹
(
iscsi
,

859  
NULL
;

862 
	`evít_lo›
(
iscsi
, &
°©e
);

864  
°©e
.
èsk
;

865 
	}
}

867 
scsi_èsk
 *

868 
	$iscsi_wrôevîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

869 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

870 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

872 
iscsi_sync_°©e
 
°©e
;

874 
	`mem£t
(&
°©e
, 0, (state));

876 i‡(
	`iscsi_wrôevîify16_èsk
(
iscsi
, 
lun
, 
lba
,

877 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

878 
dpo
, 
bytchk
, 
group_numbî
,

879 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

880 
	`iscsi_£t_îr‹
(
iscsi
,

882  
NULL
;

885 
	`evít_lo›
(
iscsi
, &
°©e
);

887  
°©e
.
èsk
;

888 
	}
}

890 
scsi_èsk
 *

891 
	$iscsi_vîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

892 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

894 
iscsi_sync_°©e
 
°©e
;

896 
	`mem£t
(&
°©e
, 0, (state));

898 i‡(
	`iscsi_vîify10_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

899 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

900 
	`iscsi_£t_îr‹
(
iscsi
,

902  
NULL
;

905 
	`evít_lo›
(
iscsi
, &
°©e
);

907  
°©e
.
èsk
;

908 
	}
}

910 
scsi_èsk
 *

911 
	$iscsi_vîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

912 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

914 
iscsi_sync_°©e
 
°©e
;

916 
	`mem£t
(&
°©e
, 0, (state));

918 i‡(
	`iscsi_vîify12_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

919 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

920 
	`iscsi_£t_îr‹
(
iscsi
,

922  
NULL
;

925 
	`evít_lo›
(
iscsi
, &
°©e
);

927  
°©e
.
èsk
;

928 
	}
}

930 
scsi_èsk
 *

931 
	$iscsi_vîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

932 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

934 
iscsi_sync_°©e
 
°©e
;

936 
	`mem£t
(&
°©e
, 0, (state));

938 i‡(
	`iscsi_vîify16_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

939 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

940 
	`iscsi_£t_îr‹
(
iscsi
,

942  
NULL
;

945 
	`evít_lo›
(
iscsi
, &
°©e
);

947  
°©e
.
èsk
;

948 
	}
}

950 
scsi_èsk
 *

951 
	$iscsi_wrôeßme10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

952 *
d©a
, 
uöt32_t
 
d©Æí
,

953 
uöt16_t
 
num_blocks
,

954 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

956 
iscsi_sync_°©e
 
°©e
;

958 
	`mem£t
(&
°©e
, 0, (state));

960 i‡(
	`iscsi_wrôeßme10_èsk
(
iscsi
, 
lun
, 
lba
,

961 
d©a
, 
d©Æí
, 
num_blocks
,

962 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

963 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

964 
	`iscsi_£t_îr‹
(
iscsi
,

966  
NULL
;

969 
	`evít_lo›
(
iscsi
, &
°©e
);

971  
°©e
.
èsk
;

972 
	}
}

974 
scsi_èsk
 *

975 
	$iscsi_wrôeßme16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

976 *
d©a
, 
uöt32_t
 
d©Æí
,

977 
uöt32_t
 
num_blocks
,

978 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

980 
iscsi_sync_°©e
 
°©e
;

982 
	`mem£t
(&
°©e
, 0, (state));

984 i‡(
	`iscsi_wrôeßme16_èsk
(
iscsi
, 
lun
, 
lba
,

985 
d©a
, 
d©Æí
, 
num_blocks
,

986 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

987 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

988 
	`iscsi_£t_îr‹
(
iscsi
,

990  
NULL
;

993 
	`evít_lo›
(
iscsi
, &
°©e
);

995  
°©e
.
èsk
;

996 
	}
}

998 
scsi_èsk
 *

999 
	$iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1000 
ß
, 
uöt16_t
 
x„æí
)

1002 
iscsi_sync_°©e
 
°©e
;

1004 
	`mem£t
(&
°©e
, 0, (state));

1006 i‡(
	`iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi
, 
lun
, 
ß
, 
x„æí
,

1007 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1008 
	`iscsi_£t_îr‹
(
iscsi
,

1010  
NULL
;

1013 
	`evít_lo›
(
iscsi
, &
°©e
);

1015  
°©e
.
èsk
;

1016 
	}
}

1018 
scsi_èsk
 *

1019 
	$iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1020 
ß
, 
sc›e
, 
ty≥
, *
∑øm
)

1022 
iscsi_sync_°©e
 
°©e
;

1024 
	`mem£t
(&
°©e
, 0, (state));

1026 i‡(
	`iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi
, 
lun
,

1027 
ß
, 
sc›e
, 
ty≥
, 
∑øm
,

1028 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1029 
	`iscsi_£t_îr‹
(
iscsi
,

1031  
NULL
;

1034 
	`evít_lo›
(
iscsi
, &
°©e
);

1036  
°©e
.
èsk
;

1037 
	}
}

1039 
scsi_èsk
 *

1040 
	$iscsi_unm≠_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1041 
unm≠_li°
 *
li°
, 
li°_Àn
)

1043 
iscsi_sync_°©e
 
°©e
;

1045 
	`mem£t
(&
°©e
, 0, (state));

1047 i‡(
	`iscsi_unm≠_èsk
(
iscsi
, 
lun
, 
™ch‹
, 
group
, 
li°
, 
li°_Àn
,

1048 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1049 
	`iscsi_£t_îr‹
(
iscsi
,

1051  
NULL
;

1054 
	`evít_lo›
(
iscsi
, &
°©e
);

1056  
°©e
.
èsk
;

1057 
	}
}

1059 
scsi_èsk
 *

1060 
	$iscsi_ªadtoc_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
, 
f‹m©
,

1061 
åack_£ssi⁄
, 
maxsize
)

1063 
iscsi_sync_°©e
 
°©e
;

1065 
	`mem£t
(&
°©e
, 0, (state));

1067 i‡(
	`iscsi_ªadtoc_èsk
(
iscsi
, 
lun
, 
msf
, 
f‹m©
, 
åack_£ssi⁄
,

1068 
maxsize
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1069 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Read TOC command");

1070  
NULL
;

1073 
	`evít_lo›
(
iscsi
, &
°©e
);

1075  
°©e
.
èsk
;

1076 
	}
}

1078 
scsi_èsk
 *

1079 
	$iscsi_ª£rve6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1081 
iscsi_sync_°©e
 
°©e
;

1083 
	`mem£t
(&
°©e
, 0, (state));

1085 i‡(
	`iscsi_ª£rve6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1086 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RESERVE6 command");

1087  
NULL
;

1090 
	`evít_lo›
(
iscsi
, &
°©e
);

1092  
°©e
.
èsk
;

1093 
	}
}

1095 
scsi_èsk
 *

1096 
	$iscsi_ªÀa£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1098 
iscsi_sync_°©e
 
°©e
;

1100 
	`mem£t
(&
°©e
, 0, (state));

1102 i‡(
	`iscsi_ªÀa£6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1103 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RELEASE6 command");

1104  
NULL
;

1107 
	`evít_lo›
(
iscsi
, &
°©e
);

1109  
°©e
.
èsk
;

1110 
	}
}

1112 
scsi_èsk
 *

1113 
	$iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1114 
r˘d
, 
›ti⁄s
,

1115 
›code
, 
ß
,

1116 
uöt32_t
 
Æloc_Àn
)

1118 
iscsi_sync_°©e
 
°©e
;

1120 
	`mem£t
(&
°©e
, 0, (state));

1122 i‡(
	`iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1123 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send MaintenanceIn:"

1125  
NULL
;

1128 
	`evít_lo›
(
iscsi
, &
°©e
);

1130  
°©e
.
èsk
;

1131 
	}
}

1133 
scsi_èsk
 *

1134 
	$iscsi_scsi_comm™d_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1135 
scsi_èsk
 *
èsk
, 
iscsi_d©a
 *
d©a
)

1137 
iscsi_sync_°©e
 
°©e
;

1139 
	`mem£t
(&
°©e
, 0, (state));

1141 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
,

1142 
scsi_sync_cb
, 
d©a
, &
°©e
) != 0) {

1143 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send SCSI command");

1144  
NULL
;

1147 
	`evít_lo›
(
iscsi
, &
°©e
);

1149  
°©e
.
èsk
;

1150 
	}
}

1153 
scsi_èsk
 *

1154 
	$iscsi_mode£À˘6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1155 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1157 
iscsi_sync_°©e
 
°©e
;

1159 
	`mem£t
(&
°©e
, 0, (state));

1161 i‡(
	`iscsi_mode£À˘6_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1162 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1163 
	`iscsi_£t_îr‹
(
iscsi
,

1165  
NULL
;

1168 
	`evít_lo›
(
iscsi
, &
°©e
);

1170  
°©e
.
èsk
;

1171 
	}
}

1173 
scsi_èsk
 *

1174 
	$iscsi_mode£À˘10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1175 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1177 
iscsi_sync_°©e
 
°©e
;

1179 
	`mem£t
(&
°©e
, 0, (state));

1181 i‡(
	`iscsi_mode£À˘10_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1182 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1183 
	`iscsi_£t_îr‹
(
iscsi
,

1185  
NULL
;

1188 
	`evít_lo›
(
iscsi
, &
°©e
);

1190  
°©e
.
èsk
;

1191 
	}
}

1193 
scsi_èsk
 *

1194 
	$iscsi_mode£n£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
,

1195 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1196 
Æloc_Àn
)

1198 
iscsi_sync_°©e
 
°©e
;

1200 
	`mem£t
(&
°©e
, 0, (state));

1202 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
lun
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1203 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1204 
	`iscsi_£t_îr‹
(
iscsi
,

1206  
NULL
;

1209 
	`evít_lo›
(
iscsi
, &
°©e
);

1211  
°©e
.
èsk
;

1212 
	}
}

1214 
scsi_èsk
 *

1215 
	$iscsi_mode£n£10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
ŒbØ
, 
dbd
,

1216 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1217 
Æloc_Àn
)

1219 
iscsi_sync_°©e
 
°©e
;

1221 
	`mem£t
(&
°©e
, 0, (state));

1223 i‡(
	`iscsi_mode£n£10_èsk
(
iscsi
, 
lun
, 
ŒbØ
, 
dbd
, 
pc
,

1224 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1225 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1226 
	`iscsi_£t_îr‹
(
iscsi
,

1228  
NULL
;

1231 
	`evít_lo›
(
iscsi
, &
°©e
);

1233  
°©e
.
èsk
;

1234 
	}
}

	@lib/task_mgmt.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_ARPA_INET_H


26 
	~<¨∑/öë.h
>

29 #ifde‡
HAVE_UNISTD_H


30 
	~<uni°d.h
>

33 
	~<°dio.h
>

34 
	~"iscsi.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"scsi-lowÀvñ.h
"

39 
	$iscsi_èsk_mgmt_async
(
iscsi_c⁄ãxt
 *
iscsi
,

40 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

41 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
,

42 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

44 
iscsi_pdu
 *
pdu
;

46 i‡(
iscsi
->
is_loggedö
 == 0) {

47 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÅask-mgmt whileÇot "

52 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_REQUEST
,

53 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
);

54 i‡(
pdu
 =
NULL
) {

55 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÅask mgmtÖdu");

60 
	`iscsi_pdu_£t_immedüã
(
pdu
);

63 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80 | 
fun˘i⁄
);

66 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

69 
	`iscsi_pdu_£t_rôt
(
pdu
, 
rôt
);

72 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

73 
pdu
->
cmd¢
 = 
iscsi
->cmdsn;

76 
	`iscsi_pdu_£t_rcmd¢
(
pdu
, 
rcmd¢
);

79 
pdu
->
ˇŒback
 = 
cb
;

80 
pdu
->
¥iv©e_d©a
 =Örivate_data;

82 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

83 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÅaskmgmtÖdu");

84 
	`iscsi_‰ì_pdu
(
iscsi
, 
pdu
);

89 
	}
}

92 
	$iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

93 
iscsi_ö_pdu
 *
ö
)

95 
uöt32_t
 
ª•⁄£
, 
maxcmd¢
, 
expcmd¢
;

97 
ª•⁄£
 = 
ö
->
hdr
[2];

99 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

100 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

101 
iscsi
->
maxcmd¢
 = maxcmdsn;

103 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

104 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

105 
iscsi
->
expcmd¢
 =Éxpcmdsn;

108 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
ª•⁄£
,Ödu->
¥iv©e_d©a
);

111 
	}
}

115 
	$iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi_c⁄ãxt
 *
iscsi
,

116 
scsi_èsk
 *
èsk
,

117 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

119 
	`iscsi_scsi_ˇn˚l_èsk
(
iscsi
, 
èsk
);

121  
	`iscsi_èsk_mgmt_async
(
iscsi
,

122 
èsk
->
lun
, 
ISCSI_TM_ABORT_TASK
,

123 
èsk
->
ôt
,Åask->
cmd¢
,

124 
cb
, 
¥iv©e_d©a
);

125 
	}
}

128 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

129 
uöt32_t
 
lun
,

130 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

132 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

134  
	`iscsi_èsk_mgmt_async
(
iscsi
,

135 
lun
, 
ISCSI_TM_ABORT_TASK_SET
,

137 
cb
, 
¥iv©e_d©a
);

138 
	}
}

141 
	$iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

142 
uöt32_t
 
lun
,

143 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

145 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

147  
	`iscsi_èsk_mgmt_async
(
iscsi
,

148 
lun
, 
ISCSI_TM_LUN_RESET
,

150 
cb
, 
¥iv©e_d©a
);

151 
	}
}

154 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

155 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

157 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

159  
	`iscsi_èsk_mgmt_async
(
iscsi
,

160 0, 
ISCSI_TM_TARGET_WARM_RESET
,

162 
cb
, 
¥iv©e_d©a
);

163 
	}
}

167 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

168 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

170 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

172  
	`iscsi_èsk_mgmt_async
(
iscsi
,

173 0, 
ISCSI_TM_TARGET_COLD_RESET
,

175 
cb
, 
¥iv©e_d©a
);

176 
	}
}

	@src/iscsi-inq.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~"iscsi.h
"

31 
	~"scsi-lowÀvñ.h
"

33 #i‚de‡
disˇrd_c⁄°


34 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

37 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-inq";

39 
	$öquúy_block_limôs
(
scsi_öquúy_block_limôs
 *
öq
)

41 
	`¥ötf
("w¢z:%d\n", 
öq
->
w¢z
);

42 
	`¥ötf
("maximum com∑ªánd wrôêÀngth:%d\n", 
öq
->
max_cmp
);

43 
	`¥ötf
("›timÆÅøns„∏Àngth gønuœrôy:%d\n", 
öq
->
›t_gøn
);

44 
	`¥ötf
("maximumÅøns„∏Àngth:%d\n", 
öq
->
max_x„r_Àn
);

45 
	`¥ötf
("›timÆÅøns„∏Àngth:%d\n",
öq
->
›t_x„r_Àn
);

46 
	`¥ötf
("maximumÖª„tch xdªad xdwrôêå™s„∏Àngth:%d\n", 
öq
->
max_¥e„tch
);

47 
	`¥ötf
("maximum unm≠Üb®cou¡:%d\n", 
öq
->
max_unm≠
);

48 
	`¥ötf
("maximum unm≠ block des¸ùt‹ cou¡:%d\n", 
öq
->
max_unm≠_bdc
);

49 
	`¥ötf
("›timÆ unm≠ gønuœrôy:%d\n", 
öq
->
›t_unm≠_gøn
);

50 
	`¥ötf
("ugavÆid:%d\n", 
öq
->
ugavÆid
);

51 
	`¥ötf
("unm≠ gønuœrôyálignmít:%d\n", 
öq
->
unm≠_gøn_Æign
);

52 
	`¥ötf
("maximum wrôêßmêÀngth:%d\n", ()
öq
->
max_ws_Àn
);

53 
	}
}

55 
	$öquúy_logiˇl_block_¥ovisi⁄ög
(
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
)

57 
	`¥ötf
("Thªshﬁd Exp⁄ít:%d\n", 
öq
->
thªshﬁd_exp⁄ít
);

58 
	`¥ötf
("lbpu:%d\n", 
öq
->
lbpu
);

59 
	`¥ötf
("lbpws:%d\n", 
öq
->
lbpws
);

60 
	`¥ötf
("lbpws10:%d\n", 
öq
->
lbpws10
);

61 
	`¥ötf
("lb¥z:%d\n", 
öq
->
lb¥z
);

62 
	`¥ötf
("™c_sup:%d\n", 
öq
->
™c_sup
);

63 
	`¥ötf
("dp:%d\n", 
öq
->
dp
);

64 
	`¥ötf
("¥ovisi⁄ögÅy≥:%d\n", 
öq
->
¥ovisi⁄ög_ty≥
);

65 
	}
}

67 
	$öquúy_block_devi˚_ch¨a˘îi°ics
(
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
)

69 
	`¥ötf
("Medium RŸ©i⁄ R©e:%dRPM\n", 
öq
->
medium_rŸ©i⁄_øã
);

70 
	}
}

72 
	$öquúy_devi˚_idítifiˇti⁄
(
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
)

74 
scsi_öquúy_devi˚_desig«t‹
 *
dev
;

75 
i
;

77 
	`¥ötf
("Peripheral Qualifier:%s\n",

78 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

79 
	`¥ötf
("Peripheral Device Type:%s\n",

80 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

81 
	`¥ötf
("Page Code:(0x%02x) %s\n",

82 
öq
->
∑gecode
, 
	`scsi_öquúy_∑gecode_to_°r
(inq->pagecode));

84 
i
=0, 
dev
 = 
öq
->
desig«t‹s
; dev; i++, dev = dev->
√xt
) {

85 
	`¥ötf
("DEVICE DESIGNATOR #%d\n", 
i
);

86 i‡(
dev
->
piv
 != 0) {

87 
	`¥ötf
("Devi˚ PrŸocﬁ Idítifõr:(%dË%s\n", 
dev
->
¥Ÿocﬁ_idítifõr
, 
	`scsi_¥Ÿocﬁ_idítifõr_to_°r
(dev->protocol_identifier));

89 
	`¥ötf
("CodêSë:(%dË%s\n", 
dev
->
code_£t
, 
	`scsi_code£t_to_°r
(dev->code_set));

90 
	`¥ötf
("PIV:%d\n", 
dev
->
piv
);

91 
	`¥ötf
("Assocüti⁄:(%dË%s\n", 
dev
->
assocüti⁄
, 
	`scsi_assocüti⁄_to_°r
(dev->association));

92 
	`¥ötf
("Desig«t‹ Ty≥:(%dË%s\n", 
dev
->
desig«t‹_ty≥
, 
	`scsi_desig«t‹_ty≥_to_°r
(dev->designator_type));

93 
	`¥ötf
("Desig«t‹:[%s]\n", 
dev
->
desig«t‹
);

95 
	}
}

97 
	$öquúy_unô_£rül_numbî
(
scsi_öquúy_unô_£rül_numbî
 *
öq
)

99 
	`¥ötf
("Unô Sîü»Numbî:[%s]\n", 
öq
->
u¢
);

100 
	}
}

102 
	$öquúy_suµ‹ãd_∑ges
(
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
)

104 
i
;

106 
i
 = 0; i < 
öq
->
num_∑ges
; i++) {

107 
	`¥ötf
("Page:0x%02x %s\n", 
öq
->
∑ges
[
i
], 
	`scsi_öquúy_∑gecode_to_°r
(inq->pages[i]));

109 
	}
}

111 
	$öquúy_°™d¨d
(
scsi_öquúy_°™d¨d
 *
öq
)

113 
i
;

115 
	`¥ötf
("Peripheral Qualifier:%s\n",

116 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

117 
	`¥ötf
("Peripheral Device Type:%s\n",

118 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

119 
	`¥ötf
("RemovabÀ:%d\n", 
öq
->
rmb
);

120 
	`¥ötf
("Vîsi⁄:%d %s\n", 
öq
->
vîsi⁄
, 
	`scsi_vîsi⁄_to_°r
(inq->version));

121 
	`¥ötf
("N‹mACA:%d\n", 
öq
->
n‹maˇ
);

122 
	`¥ötf
("HiSup:%d\n", 
öq
->
hisup
);

123 
	`¥ötf
("Rï⁄£D©aF‹m©:%d\n", 
öq
->
ª•⁄£_d©a_f‹m©
);

124 
	`¥ötf
("SCCS:%d\n", 
öq
->
sccs
);

125 
	`¥ötf
("ACC:%d\n", 
öq
->
acc
);

126 
	`¥ötf
("TPGS:%d\n", 
öq
->
çgs
);

127 
	`¥ötf
("3PC:%d\n", 
öq
->
thªïc
);

128 
	`¥ötf
("PrŸe˘:%d\n", 
öq
->
¥Ÿe˘
);

129 
	`¥ötf
("EncSîv:%d\n", 
öq
->
íc£rv
);

130 
	`¥ötf
("Mu…iP:%d\n", 
öq
->
mu…ù
);

131 
	`¥ötf
("SYNC:%d\n", 
öq
->
sync
);

132 
	`¥ötf
("CmdQue:%d\n", 
öq
->
cmdque
);

133 
	`¥ötf
("Víd‹:%s\n", 
öq
->
víd‹_idítifiˇti⁄
);

134 
	`¥ötf
("Produ˘:%s\n", 
öq
->
¥odu˘_idítifiˇti⁄
);

135 
	`¥ötf
("Revisi⁄:%s\n", 
öq
->
¥odu˘_ªvisi⁄_Àvñ
);

137 
i
 = 0; i < 8; i++) {

138 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0) {

142 
	`¥ötf
("Version Descriptor:%04x %s\n",

143 
öq
->
vîsi⁄_des¸ùt‹
[
i
],

144 
	`scsi_vîsi⁄_des¸ùt‹_to_°r
(

145 
öq
->
vîsi⁄_des¸ùt‹
[
i
]));

147 
	}
}

149 
	$do_öquúy
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
pc
)

151 
scsi_èsk
 *
èsk
;

152 
fuŒ_size
;

153 *
öq
;

156 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 64);

157 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

158 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
	`exô
(10);

162 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

163 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 
fuŒ_size
)Ë=
NULL
) {

168 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

169 
	`exô
(10);

173 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

174 i‡(
öq
 =
NULL
) {

175 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

176 
	`exô
(10);

179 i‡(
evpd
 == 0) {

180 
	`öquúy_°™d¨d
(
öq
);

182 
pc
) {

183 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

184 
	`öquúy_suµ‹ãd_∑ges
(
öq
);

186 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

187 
	`öquúy_unô_£rül_numbî
(
öq
);

189 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

190 
	`öquúy_devi˚_idítifiˇti⁄
(
öq
);

192 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

193 
	`öquúy_block_limôs
(
öq
);

195 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

196 
	`öquúy_block_devi˚_ch¨a˘îi°ics
(
öq
);

198 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

199 
	`öquúy_logiˇl_block_¥ovisi⁄ög
(
öq
);

202 
	`Ârötf
(
°dîr
, "Usuµ‹ãdÖagecode:0x%02x\n", 
pc
);

205 
	`scsi_‰ì_scsi_èsk
(
èsk
);

206 
	}
}

209 
	$¥öt_ußge
()

211 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

213 
	}
}

215 
	$¥öt_hñp
()

217 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [OPTION...] <iscsi-url>\n");

218 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

219 
	`Ârötf
(
°dîr
, " -e, --evpd=integerÉvpd\n");

220 
	`Ârötf
(
°dîr
, " -c, --pagecode=integerÖage code\n");

221 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

222 
	`Ârötf
(
°dîr
, "\n");

223 
	`Ârötf
(
°dîr
, "Help options:\n");

224 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

225 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

226 
	`Ârötf
(
°dîr
, "\n");

227 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

228 
	`Ârötf
(
°dîr
, "\n");

229 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

230 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

231 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

232 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

233 
	}
}

235 
	$maö
(
¨gc
, *
¨gv
[])

237 
iscsi_c⁄ãxt
 *
iscsi
;

238 c⁄° *
uæ
 = 
NULL
;

239 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

240 
evpd
 = 0, 
∑gecode
 = 0;

241 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

242 
c
;

244 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

245 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

246 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

247 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

248 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

249 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

250 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

253 
›ti⁄_ödex
;

255 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:e:c:", 
l⁄g_›ti⁄s
,

256 &
›ti⁄_ödex
)) != -1) {

257 
c
) {

260 
show_hñp
 = 1;

263 
show_ußge
 = 1;

266 
debug
 = 1;

269 
öôüt‹
 = 
›èrg
;

272 
evpd
 = 
	`©oi
(
›èrg
);

275 
∑gecode
 = 
	`©oi
(
›èrg
);

278 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

279 
	`¥öt_hñp
();

280 
	`exô
(0);

284 i‡(
show_hñp
 != 0) {

285 
	`¥öt_hñp
();

286 
	`exô
(0);

289 i‡(
show_ußge
 != 0) {

290 
	`¥öt_ußge
();

291 
	`exô
(0);

294 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

295 i‡(
iscsi
 =
NULL
) {

296 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

297 
	`exô
(10);

300 i‡(
debug
 > 0) {

301 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

302 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

305 i‡(
¨gv
[
›töd
] !
NULL
) {

306 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

308 i‡(
uæ
 =
NULL
) {

309 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

310 
	`¥öt_ußge
();

311 
	`exô
(10);

313 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

315 i‡(
uæ
) {

316 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

319 i‡(
iscsi_uæ
 =
NULL
) {

320 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

321 
	`iscsi_gë_îr‹
(
iscsi
));

322 
	`exô
(10);

325 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

326 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

327 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

329 i‡(
iscsi_uæ
->
u£r
[0]) {

330 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

331 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

332 
	`exô
(10);

336 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

337 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

338 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

339 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

340 
	`exô
(10);

343 
	`do_öquúy
(
iscsi
, 
iscsi_uæ
->
lun
, 
evpd
, 
∑gecode
);

344 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

346 
	`iscsi_logout_sync
(
iscsi
);

347 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

349 
	}
}

	@src/iscsi-ls.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<gë›t.h
>

34 
	~"iscsi.h
"

35 
	~"scsi-lowÀvñ.h
"

37 #i‚de‡
disˇrd_c⁄°


38 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

41 
	gshowluns
;

42 
	gu£uæs
;

43 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

45 
	s˛õ¡_°©e
 {

46 
	mföished
;

47 
	m°©us
;

48 
	mlun
;

49 
	mty≥
;

50 c⁄° *
	mu£∫ame
;

51 c⁄° *
	m∑ssw‹d
;

55 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

57 
pﬁlfd
 
pfd
;

59 
°©e
->
föished
 == 0) {

60 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

61 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

63 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

64 
	`Ârötf
(
°dîr
, "Poll failed");

65 
	`exô
(10);

67 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

68 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
	`exô
(10);

72 
	}
}

74 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

76 
scsi_èsk
 *
èsk
;

77 
scsi_öquúy_°™d¨d
 *
öq
;

78 
ty≥
, 
no_medü
;

79 
size
 = 0;

80 
size_pf
 = 0;

81 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

84 
tur_åy_agaö
:

85 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

86 
	`Ârötf
(
°dîr
, "testunitready failed\n");

87 
	`exô
(10);

89 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

90 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
tur_åy_agaö
;

96 
no_medü
 = 0;

97 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


98 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


99 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

101 
no_medü
 = 1;

102 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

103 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
	`exô
(10);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

112 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

113 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
	`exô
(10);

116 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

117 i‡(
öq
 =
NULL
) {

118 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

119 
	`exô
(10);

121 
ty≥
 = 
öq
->
devi˚_ty≥
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

127 
scsi_ªadˇ∑côy10
 *
rc10
;

129 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

130 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

132 
	`exô
(10);

135 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

136 i‡(
rc10
 =
NULL
) {

137 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

138 
	`exô
(10);

141 
size
 = 
rc10
->
block_size
;

142 
size
 *
rc10
->
lba
;

144 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

145 
size
 /= 1024;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

153 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

154 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

156 i‡(
no_medü
) {

157 
	`¥ötf
(" (No mediaÜoaded)");

159 
	`¥ötf
("\n");

160 
	}
}

162 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

164 
iscsi_c⁄ãxt
 *
iscsi
;

165 
scsi_èsk
 *
èsk
;

166 
scsi_ªp‹éuns_li°
 *
li°
;

167 
fuŒ_ªp‹t_size
;

168 
i
;

170 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

171 i‡(
iscsi
 =
NULL
) {

172 
	`¥ötf
("FailedÅo create context\n");

173 
	`exô
(10);

175 i‡(
˛¡
->
u£∫ame
 !
NULL
) {

176 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
) != 0) {

177 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

178 
	`exô
(10);

181 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

182 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

183 
	`exô
(10);

185 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

186 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

187 i‡(
	`iscsi_c⁄√˘_sync
(
iscsi
, 
p‹èl
) != 0) {

188 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
	`exô
(10);

192 i‡(
	`iscsi_logö_sync
(
iscsi
) != 0) {

193 
	`Ârötf
(
°dîr
, "logö faûed :%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

194 
	`exô
(10);

201 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

202 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

203 
	`exô
(10);

205 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

206 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

211 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

212 
	`exô
(10);

216 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

217 i‡(
li°
 =
NULL
) {

218 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

219 
	`exô
(10);

221 
i
=0; i < ()
li°
->
num
; i++) {

222 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

227 
	}
}

232 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

234 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

236 i‡(
°©us
 != 0) {

237 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

238 
	`exô
(10);

241 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

242 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

243 
	`exô
(10);

246 
°©e
->
föished
 = 1;

247 
	}
}

249 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

251 
iscsi_discovîy_addªss
 *
addr
;

253 i‡(
°©us
 != 0) {

254 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

255 
	`exô
(10);

258 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

259 
iscsi_èrgë_p‹èl
 *
p‹èl
 = 
addr
->
p‹èls
;

261 
p‹èl
 !
NULL
) {

262 i‡(
u£uæs
 =1 && 
showluns
 == 0) {

263 
	`¥ötf
("iscsi://%s/%s/0\n", 
p‹èl
->p‹èl, 
addr
->
èrgë_«me
);

265 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
, 
p‹èl
->portal);

267 i‡(
showluns
 != 0) {

268 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
, 
p‹èl
->portal);

270 
p‹èl
 =Ö‹èl->
√xt
;

274 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

275 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

276 
	`exô
(10);

278 
	}
}

281 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

283 i‡(
°©us
 != 0) {

284 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

285 
	`exô
(10);

288 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

289 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

290 
	`exô
(10);

292 
	}
}

294 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

296 i‡(
°©us
 != 0) {

297 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

298 
	`exô
(10);

301 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

302 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

303 
	`exô
(10);

305 
	}
}

307 
	$¥öt_ußge
()

309 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

311 
	}
}

313 
	$¥öt_hñp
()

315 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

316 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

317 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

318 
	`Ârötf
(
°dîr
, " --url OutputÅargets in URL format\n");

319 
	`Ârötf
(
°dîr
, " (doesÇot work with -s)\n");

320 
	`Ârötf
(
°dîr
, "\n");

321 
	`Ârötf
(
°dîr
, "Help options:\n");

322 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

323 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

324 
	`Ârötf
(
°dîr
, "\n");

325 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

326 
	`Ârötf
(
°dîr
, "\n");

327 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

328 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

329 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

330 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

331 
	}
}

333 
	$maö
(
¨gc
, *
¨gv
[])

335 
iscsi_c⁄ãxt
 *
iscsi
;

336 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

337 
˛õ¡_°©e
 
°©e
;

338 c⁄° *
uæ
 = 
NULL
;

339 
c
;

340 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

342 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

343 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

344 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

345 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

346 {"show-luns", 
no_¨gumít
, 
NULL
, 's'},

347 {"uæ", 
no_¨gumít
, 
NULL
, 'U'},

348 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

351 
›ti⁄_ödex
;

353 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

354 &
›ti⁄_ödex
)) != -1) {

355 
c
) {

358 
show_hñp
 = 1;

361 
show_ußge
 = 1;

364 
u£uæs
 = 1;

367 
debug
 = 1;

370 
öôüt‹
 = 
›èrg
;

373 
showluns
 = 1;

376 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

377 
	`¥öt_hñp
();

378 
	`exô
(0);

382 i‡(
show_hñp
 != 0) {

383 
	`¥öt_hñp
();

384 
	`exô
(0);

387 i‡(
show_ußge
 != 0) {

388 
	`¥öt_ußge
();

389 
	`exô
(0);

392 i‡(
›töd
 !
¨gc
 -1) {

393 
	`¥öt_ußge
();

394 
	`exô
(0);

397 
	`mem£t
(&
°©e
, 0, (state));

399 i‡(
¨gv
[
›töd
] !
NULL
) {

400 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

402 i‡(
uæ
 =
NULL
) {

403 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

404 
	`¥öt_ußge
();

405 
	`exô
(10);

408 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

409 i‡(
iscsi
 =
NULL
) {

410 
	`¥ötf
("FailedÅo create context\n");

411 
	`exô
(10);

414 i‡(
debug
 > 0) {

415 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

416 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

419 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

421 i‡(
uæ
) {

422 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

425 i‡(
iscsi_uæ
 =
NULL
) {

426 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

427 
	`iscsi_gë_îr‹
(
iscsi
));

428 
	`exô
(10);

431 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

433 i‡(
iscsi_uæ
->
u£r
[0]) {

434 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

435 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

436 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

437 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

438 
	`exô
(10);

441 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

442 
	`Ârötf
(
°dîr
, "iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

443 
	`exô
(10);

446 
	`evít_lo›
(
iscsi
, &
°©e
);

448 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

449 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

451 
	}
}

	@src/iscsi-readcapacity16.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

22 
	~<öây≥s.h
>

23 
	~<°rög.h
>

24 
	~<pﬁl.h
>

25 
	~<gë›t.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

29 #i‚de‡
disˇrd_c⁄°


30 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

33 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-readcapacity16";

35 
	$¥öt_ußge
()

37 
	`Ârötf
(
°dîr
, "Usage: iscsi-readcapacity16 [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name] [-s] <iscsi-url>\n");

38 
	}
}

40 
	$¥öt_hñp
()

42 
	`Ârötf
(
°dîr
, "Usage: iscsi_readcapacity16 [OPTION...] <iscsi-url>\n");

43 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

44 
	`Ârötf
(
°dîr
, " -s, --sizeÖrintÅarget size only\n");

45 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

46 
	`Ârötf
(
°dîr
, "\n");

47 
	`Ârötf
(
°dîr
, "Help options:\n");

48 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

49 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

50 
	`Ârötf
(
°dîr
, "\n");

51 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

54 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

55 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

56 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

57 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
iscsi_c⁄ãxt
 *
iscsi
;

62 c⁄° *
uæ
 = 
NULL
;

63 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

64 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0, 
size_⁄ly
=0;

65 
c
;

66 
scsi_èsk
 *
èsk
;

67 
scsi_ªadˇ∑côy16
 *
rc16
;

69 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

70 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

71 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

72 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

73 {"size", 
no_¨gumít
, 
NULL
, 's'},

74 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

75 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

76 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

79 
›ti⁄_ödex
;

81 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s", 
l⁄g_›ti⁄s
,

82 &
›ti⁄_ödex
)) != -1) {

83 
c
) {

86 
show_hñp
 = 1;

89 
show_ußge
 = 1;

92 
size_⁄ly
 = 1;

95 
debug
 = 1;

98 
öôüt‹
 = 
›èrg
;

101 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

102 
	`¥öt_hñp
();

103 
	`exô
(0);

107 i‡(
show_hñp
 != 0) {

108 
	`¥öt_hñp
();

109 
	`exô
(0);

112 i‡(
show_ußge
 != 0) {

113 
	`¥öt_ußge
();

114 
	`exô
(0);

117 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

118 i‡(
iscsi
 =
NULL
) {

119 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

120 
	`exô
(10);

123 i‡(
debug
 > 0) {

124 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

125 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

128 i‡(
¨gv
[
›töd
] !
NULL
) {

129 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

131 i‡(
uæ
 =
NULL
) {

132 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

133 
	`¥öt_ußge
();

134 
	`exô
(10);

136 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

138 i‡(
uæ
) {

139 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

142 i‡(
iscsi_uæ
 =
NULL
) {

143 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

144 
	`iscsi_gë_îr‹
(
iscsi
));

145 
	`exô
(10);

148 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

149 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

150 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

152 i‡(
iscsi_uæ
->
u£r
[0]) {

153 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

154 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

155 
	`exô
(10);

159 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

160 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

162 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

163 
	`exô
(10);

166 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

167 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`Ârötf
(
°dîr
,"failedÅo sendÑeadcapacity command\n");

169 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

171 
	`exô
(10);

174 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

175 i‡(
rc16
 =
NULL
) {

176 
	`Ârötf
(
°dîr
,"failedÅo unmarshallÑeadcapacity16 data\n");

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

179 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

180 
	`exô
(10);

183 i‡(!
size_⁄ly
) {

184 
	`¥ötf
("RETURNED LOGICAL BLOCK ADDRESS:%" 
PRIu64
 "\n", 
rc16
->
ªtu∫ed_lba
);

185 
	`¥ötf
("LOGICAL BLOCK LENGTH IN BYTES:%u\n", 
rc16
->
block_Àngth
);

186 
	`¥ötf
("P_TYPE:%d PROT_EN:%d\n", 
rc16
->
p_ty≥
,Ñc16->
¥Ÿ_í
);

187 
	`¥ötf
("P_I_EXPONENT:%d LOGICAL BLOCKS PER PHYSICAL BLOCK EXPONENT:%d\n", 
rc16
->
p_i_exp
,Ñc16->
lbµbe
);

188 
	`¥ötf
("LBPME:%d LBPRZ:%d\n", 
rc16
->
lbpme
,Ñc16->
lb¥z
);

189 
	`¥ötf
("LOWEST ALIGNED LOGICAL BLOCK ADDRESS:%d\n", 
rc16
->
œlba
);

191 
	`¥ötf
("TŸÆ size:%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

195 
	`¥ötf
("%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

198 
	`scsi_‰ì_scsi_èsk
(
èsk
);

199 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

201 
	`iscsi_logout_sync
(
iscsi
);

202 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

204 
	}
}

	@src/iscsi-swp.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°döt.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~"iscsi.h
"

31 
	~"scsi-lowÀvñ.h
"

33 #i‚de‡
disˇrd_c⁄°


34 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

37 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-swp";

40 
	$¥öt_ußge
()

42 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

44 
	}
}

46 
	$¥öt_hñp
()

48 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [OPTION...] <iscsi-url>\n");

49 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

50 
	`Ârötf
(
°dîr
, " -s, --swp={on|off} Turn software writeÖrotect on/off\n");

51 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "Help options:\n");

54 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

55 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

56 
	`Ârötf
(
°dîr
, "\n");

57 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

58 
	`Ârötf
(
°dîr
, "\n");

59 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

60 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

61 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

62 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

63 
	}
}

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
iscsi_c⁄ãxt
 *
iscsi
;

68 c⁄° *
uæ
 = 
NULL
;

69 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

70 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

71 
c
;

72 
ªt
 = 0;

73 
swp
 = 0;

74 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

75 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

76 
scsi_mode_£n£
 *
ms
;

77 
scsi_mode_∑ge
 *
mp
;

79 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

80 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

81 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

82 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

83 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

84 {"swp", 
ªquúed_¨gumít
, 
NULL
, 's'},

87 
›ti⁄_ödex
;

89 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s:", 
l⁄g_›ti⁄s
,

90 &
›ti⁄_ödex
)) != -1) {

91 
c
) {

94 
show_hñp
 = 1;

97 
show_ußge
 = 1;

100 
debug
 = 1;

103 
öôüt‹
 = 
›èrg
;

106 i‡(!
	`°rcmp
(
›èrg
, "on") || !strcmp(optarg, "ON")) {

107 
swp
 = 1;

109 i‡(!
	`°rcmp
(
›èrg
, "off") || !strcmp(optarg, "OFF")) {

110 
swp
 = 2;

114 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

115 
	`¥öt_hñp
();

116 
	`exô
(0);

120 i‡(
show_hñp
 != 0) {

121 
	`¥öt_hñp
();

122 
	`exô
(0);

125 i‡(
show_ußge
 != 0) {

126 
	`¥öt_ußge
();

127 
	`exô
(0);

130 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

131 i‡(
iscsi
 =
NULL
) {

132 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

133 
	`exô
(10);

136 i‡(
debug
 > 0) {

137 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

138 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

141 i‡(
¨gv
[
›töd
] !
NULL
) {

142 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

144 i‡(
uæ
 =
NULL
) {

145 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

146 
	`¥öt_ußge
();

147 
ªt
 = 10;

148 
föished
;

150 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

152 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

154 i‡(
iscsi_uæ
 =
NULL
) {

155 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

156 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = 10;

158 
föished
;

161 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

162 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

163 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

165 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

166 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

167 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

168 
ªt
 = 10;

169 
föished
;

173 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

174 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = 10;

176 
föished
;

180 
£n£_èsk
 = 
	`iscsi_mode£n£10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

181 0, 1, 
SCSI_MODESENSE_PC_CURRENT
,

182 
SCSI_MODEPAGE_CONTROL
,

184 i‡(
£n£_èsk
 =
NULL
) {

185 
	`¥ötf
("FailedÅo send MODE_SENSE10 command: %s\n",

186 
	`iscsi_gë_îr‹
(
iscsi
));

187 
ªt
 = 10;

188 
föished
;

190 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

191 
	`¥ötf
("MODE_SENSE10 failed: %s\n",

192 
	`iscsi_gë_îr‹
(
iscsi
));

193 
ªt
 = 10;

194 
föished
;

196 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

197 i‡(
ms
 =
NULL
) {

198 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

199 
ªt
 = 10;

200 
föished
;

202 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

203 i‡(
mp
 =
NULL
) {

204 
	`¥ötf
("failedÅoÑead control modeÖage\n");

205 
ªt
 = 10;

206 
föished
;

209 
	`¥ötf
("SWP:%d\n", 
mp
->
c⁄åﬁ
.
swp
);

211 
swp
) {

213 
mp
->
c⁄åﬁ
.
swp
 = 1;

216 
mp
->
c⁄åﬁ
.
swp
 = 0;

219 
föished
;

222 
	`¥ötf
("Tu∫ög SWP %s\n", (
swp
 == 1) ? "ON" : "OFF");

223 
£À˘_èsk
 = 
	`iscsi_mode£À˘10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

224 1, 0, 
mp
);

225 i‡(
£À˘_èsk
 =
NULL
) {

226 
	`¥ötf
("FailedÅo send MODE_SELECT10 command: %s\n",

227 
	`iscsi_gë_îr‹
(
iscsi
));

228 
ªt
 = 10;

229 
föished
;

231 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

232 
	`¥ötf
("MODE_SELECT10 failed: %s\n",

233 
	`iscsi_gë_îr‹
(
iscsi
));

234 
ªt
 = 10;

235 
föished
;

239 
föished
:

240 i‡(
£n£_èsk
 !
NULL
) {

241 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

243 i‡(
£À˘_èsk
 !
NULL
) {

244 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

246 i‡(
iscsi_uæ
 !
NULL
) {

247 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

249 
	`iscsi_logout_sync
(
iscsi
);

250 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

251  
ªt
;

252 
	}
}

	@src/ld_iscsi.c

18 
	#_GNU_SOURCE


	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<°dio.h
>

27 
	~<asm/f˙é.h
>

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

33 
	~<sys/sysˇŒ.h
>

34 
	~<dlf˙.h
>

36 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:ld-iscsi";

38 
	#ISCSI_MAX_FD
 255

	)

40 
	gdebug
 = 0;

42 
	#LD_ISCSI_DPRINTF
(
Àvñ
,
fmt
,
¨gs
...Ëdÿ{ i‡((
debug
Ë>ÀvñË{
	`Ârötf
(
°dîr
,"ld_iscsi: ");Ârötf(°dîr, (fmt), ##¨gs); f¥ötf(°dîr,"\n");} } 0);

	)

44 
	siscsi_fd_li°
 {

45 
	mis_iscsi
;

46 
	mdup2fd
;

47 
	mö_Êight
;

48 
iscsi_c⁄ãxt
 *
	miscsi
;

49 
	mlun
;

50 
uöt32_t
 
	mblock_size
;

51 
uöt64_t
 
	mnum_blocks
;

52 
off_t
 
	moff£t
;

53 
mode_t
 
	mmode
;

54 
	mgë_lba_°©us
;

55 
scsi_lba_°©us_des¸ùt‹
 
	mlbasd_ˇched
;

56 
	mlbasd_ˇche_vÆid
;

59 
iscsi_fd_li°
 
	giscsi_fd_li°
[
ISCSI_MAX_FD
];

61 (*
ªÆ_›í
)(
__c⁄°
 *
∑th
, 
Êags
, 
mode_t
 
mode
);

63 
	$›í
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

65 
fd
;

67 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

68 
iscsi_c⁄ãxt
 *
iscsi
;

69 
iscsi_uæ
 *iscsi_url;

70 
scsi_èsk
 *
èsk
;

71 
scsi_ªadˇ∑côy16
 *
rc16
;

73 i‡(
mode
 & 
O_NONBLOCK
) {

74 
	`LD_ISCSI_DPRINTF
(0,"Non-blocking I/O is currentlyÇot supported");

75 
î∫o
 = 
EINVAL
;

79 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

80 i‡(
iscsi
 =
NULL
) {

81 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo create context");

82 
î∫o
 = 
ENOMEM
;

86 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
∑th
);

87 i‡(
iscsi_uæ
 =
NULL
) {

88 
	`LD_ISCSI_DPRINTF
(0,"FaûedÅÿ∑r£ URL: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90 
î∫o
 = 
EINVAL
;

94 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

95 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

96 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

98 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

99 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

100 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo set initiator usernameándÖassword");

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102 
î∫o
 = 
ENOMEM
;

107 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

108 
	`LD_ISCSI_DPRINTF
(0,"Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

110 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

111 
î∫o
 = 
EIO
;

115 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

116 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

117 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑeadcapacity command");

118 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

119 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

120 
î∫o
 = 
EIO
;

124 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

125 i‡(
rc16
 =
NULL
) {

126 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshallÑeadcapacity10 data");

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

129 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

130 
î∫o
 = 
EIO
;

134 
	`LD_ISCSI_DPRINTF
(4,"ªadˇ∑côy16_sync: block_size: %d,Çum_blocks: %lu",
rc16
->
block_Àngth
,rc16->
ªtu∫ed_lba
 + 1);

136 
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

137 i‡(
fd
 >
ISCSI_MAX_FD
) {

138 
	`LD_ISCSI_DPRINTF
(0,"Too many files open");

139 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

140 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

141 
î∫o
 = 
ENFILE
;

145 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 1;

146 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

147 
iscsi_fd_li°
[
fd
].
iscsi
 = iscsi;

148 
iscsi_fd_li°
[
fd
].
block_size
 = 
rc16
->
block_Àngth
;

149 
iscsi_fd_li°
[
fd
].
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

150 
iscsi_fd_li°
[
fd
].
off£t
 = 0;

151 
iscsi_fd_li°
[
fd
].
lun
 = 
iscsi_uæ
->lun;

152 
iscsi_fd_li°
[
fd
].
mode
 = mode;

154 i‡(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"Ë!
NULL
) {

155 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 
	`©oi
(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"));

156 i‡(
rc16
->
lbpme
 == 0){

157 
	`LD_ISCSI_DPRINTF
(1,"Logical unit is fullyÖrovisioned. Will skip get_lba_statusÅasks");

158 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 0;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

163 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

165  
fd
;

168  
	`ªÆ_›í
(
∑th
, 
Êags
, 
mode
);

169 
	}
}

171 
	$›í64
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

173  
	`›í
(
∑th
, 
Êags
 | 
O_LARGEFILE
, 
mode
);

174 
	}
}

176 (*
ªÆ_˛o£
)(
fd
);

178 
	$˛o£
(
fd
)

180 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

181 
i
;

183 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

184 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

185 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

186 
	`ªÆ_˛o£
(
fd
);

191 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

192 i‡(
iscsi_fd_li°
[
i
].
dup2fd
 =
fd
) {

196 i‡(
i
 < 
ISCSI_MAX_FD
) {

197 
j
;

202 
	`mem˝y
(&
iscsi_fd_li°
[
i
], &iscsi_fd_li°[
fd
], (iscsi_fd_list));

203 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

205 
	`mem£t
(&
iscsi_fd_li°
[
fd
], 0, (iscsi_fd_list));

206 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

208 
iscsi_fd_li°
[
i
].
iscsi
->
fd
 = i;

209 
	`ªÆ_˛o£
(
fd
);

211 
j
 = 0; j < 
ISCSI_MAX_FD
; j++) {

212 i‡(
j
 !
i
 && 
iscsi_fd_li°
[j].
dup2fd
 =
fd
) {

213 
iscsi_fd_li°
[
j
].
dup2fd
 = 
i
;

220 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

221 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

222 
	`iscsi_de°roy_c⁄ãxt
(
iscsi_fd_li°
[
fd
].
iscsi
);

223 
iscsi_fd_li°
[
fd
].
iscsi
 = 
NULL
;

228  
	`ªÆ_˛o£
(
fd
);

229 
	}
}

231 (*
ªÆ_fx°©
)(
vî
, 
fd
, 
°©
 *
buf
);

233 
	$__fx°©
(
vî
, 
fd
, 
°©
 *
buf
)

235 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

236 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

237  
	`__fx°©
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

240 
	`mem£t
(
buf
, 0, (
°©
));

241 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

242 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

247  
	`ªÆ_fx°©
(
vî
, 
fd
, 
buf
);

248 
	}
}

251 (*
ªÆ_lx°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

253 
	$__lx°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

255 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

256 
fd
, 
ªt
;

258 
fd
 = 
	`›í
(
∑th
, 0, 0);

259 i‡(
fd
 == -1) {

260  
fd
;

263 
ªt
 = 
	`__fx°©
(
vî
, 
fd
, 
buf
);

264 
	`˛o£
(
fd
);

265  
ªt
;

268  
	`ªÆ_lx°©
(
vî
, 
∑th
, 
buf
);

269 
	}
}

271 (*
ªÆ_x°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

273 
	$__x°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

275  
	`__lx°©
(
vî
, 
∑th
, 
buf
);

276 
	}
}

278 
	$off_t
 (*
ªÆ_l£ek
)(
fd
, 
off_t
 
off£t
, 
whí˚
);

280 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

281 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

282 
off_t
 
√w_off£t
;

283 
off_t
 
size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
*iscsi_fd_li°[fd].
block_size
;

284 
whí˚
) {

285 
SEEK_SET
:

286 
√w_off£t
 = 
off£t
;

288 
SEEK_CUR
:

289 
√w_off£t
 = 
iscsi_fd_li°
[
fd
].
off£t
+offset;

291 
SEEK_END
:

292 
√w_off£t
 = 
size
 + 
off£t
;

295 
î∫o
 = 
EINVAL
;

298 i‡(
√w_off£t
 < 0 ||Çew_off£à> 
size
) {

299 
î∫o
 = 
EINVAL
;

302 
iscsi_fd_li°
[
fd
].
off£t
=
√w_off£t
;

303  
iscsi_fd_li°
[
fd
].
off£t
;

306  
	`ªÆ_l£ek
(
fd
, 
off£t
, 
whí˚
);

307 
	}
}

309 
	$ssize_t
 (*
ªÆ_ªad
)(
fd
, *
buf
, 
size_t
 
cou¡
);

311 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

313 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

314 
uöt64_t
 
off£t
;

315 
uöt64_t
 
num_blocks
, 
lba
;

316 
scsi_èsk
 *
èsk
;

317 
scsi_gë_lba_°©us
 *
lbas
;

319 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

320  
	`ªad
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

322 
off£t
 = 
iscsi_fd_li°
[
fd
].off£à/ iscsi_fd_li°[fd].
block_size
 * iscsi_fd_list[fd].block_size;

323 
num_blocks
 = (
iscsi_fd_li°
[
fd
].
off£t
 - off£à+ 
cou¡
 + iscsi_fd_li°[fd].
block_size
 - 1) / iscsi_fd_list[fd].block_size;

324 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

327 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

331 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

332 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

333 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

336 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

337 i‡(
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 != 0) {

338 
uöt32_t
 
i
;

339 
uöt32_t
 
_num_Æloˇãd
=0;

340 
uöt32_t
 
_num_blocks
=0;

342 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
==1) {

343 
	`LD_ISCSI_DPRINTF
(5,"ˇched gë_lba_°©us_des¸ùt‹ i†lb®%lu,Çum_block†%d,Örovisi⁄ög %d",
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
lba
,iscsi_fd_li°[fd].lbasd_ˇched.
num_blocks
,iscsi_fd_li°[fd].lbasd_ˇched.
¥ovisi⁄ög
);

344 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
¥ovisi⁄ög
 !0x00 && 
lba
 >iscsi_fd_li°[fd].lbasd_ˇched.lb®&&Üba+
num_blocks
 < iscsi_fd_list[fd].lbasd_cached.lba+iscsi_fd_list[fd].lbasd_cached.num_blocks)

346 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

347 
	`mem£t
(
buf
, 0x00, 
cou¡
);

348 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

349 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

350  
cou¡
;

353 
	`LD_ISCSI_DPRINTF
(4,"gë_lba_°©us_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
);

354 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 8+16);

355 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

356 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send get_lba_status command");

357 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

358 
î∫o
 = 
EIO
;

361 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

362 i‡(
lbas
 =
NULL
) {

363 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshall get_lba_status data");

364 
	`scsi_‰ì_scsi_èsk
(
èsk
);

365 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

366 
î∫o
 = 
EIO
;

370 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us:Çum_des¸ùt‹s: %d",
lbas
->
num_des¸ùt‹s
);

371 
i
=0;i<
lbas
->
num_des¸ùt‹s
;i++) {

372 
scsi_lba_°©us_des¸ùt‹
 *
lbasd
 = &
lbas
->
des¸ùt‹s
[
i
];

373 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us_des¸ùt‹ %d,Üb®%lu,Çum_block†%d,Örovisi⁄ög %d",
i
,
lbasd
->
lba
,lbasd->
num_blocks
,lbasd->
¥ovisi⁄ög
);

374 i‡(
lbasd
->
lba
 !
_num_blocks
+lba) {

375 
	`LD_ISCSI_DPRINTF
(0,"get_lba_statusÑesponse isÇon-continuous");

376 
	`scsi_‰ì_scsi_èsk
(
èsk
);

377 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

378 
î∫o
 = 
EIO
;

381 
_num_Æloˇãd
+=(
lbasd
->
¥ovisi⁄ög
==0x00)?lbasd->
num_blocks
:0;

382 
_num_blocks
+=
lbasd
->
num_blocks
;

383 
iscsi_fd_li°
[
fd
].
lbasd_ˇched
=
lbas
->
des¸ùt‹s
[
i
];

384 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
=1;

386 
	`scsi_‰ì_scsi_èsk
(
èsk
);

387 i‡(
_num_Æloˇãd
 =0 && 
_num_blocks
 >
num_blocks
) {

388 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

389 
	`mem£t
(
buf
, 0x00, 
cou¡
);

390 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

391 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

392  
cou¡
;

396 
	`LD_ISCSI_DPRINTF
(4,"ªad16_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

398 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 
num_blocks
 * iscsi_fd_li°[fd].
block_size
, iscsi_fd_list[fd].block_size, 0, 0, 0, 0, 0);

399 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

400 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

401 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑead16 command");

402 
î∫o
 = 
EIO
;

406 
	`mem˝y
(
buf
, &
èsk
->
d©aö
.
d©a
[
iscsi_fd_li°
[
fd
].
off£t
 - off£t], 
cou¡
);

407 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

409 
	`scsi_‰ì_scsi_èsk
(
èsk
);

411  
cou¡
;

414  
	`ªÆ_ªad
(
fd
, 
buf
, 
cou¡
);

415 
	}
}

417 
	$ssize_t
 (*
ªÆ_¥ód
)(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

418 
ssize_t
 
	$¥ód
(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

419 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

420 
off_t
 
ﬁd_off£t
;

421 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

422 
î∫o
 = 
EIO
;

425 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

428 i‡(
	`ªad
(
fd
, 
buf
, 
cou¡
) < 0) {

429 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

432 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

433  
cou¡
;

435  
	`ªÆ_¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

436 
	}
}

438 
	$ssize_t
 (*
ªÆ_wrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

440 
ssize_t
 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

442 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

443 
uöt64_t
 
off£t
;

444 
uöt64_t
 
num_blocks
, 
lba
;

445 
scsi_èsk
 *
èsk
;

447 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

448  
	`wrôe
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

450 i‡(
iscsi_fd_li°
[
fd
].
off£t
%iscsi_fd_li°[fd].
block_size
) {

451 
î∫o
 = 
EINVAL
;

454 i‡(
cou¡
%
iscsi_fd_li°
[
fd
].
block_size
) {

455 
î∫o
 = 
EINVAL
;

459 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
 = 0;

461 
off£t
 = 
iscsi_fd_li°
[
fd
].offset;

462 
num_blocks
 = 
cou¡
/
iscsi_fd_li°
[
fd
].
block_size
;

463 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

466 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

470 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

471 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

472 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

475 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

476 
	`LD_ISCSI_DPRINTF
(4,"wrôe16_sync:Üu¿%d,Üb®%lu,Çum_blocks: %lu, block_size: %d, off£t: %lu cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,
cou¡
);

477 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, (*Ë
buf
, 
cou¡
, iscsi_fd_li°[fd].
block_size
, 0, 0, 0, 0, 0);

478 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

479 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

480 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send write16 command");

481 
î∫o
 = 
EIO
;

485 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

486 
	`scsi_‰ì_scsi_èsk
(
èsk
);

488  
cou¡
;

491  
	`ªÆ_wrôe
(
fd
, 
buf
, 
cou¡
);

492 
	}
}

494 
	$ssize_t
 (*
ªÆ_pwrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

495 
ssize_t
 
	$pwrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

496 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

497 
off_t
 
ﬁd_off£t
;

498 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

499 
î∫o
 = 
EIO
;

502 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

505 i‡(
	`wrôe
(
fd
, 
buf
, 
cou¡
) < 0) {

506 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

509 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

510  
cou¡
;

512  
	`ªÆ_pwrôe
(
fd
, 
buf
, 
cou¡
, 
off£t
);

513 
	}
}

515 (*
ªÆ_dup2
)(
ﬁdfd
, 
√wfd
);

517 
	$dup2
(
ﬁdfd
, 
√wfd
)

519 i‡(
iscsi_fd_li°
[
√wfd
].
is_iscsi
) {

520  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

523 
	`˛o£
(
√wfd
);

525 i‡(
iscsi_fd_li°
[
ﬁdfd
].
is_iscsi
 == 1) {

526 
ªt
;

527 i‡(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
 >= 0) {

528  
	`dup2
(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
, 
√wfd
);

531 
ªt
 = 
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

532 i‡(
ªt
 < 0) {

533  
ªt
;

536 
iscsi_fd_li°
[
√wfd
].
is_iscsi
 = 1;

537 
iscsi_fd_li°
[
√wfd
].
dup2fd
 = 
ﬁdfd
;

539  
√wfd
;

542  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

543 
	}
}

546 (*
ªÆ_fx°©64
)(
vî
, 
fd
, 
°©64
 *
buf
);

548 
	$__fx°©64
(
vî
, 
fd
, 
°©64
 *
buf
)

550 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

551 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

552  
	`__fx°©64
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

555 
	`mem£t
(
buf
, 0, (
°©64
));

556 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

557 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

561  
	`ªÆ_fx°©64
(
vî
, 
fd
, 
buf
);

562 
	}
}

565 (*
ªÆ_lx°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

567 
	$__lx°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

569 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

570 
fd
, 
ªt
;

572 
fd
 = 
	`›í64
(
∑th
, 0, 0);

573 i‡(
fd
 == -1) {

574  
fd
;

577 
ªt
 = 
	`__fx°©64
(
vî
, 
fd
, 
buf
);

578 
	`˛o£
(
fd
);

579  
ªt
;

582  
	`ªÆ_lx°©64
(
vî
, 
∑th
, 
buf
);

583 
	}
}

586 (*
ªÆ_x°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

588 
	$__x°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

590  
	`__lx°©64
(
vî
, 
∑th
, 
buf
);

591 
	}
}

594 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$_öô
()

596 
i
;

598 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

599 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

602 i‡(
	`gëív
("LD_ISCSI_DEBUG"Ë!
NULL
) {

603 
debug
 = 
	`©oi
(
	`gëív
("LD_ISCSI_DEBUG"));

606 
ªÆ_›í
 = 
	`dlsym
(
RTLD_NEXT
, "open");

607 i‡(
ªÆ_›í
 =
NULL
) {

608 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(open)");

609 
	`exô
(10);

612 
ªÆ_˛o£
 = 
	`dlsym
(
RTLD_NEXT
, "close");

613 i‡(
ªÆ_˛o£
 =
NULL
) {

614 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(close)");

615 
	`exô
(10);

618 
ªÆ_fx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat");

619 i‡(
ªÆ_fx°©
 =
NULL
) {

620 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat)");

621 
	`exô
(10);

624 
ªÆ_lx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat");

625 i‡(
ªÆ_lx°©
 =
NULL
) {

626 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__lxstat)");

627 
	`exô
(10);

629 
ªÆ_x°©
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat");

630 i‡(
ªÆ_x°©
 =
NULL
) {

631 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat)");

632 
	`exô
(10);

635 
ªÆ_l£ek
 = 
	`dlsym
(
RTLD_NEXT
, "lseek");

636 i‡(
ªÆ_l£ek
 =
NULL
) {

637 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(lseek)");

638 
	`exô
(10);

641 
ªÆ_ªad
 = 
	`dlsym
(
RTLD_NEXT
, "read");

642 i‡(
ªÆ_ªad
 =
NULL
) {

643 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(read)");

644 
	`exô
(10);

647 
ªÆ_¥ód
 = 
	`dlsym
(
RTLD_NEXT
, "pread");

648 i‡(
ªÆ_¥ód
 =
NULL
) {

649 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pread)");

650 
	`exô
(10);

653 
ªÆ_wrôe
 = 
	`dlsym
(
RTLD_NEXT
, "write");

654 i‡(
ªÆ_wrôe
 =
NULL
) {

655 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(write)");

656 
	`exô
(10);

659 
ªÆ_pwrôe
 = 
	`dlsym
(
RTLD_NEXT
, "pwrite");

660 i‡(
ªÆ_pwrôe
 =
NULL
) {

661 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pwrite)");

662 
	`exô
(10);

665 
ªÆ_dup2
 = 
	`dlsym
(
RTLD_NEXT
, "dup2");

666 i‡(
ªÆ_dup2
 =
NULL
) {

667 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(dup2)");

668 
	`exô
(10);

671 
ªÆ_fx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat64");

672 i‡(
ªÆ_fx°©64
 =
NULL
) {

673 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat64)");

676 
ªÆ_lx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat64");

677 i‡(
ªÆ_lx°©64
 =
NULL
) {

678 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(_lxstat64)");

681 
ªÆ_x°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat64");

682 i‡(
ªÆ_x°©64
 =
NULL
) {

683 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat64)");

685 
	}
}

	@test-tool/0000_testunitready_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0000_ã°unôªady_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0000_testunitready_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic TESTUNITREADY functionality.\n");

32 
	`¥ötf
("1, Verify TESTUNITREADY works.\n");

33 
	`¥ötf
("\n");

37 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

38 i‡(
iscsi
 =
NULL
) {

39 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

43 
ªt
=0;

45 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

46 i‡(
ªt
 != 0) {

47 
föished
;

50 
föished
:

51 
	`iscsi_logout_sync
(
iscsi
);

52 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

53  
ªt
;

54 
	}
}

	@test-tool/0100_read10_simple.c

19 
	~<°dio.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0100_ªad10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

30 
	`¥ötf
("0100_read10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic READ10 functionality.\n");

34 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Reading first 1-256 blocks ... ");

51 
i
=1; i<=256; i++) {

52 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

53 i‡(
èsk
 =
NULL
) {

54 
	`¥ötf
("[FAILED]\n");

55 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

56 
ªt
 = -1;

57 
föished
;

59 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
föished
;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
	`¥ötf
("[OK]\n");

72 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

73 
i
=1; i<=256; i++) {

74 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
	`¥ötf
("[OK]\n");

93 
föished
:

94 
	`iscsi_logout_sync
(
iscsi
);

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96  
ªt
;

97 
	}
}

	@test-tool/0101_read10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0101_ªad10_bey⁄d_eﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0101_read10_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ10 fails whenÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^31\n");

36 
	`¥ötf
("3, Read 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("4, Read 2-256 blocksáll but one beyondÉnd-of-lun.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 >= 0x80000000) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ10. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

58 
	`¥ötf
("ReadingÜast 1-256 blocks one block beyondÉol ... ");

59 
i
=1; i<=256; i++) {

60 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("READ10 beyondÉnd-of-lun didÇot fail with sense.\n");

70 
ªt
 = -1;

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


75 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


76 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

89 
	`¥ötf
("Reaing 1-256 blocksát LBA 2^31 ... ");

90 
i
 = 1; i <= 256; i++) {

91 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0x80000000, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
föished
;

98 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("READ10 command should fail whenÑeading from LBA 2^31\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


106 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


107 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("READ10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`¥ötf
("[OK]\n");

120 
	`¥ötf
("Read 1-256 blocksát LBA -1 ... ");

121 
i
 = 1; i <= 256; i++) {

122 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

123 i‡(
èsk
 =
NULL
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

126 
ªt
 = -1;

127 
föished
;

129 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("READ10 command should fail whenÑeadingát LBA -1\n");

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


137 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


138 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("READ10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 
	`scsi_‰ì_scsi_èsk
(
èsk
);

147 
	`¥ötf
("[OK]\n");

151 
	`¥ötf
("Reading 1-255 blocks beyondÉol startingátÜast block ... ");

152 
i
=2; i<=256; i++) {

153 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

154 i‡(
èsk
 =
NULL
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
föished
;

160 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("READ10 beyondÉnd-of-lun didÇotÑeturn sense.\n");

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


168 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


169 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
föished
:

182 
	`iscsi_logout_sync
(
iscsi
);

183 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

184  
ªt
;

185 
	}
}

	@test-tool/0102_read10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0102_ªad10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0102_read10_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ10 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát LBA:0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Readát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
	`¥ötf
("READ10 0blocksát LBA:0 ... ");

49 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

50 i‡(
èsk
 =
NULL
) {

51 
	`¥ötf
("[FAILED]\n");

52 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

53 
ªt
 = -1;

54 
föished
;

56 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`¥ötf
("[OK]\n");

67 
	`¥ötf
("READ10 0blocksát one block beyond <end-of-LUN> ... ");

68 i‡(
num_blocks
 > 0x80000000) {

69 
	`¥ötf
("[SKIPPED]\n");

70 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

71 
föished
;

73 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocks beyondÉnd\n");

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


88 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


89 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

92 
ªt
 = -1;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
föished
;

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
	`¥ötf
("READ10 0blocksát LBA 2^31 ... ");

101 i‡(
num_blocks
 > 0x80000000) {

102 
	`¥ötf
("[SKIPPED]\n");

103 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

104 
föished
;

106 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocksát 2^31\n");

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


121 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


122 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

125 
ªt
 = -1;

126 
	`scsi_‰ì_scsi_èsk
(
èsk
);

127 
föished
;

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
	`¥ötf
("[OK]\n");

133 
	`¥ötf
("READ10 0blocksát LBA -1 ... ");

134 i‡(
num_blocks
 > 0x80000000) {

135 
	`¥ötf
("[SKIPPED]\n");

136 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

137 
föished
;

139 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ10 command: Should fail whenÑeading 0blocksát -1\n");

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


154 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


155 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("READ10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

163 
	`¥ötf
("[OK]\n");

166 
föished
:

167 
	`iscsi_logout_sync
(
iscsi
);

168 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

169  
ªt
;

170 
	}
}

	@test-tool/0103_read10_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0103_ªad10_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0103_read10_rdprotect:\n");

32 
	`¥ötf
("======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test how READ10 handlesÅheÑdprotect bits\n");

35 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

47 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

52 
ªt
 = 0;

55 
	`¥ötf
("Read10 withÇon-zero RDPROTECT ... ");

56 
i
 = 1; i < 8; i++) {

58 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

68 
èsk
->
cdb
[1] = (
i
<<5)&0xe0;

69 
èsk
->
cdb
[8] = 1;

70 
èsk
->
cdb_size
 = 10;

71 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

72 
èsk
->
expx„æí
 = 
block_size
;

74 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

81 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


82 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


83 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("READ10 withÑdprotect should fail with ILLEGAL REQUEST/INVALID_FIELD_IN_CDB\n");

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

95 
föished
:

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0104_read10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0104_ªad10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0104_read10_flags:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test how READ10 handles DPO, FUAánd FUA_NV flags.\n");

35 
	`¥ötf
("1, DPO:1 should work\n");

36 
	`¥ötf
("2, FUA:1ánd FUA_NV:0 should work\n");

37 
	`¥ötf
("3, FUA:1ánd FUA_NV:1 should work\n");

38 
	`¥ötf
("4, FUA:0ánd FUA_NV:1 should work\n");

39 
	`¥ötf
("5, DPO:1 , FUA:1ánd FUA_NV:1 should work\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

51 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

56 
ªt
 = 0;

60 
	`¥ötf
("Read10 with DPO==1 ... ");

62 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("FailedÅoállocateÅask structure\n");

65 
ªt
 = -1;

66 
föished
;

69 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

70 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

71 
èsk
->
cdb
[1] = 0x10;

72 
èsk
->
cdb
[8] = 1;

73 
èsk
->
cdb_size
 = 10;

74 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

75 
èsk
->
expx„æí
 = 
block_size
;

77 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("Ród10 wôh DPO==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

97 
	`¥ötf
("Read10 with FUA==1 FUA_NV==0 ... ");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("FailedÅoállocateÅask structure\n");

102 
ªt
 = -1;

103 
föished
;

106 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

107 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

108 
èsk
->
cdb
[1] = 0x08;

109 
èsk
->
cdb
[8] = 1;

110 
èsk
->
cdb_size
 = 10;

111 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

112 
èsk
->
expx„æí
 = 
block_size
;

114 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Ród10 wôh FUA==1 FUA_NV==0 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
	`¥ötf
("[OK]\n");

133 
	`¥ötf
("Read10 with FUA==1 FUA_NV==1 ... ");

135 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

136 i‡(
èsk
 =
NULL
) {

137 
	`¥ötf
("FailedÅoállocateÅask structure\n");

138 
ªt
 = -1;

139 
föished
;

142 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

143 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

144 
èsk
->
cdb
[1] = 0x0a;

145 
èsk
->
cdb
[8] = 1;

146 
èsk
->
cdb_size
 = 10;

147 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

148 
èsk
->
expx„æí
 = 
block_size
;

150 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

151 
	`¥ötf
("[FAILED]\n");

152 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

153 
ªt
 = -1;

155 
föished
;

157 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("Ród10 wôh FUA==1 FUA_NV==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

160 
ªt
 = -1;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
föished
;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
	`¥ötf
("[OK]\n");

169 
	`¥ötf
("Read10 with FUA==0 FUA_NV==1 ... ");

171 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

172 i‡(
èsk
 =
NULL
) {

173 
	`¥ötf
("FailedÅoállocateÅask structure\n");

174 
ªt
 = -1;

175 
föished
;

178 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

179 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

180 
èsk
->
cdb
[1] = 0x02;

181 
èsk
->
cdb
[8] = 1;

182 
èsk
->
cdb_size
 = 10;

183 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

184 
èsk
->
expx„æí
 = 
block_size
;

186 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
ªt
 = -1;

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("Ród10 wôh FUA==0 FUA_NV==1 Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("Read10 with DPO==1 FUA==1 FUA_NV==1 ... ");

207 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

208 i‡(
èsk
 =
NULL
) {

209 
	`¥ötf
("FailedÅoállocateÅask structure\n");

210 
ªt
 = -1;

211 
föished
;

214 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

215 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

216 
èsk
->
cdb
[1] = 0x18;

217 
èsk
->
cdb
[8] = 1;

218 
èsk
->
cdb_size
 = 10;

219 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

220 
èsk
->
expx„æí
 = 
block_size
;

222 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

225 
ªt
 = -1;

227 
föished
;

229 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("Ród10 wôh DPO==1 FUA==1 FUA_NV==0Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

232 
ªt
 = -1;

233 
	`scsi_‰ì_scsi_èsk
(
èsk
);

234 
föished
;

236 
	`scsi_‰ì_scsi_èsk
(
èsk
);

237 
	`¥ötf
("[OK]\n");

241 
föished
:

242 
	`iscsi_logout_sync
(
iscsi
);

243 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

244  
ªt
;

245 
	}
}

	@test-tool/0105_read10_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0105_ªad10_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
iscsi_d©a
 
d©a
;

31 
buf
[4096];

32 
ªt
, 
lun
;

34 
	`¥ötf
("0105_read10_invalid:\n");

35 
	`¥ötf
("=======================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test variousÖrotocol violations.\n");

38 
	`¥ötf
("1, Read 1 block but set xferlengthÅo 0. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

39 
	`¥ötf
("2, Read 1 block but set xferlengthÅo 2*'block_size'. ShouldÑesult inÑesidual underflow of 'block_size' bytes.\n");

40 
	`¥ötf
("3, Read 1 block but set xferlengthÅo 200. ShouldÑesult inÑesidual overflow of 'block_size'-200 bytes.\n");

41 
	`¥ötf
("4, Read 2 blocks but set xferlengthÅo 'block_size'. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

42 
	`¥ötf
("5, Read 1 block but send one blockás data-out write onÅhe iSCSIÜevel. ShouldÑesult in bothÑesidual overflowánd underflow of 'block_size' bytes.\n");

43 
	`¥ötf
("\n");

47 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

48 i‡(
iscsi
 =
NULL
) {

49 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

53 
ªt
 = 0;

57 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==0 ... ");

59 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

68 
èsk
->
cdb
[8] = 1;

69 
èsk
->
cdb_size
 = 10;

70 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

71 
èsk
->
expx„æí
 = 0;

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

78 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CANCELLED
) {

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
	`¥ötf
("Target droppedÅhe session [OK]\n");

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==0 shouldÇot fail.\n");

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

98 
èsk
->
ªsiduÆ
 !
block_size
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

113 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==1024 ... ");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 i‡(
èsk
 =
NULL
) {

117 
	`¥ötf
("FailedÅoállocateÅask structure\n");

118 
ªt
 = -1;

119 
föished
;

122 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

123 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

124 
èsk
->
cdb
[8] = 1;

125 
èsk
->
cdb_size
 = 10;

126 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

127 
èsk
->
expx„æí
 = 1024;

129 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==1024 shouldÇot fail.\n");

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

143 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
 ||

144 
èsk
->
ªsiduÆ
 !
block_size
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Read10Ñeturned incorrectÑesidual underflow.\n");

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("[OK]\n");

156 
	`¥ötf
("Read10 1 block but with iscsi ExpectedDataTransferLength==200 ... ");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 i‡(
èsk
 =
NULL
) {

160 
	`¥ötf
("FailedÅoállocateÅask structure\n");

161 
ªt
 = -1;

162 
föished
;

165 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

166 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

167 
èsk
->
cdb
[8] = 1;

168 
èsk
->
cdb_size
 = 10;

169 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

170 
èsk
->
expx„æí
 = 200;

172 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

173 
	`¥ötf
("[FAILED]\n");

174 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = -1;

177 
föished
;

179 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("Read10 of 1 block with iscsi ExpectedDataTransferLength==200 shouldÇot fail.\n");

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

187 
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`¥ötf
("[FAILED]\n");

189 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

190 
ªt
 = -1;

191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

192 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
	`¥ötf
("[OK]\n");

199 
	`¥ötf
("Ród10 2 block†buàwôh iscsòEx≥˘edD©aTøns„rLígth==%zu ... ", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("FailedÅoállocateÅask structure\n");

204 
ªt
 = -1;

205 
föished
;

208 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

209 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

210 
èsk
->
cdb
[8] = 2;

211 
èsk
->
cdb_size
 = 10;

212 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

213 
èsk
->
expx„æí
 = 
block_size
;

215 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

220 
föished
;

222 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("Ród10 o‡2 block†wôh iscsòEx≥˘edD©aTøns„rLígth==%zu should suc˚ed.\n", 
block_size
);

225 
ªt
 = -1;

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
föished
;

229 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

230 
èsk
->
ªsiduÆ
 !
block_size
) {

231 
	`¥ötf
("[FAILED]\n");

232 
	`¥ötf
("Read10Ñeturned incorrectÑesidual overflow.\n");

233 
ªt
 = -1;

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
föished
;

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
	`¥ötf
("[OK]\n");

243 
	`¥ötf
("Read10 of 1 block but sentás data-out write in iscsiÜayer ... ");

245 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

246 i‡(
èsk
 =
NULL
) {

247 
	`¥ötf
("FailedÅoállocateÅask structure\n");

248 
ªt
 = -1;

249 
föished
;

252 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

253 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

254 
èsk
->
cdb
[8] = 1;

255 
èsk
->
cdb_size
 = 10;

256 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

257 
èsk
->
expx„æí
 = (
buf
);

259 
d©a
.
size
 = (
buf
);

260 
d©a
.d©®(*)&
buf
[0];

262 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, &
d©a
Ë=
NULL
) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("FaûedÅÿ£ndÑód10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

265 
ªt
 = -1;

267 
föished
;

269 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

270 
	`¥ötf
("[FAILED]\n");

271 
	`¥ötf
("Read10 of 1 block but iscsi data-out write should fail.\n");

272 
ªt
 = -1;

273 
	`scsi_‰ì_scsi_èsk
(
èsk
);

274 
föished
;

276 
	`scsi_‰ì_scsi_èsk
(
èsk
);

277 
	`¥ötf
("[OK]\n");

279 
föished
:

280 
	`iscsi_logout_sync
(
iscsi
);

281 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

282  
ªt
;

283 
	}
}

	@test-tool/0110_readcapacity10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0110_ªadˇ∑côy10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
scsi_ªadˇ∑côy10
 *
rc10
;

28 
ªt
, 
lun
;

30 
ªt
 = 0;

32 
	`¥ötf
("0110_readcapacity10_simple:\n");

33 
	`¥ötf
("===========================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("TestÅhat basic READCAPACITY10 works\n");

36 
	`¥ötf
("1, Readcapacity10 should work.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
	`¥ötf
("TestÅhat Readcapacity10 is supported ... ");

48 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

49 i‡(
èsk
 =
NULL
) {

50 
	`¥ötf
("[FAILED]\n");

51 
	`¥ötf
("FaûedÅÿ£ndÑódˇ∑côy10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

52 
ªt
 = -1;

53 
föished
;

55 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("Ródˇ∑côy comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
	`scsi_‰ì_scsi_èsk
(
èsk
);

60 
föished
;

62 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

63 i‡(
rc10
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ÁûedÅÿunm¨shÆ»ªadˇ∑côy10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0120_read6_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0120_ªad6_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0120_read6_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ6 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN using READ6.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Reading first 1-256 blocks ... ");

49 
i
 = 1; i <= 256; i++) {

50 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size);

51 i‡(
èsk
 =
NULL
) {

52 
	`¥ötf
("[FAILED]\n");

53 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

54 
ªt
 = -1;

55 
föished
;

57 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("Ród6 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
	`scsi_‰ì_scsi_èsk
(
èsk
);

62 
föished
;

64 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
	`¥ötf
("[OK]\n");

68 
föished
:

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0121_read6_beyond_eol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0121_ªad6_bey⁄d_eﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0121_read6_beyond_eol:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ6 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^20 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 2-256 blocksáll but one beyondÉnd-of-lun.\n");

36 
	`¥ötf
("3, Read 0(==256) blocks 128 blocks beyondÉnd-of-lun.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 > 0x1fffff) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

59 
	`¥ötf
("ReadingÜast 1-256 blocks one block beyondÉol ... ");

60 
i
=1; i<=256; i++) {

61 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i * 
block_size
, block_size);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇot fail with sense.\n");

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

75 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
föished
;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
	`¥ötf
("[OK]\n");

95 
	`¥ötf
("Reading 1-255 blocks beyondÉol startingátÜast block ... ");

96 
i
=2; i<=256; i++) {

97 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇotÑeturn sense.\n");

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

127 
	`¥ötf
("[OK]\n");

131 
	`¥ötf
("Reading 0(==256) blocks beyondÉol startingát 128 blocks beforeÉol ... ");

132 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
num_blocks
-128, 
i
 * 
block_size
, block_size);

133 i‡(
èsk
 =
NULL
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("FaûedÅÿ£nd READ6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
föished
;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("READ6 beyondÉnd-of-lun didÇotÑeturn sense.\n");

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£ key ILLEGAL_REQUEST. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("READ6 bey⁄dÉnd-of-lu¿didÇŸÑëu∫ sí£áscq LBA OUT OF RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
	`¥ötf
("[OK]\n");

164 
föished
:

165 
	`iscsi_logout_sync
(
iscsi
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

167  
ªt
;

168 
	}
}

	@test-tool/0122_read6_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0122_ªad6_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
iscsi_d©a
 
d©a
;

31 
buf
[4096];

32 
ªt
, 
lun
;

34 
	`¥ötf
("0122_read6_invalid:\n");

35 
	`¥ötf
("=======================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test variousÖrotocol violations.\n");

38 
	`¥ötf
("1, Read 1 block but set xferlengthÅo 0. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

39 
	`¥ötf
("2, Read 1 block but set xferlengthÅo 2*'block_size'. ShouldÑesult inÑesidual underflow of 'block_size' bytes.\n");

40 
	`¥ötf
("3, Read 1 block but set xferlengthÅo 200. ShouldÑesult inÑesidual overflow of 'block_size' - 200 bytes.\n");

41 
	`¥ötf
("4, Read 2 blocks but set xferlengthÅo 'block_size'. ShouldÑesult inÑesidual overflow of 'block_size' bytes.\n");

42 
	`¥ötf
("5, Read 1 block but send one blockás data-out write onÅhe iSCSIÜevel. ShouldÑesult in bothÑesidual overflowánd underflow of 'block_size' bytes.\n");

43 
	`¥ötf
("\n");

47 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

48 i‡(
iscsi
 =
NULL
) {

49 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 
ªt
 = 0;

57 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==0 ... ");

59 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("FailedÅoállocateÅask structure\n");

62 
ªt
 = -1;

63 
föished
;

66 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

67 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

68 
èsk
->
cdb
[4] = 1;

69 
èsk
->
cdb_size
 = 6;

70 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

71 
èsk
->
expx„æí
 = 0;

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

78 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CANCELLED
) {

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
	`¥ötf
("Target droppedÅhe session [OK]\n");

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==0 shouldÇot fail.\n");

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

98 
èsk
->
ªsiduÆ
 !
block_size
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

113 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==1024 ... ");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 i‡(
èsk
 =
NULL
) {

117 
	`¥ötf
("FailedÅoállocateÅask structure\n");

118 
ªt
 = -1;

119 
föished
;

122 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

123 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

124 
èsk
->
cdb
[4] = 1;

125 
èsk
->
cdb_size
 = 6;

126 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

127 
èsk
->
expx„æí
 = 1024;

129 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

134 
föished
;

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==1024 shouldÇot fail.\n");

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

143 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
 ||

144 
èsk
->
ªsiduÆ
 !
block_size
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Read6Ñeturned incorrectÑesidual underflow.\n");

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
	`¥ötf
("[OK]\n");

156 
	`¥ötf
("Read6 1 block but with iscsi ExpectedDataTransferLength==200 ... ");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 i‡(
èsk
 =
NULL
) {

160 
	`¥ötf
("FailedÅoállocateÅask structure\n");

161 
ªt
 = -1;

162 
föished
;

165 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

166 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

167 
èsk
->
cdb
[4] = 1;

168 
èsk
->
cdb_size
 = 6;

169 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

170 
èsk
->
expx„æí
 = 200;

172 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

173 
	`¥ötf
("[FAILED]\n");

174 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

175 
ªt
 = -1;

177 
föished
;

179 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("Read6 of 1 block with iscsi ExpectedDataTransferLength==200 shouldÇot fail.\n");

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

187 
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`¥ötf
("[FAILED]\n");

189 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

190 
ªt
 = -1;

191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

192 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
	`¥ötf
("[OK]\n");

199 
	`¥ötf
("Ród6 2 block†buàwôh iscsòEx≥˘edD©aTøns„rLígth==%zu ... ", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("FailedÅoállocateÅask structure\n");

204 
ªt
 = -1;

205 
föished
;

208 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

209 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

210 
èsk
->
cdb
[4] = 2;

211 
èsk
->
cdb_size
 = 6;

212 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

213 
èsk
->
expx„æí
 = 
block_size
;

215 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

220 
föished
;

222 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

223 
	`¥ötf
("[FAILED]\n");

224 
	`¥ötf
("Ród6 o‡2 block†wôh iscsòEx≥˘edD©aTøns„rLígth==%zu should suc˚ed.\n", 
block_size
);

225 
ªt
 = -1;

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
föished
;

229 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
 ||

230 
èsk
->
ªsiduÆ
 !
block_size
) {

231 
	`¥ötf
("[FAILED]\n");

232 
	`¥ötf
("Read6Ñeturned incorrectÑesidual overflow.\n");

233 
ªt
 = -1;

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
föished
;

237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

238 
	`¥ötf
("[OK]\n");

242 
	`¥ötf
("Read6 of 1 block but sentás data-out write in iscsiÜayer ... ");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 i‡(
èsk
 =
NULL
) {

246 
	`¥ötf
("FailedÅoállocateÅask structure\n");

247 
ªt
 = -1;

248 
föished
;

251 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

252 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

253 
èsk
->
cdb
[4] = 1;

254 
èsk
->
cdb_size
 = 6;

255 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

256 
èsk
->
expx„æí
 = (
buf
);

258 
d©a
.
size
 = (
buf
);

259 
d©a
.d©®(*)&
buf
[0];

261 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, &
d©a
Ë=
NULL
) {

262 
	`¥ötf
("[FAILED]\n");

263 
	`¥ötf
("FaûedÅÿ£ndÑód6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

264 
ªt
 = -1;

266 
föished
;

268 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

269 
	`¥ötf
("[FAILED]\n");

270 
	`¥ötf
("Read6 of 1 block but iscsi data-out write should fail.\n");

271 
ªt
 = -1;

272 
	`scsi_‰ì_scsi_èsk
(
èsk
);

273 
föished
;

275 
	`scsi_‰ì_scsi_èsk
(
èsk
);

276 
	`¥ötf
("[OK]\n");

279 
föished
:

280 
	`iscsi_logout_sync
(
iscsi
);

281 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

282  
ªt
;

283 
	}
}

	@test-tool/0130_verify10_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0130_vîify10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0130_verify10_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY10 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ10/VERIFY10.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify10
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0131_verify10_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0131_vîify10_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

33 
	`¥ötf
("0131_verify10_mismatch:\n");

34 
	`¥ötf
("=======================\n");

35 i‡(
show_öfo
) {

36 
	`¥ötf
("Test basic VERIFY10 functionality.\n");

37 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0132_verify10_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0132_vîify10_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0132_verify10_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY10 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify10
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0133_verify10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0133_vîify10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

27 *
buf
 = 
NULL
;

29 
	`¥ötf
("0133_verify10_beyond_eol:\n");

30 
	`¥ötf
("========================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat VERIFY10 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

48 i‡(
num_blocks
 >= 0x80000000) {

49 
	`¥ötf
("[SKIPPED]\n");

50 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY10. SkippingÅest.\n");

51 
ªt
 = -2;

52 
föished
;

55 
buf
 = 
	`mÆloc
(256 * 
block_size
);

58 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

59 
i
 = 2; i <= 256; i++) {

60 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

61 i‡(
ªt
 != 0) {

62 
föished
;

67 
föished
:

68 
	`‰ì
(
buf
);

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0160_readcapacity16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0160_ªadˇ∑côy16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_ªadˇ∑côy16
 *
rc
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0160_readcapacity16_simple:\n");

31 
	`¥ötf
("===========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat basic READCAPACITY16 works\n");

34 
	`¥ötf
("1, READCAPACITY16 should work.\n");

35 
	`¥ötf
("\n");

39 
ªt
 = 0;

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
	`¥ötf
("TestÅhat READCAPACITY16 is supported ... ");

48 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

49 i‡(
èsk
 =
NULL
) {

50 
	`¥ötf
("[FAILED]\n");

51 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

52 
ªt
 = -1;

53 
föished
;

55 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("READCAPACITY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
	`scsi_‰ì_scsi_èsk
(
èsk
);

60 
föished
;

62 
rc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

63 i‡(
rc
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY16 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0161_readcapacity16_alloclen.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0161_ªadˇ∑côy16_Ælo˛í
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
ªt
, 
lun
;

32 
	`¥ötf
("0161_readcapacity16_alloclen:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Testállocation-length for READCAPACITY16\n");

36 
	`¥ötf
("1, READCAPACITY16 withálloclen==0 isÇotánÉrror\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("READCAPACITY16 with AllocationLength==0 ... ");

51 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("FailedÅoállocateÅask structure\n");

54 
ªt
 = -1;

55 
föished
;

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 0x9e;

60 
èsk
->
cdb
[1] = 0x10;

61 
èsk
->
cdb_size
 = 16;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

63 
èsk
->
expx„æí
 = 0;

65 i‡(
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
, 
èsk
, 
NULL
) == NULL) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("READCAPACITY16 wôh AŒoˇti⁄Lígth==0 shouldÇŸ faû. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
föished
;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
	`¥ötf
("[OK]\n");

83 
föished
:

84 
	`iscsi_logout_sync
(
iscsi
);

85 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

86  
ªt
;

87 
	}
}

	@test-tool/0170_unmap_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0170_unm≠_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0170_unmap_simple:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic UNMAP functionality.\n");

33 
	`¥ötf
("1, Test UNMAPÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Test UNMAPÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

46 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("data_loss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

57 
ªt
 = 0;

60 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

61 
i
=1; i<=256; i++) {

62 
unm≠_li°
 
li°
[1];

64 
li°
[0].
lba
 = 0;

65 
li°
[0].
num
 = 
i
;

66 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
	`¥ötf
("[OK]\n");

86 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

87 
i
=1; i<=256; i++) {

88 
unm≠_li°
 
li°
[1];

90 
li°
[0].
lba
 = 
num_blocks
 + 1 - 
i
;

91 
li°
[0].
num
 = 
i
;

92 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

100 
	`¥ötf
("[FAILED]\n");

101 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

102 
ªt
 = -1;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
föished
;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
	`¥ötf
("[OK]\n");

111 
föished
:

112 
	`iscsi_logout_sync
(
iscsi
);

113 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

114  
ªt
;

115 
	}
}

	@test-tool/0171_unmap_zero.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0171_unm≠_zîo
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0171_unmap_zero:\n");

30 
	`¥ötf
("================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test UNMAP of 0 blocks.\n");

33 
	`¥ötf
("1, TryÅo UNMAP 0 blocksát LBA 0Åo LBA 255\n");

34 
	`¥ötf
("2, TryÅo UNMAP 0 blocksát 0Åo 255 blocks fromÉnd-of-lun\n");

35 
	`¥ötf
("3, TryÅo UNMAP 0 blocksát 1Åo 256 blocks beyondÉnd-of-lun\n");

36 
	`¥ötf
("4, Send UNMAP withoutány block descriptors\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

48 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

53 i‡(!
d©a_loss
) {

54 
	`¥ötf
("data_loss flag isÇot set. SkippingÅest\n");

55 
ªt
 = -2;

56 
föished
;

59 
ªt
 = 0;

62 
	`¥ötf
("Unmapping ofÇo blockátÜbas 0-255 blocks ... ");

63 
i
=0; i<=255; i++) {

64 
unm≠_li°
 
li°
[1];

66 
li°
[0].
lba
 = 
i
;

67 
li°
[0].
num
 = 0;

68 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

89 
i
=0; i<=255; i++) {

90 
unm≠_li°
 
li°
[1];

92 
li°
[0].
lba
 = 
num_blocks
 - 
i
;

93 
li°
[0].
num
 = 0;

94 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

95 i‡(
èsk
 =
NULL
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
föished
;

101 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
föished
;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

110 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("UnmappingÇo blocks but 0-255 blocks beyongÉnd of LUN... ");

114 
i
=0; i<=255; i++) {

115 
unm≠_li°
 
li°
[1];

117 
li°
[0].
lba
 = 
num_blocks
 + 1 + 
i
;

118 
li°
[0].
num
 = 0;

119 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("STATUS==GOOD. UNMAP command should fail with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

129 
ªt
 = -1;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
föished
;

133 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


134 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


135 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

136 
	`¥ötf
("[FAILED]\n");

137 
	`¥ötf
("UNMAP fail butáscq was wrong. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

138 
ªt
 = -1;

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
föished
;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
	`¥ötf
("[OK]\n");

147 
	`¥ötf
("Unmap withoutány block descriptors ... ");

148 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
)); 
ªt
 = -1;

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
	`scsi_‰ì_scsi_èsk
(
èsk
);

159 
föished
;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
	`¥ötf
("[OK]\n");

164 
föished
:

165 
	`iscsi_logout_sync
(
iscsi
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

167  
ªt
;

168 
	}
}

	@test-tool/0180_writesame10_unmap.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0180_wrôeßme10_unm≠
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
fuŒ_size
;

28 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0180_writesame10_unmap:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic WRITESAME10-UNMAP functionality.\n");

35 
	`¥ötf
("1, If LBPME==1 we should have VPDÖage 0xB2\n");

36 
	`¥ötf
("2, UNMAPÅhe first 1-256 blocksátÅhe start ofÅhe LUN\n");

37 
	`¥ötf
("3, UNMAPÅheÜast 1-256 blocksátÅheÉnd ofÅhe LUN\n");

38 
	`¥ötf
("4, VerifyÅhat UNMAP == 0ánd ANCHOR == 1 is invalid\n");

39 
	`¥ötf
("5, UNMAP == 1ánd ANCHOR == 1\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 
ªt
 = 0;

52 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

53 
	`¥ötf
("Logical unit is fullyÖrovisioned.\n");

54 
	`¥ötf
("[SKIPPED]\n");

55 
	`¥ötf
("LUN doesÇot useÅhinÖrovisioning. LBPME==0.\n");

56 
ªt
 = -2;

57 
föished
;

61 
	`¥ötf
("Logical Block Provisioning isávailable. CheckÅhat VPDÖage 0xB2Éxists ... ");

64 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

65 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

72 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

76 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
föished
;

84 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

85 i‡(
lbp
 =
NULL
) {

86 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
ªt
 = -1;

89 
föished
;

91 
	`¥ötf
("[OK]\n");

93 i‡(
lbp
->
lbpws10
 == 0) {

94 
	`¥ötf
("Device doesÇot support WRITE_SAME10 for UNMAP. All WRITE_SAME10 commandsÅo unmap should fail.\n");

97 i‡(!
d©a_loss
) {

98 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

99 
ªt
 = -2;

100 
föished
;

103 
ªt
 = 0;

106 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

107 i‡(
lbp
->
lbpws10
 == 0) {

108 
	`¥ötf
("(Shouldáll fail since LBPWS10 is 0) ");

110 
i
=1; i<=256; i++) {

113 i‡(
lbp
->
lbpws10
 =1 && 
i
 % 
lbµb
) {

116 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

117 
NULL
, 0,

118 
i
,

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


127 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


128 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

129 
	`¥ötf
("[SKIPPED]\n");

130 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
ªt
 = -2;

133 
föished
;

135 i‡(
lbp
->
lbpws10
) {

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
ªt
 = -1;

141 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITESAME10 comm™d should faû sö˚ LBPWS10 i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 
ªt
 = -1;

151 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
	`¥ötf
("[OK]\n");

161 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

162 i‡(
lbp
->
lbpws10
 == 0) {

163 
	`¥ötf
("(Shouldáll fail since LBPWS10 is 0) ");

165 
i
=1; i<=256; i++) {

168 i‡(
lbp
->
lbpws10
 =1 && 
i
 % 
lbµb
) {

172 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
,

173 
NULL
, 0,

174 
i
,

176 i‡(
èsk
 =
NULL
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

179 
ªt
 = -1;

180 
föished
;

182 i‡(
lbp
->
lbpws10
) {

183 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
ªt
 = -1;

188 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


193 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("WRITESAME10 comm™d should faû sö˚ LBPWS10 i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
	`scsi_‰ì_scsi_èsk
(
èsk
);

197 
ªt
 = -1;

198 
föished
;

201 
	`scsi_‰ì_scsi_èsk
(
èsk
);

203 
	`¥ötf
("[OK]\n");

207 
	`¥ötf
("Try UNMAP==0ánd ANCHOR==1 ... ");

208 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

209 
NULL
, 0,

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

215 
ªt
 = -1;

216 
föished
;

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


219 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


220 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

221 
	`¥ötf
("[FAILED]\n");

222 
	`¥ötf
("WRITESAME10 with UNMAP=0 ANCHOR=1 failed with wrong sense code %d %s(%d) %s(0x%04x) should be CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n",

223 
èsk
->
°©us
,

224 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

225 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
ªt
 = -1;

228 
föished
;

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
	`¥ötf
("[OK]\n");

235 
	`¥ötf
("Try UNMAP==1ánd ANCHOR==1 ... ");

236 i‡(
lbp
->
™c_sup
 == 0) {

237 
	`¥ötf
("(ANC_SUP==0 so check conditionÉxpected) ");

239 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

240 
NULL
, 0,

243 i‡(
èsk
 =
NULL
) {

244 
	`¥ötf
("[FAILED]\n");

245 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

246 
ªt
 = -1;

247 
föished
;

249 i‡(
lbp
->
™c_sup
 == 0) {

250 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


251 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


252 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("WRITESAME10 with UNMAP=1 ANCHOR=1 failed with wrong sense code %d %s(%d) %s(0x%04x) should be CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n",

255 
èsk
->
°©us
,

256 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

257 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

258 
	`scsi_‰ì_scsi_èsk
(
èsk
);

259 
ªt
 = -1;

260 
föished
;

263 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

264 
	`¥ötf
("[FAILED]\n");

265 
	`¥ötf
("WRITESAME10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
ªt
 = -1;

268 
föished
;

271 
	`scsi_‰ì_scsi_èsk
(
èsk
);

272 
	`¥ötf
("[OK]\n");

275 
föished
:

276 
	`iscsi_logout_sync
(
iscsi
);

277 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

278  
ªt
;

279 
	}
}

	@test-tool/0181_writesame10_unmap_unaligned.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0181_wrôeßme10_unm≠_u«lig√d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0181_writesame10_unmap_unaligned:\n");

30 
	`¥ötf
("=================================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test unaligned WRITESAME10-UNMAP functionality.\n");

33 
	`¥ötf
("1, UNMAPÅhe first 1-lbppb blocksátÅhe start ofÅhe LUN\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

51 i‡(
lbµb
 < 2) {

52 
	`¥ötf
("LBPPB==%d C™ÇŸ unm≠ fø˘i⁄ÆÖhysiˇ»block\n", 
lbµb
);

53 
ªt
 = -1;

54 
föished
;

57 i‡(!
d©a_loss
) {

58 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

59 
ªt
 = -2;

60 
föished
;

63 
ªt
 = 0;

66 
	`¥ötf
("Unmapping first 1 - (LBPPB-1) blocks ... ");

67 
i
=1; i < 
lbµb
; i++) {

68 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

69 
NULL
, 0,

70 
i
,

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`¥ötf
("[SKIPPED]\n");

82 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
ªt
 = -2;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME10 commandÅo unmapá fractionalÖhysical block should fail\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

99 
föished
:

100 
	`iscsi_logout_sync
(
iscsi
);

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102  
ªt
;

103 
	}
}

	@test-tool/0182_writesame10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0182_wrôeßme10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0182_writesame10_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Write 1-256 blocks one block beyondÉnd-of-lun.\n");

36 
	`¥ötf
("2, Write 1-256 blocksát LBA 2^31\n");

37 
	`¥ötf
("3, Write 1-256 blocksát LBA -1\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 i‡(
num_blocks
 >= 0x80000000) {

58 
	`¥ötf
("[SKIPPED]\n");

59 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

60 
ªt
 = -2;

61 
föished
;

65 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

66 
i
 = 2; i <= 257; i++) {

67 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
,

68 
buf
, 
block_size
,

69 
i
,

71 i‡(
èsk
 =
NULL
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`¥ötf
("[SKIPPED]\n");

81 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
ªt
 = -2;

84 
föished
;

86 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME10 command should fail when writing beyondÉnd of device\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


94 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


95 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

109 
i
 = 1; i <= 256; i++) {

110 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0x80000000,

111 
buf
, 
block_size
,

112 
i
,

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITESAME10 command should fail when writingát LBA 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 
i
 = 1; i <= 256; i++) {

144 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, -1,

145 
buf
, 
block_size
,

146 
i
,

148 i‡(
èsk
 =
NULL
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
föished
;

154 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("WRITESAME10 command should fail whenÑeadingát LBA -1\n");

157 
ªt
 = -1;

158 
	`scsi_‰ì_scsi_èsk
(
èsk
);

159 
föished
;

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


162 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


163 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("WRITESAME10 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
	`¥ötf
("[OK]\n");

175 
föished
:

176 
	`iscsi_logout_sync
(
iscsi
);

177 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

178  
ªt
;

179 
	}
}

	@test-tool/0183_writesame10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0183_wrôeßme10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0183_writesame10_wrptotect:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 wrprotect\n");

34 
	`¥ötf
("1, Write using WRPROTECTásÇon-zero\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

57 
	`¥ötf
("WRITESAME10 with WRPROTECT ... ");

58 
i
 = 1; i <= 7; i++) {

59 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

60 
buf
, 
block_size
,

62 0, 0, 
i
, 0);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`¥ötf
("[SKIPPED]\n");

73 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = -2;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("WRITESAME10 command should fail when WRPROTECT is set\n");

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


86 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


87 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME10 failed but withÅhe wrong sense code. It should have failed with ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

99 
föished
:

100 
	`iscsi_logout_sync
(
iscsi
);

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102  
ªt
;

103 
	}
}

	@test-tool/0184_writesame10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0184_wrôeßme10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0184_writesame10_0blocks:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME10 works correctly whenÅransferÜength is 0 blocks.\n");

34 
	`¥ötf
("1, Writesameát LBA:0 should work.\n");

35 
	`¥ötf
("2, Writesameát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

36 
	`¥ötf
("3, Writesameát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("4, Writesameát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 
	`¥ötf
("Writesame10 0blocksát LBA:0 ... ");

58 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
öq_bl
 =
NULL
) {

78 
	`¥ötf
("[SKIPPED]\n");

79 
	`¥ötf
("Target doesÇot support blockÜimits VPD\n");

80 
ªt
 = -2;

81 
föished
;

83 i‡((!
öq_bl
->
w¢z
 && 
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) ||

84 (
öq_bl
->
w¢z
 && 
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION
)) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("WRITESAME10 command: failed with senseánd WSNZ = %d. "

87 "%s\n", 
öq_bl
->
w¢z
, 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Writesame10 0blocksát one block beyond <end-of-LUN> ... ");

97 i‡(
num_blocks
 > 0x80000000) {

98 
	`¥ötf
("[SKIPPED]\n");

99 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

100 
föished
;

102 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2,

103 
buf
, 
block_size
,

106 i‡(
èsk
 =
NULL
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
föished
;

112 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocks beyondÉnd\n");

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


120 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


121 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
	`¥ötf
("[OK]\n");

132 
	`¥ötf
("Writesame10 0blocksát LBA 2^31 ... ");

133 i‡(
num_blocks
 > 0x80000000) {

134 
	`¥ötf
("[SKIPPED]\n");

135 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

136 
föished
;

138 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0x80000000,

139 
buf
, 
block_size
,

142 i‡(
èsk
 =
NULL
) {

143 
	`¥ötf
("[FAILED]\n");

144 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

145 
ªt
 = -1;

146 
föished
;

148 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocksát 2^31\n");

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


156 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


157 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

160 
ªt
 = -1;

161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

162 
föished
;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
	`¥ötf
("[OK]\n");

168 
	`¥ötf
("Writesame10 0blocksát LBA -1 ... ");

169 i‡(
num_blocks
 > 0x80000000) {

170 
	`¥ötf
("[SKIPPED]\n");

171 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

172 
föished
;

174 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, -1,

175 
buf
, 
block_size
,

178 i‡(
èsk
 =
NULL
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
föished
;

184 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

185 
	`¥ötf
("[FAILED]\n");

186 
	`¥ötf
("WRITESAME10 command: Should fail when writing 0blocksát -1\n");

187 
ªt
 = -1;

188 
	`scsi_‰ì_scsi_èsk
(
èsk
);

189 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


193 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("WRITESAME10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

204 
föished
:

205 
	`iscsi_logout_sync
(
iscsi
);

206 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

207  
ªt
;

208 
	}
}

	@test-tool/0190_writesame16_unmap.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0190_wrôeßme16_unm≠
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
fuŒ_size
;

28 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
;

29 
ªt
, 
i
, 
lun
;

31 
	`¥ötf
("0190_writesame16_unmap:\n");

32 
	`¥ötf
("=======================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic WRITESAME16-UNMAP functionality.\n");

35 
	`¥ötf
("1, If LBPME==1 we should have VPDÖage 0xB2\n");

36 
	`¥ötf
("2, UNMAPÅhe first 1-256 blocksátÅhe start ofÅhe LUN\n");

37 
	`¥ötf
("3, UNMAPÅheÜast 1-256 blocksátÅheÉnd ofÅhe LUN\n");

38 
	`¥ötf
("4, VerifyÅhat UNMAP == 0ánd ANCHOR == 1 is invalid\n");

39 
	`¥ötf
("5, UNMAP == 1ánd ANCHOR == 1\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 
ªt
 = 0;

52 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

53 
	`¥ötf
("LBPMEÇot set. SkipÅest for CPDÖage 0xB2 (logical blockÖrovisioning)\n");

54 
föished
;

58 
	`¥ötf
("Logical Block Provisioning isávailable. CheckÅhat VPDÖage 0xB2Éxists ... ");

61 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

62 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

69 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
föished
;

81 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

82 i‡(
lbp
 =
NULL
) {

83 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
ªt
 = -1;

86 
föished
;

88 
	`¥ötf
("[OK]\n");

90 i‡(
lbp
->
lbpws
 == 0) {

91 
	`¥ötf
("Device doesÇot support WRITE_SAME16 for UNMAP. All WRITE_SAME16 commandsÅo unmap should fail.\n");

95 i‡(!
d©a_loss
) {

96 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

97 
ªt
 = -2;

98 
föished
;

101 
ªt
 = 0;

104 
	`¥ötf
("Unmapping first 1-256 blocks ... ");

105 i‡(
lbp
->
lbpws
 == 0) {

106 
	`¥ötf
("(Shouldáll fail since LBPWS is 0) ");

108 
i
=1; i<=256; i++) {

111 i‡(
lbp
->
lbpws
 =1 && 
i
 % 
lbµb
) {

114 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

115 
NULL
, 0,

116 
i
,

118 i‡(
èsk
 =
NULL
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
föished
;

124 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


125 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


126 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

127 
	`¥ötf
("[SKIPPED]\n");

128 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
ªt
 = -2;

131 
föished
;

133 i‡(
lbp
->
lbpws
) {

134 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
ªt
 = -1;

139 
föished
;

142 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


143 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


144 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("WRITESAME16 comm™d should faû sö˚ LBPWS i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
ªt
 = -1;

149 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

159 
	`¥ötf
("UnmappingÜast 1-256 blocks ... ");

160 i‡(
lbp
->
lbpws
 == 0) {

161 
	`¥ötf
("(Shouldáll fail since LBPWS is 0) ");

163 
i
=1; i<=256; i++) {

166 i‡(
lbp
->
lbpws
 =1 && 
i
 % 
lbµb
) {

170 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
,

171 
NULL
, 0,

172 
i
,

174 i‡(
èsk
 =
NULL
) {

175 
	`¥ötf
("[FAILED]\n");

176 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

177 
ªt
 = -1;

178 
föished
;

180 i‡(
lbp
->
lbpws
) {

181 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

182 
	`¥ötf
("[FAILED]\n");

183 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

185 
ªt
 = -1;

186 
föished
;

189 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


190 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


191 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

192 
	`¥ötf
("[FAILED]\n");

193 
	`¥ötf
("WRITESAME16 comm™d should faû sö˚ LBPWS i†0 buàÁûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
ªt
 = -1;

196 
föished
;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("Try UNMAP==0ánd ANCHOR==1 ... ");

206 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

207 
NULL
, 0,

210 i‡(
èsk
 =
NULL
) {

211 
	`¥ötf
("[FAILED]\n");

212 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

213 
ªt
 = -1;

214 
föished
;

216 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


217 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


218 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("WRITESAME16 wôh UNMAP=0 ANCHOR=1 faûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

221 
	`scsi_‰ì_scsi_èsk
(
èsk
);

222 
ªt
 = -1;

223 
föished
;

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

230 
	`¥ötf
("Try UNMAP==1ánd ANCHOR==1 ... ");

231 i‡(
lbp
->
™c_sup
 == 0) {

232 
	`¥ötf
("(ANC_SUP==0 so check conditionÉxpected) ");

234 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

235 
NULL
, 0,

238 i‡(
èsk
 =
NULL
) {

239 
	`¥ötf
("[FAILED]\n");

240 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

241 
ªt
 = -1;

242 
föished
;

244 i‡(
lbp
->
™c_sup
 == 0) {

245 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


246 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


247 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

248 
	`¥ötf
("[FAILED]\n");

249 
	`¥ötf
("WRITESAME16 wôh UNMAP=1 ANCHOR=1 faûed wôh wr⁄g sí£ codê%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

250 
	`scsi_‰ì_scsi_èsk
(
èsk
);

251 
ªt
 = -1;

252 
föished
;

255 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

256 
	`¥ötf
("[FAILED]\n");

257 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

258 
	`scsi_‰ì_scsi_èsk
(
èsk
);

259 
ªt
 = -1;

260 
föished
;

263 
	`scsi_‰ì_scsi_èsk
(
èsk
);

264 
	`¥ötf
("[OK]\n");

267 
föished
:

268 
	`iscsi_logout_sync
(
iscsi
);

269 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

270  
ªt
;

271 
	}
}

	@test-tool/0191_writesame16_unmap_unaligned.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0191_wrôeßme16_unm≠_u«lig√d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0191_writesame16_unmap_unaligned:\n");

30 
	`¥ötf
("=================================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test unaligned WRITESAME16-UNMAP functionality.\n");

33 
	`¥ötf
("1, UNMAPÅhe first 1-lbppb blocksátÅhe start ofÅhe LUN\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

50 i‡(
lbµb
 < 2) {

51 
	`¥ötf
("LBPPB==%d C™ÇŸ unm≠ fø˘i⁄ÆÖhysiˇ»block\n", 
lbµb
);

52 
ªt
 = -2;

53 
föished
;

56 i‡(!
d©a_loss
) {

57 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

58 
ªt
 = -2;

59 
föished
;

62 
ªt
 = 0;

65 
	`¥ötf
("Unmapping first 1 - (LBPPB-1) blocks ... ");

66 
i
=1; i < 
lbµb
; i++) {

67 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

68 
NULL
, 0,

69 
i
,

71 i‡(
èsk
 =
NULL
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`¥ötf
("[SKIPPED]\n");

81 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
ªt
 = -2;

84 
föished
;

86 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME16 commandÅo unmapá fractionalÖhysical block should fail\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

97 
föished
:

98 
	`iscsi_logout_sync
(
iscsi
);

99 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

100  
ªt
;

101 
	}
}

	@test-tool/0192_writesame16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0192_wrôeßme16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0192_writesame16_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Write 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Write 1-256 blocksát LBA 2^63\n");

36 
	`¥ötf
("3, Write 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

58 
i
 = 2; i <= 257; i++) {

59 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
,

60 
buf
, 
block_size
,

61 
i
,

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`¥ötf
("[SKIPPED]\n");

73 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = -2;

76 
föished
;

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("WRITESAME16 command should fail when writing beyondÉnd of device\n");

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


86 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


87 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
	`¥ötf
("[OK]\n");

100 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

101 
i
 = 1; i <= 256; i++) {

102 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0x8000000000000000ULL,

103 
buf
, 
block_size
,

104 
i
,

106 i‡(
èsk
 =
NULL
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
föished
;

112 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("WRITESAME16 command should fail when writingát LBA 2^63\n");

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


120 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


121 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
	`¥ötf
("[OK]\n");

134 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

135 
i
 = 1; i <= 256; i++) {

136 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, -1,

137 
buf
, 
block_size
,

138 
i
,

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITESAME16 command should fail whenÑeadingát LBA -1\n");

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


154 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


155 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITESAME16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

167 
föished
:

168 
	`iscsi_logout_sync
(
iscsi
);

169 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

170  
ªt
;

171 
	}
}

	@test-tool/0193_writesame16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0193_wrôeßme16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0193_writesame16_wrptotect:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 wrprotect\n");

34 
	`¥ötf
("1, Write using WRPROTECTásÇon-zero\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

52 
ªt
 = 0;

56 
	`¥ötf
("WRITESAME16 with WRPROTECT ... ");

57 
i
 = 1; i <= 7; i++) {

58 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

61 0, 0, 
i
, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITESAME16 command should fail when WRPROTECT is set\n");

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


85 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


86 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITESAME16 failed but withÅhe wrong sense code. It should have failed with ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.\n");

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

98 
föished
:

99 
	`iscsi_logout_sync
(
iscsi
);

100 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

101  
ªt
;

102 
	}
}

	@test-tool/0194_writesame16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0194_wrôeßme16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

28 
buf
[4096];

30 
	`¥ötf
("0194_writesame16_0blocks:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITESAME16 works correctly whenÅransferÜength is 0 blocks.\n");

34 
	`¥ötf
("1, Writesameát LBA:0 should work.\n");

35 
	`¥ötf
("2, Writesameát one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("3, Writesameát LBA 2^63 should fail.\n");

37 
	`¥ötf
("4, Writesameát LBA -1 should fail.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

57 
	`¥ötf
("Writesame16 0blocksát LBA:0 ... ");

58 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

59 
buf
, 
block_size
,

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITESAME16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Writesame16 0blocksát one block beyond <end-of-LUN> ... ");

89 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2,

90 
buf
, 
block_size
,

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

100 
	`¥ötf
("[FAILED]\n");

101 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocks beyondÉnd\n");

102 
ªt
 = -1;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


107 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


108 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

111 
ªt
 = -1;

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
föished
;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
	`¥ötf
("[OK]\n");

119 
	`¥ötf
("Writesame16 0blocksát LBA 2^63 ... ");

120 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0x8000000000000000,

121 
buf
, 
block_size
,

124 i‡(
èsk
 =
NULL
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

127 
ªt
 = -1;

128 
föished
;

130 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

131 
	`¥ötf
("[FAILED]\n");

132 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocksát 2^63\n");

133 
ªt
 = -1;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
föished
;

137 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


138 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


139 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 
	`scsi_‰ì_scsi_èsk
(
èsk
);

147 
	`¥ötf
("[OK]\n");

150 
	`¥ötf
("Writesame16 0blocksát LBA -1 ... ");

151 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, -1,

152 
buf
, 
block_size
,

155 i‡(
èsk
 =
NULL
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
föished
;

161 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("WRITESAME16 command: Should fail when writing 0blocksát -1\n");

164 
ªt
 = -1;

165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

166 
föished
;

168 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


169 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


170 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("WRITESAME16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
föished
:

182 
	`iscsi_logout_sync
(
iscsi
);

183 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

184  
ªt
;

185 
	}
}

	@test-tool/0200_read16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0200_ªad16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0200_read16_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ16 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

49 
	`¥ötf
("Reading first 1-256 blocks ... ");

50 
i
=1; i<=256; i++) {

51 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("[FAILED]\n");

54 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

55 
ªt
 = -1;

56 
föished
;

58 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
föished
;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
	`¥ötf
("[OK]\n");

71 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

72 
i
=1; i<=256; i++) {

73 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0201_read16_rdprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0201_ªad16_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

29 
	`¥ötf
("0201_read16_rdprotect:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ16 handlesÅheÑdprotect bits\n");

33 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
	`¥ötf
("Read16 with RDPROTECT ");

46 
i
 = 1; i <= 7; i++) {

47 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

48 i‡(
èsk
 =
NULL
) {

49 
	`¥ötf
("[FAILED]\n");

50 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

51 
ªt
 = -1;

52 
föished
;

54 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


55 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


56 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("Read16 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

67 
föished
:

68 
	`iscsi_logout_sync
(
iscsi
);

69 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

70  
ªt
;

71 
	}
}

	@test-tool/0202_read16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0202_ªad16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0202_read16_flags:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ16 handlesÅhe flag bits\n");

33 
	`¥ötf
("1, Reading with DPO should work\n");

34 
	`¥ötf
("2, Reading with FUA should work\n");

35 
	`¥ötf
("3, Reading with FUA_NV should work\n");

36 
	`¥ötf
("4, Reading with FUA+FUA_NV should work\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

48 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

53 
	`¥ötf
("Read16 with DPO ");

54 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 
	`¥ötf
("[OK]\n");

70 
	`¥ötf
("Read16 with FUA ");

71 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Read16 with FUA_NV ");

89 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Read16 with FUA+FUA_NV ");

106 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("Ród16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 
	`¥ötf
("[OK]\n");

122 
föished
:

123 
	`iscsi_logout_sync
(
iscsi
);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

125  
ªt
;

126 
	}
}

	@test-tool/0203_read16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0203_ªad16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0203_read16_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ16 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát 0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("3, Readát LBA:2^63 should fail.\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
	`¥ötf
("READ16 0blocksát LBA:0 ... ");

49 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

50 i‡(
èsk
 =
NULL
) {

51 
	`¥ötf
("[FAILED]\n");

52 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

53 
ªt
 = -1;

54 
föished
;

56 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
	`¥ötf
("[OK]\n");

67 
	`¥ötf
("READ16 0blocksát LBA:<beyondÉnd-of-disk> ... ");

68 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocks beyondÉnd\n");

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

82 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


83 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


84 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

95 
	`¥ötf
("READ16 0blocksát LBA 2^63 ... ");

96 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 0, 
block_size
, 0, 0, 0, 0, 0);

97 i‡(
èsk
 =
NULL
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
föished
;

103 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocksát 2^63\n");

106 
ªt
 = -1;

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
föished
;

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


111 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


112 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
ªt
 = -1;

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

117 
föished
;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

123 
	`¥ötf
("READ16 0blocksát LBA -1 ... ");

124 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

125 i‡(
èsk
 =
NULL
) {

126 
	`¥ötf
("[FAILED]\n");

127 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
föished
;

131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("READ16 command: Should fail whenÑeading 0blocksát -1\n");

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


139 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


140 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("READ16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

145 
föished
;

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
	`¥ötf
("[OK]\n");

151 
föished
:

152 
	`iscsi_logout_sync
(
iscsi
);

153 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

154  
ªt
;

155 
	}
}

	@test-tool/0204_read16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0204_ªad16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0204_read16_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ16 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

34 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^63\n");

35 
	`¥ötf
("3, Read 1-256 blocksát LBA -1\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Reading 1-256 blocks beyondÉnd-of-device ... ");

51 
i
 = 2; i <= 257; i++) {

52 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

53 i‡(
èsk
 =
NULL
) {

54 
	`¥ötf
("[FAILED]\n");

55 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

56 
ªt
 = -1;

57 
föished
;

59 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("Read16 command should fail whenÑeading beyondÉnd of device\n");

62 
ªt
 = -1;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


67 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


68 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

75 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("Reading 1-256 blocksát LBA 2^63 ... ");

81 
i
 = 2; i <= 257; i++) {

82 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0x8000000000000000ULL, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

83 i‡(
èsk
 =
NULL
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
föished
;

89 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("Read16 command should fail whenÑeadingát LBA 2^63\n");

92 
ªt
 = -1;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


97 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


98 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
	`¥ötf
("[OK]\n");

110 
	`¥ötf
("Reading 1-256 blocksát LBA -1 ... ");

111 
i
 = 2; i <= 257; i++) {

112 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

113 i‡(
èsk
 =
NULL
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("FaûedÅÿ£ndÑód16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
föished
;

119 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("Read16 command should fail whenÑeadingát LBA -1\n");

122 
ªt
 = -1;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

124 
föished
;

126 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


127 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


128 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("READ16 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
föished
;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

139 
föished
:

140 
	`iscsi_logout_sync
(
iscsi
);

141 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

142  
ªt
;

143 
	}
}

	@test-tool/0210_read12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0210_ªad12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0210_read12_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic READ12 functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadÅhe first 1-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("2, Verify we canÑeadÅheÜast 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

49 
	`¥ötf
("Reading first 1-256 blocks ... ");

50 
i
=1; i<=256; i++) {

51 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

52 i‡(
èsk
 =
NULL
) {

53 
	`¥ötf
("[FAILED]\n");

54 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

55 
ªt
 = -1;

56 
föished
;

58 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
föished
;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
	`¥ötf
("[OK]\n");

71 
	`¥ötf
("ReadingÜast 1-256 blocks ... ");

72 
i
=1; i<=256; i++) {

73 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

74 i‡(
èsk
 =
NULL
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0211_read12_rdprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0211_ªad12_rd¥Ÿe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

29 
	`¥ötf
("0211_read12_rdprotect:\n");

30 
	`¥ötf
("======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ12 handlesÅheÑdprotect bits\n");

33 
	`¥ötf
("1, AnyÇon-zero valued forÑdprotect should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
	`¥ötf
("Read12 with RDPROTECT ");

46 
i
 = 1; i <= 7; i++) {

47 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

48 i‡(
èsk
 =
NULL
) {

49 
	`¥ötf
("[FAILED]\n");

50 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

51 
ªt
 = -1;

52 
föished
;

54 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


55 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


56 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("Read12 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

59 
ªt
 = -1;

60 
	`scsi_‰ì_scsi_èsk
(
èsk
);

61 
föished
;

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

68 
föished
:

69 
	`iscsi_logout_sync
(
iscsi
);

70 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

71  
ªt
;

72 
	}
}

	@test-tool/0212_read12_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0212_ªad12_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0212_read12_flags:\n");

30 
	`¥ötf
("==================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test how READ12 handlesÅhe flag bits\n");

33 
	`¥ötf
("1, Reading with DPO should work\n");

34 
	`¥ötf
("2, Reading with FUA should work\n");

35 
	`¥ötf
("3, Reading with FUA_NV should work\n");

36 
	`¥ötf
("4, Reading with FUA+FUA_NV should work\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

48 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

53 
	`¥ötf
("Read12 with DPO ");

54 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 
	`¥ötf
("[OK]\n");

70 
	`¥ötf
("Read12 with FUA ");

71 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Read12 with FUA_NV ");

89 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Read12 with FUA+FUA_NV ");

106 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£ndÑód12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`¥ötf
("[FAILED]\n");

115 
	`¥ötf
("Ród12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
ªt
 = -1;

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
föished
;

120 
	`¥ötf
("[OK]\n");

122 
föished
:

123 
	`iscsi_logout_sync
(
iscsi
);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

125  
ªt
;

126 
	}
}

	@test-tool/0213_read12_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0213_ªad12_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0213_read12_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ12 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Readát LBA:0 should work.\n");

34 
	`¥ötf
("2, Readát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Readát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Readát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
	`¥ötf
("READ12 0blocksát LBA:0 ... ");

50 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 0, 
block_size
, 0, 0, 0, 0, 0);

51 i‡(
èsk
 =
NULL
) {

52 
	`¥ötf
("[FAILED]\n");

53 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

54 
ªt
 = -1;

55 
föished
;

57 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("READ12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
	`scsi_‰ì_scsi_èsk
(
èsk
);

62 
föished
;

64 
	`scsi_‰ì_scsi_èsk
(
èsk
);

65 
	`¥ötf
("[OK]\n");

68 
	`¥ötf
("READ12 0blocksát one block beyond <end-of-LUN> ... ");

69 i‡(
num_blocks
 > 0x80000000) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

72 
föished
;

74 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 
block_size
, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocks beyondÉnd\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


89 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


90 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

101 
	`¥ötf
("READ12 0blocksát LBA 2^31 ... ");

102 i‡(
num_blocks
 > 0x80000000) {

103 
	`¥ötf
("[SKIPPED]\n");

104 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

105 
föished
;

107 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0);

108 i‡(
èsk
 =
NULL
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

111 
ªt
 = -1;

112 
föished
;

114 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocksát 2^31\n");

117 
ªt
 = -1;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


122 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


123 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

126 
ªt
 = -1;

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
föished
;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
	`¥ötf
("[OK]\n");

134 
	`¥ötf
("READ12 0blocksát LBA -1 ... ");

135 i‡(
num_blocks
 > 0x80000000) {

136 
	`¥ötf
("[SKIPPED]\n");

137 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

138 
föished
;

140 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, -1, 0, 
block_size
, 0, 0, 0, 0, 0);

141 i‡(
èsk
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
föished
;

147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("READ12 command: Should fail whenÑeading 0blocksát -1\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


155 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


156 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("READ12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
föished
;

163 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

167 
föished
:

168 
	`iscsi_logout_sync
(
iscsi
);

169 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

170  
ªt
;

171 
	}
}

	@test-tool/0214_read12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0214_ªad12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

29 
	`¥ötf
("0214_read12_beyond_eol:\n");

30 
	`¥ötf
("=======================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat READ12 fails ifÑeading beyondÉnd-of-lun.\n");

33 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

34 
	`¥ötf
("1, Read 1-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Read 1-256 blocksát LBA 2^31\n");

36 
	`¥ötf
("2, Read 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

50 i‡(
num_blocks
 >= 0x80000000) {

51 
	`¥ötf
("[SKIPPED]\n");

52 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with READ12. SkippingÅest.\n");

53 
ªt
 = -2;

54 
föished
;

58 
	`¥ötf
("Reading 1-256 blocks beyondÉnd-of-device ... ");

59 
i
 = 2; i <= 257; i++) {

60 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("READ12 command should fail whenÑeading beyondÉnd of device\n");

70 
ªt
 = -1;

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


75 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


76 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

89 
	`¥ötf
("Reading 1-256 blocksát LBA 2^31 ... ");

90 i‡(
num_blocks
 >= 0xffffffff) {

91 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

92 
föished
;

94 
i
 = 2; i <= 257; i++) {

95 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0x80000000U, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
föished
;

102 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

103 
	`¥ötf
("[FAILED]\n");

104 
	`¥ötf
("READ12 command should fail whenÑeading from LBA 2^31\n");

105 
ªt
 = -1;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
föished
;

109 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


110 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


111 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("Reading 1-256 blocksát LBA -1 ... ");

125 i‡(
num_blocks
 > 0x80000000) {

126 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

127 
föished
;

129 
i
 = 2; i <= 257; i++) {

130 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, -1, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

131 i‡(
èsk
 =
NULL
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
föished
;

137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("READ12 command should fail whenÑeading from LBA -1\n");

140 
ªt
 = -1;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("READ12 faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
föished
:

159 
	`iscsi_logout_sync
(
iscsi
);

160 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

161  
ªt
;

162 
	}
}

	@test-tool/0220_write16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0220_wrôe16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0220_write16_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE16 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0221_write16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0221_wrôe16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0221_write16_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE16 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
	`¥ötf
("Write16 with WRPROTECT ");

52 
i
 = 1; i <= 7; i++) {

53 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


61 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


62 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Write16 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0222_write16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0222_wrôe16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0222_write16_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE16 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write16 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write16 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write16 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write16 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0223_write16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0223_wrôe16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0223_write16_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE16 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("3, Writeát LBA:2^63 should fail.\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
	`¥ötf
("WRITE16 0blocksát LBA:0 ... ");

55 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("WRITE16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
	`¥ötf
("[OK]\n");

73 
	`¥ötf
("WRITE16 0blocksát one block beyond <end-of-LUN> ... ");

74 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

75 i‡(
èsk
 =
NULL
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
föished
;

81 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocks beyondÉnd\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


89 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


90 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

101 
	`¥ötf
("WRITE16 0blocksát LBA 2^63 ... ");

102 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

103 i‡(
èsk
 =
NULL
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
ªt
 = -1;

107 
föished
;

109 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocksát 2^31\n");

112 
ªt
 = -1;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("WRITE16 0blocksát LBA -1 ... ");

130 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

131 i‡(
èsk
 =
NULL
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
föished
;

137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("WRITE16 command: Should fail when writing 0blocksát -1\n");

140 
ªt
 = -1;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("WRITE16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`¥ötf
("[OK]\n");

157 
föished
:

158 
	`iscsi_logout_sync
(
iscsi
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

160  
ªt
;

161 
	}
}

	@test-tool/0224_write16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0224_wrôe16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0224_write16_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

57 
i
 = 2; i <= 257; i++) {

58 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

59 i‡(
èsk
 =
NULL
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("FaûedÅÿ£nd wrôe16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
föished
;

65 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("Write16 command should fail when writing beyondÉnd of device\n");

68 
ªt
 = -1;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
föished
;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
	`¥ötf
("[OK]\n");

77 
föished
:

78 
	`iscsi_logout_sync
(
iscsi
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

80  
ªt
;

81 
	}
}

	@test-tool/0230_write12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0230_wrôe12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0230_write12_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE12 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0231_write12_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0231_wrôe12_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0231_write12_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE12 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(!
d©a_loss
) {

46 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
	`¥ötf
("Write12 with RDPROTECT ");

52 
i
 = 1; i <= 7; i++) {

53 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


61 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


62 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Write12 with RDPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

73 
föished
:

74 
	`iscsi_logout_sync
(
iscsi
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

76  
ªt
;

77 
	}
}

	@test-tool/0232_write12_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0232_wrôe12_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0232_write12_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE12 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write12 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write12 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write12 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write12 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0233_write12_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0233_wrôe12_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0233_write12_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE12 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Writeát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
	`¥ötf
("WRITE12 0blocksát LBA:0 ... ");

56 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITE12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("WRITE12 0blocksát one block beyond <end-of-LUN> ... ");

75 i‡(
num_blocks
 > 0x80000000) {

76 
	`¥ötf
("[SKIPPED]\n");

77 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

78 
föished
;

80 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocks beyondÉnd\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


95 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


96 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("WRITE12 0blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

111 
föished
;

113 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0x80000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocksát 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

140 
	`¥ötf
("WRITE12 0blocksát LBA -1 ... ");

141 i‡(
num_blocks
 > 0x80000000) {

142 
	`¥ötf
("[SKIPPED]\n");

143 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

144 
föished
;

146 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

147 i‡(
èsk
 =
NULL
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
föished
;

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE12 command: Should fail when writing 0blocksát -1\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


161 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


162 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("WRITE12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

173 
föished
:

174 
	`iscsi_logout_sync
(
iscsi
);

175 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

176  
ªt
;

177 
	}
}

	@test-tool/0234_write12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0234_wrôe12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0234_write12_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE12 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

55 i‡(
num_blocks
 >= 0x80000000) {

56 
	`¥ötf
("[SKIPPED]\n");

57 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE12. SkippingÅest.\n");

58 
ªt
 = -2;

59 
föished
;

63 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

64 
i
 = 2; i <= 257; i++) {

65 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

66 i‡(
èsk
 =
NULL
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("FaûedÅÿ£nd wrôe12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("Write12 command should fail when writing beyondÉnd of device\n");

75 
ªt
 = -1;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
föished
;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
	`¥ötf
("[OK]\n");

84 
föished
:

85 
	`iscsi_logout_sync
(
iscsi
);

86 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

87  
ªt
;

88 
	}
}

	@test-tool/0240_prefetch10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0240_¥e„tch10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0240_prefetch10_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic PREFETCH10 functionality.\n");

32 
	`¥ötf
("1, Verify we canÖrefetchÅhe first 0-256 blocks ofÅhe LUN.\n");

33 
	`¥ötf
("2, Verify we canÖrefetchÅheÜast 0-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 
ªt
 = 0;

47 
	`¥ötf
("Prefetching first 0-256 blocks.\n");

48 
i
 = 0; i <= 256; i++) {

49 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 
i
, 0, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

57 
	`¥ötf
("PrefetchingÜast 0-256 blocks.\n");

58 
i
 = 0; i <= 256; i++) {

59 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 
num_blocks
 - 
i
, i, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
föished
:

67 
	`iscsi_logout_sync
(
iscsi
);

68 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

69  
ªt
;

70 
	}
}

	@test-tool/0241_prefetch10_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0241_¥e„tch10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0241_prefetch10_flags:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH10 flags.\n");

32 
	`¥ötf
("1, TestÅhe IMMED flag.\n");

33 
	`¥ötf
("2, Test different GROUPNUMBERS.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Check PREFETCH10 with IMMED==1.\n");

49 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 1, 1, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

56 
	`¥ötf
("Check PREFETCH10 with GROUPNEMBER 0-31.\n");

57 
i
 = 0; i < 32; i++) {

58 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 1, 0, 
i
);

59 i‡(
ªt
 != 0) {

60 
föished
;

65 
föished
:

66 
	`iscsi_logout_sync
(
iscsi
);

67 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

68  
ªt
;

69 
	}
}

	@test-tool/0242_prefetch10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0242_¥e„tch10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0242_prefetch10_beyondeol:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH10 for blocks beyondÅhe EOL.\n");

32 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

33 
	`¥ötf
("1, Prefetch 1-256 blocks one block beyondÉnd-of-lun.\n");

34 
	`¥ötf
("2, Prefetch 1-256 blocksát LBA 2^31 (only on LUNs < 1TB)\n");

35 
	`¥ötf
("3, Prefetch 1-256 blocksát LBA -1 (only on LUN < 2TB)\n");

36 
	`¥ötf
("4, Prefetch 2-256 blocksáll but one beyondÉnd-of-lun.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

51 i‡(
num_blocks
 > 0x80000000) {

52 
	`¥ötf
("[SKIPPED]\n");

53 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with PREFETCH10. SkippingÅest.\n");

54 
ªt
 = -2;

55 
föished
;

59 
	`¥ötf
("PrefetchÜast 1-256 blocks one block beyondÉol.\n");

60 
i
 = 1; i <= 256; i++) {

61 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i, 0, 0);

62 i‡(
ªt
 != 0) {

63 
föished
;

69 
	`¥ötf
("Prefetch 1-256 blocksát LBA 2^31.\n");

70 
i
 = 1; i <= 256; i++) {

71 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0x80000000, 
i
, 0, 0);

72 i‡(
ªt
 != 0) {

73 
föished
;

79 
	`¥ötf
("Prefetch 1-256 blocksát LBA -1.\n");

80 
i
 = 1; i <= 256; i++) {

81 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, -1, 
i
, 0, 0);

82 i‡(
ªt
 != 0) {

83 
föished
;

89 
	`¥ötf
("Prefetch 1-255 blocks beyondÉol startingátÜast block.\n");

90 
i
=2; i<=256; i++) {

91 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
, 0, 0);

92 i‡(
ªt
 != 0) {

93 
föished
;

98 
föished
:

99 
	`iscsi_logout_sync
(
iscsi
);

100 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

101  
ªt
;

102 
	}
}

	@test-tool/0243_prefetch10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0243_¥e„tch10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0243_prefetch10_0blocks:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("TestÅhat PREFETCH10 works correctly whenÅransferÜength is 0 blocks.\n");

32 
	`¥ötf
("Transfer Length == 0 meansÅo PREFETCH untilÅheÉnd ofÅhe LUN.\n");

33 
	`¥ötf
("1, Prefetchát LBA:0 should work.\n");

34 
	`¥ötf
("2, Prefetchát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Prefetchát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Prefetchát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
ªt
 = 0;

52 
	`¥ötf
("PREFETCH10 0blocksát LBA==0.\n");

53 
ªt
 = 
	`¥e„tch10
(
iscsi
, 
lun
, 0, 0, 0, 0);

54 i‡(
ªt
 != 0) {

55 
föished
;

60 
	`¥ötf
("PREFETCH10 0blocksát one block beyond <end-of-LUN>.\n");

61 i‡(
num_blocks
 > 0x80000000) {

62 
	`¥ötf
("[SKIPPED]\n");

63 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

64 
föished
;

66 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 0, 0);

67 i‡(
ªt
 != 0) {

68 
föished
;

73 
	`¥ötf
("PREFETCH10 0blocksát LBA:2^31.\n");

74 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0x80000000, 0, 0, 0);

75 i‡(
ªt
 != 0) {

76 
föished
;

81 
	`¥ötf
("PREFETCH10 0blocksát LBA:-1.\n");

82 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffff, 0, 0, 0);

83 i‡(
ªt
 != 0) {

84 
föished
;

88 
föished
:

89 
	`iscsi_logout_sync
(
iscsi
);

90 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

91  
ªt
;

92 
	}
}

	@test-tool/0250_prefetch16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0250_¥e„tch16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0250_prefetch16_simple:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test basic PREFETCH16 functionality.\n");

32 
	`¥ötf
("1, Verify we canÖrefetchÅhe first 0-256 blocks ofÅhe LUN.\n");

33 
	`¥ötf
("2, Verify we canÖrefetchÅheÜast 0-256 blocks ofÅhe LUN.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 
ªt
 = 0;

47 
	`¥ötf
("Prefetching first 0-256 blocks.\n");

48 
i
 = 0; i <= 256; i++) {

49 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 
i
, 0, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

57 
	`¥ötf
("PrefetchingÜast 0-255 blocks.\n");

58 
i
 = 1; i < 256; i++) {

59 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 
num_blocks
 - 
i
, i, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
föished
:

67 
	`iscsi_logout_sync
(
iscsi
);

68 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

69  
ªt
;

70 
	}
}

	@test-tool/0251_prefetch16_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0251_¥e„tch16_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0251_prefetch16_flags:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH16 flags.\n");

32 
	`¥ötf
("1, TestÅhe IMMED flag.\n");

33 
	`¥ötf
("2, Test different GROUPNUMBERS.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 
ªt
 = 0;

48 
	`¥ötf
("Check PREFETCH16 with IMMED==1.\n");

49 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 1, 1, 0);

50 i‡(
ªt
 != 0) {

51 
föished
;

56 
	`¥ötf
("Check PREFETCH16 with GROUPNEMBER 0-31.\n");

57 
i
 = 0; i < 32; i++) {

58 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 1, 0, 
i
);

59 i‡(
ªt
 != 0) {

60 
föished
;

65 
föished
:

66 
	`iscsi_logout_sync
(
iscsi
);

67 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

68  
ªt
;

69 
	}
}

	@test-tool/0252_prefetch16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0252_¥e„tch16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
i
, 
lun
;

28 
	`¥ötf
("0252_prefetch16_beyondeol:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("Test PREFETCH16 for blocks beyondÅhe EOL.\n");

32 
	`¥ötf
("1, Prefetch 1-256 blocks one block beyondÉnd-of-lun.\n");

33 
	`¥ötf
("2, Prefetch 1-256 blocksát LBA 2^63 should fail.\n");

34 
	`¥ötf
("3, Prefetch 1-256 blocksát LBA -1 should fail.\n");

35 
	`¥ötf
("4, Prefetch 1-256 blocksáll but one block beyondÉol\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

50 
	`¥ötf
("PrefetchÜast 1-256 blocks one block beyondÉol.\n");

51 
i
 = 1; i <= 256; i++) {

52 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, i, 0, 0);

53 i‡(
ªt
 != 0) {

54 
föished
;

60 
	`¥ötf
("Prefetch 1-256 blocksát LBA 2^63.\n");

61 
i
 = 1; i <= 256; i++) {

62 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 
i
, 0, 0);

63 i‡(
ªt
 != 0) {

64 
föished
;

70 
	`¥ötf
("Prefetch 1-256 blocksát LBA -1.\n");

71 
i
 = 1; i <= 256; i++) {

72 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, -1, 
i
, 0, 0);

73 i‡(
ªt
 != 0) {

74 
föished
;

80 
	`¥ötf
("Prefetch 1-255 blocks beyondÉol startingátÜast block.\n");

81 
i
=2; i<=256; i++) {

82 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
, 0, 0);

83 i‡(
ªt
 != 0) {

84 
föished
;

89 
föished
:

90 
	`iscsi_logout_sync
(
iscsi
);

91 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

92  
ªt
;

93 
	}
}

	@test-tool/0253_prefetch16_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0253_¥e„tch16_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
ªt
, 
lun
;

28 
	`¥ötf
("0253_prefetch16_0blocks:\n");

29 
	`¥ötf
("===================\n");

30 i‡(
show_öfo
) {

31 
	`¥ötf
("TestÅhat PREFETCH16 works correctly whenÅransferÜength is 0 blocks.\n");

32 
	`¥ötf
("1, Prefetchát LBA:0 should work.\n");

33 
	`¥ötf
("2, Prefetchát one block beyondÉnd-of-lun should fail.\n");

34 
	`¥ötf
("3, Prefetchát LBA:2^63 should fail.\n");

35 
	`¥ötf
("4, Prefetchát LBA:-1 should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 
ªt
 = 0;

50 
	`¥ötf
("PREFETCH16 0blocksát LBA==0.\n");

51 
ªt
 = 
	`¥e„tch16
(
iscsi
, 
lun
, 0, 0, 0, 0);

52 i‡(
ªt
 != 0) {

53 
föished
;

58 
	`¥ötf
("PREFETCH16 0blocksát one block beyond <end-of-LUN>.\n");

59 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
 + 2, 0, 0, 0);

60 i‡(
ªt
 != 0) {

61 
föished
;

66 
	`¥ötf
("PREFETCH16 0blocksát LBA:2^63.\n");

67 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 0, 0, 0);

68 i‡(
ªt
 != 0) {

69 
föished
;

74 
	`¥ötf
("PREFETCH16 0blocksát LBA:-1.\n");

75 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffffffffffff, 0, 0, 0);

76 i‡(
ªt
 != 0) {

77 
föished
;

81 
föished
:

82 
	`iscsi_logout_sync
(
iscsi
);

83 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

84  
ªt
;

85 
	}
}

	@test-tool/0260_get_lba_status_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0260_gë_lba_°©us_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

29 
	`¥ötf
("0260_get_lba_status_simple:\n");

30 
	`¥ötf
("===================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test basic GET_LBA_STATUS functionality.\n");

33 
	`¥ötf
("1, Verify we canÑeadá descriptorátÅhe start ofÅheÜun.\n");

34 
	`¥ötf
("2, Verify we canÑeadá descriptorátÅheÉnd ofÅheÜun.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

45 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

46 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

47 
ªt
 = -2;

48 
föished
;

51 
ªt
 = 0;

54 
	`¥ötf
("Read one descriptorát LBA 0 ... ");

55 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 0, 8 + 16);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("GET_LBA_STATUS comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`scsi_‰ì_scsi_èsk
(
èsk
);

70 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("Read one descriptorátÉnd-of-device ... ");

75 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
num_blocks
, 8 + 16);

76 i‡(
èsk
 =
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
föished
;

82 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("GET_LBA_STATUS comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
föished
;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
	`¥ötf
("[OK]\n");

92 
föished
:

93 
	`iscsi_logout_sync
(
iscsi
);

94 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

95  
ªt
;

96 
	}
}

	@test-tool/0264_get_lba_status_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0264_gë_lba_°©us_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
lun
;

29 
	`¥ötf
("0264_get_lba_status_beyondeol:\n");

30 
	`¥ötf
("==============================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("Test GET_LBA_STATUS functionality for beyondÉnd-of-lunÑequests\n");

33 
	`¥ötf
("1, Readingá descriptor beyondÅheÉnd ofÅheÜun should fail.\n");

34 
	`¥ötf
("\n");

38 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

39 i‡(
iscsi
 =
NULL
) {

40 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

44 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

45 
	`¥ötf
("Logical unit is fullyÖrovisioned. SkippingÅest\n");

46 
ªt
 = -2;

47 
föished
;

50 
ªt
 = 0;

53 
	`¥ötf
("Read one descriptor beyondÉnd-of-device ... ");

54 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1, 8 + 16);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd GET_LBA_STATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("GET_LBA_STATUS beyondÉol should fail with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE\n");

64 
ªt
 = -1;

65 
	`scsi_‰ì_scsi_èsk
(
èsk
);

66 
föished
;

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


69 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


70 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("GET_LBA_STATUS faûed buàwôhÅhêwr⁄g sí£ code. Iàshould havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
föished
;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsi
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

83  
ªt
;

84 
	}
}

	@test-tool/0270_verify16_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0270_vîify16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0270_verify16_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY16 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ16/VERIFY16.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify16
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0271_verify16_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0271_vîify16_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0271_verify16_mismatch:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test basic VERIFY16 functionality.\n");

36 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0272_verify16_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0272_vîify16_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0272_verify16_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY16 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify16
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0273_verify16_beyondeol.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0273_vîify16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
ªt
, 
i
, 
lun
;

28 *
buf
 = 
NULL
;

30 
	`¥ötf
("0273_verify16_beyond_eol:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat VERIFY16 fails ifÑeading beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

35 
	`¥ötf
("2, Verify 1-256 blocksát LBA 2^63\n");

36 
	`¥ötf
("3, Verify 1-256 blocksát LBA -1\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

51 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

52 
i
 = 2; i <= 256; i++) {

53 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

54 i‡(
ªt
 != 0) {

55 
föished
;

60 
	`¥ötf
("Verifying 1-256 blocksát LBA 2^63.\n");

61 
i
 = 1; i <= 256; i++) {

62 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 0x8000000000000000, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

63 i‡(
ªt
 != 0) {

64 
föished
;

69 
	`¥ötf
("Verifying 1-256 blocksát LBA -1.\n");

70 
i
 = 1; i <= 256; i++) {

71 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsi
, 
lun
, 0xffffffffffffffff, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

72 i‡(
ªt
 != 0) {

73 
föished
;

76 
föished
:

77 
	`‰ì
(
buf
);

78 
	`iscsi_logout_sync
(
iscsi
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

80  
ªt
;

81 
	}
}

	@test-tool/0280_verify12_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0280_vîify12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 *
buf
 = 
NULL
;

31 
	`¥ötf
("0280_verify12_simple:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test basic VERIFY12 functionality.\n");

35 
	`¥ötf
("1, Readánd verifyÅhe first 1-256 blocks ofÅhe LUN using READ12/VERIFY12.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
buf
 = 
	`mÆloc
(256 * 
block_size
);

48 i‡(
buf
 =
NULL
) {

49 
	`¥ötf
("FailedÅoállocate buffer.\n");

50 
ªt
 = -1;

51 
föished
;

54 
	`¥ötf
("Read first 256 blocks.\n");

55 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks.\n");

78 
i
 = 1; i <= 256; i++) {

79 
ªt
 = 
	`vîify12
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

80 i‡(
ªt
 != 0) {

81 
föished
;

86 
föished
:

87 
	`‰ì
(
buf
);

88 
	`iscsi_logout_sync
(
iscsi
);

89 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

90  
ªt
;

91 
	}
}

	@test-tool/0281_verify12_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0281_vîify12_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0281_verify12_mismatch:\n");

33 
	`¥ötf
("=======================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test basic VERIFY12 functionality.\n");

36 
	`¥ötf
("1, VerifyÅhe first 1-256 blocks withá deliberateÉrror detectsÅhe mismatch.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 
buf
 = 
	`mÆloc
(256 * 
block_size
);

49 i‡(
buf
 =
NULL
) {

50 
	`¥ötf
("FailedÅoállocate buffer.\n");

51 
ªt
 = -1;

52 
föished
;

55 
	`¥ötf
("Read first 256 blocks.\n");

56 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = 0;

77 
	`¥ötf
("Verify first 1-256 blocks withá miscompare.\n");

78 
i
 = 1; i <= 256; i++) {

79 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

82 
buf
[
off£t
] ^= 'X';

84 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

85 i‡(
ªt
 != 0) {

86 
föished
;

90 
buf
[
off£t
] ^= 'X';

94 
föished
:

95 
	`‰ì
(
buf
);

96 
	`iscsi_logout_sync
(
iscsi
);

97 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

98  
ªt
;

99 
	}
}

	@test-tool/0282_verify12_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0282_vîify12_mism©ch_no_cmp
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
i
, 
lun
;

30 *
buf
 = 
NULL
;

32 
	`¥ötf
("0282_verify12_mismatch_no_cmp:\n");

33 
	`¥ötf
("==============================\n");

34 i‡(
show_öfo
) {

35 
	`¥ötf
("Test VERIFY12 BYTCHK:0 only checks mediumánd shouldÇever fail unlessÅhe medium is bad.\n");

36 
	`¥ötf
("1, ReadÅhe first 256 blocksánd verifyÅhe medium is good.\n");

37 
	`¥ötf
("2, VerifyÅhe first 1-256 blocksÑetruns SUCCESS if BYTCHK is 0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 
buf
 = 
	`mÆloc
(256 * 
block_size
);

50 i‡(
buf
 =
NULL
) {

51 
	`¥ötf
("FailedÅoállocate buffer.\n");

52 
ªt
 = -1;

53 
föished
;

56 
	`¥ötf
("Read first 256 blocks.\n");

57 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0);

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

61 
ªt
 = -1;

62 
föished
;

64 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("READ10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
föished
;

71 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
ªt
 = 0;

78 
	`¥ötf
("Verify first 1-256 blocks withá miscompare but BYTCHK==0.\n");

79 
i
 = 1; i <= 256; i++) {

80 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

83 
buf
[
off£t
] ^= 'X';

85 
ªt
 = 
	`vîify12
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 1, 0, 
buf
);

86 i‡(
ªt
 != 0) {

87 
föished
;

91 
buf
[
off£t
] ^= 'X';

95 
föished
:

96 
	`‰ì
(
buf
);

97 
	`iscsi_logout_sync
(
iscsi
);

98 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

99  
ªt
;

100 
	}
}

	@test-tool/0283_verify12_beyondeol.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0283_vîify12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
ªt
, 
i
, 
lun
;

28 *
buf
 = 
NULL
;

30 
	`¥ötf
("0283_verify12_beyond_eol:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat VERIFY12 fails ifÑeading beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Verify 2-256 blocks one block beyondÉnd-of-lun.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

49 i‡(
num_blocks
 >= 0x80000000) {

50 
	`¥ötf
("[SKIPPED]\n");

51 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY12. SkippingÅest.\n");

52 
ªt
 = -2;

53 
föished
;

56 
buf
 = 
	`mÆloc
(256 * 
block_size
);

59 
	`¥ötf
("Verifying 2-256 blocks beyondÉnd-of-device.\n");

60 
i
 = 2; i <= 256; i++) {

61 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsi
, 
lun
, 
num_blocks
, 
i
 * 
block_size
, block_size, 0, 1, 1, 
buf
);

62 i‡(
ªt
 != 0) {

63 
föished
;

68 
föished
:

69 
	`‰ì
(
buf
);

70 
	`iscsi_logout_sync
(
iscsi
);

71 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

72  
ªt
;

73 
	}
}

	@test-tool/0290_write10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0290_wrôe10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0290_write10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITE10 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0291_write10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0291_wrôe10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0291_write10_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE10 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Write10 with WRPROTECT ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("Write10 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

74 
föished
:

75 
	`iscsi_logout_sync
(
iscsi
);

76 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

77  
ªt
;

78 
	}
}

	@test-tool/0292_write10_flags.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0292_wrôe10_Êags
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0292_write10_flags:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITE10 handlesÅhe flags\n");

34 
	`¥ötf
("1, Write with DPU should work.\n");

35 
	`¥ötf
("2, Write with FUA should work.\n");

36 
	`¥ötf
("3, Write with FUA_NV should work.\n");

37 
	`¥ötf
("4, Write with FUA+FUA_NV should work.\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

49 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

54 
	`¥ötf
("Write10 with DPO ");

55 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 1, 0, 0, 0);

56 i‡(
èsk
 =
NULL
) {

57 
	`¥ötf
("[FAILED]\n");

58 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

59 
ªt
 = -1;

60 
föished
;

62 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 
	`¥ötf
("[OK]\n");

71 i‡(!
d©a_loss
) {

72 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

73 
ªt
 = -2;

74 
föished
;

78 
	`¥ötf
("Write10 with FUA ");

79 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 0, 0);

80 i‡(
èsk
 =
NULL
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

83 
ªt
 = -1;

84 
föished
;

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Write10 with FUA_NV ");

97 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 1, 0);

98 i‡(
èsk
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
föished
;

104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Write10 with FUA+FUA_NV ");

114 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 1, 1, 0);

115 i‡(
èsk
 =
NULL
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
föished
;

121 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

122 
	`¥ötf
("[FAILED]\n");

123 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

124 
ªt
 = -1;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
föished
;

128 
	`¥ötf
("[OK]\n");

130 
föished
:

131 
	`iscsi_logout_sync
(
iscsi
);

132 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

133  
ªt
;

134 
	}
}

	@test-tool/0293_write10_0blocks.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0293_wrôe10_0blocks
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
lun
;

29 
	`¥ötf
("0293_write10_0blocks:\n");

30 
	`¥ötf
("====================\n");

31 i‡(
show_öfo
) {

32 
	`¥ötf
("TestÅhat WRITE10 works correctly whenÅransferÜength is 0 blocks.\n");

33 
	`¥ötf
("1, Writeát LBA:0 should work.\n");

34 
	`¥ötf
("2, Writeát one block beyondÉnd-of-lun should fail. (only on LUNs withÜessÅhan 2^31 blocks)\n");

35 
	`¥ötf
("3, Writeát LBA:2^31 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

36 
	`¥ötf
("4, Writeát LBA:-1 should fail (only on LUNs withÜessÅhan 2^31 blocks).\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
	`¥ötf
("WRITE10 0blocksát LBA:0 ... ");

56 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

57 i‡(
èsk
 =
NULL
) {

58 
	`¥ötf
("[FAILED]\n");

59 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

60 
ªt
 = -1;

61 
föished
;

63 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITE10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
	`¥ötf
("[OK]\n");

74 
	`¥ötf
("WRITE10 0blocksát one block beyond <end-of-LUN> ... ");

75 i‡(
num_blocks
 > 0x80000000) {

76 
	`¥ötf
("[SKIPPED]\n");

77 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

78 
föished
;

80 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

87 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocks beyondÉnd\n");

90 
ªt
 = -1;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


95 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


96 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("WRITE10 0blocksát LBA:2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

111 
föished
;

113 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0x80000000, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocksát 2^31\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`¥ötf
("[OK]\n");

140 
	`¥ötf
("WRITE10 0blocksát LBA:-1 ... ");

141 i‡(
num_blocks
 > 0x80000000) {

142 
	`¥ötf
("[SKIPPED]\n");

143 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

144 
föished
;

146 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, -1, 
NULL
, 0, 
block_size
, 0, 0, 0, 0, 0);

147 i‡(
èsk
 =
NULL
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
föished
;

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE10 command: Should fail when writing 0blocksát -1\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


161 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


162 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("WRITE10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

173 
föished
:

174 
	`iscsi_logout_sync
(
iscsi
);

175 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

176  
ªt
;

177 
	}
}

	@test-tool/0294_write10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0294_wrôe10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0294_write10_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITE10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

56 i‡(
num_blocks
 >= 0x80000000) {

57 
	`¥ötf
("[SKIPPED]\n");

58 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE10. SkippingÅest.\n");

59 
ªt
 = -2;

60 
föished
;

64 
	`¥ötf
("Writing 1-256 blocks beyondÉnd-of-device ... ");

65 
i
 = 2; i <= 257; i++) {

66 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("WRITE10 command should fail when writing beyondÉnd of device\n");

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
	`¥ötf
("[OK]\n");

85 
föished
:

86 
	`iscsi_logout_sync
(
iscsi
);

87 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

88  
ªt
;

89 
	}
}

	@test-tool/0300_readonly.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0300_ªad⁄ly
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
scsi_mode_£n£
 *
ms
;

28 
ªt
, 
lun
;

29 
d©a
[4096];

30 
unm≠_li°
 
li°
[1];

31 
fuŒ_size
;

33 
ªt
 = -1;

35 
	`¥ötf
("0300_readonly:\n");

36 
	`¥ötf
("==============\n");

37 i‡(
show_öfo
) {

38 
	`¥ötf
("TestÅhatáll commandsÅhat modifyÅhe medium fail forÑeadonly devices\n");

39 
	`¥ötf
("1, WRITE10át LUN 0 should fail.\n");

40 
	`¥ötf
("2, WRITE12át LUN 0 should fail.\n");

41 
	`¥ötf
("3, WRITE16át LUN 0 should fail.\n");

42 
	`¥ötf
("4, WRITESAME10át LUN 0 should fail.\n");

43 
	`¥ötf
("5, WRITESAME16át LUN 0 should fail.\n");

44 
	`¥ötf
("6, WRITESAME10 with UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

45 
	`¥ötf
("7, WRITESAME16 with UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

46 
	`¥ötf
("8, UNMAPát LUN 0 should fail (skipped ifÇotÅhin-provisioned).\n");

47 
	`¥ötf
("9, WRITEVERIFY10át LUN 0 should fail.\n");

48 
	`¥ötf
("10, WRITEVERIFY12át LUN 0 should fail.\n");

49 
	`¥ötf
("11, WRITEVERIFY16át LUN 0 should fail.\n");

50 
	`¥ötf
("12, COMPAREANDWRITEát LUN 0 should fail.\n");

51 
	`¥ötf
("13, ORWRITEát LUN 0 should fail.\n");

52 
	`¥ötf
("\n");

56 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

57 i‡(
iscsi
 =
NULL
) {

58 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

63 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

67 i‡(!
d©a_loss
) {

68 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] --dataloss flagÇot set."

74 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

75 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0,

77 i‡(
èsk
 =
NULL
) {

78 
	`¥ötf
("FaûedÅÿ£nd mode£n£6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
föished
;

81 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

82 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

85 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0,

86 
fuŒ_size
);

87 i‡(
èsk
 =
NULL
) {

88 
	`¥ötf
("FaûedÅÿ£nd mode£n£6 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
föished
;

92 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

93 i‡(
ms
 =
NULL
) {

94 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

96 
föished
;

98 i‡(!(
ms
->
devi˚_•ecific_∑ømëî
 & 0x80)) {

99 
	`¥ötf
("Device isÇotÑead-only. SkippingÅest\n");

100 
ªt
 = -2;

101 
föished
;

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
ªt
 = 0;

110 
	`¥ötf
("WRITE10Åo LUN 0 ... ");

111 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

112 i‡(
èsk
 =
NULL
) {

113 
	`¥ötf
("[FAILED]\n");

114 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

115 
ªt
 = -1;

116 
föished
;

118 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("WRITE10 command should fail when writingÅoÑeadonly devices\n");

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


126 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


127 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("WRITE10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

130 
ªt
 = -1;

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
föished
;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`¥ötf
("[OK]\n");

139 
	`¥ötf
("WRITE12Åo LUN 0 ... ");

140 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

141 i‡(
èsk
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
föished
;

147 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("WRITE12 command should fail when writingÅoÑeadonly devices\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


155 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


156 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("WRITE12 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

159 
ªt
 = -1;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
föished
;

163 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("[OK]\n");

168 
	`¥ötf
("WRITE16Åo LUN 0 ... ");

169 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

170 i‡(
èsk
 =
NULL
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
föished
;

176 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("WRITE16 command should fail when writingÅoÑeadonly devices\n");

179 
ªt
 = -1;

180 
	`scsi_‰ì_scsi_èsk
(
èsk
);

181 
föished
;

183 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


184 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


185 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

186 
	`¥ötf
("[FAILED]\n");

187 
	`¥ötf
("WRITE16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

188 
ªt
 = -1;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
föished
;

192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
	`¥ötf
("[OK]\n");

197 
	`¥ötf
("WRITESAME10Åo LUN 0 ... ");

198 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

199 
d©a
, 
block_size
,

202 i‡(
èsk
 =
NULL
) {

203 
	`¥ötf
("[FAILED]\n");

204 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

205 
ªt
 = -1;

206 
föished
;

208 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

209 
	`¥ötf
("[FAILED]\n");

210 
	`¥ötf
("WRITESAME10 command should fail when writingÅoÑeadonly devices\n");

211 
ªt
 = -1;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
föished
;

215 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


216 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


217 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

218 
	`¥ötf
("[FAILED]\n");

219 
	`¥ötf
("WRITESAME10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

220 
ªt
 = -1;

221 
	`scsi_‰ì_scsi_èsk
(
èsk
);

222 
föished
;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
	`¥ötf
("[OK]\n");

229 
	`¥ötf
("WRITESAME16Åo LUN 0 ... ");

230 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

231 
d©a
, 
block_size
,

234 i‡(
èsk
 =
NULL
) {

235 
	`¥ötf
("[FAILED]\n");

236 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

237 
ªt
 = -1;

238 
föished
;

240 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

241 
	`¥ötf
("[FAILED]\n");

242 
	`¥ötf
("WRITESAME16 command should fail when writingÅoÑeadonly devices\n");

243 
ªt
 = -1;

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
föished
;

247 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


248 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


249 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

250 
	`¥ötf
("[FAILED]\n");

251 
	`¥ötf
("WRITESAME16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

252 
ªt
 = -1;

253 
	`scsi_‰ì_scsi_èsk
(
èsk
);

254 
föished
;

256 
	`scsi_‰ì_scsi_èsk
(
èsk
);

257 
	`¥ötf
("[OK]\n");

261 
	`¥ötf
("WRITESAME10Åo UNMAP LUN 0 ... ");

262 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

263 
	`¥ötf
("LUN isÇotÅhin-provisioned. [SKIPPED]\n");

264 
föished
;

266 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

267 
d©a
, 
block_size
,

270 i‡(
èsk
 =
NULL
) {

271 
	`¥ötf
("[FAILED]\n");

272 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

273 
ªt
 = -1;

274 
föished
;

276 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

277 
	`¥ötf
("[FAILED]\n");

278 
	`¥ötf
("WRITESAME10 command should fail when writingÅoÑeadonly devices\n");

279 
ªt
 = -1;

280 
	`scsi_‰ì_scsi_èsk
(
èsk
);

281 
föished
;

283 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


284 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


285 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

286 
	`¥ötf
("[FAILED]\n");

287 
	`¥ötf
("WRITESAME10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

288 
ªt
 = -1;

289 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
föished
;

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
	`¥ötf
("[OK]\n");

297 
	`¥ötf
("WRITESAME16Åo UNMAP LUN 0 ... ");

298 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

299 
d©a
, 
block_size
,

302 i‡(
èsk
 =
NULL
) {

303 
	`¥ötf
("[FAILED]\n");

304 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

305 
ªt
 = -1;

306 
föished
;

308 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

309 
	`¥ötf
("[FAILED]\n");

310 
	`¥ötf
("WRITESAME16 command should fail when writingÅoÑeadonly devices\n");

311 
ªt
 = -1;

312 
	`scsi_‰ì_scsi_èsk
(
èsk
);

313 
föished
;

315 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


316 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


317 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

318 
	`¥ötf
("[FAILED]\n");

319 
	`¥ötf
("WRITESAME16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

320 
ªt
 = -1;

321 
	`scsi_‰ì_scsi_èsk
(
èsk
);

322 
föished
;

324 
	`scsi_‰ì_scsi_èsk
(
èsk
);

325 
	`¥ötf
("[OK]\n");

329 
	`¥ötf
("UNMAP LUN 0 ... ");

330 
li°
[0].
lba
 = 0;

331 
li°
[0].
num
 = 1;

332 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, &
li°
[0], 1);

333 i‡(
èsk
 =
NULL
) {

334 
	`¥ötf
("[FAILED]\n");

335 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

336 
ªt
 = -1;

337 
föished
;

339 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

340 
	`¥ötf
("[FAILED]\n");

341 
	`¥ötf
("UNMAP command should fail when writingÅoÑeadonly devices\n");

342 
ªt
 = -1;

343 
	`scsi_‰ì_scsi_èsk
(
èsk
);

344 
föished
;

346 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


347 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


348 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

349 
	`¥ötf
("[FAILED]\n");

350 
	`¥ötf
("UNMAP failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

351 
ªt
 = -1;

352 
	`scsi_‰ì_scsi_èsk
(
èsk
);

353 
föished
;

355 
	`scsi_‰ì_scsi_èsk
(
èsk
);

356 
	`¥ötf
("[OK]\n");

360 
	`¥ötf
("WRITEVERIFY10Åo LUN 0 ... ");

361 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

362 i‡(
èsk
 =
NULL
) {

363 
	`¥ötf
("[FAILED]\n");

364 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

365 
ªt
 = -1;

366 
föished
;

368 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

369 
	`¥ötf
("[FAILED]\n");

370 
	`¥ötf
("WRITEVERIFY10 command should fail when writingÅoÑeadonly devices\n");

371 
ªt
 = -1;

372 
	`scsi_‰ì_scsi_èsk
(
èsk
);

373 
föished
;

375 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


376 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


377 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

378 
	`¥ötf
("[FAILED]\n");

379 
	`¥ötf
("WRITEVERIFY10 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

380 
ªt
 = -1;

381 
	`scsi_‰ì_scsi_èsk
(
èsk
);

382 
föished
;

384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

385 
	`¥ötf
("[OK]\n");

389 
	`¥ötf
("WRITEVERIFY12Åo LUN 0 ... ");

390 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

391 i‡(
èsk
 =
NULL
) {

392 
	`¥ötf
("[FAILED]\n");

393 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

394 
ªt
 = -1;

395 
föished
;

397 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

398 
	`¥ötf
("[FAILED]\n");

399 
	`¥ötf
("WRITEVERIFY12 command should fail when writingÅoÑeadonly devices\n");

400 
ªt
 = -1;

401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

402 
föished
;

404 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


405 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


406 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

407 
	`¥ötf
("[FAILED]\n");

408 
	`¥ötf
("WRITEVERIFY12 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

409 
ªt
 = -1;

410 
	`scsi_‰ì_scsi_èsk
(
èsk
);

411 
föished
;

413 
	`scsi_‰ì_scsi_èsk
(
èsk
);

414 
	`¥ötf
("[OK]\n");

418 
	`¥ötf
("WRITEVERIFY16Åo LUN 0 ... ");

419 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0);

420 i‡(
èsk
 =
NULL
) {

421 
	`¥ötf
("[FAILED]\n");

422 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

423 
ªt
 = -1;

424 
föished
;

426 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

427 
	`¥ötf
("[FAILED]\n");

428 
	`¥ötf
("WRITEVERIFY16 command should fail when writingÅoÑeadonly devices\n");

429 
ªt
 = -1;

430 
	`scsi_‰ì_scsi_èsk
(
èsk
);

431 
föished
;

433 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


434 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


435 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

436 
	`¥ötf
("[FAILED]\n");

437 
	`¥ötf
("WRITEVERIFY16 failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

438 
ªt
 = -1;

439 
	`scsi_‰ì_scsi_èsk
(
èsk
);

440 
föished
;

442 
	`scsi_‰ì_scsi_èsk
(
èsk
);

443 
	`¥ötf
("[OK]\n");

447 
	`¥ötf
("COMPAREWRITEÅo LUN 0 ... ");

448 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

449 i‡(
èsk
 =
NULL
) {

450 
	`¥ötf
("[FAILED]\n");

451 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

452 
ªt
 = -1;

453 
föished
;

455 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

456 
	`¥ötf
("[FAILED]\n");

457 
	`¥ötf
("COMPAREANDWRITE command should fail when writingÅoÑeadonly devices\n");

458 
ªt
 = -1;

459 
	`scsi_‰ì_scsi_èsk
(
èsk
);

460 
föished
;

462 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


463 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


464 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

465 
	`¥ötf
("[FAILED]\n");

466 
	`¥ötf
("COMPAREANDWRITE failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

467 
ªt
 = -1;

468 
	`scsi_‰ì_scsi_èsk
(
èsk
);

469 
föished
;

471 
	`scsi_‰ì_scsi_èsk
(
èsk
);

472 
	`¥ötf
("[OK]\n");

476 
	`¥ötf
("ORWRITEÅo LUN 0 ... ");

477 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

478 i‡(
èsk
 =
NULL
) {

479 
	`¥ötf
("[FAILED]\n");

480 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

481 
ªt
 = -1;

482 
föished
;

484 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

485 
	`¥ötf
("[FAILED]\n");

486 
	`¥ötf
("ORWRITE command should fail when writingÅoÑeadonly devices\n");

487 
ªt
 = -1;

488 
	`scsi_‰ì_scsi_èsk
(
èsk
);

489 
föished
;

491 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


492 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


493 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

494 
	`¥ötf
("[FAILED]\n");

495 
	`¥ötf
("ORWRITE failed withÅhe wrong sense code. Should fail with DATA_PROTECTION/WRITE_PROTECTED\n");

496 
ªt
 = -1;

497 
	`scsi_‰ì_scsi_èsk
(
èsk
);

498 
föished
;

500 
	`scsi_‰ì_scsi_èsk
(
èsk
);

501 
	`¥ötf
("[OK]\n");

504 
föished
:

505 
	`iscsi_logout_sync
(
iscsi
);

506 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

507  
ªt
;

508 
	}
}

	@test-tool/0310_writeverify10_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0310_wrôevîify10_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0310_writeverify10_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY10 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0311_writeverify10_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0311_wrôevîify10_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0311_writeverify10_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY10 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY10 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY10 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0314_writeverify10_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0314_wrôevîify10_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0314_writeverify10_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY10 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^31 should fail.\n");

37 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

38 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

39 
	`¥ötf
("\n");

43 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

44 i‡(
iscsi
 =
NULL
) {

45 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

59 i‡(
num_blocks
 >= 0x80000000) {

60 
	`¥ötf
("[SKIPPED]\n");

61 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

62 
ªt
 = -2;

63 
föished
;

67 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

68 
i
 = 1; i <= 256; i++) {

69 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

70 i‡(
èsk
 =
NULL
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


77 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


78 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

79 
	`¥ötf
("[SKIPPED]\n");

80 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
ªt
 = -2;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


93 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


94 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

110 
föished
;

112 
i
 = 1; i <= 256; i++) {

113 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0x80000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 i‡(
num_blocks
 >= 0xffffffff) {

144 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

145 
föished
;

147 
i
 = 1; i <= 256; i++) {

148 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0xffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


163 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


164 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

178 
i
=2; i<=256; i++) {

179 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

186 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("WRITEVERIFY10 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


194 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


195 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("WRITEVERIFY10 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
föished
;

202 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210  
ªt
;

211 
	}
}

	@test-tool/0320_writeverify12_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0320_wrôevîify12_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0320_writeverify12_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY12 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY12 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0321_writeverify12_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0321_wrôevîify12_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0321_writeverify12_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY12 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY12 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY12 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0324_writeverify12_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0324_wrôevîify12_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0324_writeverify12_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY12 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("ThisÅest is skipped for LUNs with moreÅhan 2^31 blocks\n");

35 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

36 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^31 should fail.\n");

37 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

38 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

39 
	`¥ötf
("\n");

43 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

44 i‡(
iscsi
 =
NULL
) {

45 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

59 i‡(
num_blocks
 >= 0x80000000) {

60 
	`¥ötf
("[SKIPPED]\n");

61 
	`¥ötf
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

62 
ªt
 = -2;

63 
föished
;

67 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

68 
i
 = 1; i <= 256; i++) {

69 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

70 i‡(
èsk
 =
NULL
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


77 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


78 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

79 
	`¥ötf
("[SKIPPED]\n");

80 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
ªt
 = -2;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


93 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


94 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
	`¥ötf
("Writing 1-256 blocksát LBA 2^31 ... ");

108 i‡(
num_blocks
 > 0x80000000) {

109 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

110 
föished
;

112 
i
 = 1; i <= 256; i++) {

113 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0x80000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

123 
ªt
 = -1;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
föished
;

127 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


128 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


129 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

130 
	`¥ötf
("[FAILED]\n");

131 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

134 
föished
;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("[OK]\n");

142 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

143 i‡(
num_blocks
 >= 0xffffffff) {

144 
	`¥ötf
("LUN isÅoo big, skippingÅest\n");

145 
föished
;

147 
i
 = 1; i <= 256; i++) {

148 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0xffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


163 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


164 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

178 
i
=2; i<=256; i++) {

179 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

186 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("WRITEVERIFY12 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

193 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


194 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


195 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("WRITEVERIFY12 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
föished
;

202 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210  
ªt
;

211 
	}
}

	@test-tool/0330_writeverify16_simple.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0330_wrôevîify16_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 256];

30 
	`¥ötf
("0330_writeverify16_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic WRITEVERIFY16 functionality.\n");

34 
	`¥ötf
("1, Verify we can writeÅhe first 1-256 blocks ofÅhe LUN.\n");

35 
	`¥ötf
("2, Verify we can writeÅheÜast 1-256 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 i‡(!
d©a_loss
) {

48 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

49 
ªt
 = -2;

50 
föished
;

54 
ªt
 = 0;

57 
	`¥ötf
("Writing first 1-256 blocks ... ");

58 
i
 = 1; i <= 256; i++) {

59 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

60 i‡(
èsk
 =
NULL
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
ªt
 = -1;

64 
föished
;

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`¥ötf
("[FAILED]\n");

68 
	`¥ötf
("WRITEVERIFY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
föished
;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
	`¥ötf
("[OK]\n");

79 
	`¥ötf
("WritingÜast 1-256 blocks ... ");

80 
i
 = 1; i <= 256; i++) {

81 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
 +1 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

82 i‡(
èsk
 =
NULL
) {

83 
	`¥ötf
("[FAILED]\n");

84 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("WRITEVERIFY16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
föished
;

95 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
	`¥ötf
("[OK]\n");

100 
föished
:

101 
	`iscsi_logout_sync
(
iscsi
);

102 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

103  
ªt
;

104 
	}
}

	@test-tool/0331_writeverify16_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0331_wrôevîify16_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0331_writeverify16_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how WRITEVERIFY16 handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test WRITEVERIFY16 with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("WRITEVERIFY16 with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0334_writeverify16_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0334_wrôevîify16_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0334_writeverify16_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat WRITEVERIFY16 fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

49 i‡(!
d©a_loss
) {

50 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

51 
ªt
 = -2;

52 
föished
;

56 
ªt
 = 0;

59 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

60 
i
 = 1; i <= 256; i++) {

61 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


70 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

71 
	`¥ötf
("[SKIPPED]\n");

72 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
ªt
 = -2;

75 
föished
;

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

80 
ªt
 = -1;

81 
	`scsi_‰ì_scsi_èsk
(
èsk
);

82 
föished
;

84 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


85 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


86 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
föished
;

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
	`¥ötf
("[OK]\n");

99 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

100 
i
 = 1; i <= 256; i++) {

101 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

102 i‡(
èsk
 =
NULL
) {

103 
	`¥ötf
("[FAILED]\n");

104 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

105 
ªt
 = -1;

106 
föished
;

108 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

109 
	`¥ötf
("[FAILED]\n");

110 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

111 
ªt
 = -1;

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
föished
;

115 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


116 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


117 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

122 
föished
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("[OK]\n");

130 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

131 
i
 = 1; i <= 256; i++) {

132 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

133 i‡(
èsk
 =
NULL
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
föished
;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

140 
	`¥ötf
("[FAILED]\n");

141 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

142 
ªt
 = -1;

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
föished
;

146 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


147 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


148 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
	`¥ötf
("[OK]\n");

161 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

162 
i
=2; i<=256; i++) {

163 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

164 i‡(
èsk
 =
NULL
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
föished
;

170 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("WRITEVERIFY16 beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


178 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


179 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("WRITEVERIFY16 faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

184 
föished
;

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

188 
	`¥ötf
("[OK]\n");

191 
föished
:

192 
	`iscsi_logout_sync
(
iscsi
);

193 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

194  
ªt
;

195 
	}
}

	@test-tool/0340_compareandwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$bôwi£_övît
(
d©a
[], 
Àn
) {

25 
j
;

27 
j
 = 0; j < 
Àn
; j++) {

28 
d©a
[
j
] = ~data[j];

30 
	}
}

32 
	$T0340_com∑ª™dwrôe_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

34 
iscsi_c⁄ãxt
 *
iscsi
;

35 
scsi_èsk
 *
èsk
;

36 
ªt
, 
i
, 
lun
;

37 
d©a
[4096 * 256];

39 
	`¥ötf
("0340_compareandwrite_simple:\n");

40 
	`¥ötf
("===================\n");

41 i‡(
show_öfo
) {

42 
	`¥ötf
("Test basic COMPAREANDWRITE functionality.\n");

43 
	`¥ötf
("1, Verify we can writeÅhe first 1-255 blocks ofÅhe LUN.\n");

44 
	`¥ötf
("2, Verify we can writeÅheÜast 1-255 blocks ofÅhe LUN.\n");

45 
	`¥ötf
("\n");

49 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

50 i‡(
iscsi
 =
NULL
) {

51 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

55 i‡(!
d©a_loss
) {

56 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

57 
ªt
 = -2;

58 
föished
;

62 
ªt
 = 0;

66 
	`¥ötf
("Compareánd write first 1-255 blocks ... ");

67 
i
 = 1; i < 256; i++) {

68 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

69 i‡(
èsk
 =
NULL
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
föished
;

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

78 
ªt
 = -1;

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
föished
;

83 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

84 
	`¥ötf
("[FAILED]\n");

85 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

90 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

91 
	`mem˝y
(
d©a
 + (
i
 * 
block_size
), 
èsk
->
d©aö
.data, i * block_size);

92 
	`bôwi£_övît
(
d©a
 + (
i
 * 
block_size
), i * block_size);

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
föished
;

102 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


103 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


104 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

105 
	`¥ötf
("[SKIPPED]\n");

106 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
ªt
 = -2;

109 
föished
;

111 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("COMPAREANDWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

116 
föished
;

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("Compareánd writeÜast 1-255 blocks ... ");

125 
i
 = 1; i < 256; i++) {

126 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

127 i‡(
èsk
 =
NULL
) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

130 
ªt
 = -1;

131 
föished
;

133 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

134 
	`¥ötf
("[FAILED]\n");

135 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

136 
ªt
 = -1;

137 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
föished
;

141 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

142 
	`¥ötf
("[FAILED]\n");

143 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 
ªt
 = -1;

145 
	`scsi_‰ì_scsi_èsk
(
èsk
);

146 
föished
;

148 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

149 
	`mem˝y
(
d©a
 + (
i
 * 
block_size
), 
èsk
->
d©aö
.data, i * block_size);

150 
	`bôwi£_övît
(
d©a
 + (
i
 * 
block_size
), i * block_size);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

154 i‡(
èsk
 =
NULL
) {

155 
	`¥ötf
("[FAILED]\n");

156 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

157 
ªt
 = -1;

158 
föished
;

160 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("COMPAREANDWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
	`¥ötf
("[OK]\n");

172 
föished
:

173 
	`iscsi_logout_sync
(
iscsi
);

174 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

175  
ªt
;

176 
	}
}

	@test-tool/0341_compareandwrite_mismatch.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0341_com∑ª™dwrôe_mism©ch
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 
d©a
[4096 * 256];

31 
	`¥ötf
("0341_compareandwrite_mismatch:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test COMPAREANDWRITE can detectá data mismatch.\n");

35 
	`¥ötf
("1, Verify we detectá mismatch inÅhe first 1-255 blocks ofÅhe LUN.\n");

36 
	`¥ötf
("2, Verify we detectá mismatch inÅheÜast 1-255 blocks ofÅhe LUN.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

59 
	`¥ötf
("Compareánd write first 1-255 blocks (data isÇot matching) ... ");

60 
i
 = 1; i < 256; i++) {

61 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

62 i‡(
èsk
 =
NULL
) {

63 
	`¥ötf
("[FAILED]\n");

64 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

65 
ªt
 = -1;

66 
föished
;

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
föished
;

76 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

87 
d©a
[ (
i
 - 1Ë* 
block_size
] ^= 0xa5;

89 
	`mem£t
(
d©a
 + (
i
 * 
block_size
), 0xff, (i * block_size));

91 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

92 i‡(
èsk
 =
NULL
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
föished
;

98 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


99 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


100 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

101 
	`¥ötf
("[SKIPPED]\n");

102 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
ªt
 = -2;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("COMPAREANDWRITE successful. It should have failed with MISCOMPARE/MISCOMPARE_DURING_VERIFY\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("COMPAREANDWRITE Faûed wôhÅhêwr⁄g sí£ : %s(0x%02x)/%s(0x%04x). Iàshould havêÁûed wôh MISCOMPARE/MISCOMPARE_DURING_VERIFY\n", 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->£n£.key, 
	`scsi_£n£_ascq_°r
—ask->£n£.
ascq
),Åask->sense.ascq);

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Compareánd writeÜast 1-255 blocks (data isÇot matching) ... ");

130 
i
 = 1; i < 256; i++) {

131 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

146 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

147 
	`¥ötf
("[FAILED]\n");

148 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

149 
ªt
 = -1;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

151 
föished
;

153 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a, 
i
 * 
block_size
);

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
d©a
[ (
i
 - 1Ë* 
block_size
] ^= 0xa5;

159 
	`mem£t
(
d©a
 + (
i
 * 
block_size
), 0xff, (i * block_size));

161 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

162 i‡(
èsk
 =
NULL
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
föished
;

168 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

169 
	`¥ötf
("[FAILED]\n");

170 
	`¥ötf
("COMPAREANDWRITE successful. It should have failed with MISCOMPARE/MISCOMPARE_DURING_VERIFY\n");

171 
ªt
 = -1;

172 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
föished
;

175 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


176 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


177 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

178 
	`¥ötf
("[FAILED]\n");

179 
	`¥ötf
("COMPAREANDWRITE Faûed wôhÅhêwr⁄g sí£ : %s(0x%02x)/%s(0x%04x). Iàshould havêÁûed wôh MISCOMPARE/MISCOMPARE_DURING_VERIFY\n", 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->£n£.key, 
	`scsi_£n£_ascq_°r
—ask->£n£.
ascq
),Åask->sense.ascq);

180 
ªt
 = -1;

181 
	`scsi_‰ì_scsi_èsk
(
èsk
);

182 
föished
;

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

186 
	`¥ötf
("[OK]\n");

189 
föished
:

190 
	`iscsi_logout_sync
(
iscsi
);

191 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

192  
ªt
;

193 
	}
}

	@test-tool/0343_compareandwrite_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0343_com∑ª™dwrôe_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0343_compareandwrite_beyond_eol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat COMPAREANDWRITE fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-255 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-255 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-255 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-255 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 
	`¥ötf
("Writing 1-255 blocks with one block beyondÉnd-of-device ... ");

59 
i
 = 1; i <= 255; i++) {

60 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


68 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


69 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -2;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


84 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


85 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Writing 1-255 blocksát LBA 2^63 ... ");

99 
i
 = 1; i < 256; i++) {

100 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

101 i‡(
èsk
 =
NULL
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Writing 1-255 blocksát LBA -1 ... ");

130 
i
 = 1; i < 256; i++) {

131 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


146 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


147 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("[OK]\n");

160 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

161 
i
 = 2; i < 256; i++) {

162 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 2 * 
block_size
, block_size, 0, 0, 0, 0, 0);

163 i‡(
èsk
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿ£nd COMPAREANDWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
föished
;

169 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("COMPAREANDWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


177 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


178 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("COMPAREANDWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

183 
föished
;

185 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
	`¥ötf
("[OK]\n");

190 
föished
:

191 
	`iscsi_logout_sync
(
iscsi
);

192 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

193  
ªt
;

194 
	}
}

	@test-tool/0350_orwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0350_‹wrôe_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

29 
j
;

30 
r1d©a
[4096 * 256];

31 
r2d©a
[4096 * 256];

32 
‹d©a
[4096 * 256];

34 
	`¥ötf
("0350_orwrite_simple:\n");

35 
	`¥ötf
("===================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("Test basic ORWRITE functionality.\n");

38 
	`¥ötf
("1, Verify we can writeÅhe first 1-255 blocks ofÅhe LUN.\n");

39 
	`¥ötf
("2, Verify we can writeÅheÜast 1-255 blocks ofÅhe LUN.\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

58 
ªt
 = 0;

62 
	`¥ötf
("Orwrite first 1-255 blocks ... ");

63 
i
 = 1; i < 256; i++) {

64 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

72 
	`¥ötf
("[FAILED]\n");

73 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

74 
ªt
 = -1;

75 
	`scsi_‰ì_scsi_èsk
(
èsk
);

76 
föished
;

79 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

86 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

87 
	`mem£t
(
‹d©a
, 0x5a, 
i
 * 
block_size
);

88 
j
 = 0; j < 
i
 * 
block_size
; j++) {

89 
r2d©a
[
j
] = 
r1d©a
[j] | 
‹d©a
[j];

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
‹d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

94 i‡(
èsk
 =
NULL
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

97 
ªt
 = -1;

98 
föished
;

100 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("ORWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
föished
;

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

124 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

127 
ªt
 = -1;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
föished
;

132 i‡(
	`memcmp
(
r2d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
)) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("Blocks wereÇot updatedásÉxpected.\n");

135 
ªt
 = -1;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
föished
;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
	`¥ötf
("[OK]\n");

146 
	`¥ötf
("OrwriteÜast 1-255 blocks ... ");

147 
i
 = 1; i < 256; i++) {

148 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

149 i‡(
èsk
 =
NULL
) {

150 
	`¥ötf
("[FAILED]\n");

151 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

152 
ªt
 = -1;

153 
föished
;

155 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = -1;

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
föished
;

163 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
föished
;

170 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

171 
	`mem˝y
(
r1d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
);

172 
	`mem£t
(
‹d©a
, 0xa5, 
i
 * 
block_size
);

173 
j
 = 0; j < 
i
 * 
block_size
; j++) {

174 
r2d©a
[
j
] = 
r1d©a
[j] | 
‹d©a
[j];

176 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, 
‹d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

179 i‡(
èsk
 =
NULL
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
föished
;

185 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

186 
	`¥ötf
("[FAILED]\n");

187 
	`¥ötf
("ORWRITE comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

188 
ªt
 = -1;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
föished
;

192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

193 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
num_blocks
 + 1 - 
i
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

194 i‡(
èsk
 =
NULL
) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

197 
ªt
 = -1;

198 
föished
;

200 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

201 
	`¥ötf
("[FAILED]\n");

202 
	`¥ötf
("READ16 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

203 
ªt
 = -1;

204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

205 
föished
;

208 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

209 
	`¥ötf
("[FAILED]\n");

210 
	`¥ötf
("FaûedÅÿac˚s†DATA-IN buf„∏%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

211 
ªt
 = -1;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
föished
;

216 i‡(
	`memcmp
(
r2d©a
, 
èsk
->
d©aö
.
d©a
, 
i
 * 
block_size
)) {

217 
	`¥ötf
("[FAILED]\n");

218 
	`¥ötf
("Blocks wereÇot updatedásÉxpected.\n");

219 
ªt
 = -1;

220 
	`scsi_‰ì_scsi_èsk
(
èsk
);

221 
föished
;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

229 
föished
:

230 
	`iscsi_logout_sync
(
iscsi
);

231 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

232  
ªt
;

233 
	}
}

	@test-tool/0351_orwrite_wrprotect.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0351_‹wrôe_wΩrŸe˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
 = 0, 
i
, 
lun
;

28 
d©a
[4096];

30 
	`¥ötf
("0351_orwrite_wrprotect:\n");

31 
	`¥ötf
("======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test how ORWRITE handlesÅhe wrprotect bits\n");

34 
	`¥ötf
("1, AnyÇon-zero valued for wrprotect should fail.\n");

35 
	`¥ötf
("\n");

39 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

40 i‡(
iscsi
 =
NULL
) {

41 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

52 
	`¥ötf
("Test ORWRITE with WRPROTECT != 0 ... ");

53 
i
 = 1; i <= 7; i++) {

54 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 
i
, 0, 0, 0, 0);

55 i‡(
èsk
 =
NULL
) {

56 
	`¥ötf
("[FAILED]\n");

57 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

58 
ªt
 = -1;

59 
föished
;

61 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


62 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


63 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("ORWRITE with WRPROTECT!=0 should have failed with CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n");

66 
ªt
 = -1;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

68 
föished
;

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
	`¥ötf
("[OK]\n");

75 
föished
:

76 
	`iscsi_logout_sync
(
iscsi
);

77 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

78  
ªt
;

79 
	}
}

	@test-tool/0354_orwrite_beyondeol.c

18 
	~<°dio.h
>

19 
	~"iscsi.h
"

20 
	~"scsi-lowÀvñ.h
"

21 
	~"iscsi-ã°.h
"

23 
	$T0354_‹wrôe_bey⁄deﬁ
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

25 
iscsi_c⁄ãxt
 *
iscsi
;

26 
scsi_èsk
 *
èsk
;

27 
ªt
, 
i
, 
lun
;

28 
d©a
[4096 * 258];

30 
	`¥ötf
("0354_orwrite_beyondeol:\n");

31 
	`¥ötf
("=======================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhat ORWRITE fails if writing beyondÉnd-of-lun.\n");

34 
	`¥ötf
("1, Writing 1-256 blocks with one block beyondÉnd-of-lun should fail.\n");

35 
	`¥ötf
("2, Writing 1-256 blocksát LBA 2^63 should fail.\n");

36 
	`¥ötf
("3, Writing 1-256 blocksát LBA -1 should fail.\n");

37 
	`¥ötf
("4, Writing 1-256 blocksáll but one block beyondÉol\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 
	`¥ötf
("Writing 1-256 blocks with one block beyondÉnd-of-device ... ");

59 
i
 = 1; i <= 256; i++) {

60 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
 + 2 - 
i
, 
d©a
, i * 
block_size
, block_size, 0, 0, 0, 0, 0);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


68 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


69 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

70 
	`¥ötf
("[SKIPPED]\n");

71 
	`¥ötf
("Opcode isÇot implemented onÅarget\n");

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -2;

74 
föished
;

76 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

83 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


84 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


85 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
föished
;

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Writing 1-256 blocksát LBA 2^63 ... ");

99 
i
 = 1; i <= 256; i++) {

100 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0x8000000000000000, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

101 i‡(
èsk
 =
NULL
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
föished
;

107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

110 
ªt
 = -1;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
föished
;

114 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


115 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


116 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

119 
ªt
 = -1;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
föished
;

123 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`¥ötf
("Writing 1-256 blocksát LBA -1 ... ");

130 
i
 = 1; i <= 256; i++) {

131 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0xffffffffffffffff, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

132 i‡(
èsk
 =
NULL
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

141 
ªt
 = -1;

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


146 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


147 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("[OK]\n");

160 
	`¥ötf
("Writing 1-255 blocks beyondÉol startingátÜast block ... ");

161 
i
=2; i<=256; i++) {

162 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
num_blocks
, 
d©a
, 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0);

163 i‡(
èsk
 =
NULL
) {

164 
	`¥ötf
("[FAILED]\n");

165 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

166 
ªt
 = -1;

167 
föished
;

169 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

170 
	`¥ötf
("[FAILED]\n");

171 
	`¥ötf
("ORWRITE beyondÉnd-of-lun didÇotÑeturn sense. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.\n");

172 
ªt
 = -1;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
föished
;

176 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


177 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


178 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

179 
	`¥ötf
("[FAILED]\n");

180 
	`¥ötf
("ORWRITE faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

181 
ªt
 = -1;

182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

183 
föished
;

185 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
	`¥ötf
("[OK]\n");

190 
föished
:

191 
	`iscsi_logout_sync
(
iscsi
);

192 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

193  
ªt
;

194 
	}
}

	@test-tool/0360_startstopunit_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0360_°¨t°›unô_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0360_startstopunit_simple:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic STARTSTOPUNIT functionality.\n");

34 
	`¥ötf
("1, Verify we canÉjectÑemovableÅhe media with IMMED==1\n");

35 
	`¥ötf
("2, Verify we canÜoadÅhe media backágain with IMMED==1\n");

36 
	`¥ötf
("3, Verify we canÉjectÑemovableÅhe media with IMMED==0\n");

37 
	`¥ötf
("4, Verify we canÜoadÅhe media backágain with IMMED==0\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

55 
ªt
 = 0;

58 i‡(
öq
->
rmb
) {

59 
	`¥ötf
("Media isÑemovable. STARTSTOPUNIT should work\n");

61 
	`¥ötf
("Media isÇotÑemovable. STARTSTOPUNIT should fail\n");

65 
	`¥ötf
("STARTSTOPUNITÅryÅoÉjectÅhe media with IMMED==1 ... ");

66 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

67 i‡(
èsk
 =
NULL
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
ªt
 = -1;

71 
föished
;

73 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

74 
	`¥ötf
("[FAILED]\n");

75 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

76 
ªt
 = -1;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
	`¥ötf
("[OK]\n");

83 i‡(
öq
->
rmb
) {

84 
	`¥ötf
("Medium isÑemovable. Check with TESTUNITREADYÅhat wasÑemoved.\n");

85 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

86 i‡(
ªt
 != 0) {

87 
föished
;

90 
	`¥ötf
("Medium isÇotÑemovable. Check with TESTUNITREADYÅhat medium is stillÖresent.\n");

91 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

92 i‡(
ªt
 != 0) {

93 
föished
;

98 
	`¥ötf
("STARTSTOPUNITÅryÅo mountÅhe mediaágain with IMMED==1 ... ");

99 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
föished
;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`¥ötf
("[OK]\n");

116 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresent.\n");

117 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

123 
	`¥ötf
("STARTSTOPUNITÅryÅoÉjectÅhe media with IMMED==0 ... ");

124 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 1, 0);

125 i‡(
èsk
 =
NULL
) {

126 
	`¥ötf
("[FAILED]\n");

127 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
föished
;

131 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
	`¥ötf
("[OK]\n");

141 i‡(
öq
->
rmb
) {

142 
	`¥ötf
("Medium isÑemovable. Check with TESTUNITREADYÅhat wasÑemoved.\n");

143 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

144 i‡(
ªt
 != 0) {

145 
föished
;

148 
	`¥ötf
("Medium isÇotÑemovable. Check with TESTUNITREADYÅhat medium is stillÖresent.\n");

149 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

150 i‡(
ªt
 != 0) {

151 
föished
;

156 
	`¥ötf
("STARTSTOPUNITÅryÅo mountÅhe mediaágain with IMMED==0 ... ");

157 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 1, 1);

158 i‡(
èsk
 =
NULL
) {

159 
	`¥ötf
("[FAILED]\n");

160 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
ªt
 = -1;

162 
föished
;

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 
föished
;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
	`¥ötf
("[OK]\n");

175 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresent.\n");

176 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

177 i‡(
ªt
 != 0) {

178 
föished
;

182 
föished
:

183 
	`iscsi_logout_sync
(
iscsi
);

184 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

185  
ªt
;

186 
	}
}

	@test-tool/0361_startstopunit_pwrcnd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0361_°¨t°›unô_pwr˙d
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
i
, 
lun
;

30 
	`¥ötf
("0361_startstopunit_pwrcnd:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test STARTSTOPUNIT POWERCONDITION functionality.\n");

34 
	`¥ötf
("1, If PC != 0 we canÇotÉjectÅhe media\n");

35 
	`¥ötf
("2, TryÅoÑemountÅhe media\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 i‡(
öq
->
rmb
) {

57 
	`¥ötf
("Media isÑemovable. STARTSTOPUNIT should work\n");

59 
	`¥ötf
("Media isÇotÑemovable. STARTSTOPUNIT should fail\n");

61 
i
 = 1; i < 16; i++) {

62 
	`¥ötf
("TryÅÿeje˘ medü wôh PC =%d ... ", 
i
);

63 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 
i
, 0, 1, 0);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

67 
ªt
 = -1;

68 
föished
;

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`¥ötf
("[FAILED]\n");

72 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

73 
ªt
 = -1;

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

75 
föished
;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

81 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

82 i‡(
ªt
 != 0) {

83 
föished
;

89 
	`¥ötf
("TryÅo mountÅhe mediaágain ... ");

90 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

91 i‡(
èsk
 =
NULL
) {

92 
	`¥ötf
("[FAILED]\n");

93 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

94 
ªt
 = -1;

95 
föished
;

97 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

102 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

109 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

110 i‡(
ªt
 != 0) {

111 
föished
;

115 
föished
:

116 
	`iscsi_logout_sync
(
iscsi
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118  
ªt
;

119 
	}
}

	@test-tool/0362_startstopunit_noloej.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0362_°¨t°›unô_nﬁ€j
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0362_startstopunit_noloej:\n");

31 
	`¥ötf
("===================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test STARTSTOPUNITánd LOEJ==0 willÇeverÉject/load media.\n");

34 
	`¥ötf
("1, LOEJ==0 IMMED==0 NO_FLUSH==0 START==0 willÇotÉjectÅhe media\n");

35 
	`¥ötf
("2, LOEJ==0 IMMED==0 NO_FLUSH==0 START==1 willÇotÉjectÅhe media\n");

36 
	`¥ötf
("3, LOEJ==0 IMMED==1 NO_FLUSH==0 START==0 willÇotÉjectÅhe media\n");

37 
	`¥ötf
("4, LOEJ==0 IMMED==1 NO_FLUSH==0 START==1 willÇotÉjectÅhe media\n");

38 
	`¥ötf
("5, LOEJ==0 IMMED==0 NO_FLUSH==1 START==0 willÇotÉjectÅhe media\n");

39 
	`¥ötf
("6, LOEJ==0 IMMED==0 NO_FLUSH==1 START==1 willÇotÉjectÅhe media\n");

40 
	`¥ötf
("7, LOEJ==0 IMMED==1 NO_FLUSH==1 START==0 willÇotÉjectÅhe media\n");

41 
	`¥ötf
("8, LOEJ==0 IMMED==1 NO_FLUSH==1 START==1 willÇotÉjectÅhe media\n");

42 
	`¥ötf
("\n");

46 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

47 i‡(
iscsi
 =
NULL
) {

48 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

52 i‡(!
d©a_loss
) {

53 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

54 
ªt
 = -2;

55 
föished
;

59 
ªt
 = 0;

62 i‡(!
öq
->
rmb
) {

63 
	`¥ötf
("Media isÇotÑemovable. SKIPPINGÅests\n");

64 
ªt
 = -2;

65 
föished
;

70 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==0 START==0 doesÇotÉject media ... ");

71 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 0, 0);

72 i‡(
èsk
 =
NULL
) {

73 
	`¥ötf
("[FAILED]\n");

74 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

75 
ªt
 = -1;

76 
föished
;

78 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
ªt
 = -1;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
föished
;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

89 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

90 i‡(
ªt
 != 0) {

91 
föished
;

96 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

98 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==0 START==1 doesÇotÉject media ... ");

99 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 0, 0, 1);

100 i‡(
èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

104 
föished
;

106 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
ªt
 = -1;

110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

111 
föished
;

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

114 
	`¥ötf
("[OK]\n");

116 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

117 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

124 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

126 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==0 START==0 doesÇotÉject media ... ");

127 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 0, 0);

128 i‡(
èsk
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
föished
;

134 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 
ªt
 = -1;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
föished
;

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
	`¥ötf
("[OK]\n");

144 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

145 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

146 i‡(
ªt
 != 0) {

147 
föished
;

152 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

154 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==0 START==1 doesÇotÉject media ... ");

155 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 0, 1);

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
	`¥ötf
("[OK]\n");

172 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

173 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

174 i‡(
ªt
 != 0) {

175 
föished
;

180 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

182 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==1 START==0 doesÇotÉject media ... ");

183 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 1, 0, 0);

184 i‡(
èsk
 =
NULL
) {

185 
	`¥ötf
("[FAILED]\n");

186 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

187 
ªt
 = -1;

188 
föished
;

190 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

191 
	`¥ötf
("[FAILED]\n");

192 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

193 
ªt
 = -1;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
föished
;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
	`¥ötf
("[OK]\n");

200 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

201 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

202 i‡(
ªt
 != 0) {

203 
föished
;

208 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

210 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==0 NO_FLUSH==1 START==1 doesÇotÉject media ... ");

211 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 0, 0, 0, 1, 0, 1);

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

215 
ªt
 = -1;

216 
föished
;

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

221 
ªt
 = -1;

222 
	`scsi_‰ì_scsi_èsk
(
èsk
);

223 
föished
;

225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

226 
	`¥ötf
("[OK]\n");

228 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

229 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

230 i‡(
ªt
 != 0) {

231 
föished
;

236 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

238 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==1 START==0 doesÇotÉject media ... ");

239 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 1, 0, 0);

240 i‡(
èsk
 =
NULL
) {

241 
	`¥ötf
("[FAILED]\n");

242 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

243 
ªt
 = -1;

244 
föished
;

246 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

247 
	`¥ötf
("[FAILED]\n");

248 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

249 
ªt
 = -1;

250 
	`scsi_‰ì_scsi_èsk
(
èsk
);

251 
föished
;

253 
	`scsi_‰ì_scsi_èsk
(
èsk
);

254 
	`¥ötf
("[OK]\n");

256 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

257 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

258 i‡(
ªt
 != 0) {

259 
föished
;

264 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

266 
	`¥ötf
("STARTSTOP LOEJ==0 IMMED==1 NO_FLUSH==1 START==1 doesÇotÉject media ... ");

267 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 1, 0, 1);

268 i‡(
èsk
 =
NULL
) {

269 
	`¥ötf
("[FAILED]\n");

270 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

271 
ªt
 = -1;

272 
föished
;

274 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

275 
	`¥ötf
("[FAILED]\n");

276 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

277 
ªt
 = -1;

278 
	`scsi_‰ì_scsi_èsk
(
èsk
);

279 
föished
;

281 
	`scsi_‰ì_scsi_èsk
(
èsk
);

282 
	`¥ötf
("[OK]\n");

284 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium is stillÖresent.\n");

285 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

286 i‡(
ªt
 != 0) {

287 
föished
;

292 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

294 
föished
:

295 
	`iscsi_logout_sync
(
iscsi
);

296 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

297  
ªt
;

298 
	}
}

	@test-tool/0370_nomedia.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0370_nomedü
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

29 
buf
[4096];

31 
	`¥ötf
("0370_nomedia:\n");

32 
	`¥ötf
("============\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhat mediaáccess commands fail correctly if media isÉjected\n");

35 
	`¥ötf
("1, Verify we canÉjectÅhe media\n");

36 
	`¥ötf
("2, Verify TESTUNITREADY\n");

37 
	`¥ötf
("3, Verify SYNCHRONIZECACHE10\n");

38 
	`¥ötf
("4, Verify SYNCHRONIZECACHE16\n");

39 
	`¥ötf
("5, Verify READ10\n");

40 
	`¥ötf
("6, Verify READ12\n");

41 
	`¥ötf
("7, Verify READ16\n");

42 
	`¥ötf
("8, Verify READCAPACITY10\n");

43 
	`¥ötf
("9, Verify READCAPACITY16\n");

44 
	`¥ötf
("10, Verify GETLBASTATUS\n");

45 
	`¥ötf
("11, Verify PREFETCH10\n");

46 
	`¥ötf
("12, Verify PREFETCH16\n");

47 
	`¥ötf
("13, Verify VERIFY10\n");

48 
	`¥ötf
("14, Verify VERIFY12\n");

49 
	`¥ötf
("15, Verify VERIFY16\n");

50 
	`¥ötf
("Write commands (only if --dataloss is specified)\n");

51 
	`¥ötf
("16, Verify WRITE10\n");

52 
	`¥ötf
("17, Verify WRITE12\n");

53 
	`¥ötf
("18, Verify WRITE16\n");

54 
	`¥ötf
("19, Verify WRITEVERIFY10\n");

55 
	`¥ötf
("20, Verify WRITEVERIFY12\n");

56 
	`¥ötf
("21, Verify WRITEVERIFY16\n");

57 
	`¥ötf
("22, Verify ORWRITE\n");

58 
	`¥ötf
("23, Verify COMPAREWRITE\n");

59 
	`¥ötf
("24, Verify WRITESAME10\n");

60 
	`¥ötf
("25, Verify WRITESAME16\n");

61 
	`¥ötf
("26, Verify UNMAP\n");

63 
	`¥ötf
("Verify we canÜoadÅhe media backágain\n");

64 
	`¥ötf
("\n");

68 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

69 i‡(
iscsi
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅest.\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

82 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

83 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

84 i‡(
èsk
 =
NULL
) {

85 
	`¥ötf
("[FAILED]\n");

86 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

87 
ªt
 = -1;

88 
föished
;

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("Test TESTUNITREADY.\n");

106 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsi
, 
lun
);

107 i‡(
ªt
 != 0) {

108 
föished
;

112 
	`¥ötf
("Test SYNCHRONIZECACHE10 ... ");

113 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 0, 1, 1, 1);

114 i‡(
èsk
 =
NULL
) {

115 
	`¥ötf
("[FAILED]\n");

116 
	`¥ötf
("FaûedÅÿ£nd SYNCHRONIZECACHE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
ªt
 = -1;

118 
föished
;

120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


121 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


122 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


123 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


124 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("SYNCHRONIZECACHE10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

127 
ªt
 = -1;

128 
	`scsi_‰ì_scsi_èsk
(
èsk
);

129 
föished
;

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

132 
	`¥ötf
("[OK]\n");

135 
	`¥ötf
("Test SYNCHRONIZECACHE16 ... ");

136 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 0, 1, 1, 1);

137 i‡(
èsk
 =
NULL
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FaûedÅÿ£nd SYNCHRONIZECACHE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

140 
ªt
 = -1;

141 
föished
;

143 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


144 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


145 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


146 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


147 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

148 
	`¥ötf
("[FAILED]\n");

149 
	`¥ötf
("SYNCHRONIZECACHE16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

150 
ªt
 = -1;

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
	`¥ötf
("Test READ10 ... ");

159 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd READ10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

166 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


167 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


168 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


169 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


170 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("READ10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 
	`¥ötf
("[OK]\n");

181 
	`¥ötf
("Test READ12 ... ");

182 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

183 i‡(
èsk
 =
NULL
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("FaûedÅÿ£nd READ12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

186 
ªt
 = -1;

187 
föished
;

189 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


190 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


191 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


192 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


193 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("READ12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

196 
ªt
 = -1;

197 
	`scsi_‰ì_scsi_èsk
(
èsk
);

198 
föished
;

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
	`¥ötf
("[OK]\n");

204 
	`¥ötf
("Test READ16 ... ");

205 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0);

206 i‡(
èsk
 =
NULL
) {

207 
	`¥ötf
("[FAILED]\n");

208 
	`¥ötf
("FaûedÅÿ£nd READ16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

209 
ªt
 = -1;

210 
föished
;

212 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


213 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


214 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


215 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


216 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

217 
	`¥ötf
("[FAILED]\n");

218 
	`¥ötf
("READ16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

219 
ªt
 = -1;

220 
	`scsi_‰ì_scsi_èsk
(
èsk
);

221 
föished
;

223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

224 
	`¥ötf
("[OK]\n");

227 
	`¥ötf
("Test READCAPACITY10 ... ");

228 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

229 i‡(
èsk
 =
NULL
) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

232 
ªt
 = -1;

233 
föished
;

235 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


236 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


237 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


238 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


239 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("READCAPACITY10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

242 
ªt
 = -1;

243 
	`scsi_‰ì_scsi_èsk
(
èsk
);

244 
föished
;

246 
	`scsi_‰ì_scsi_èsk
(
èsk
);

247 
	`¥ötf
("[OK]\n");

250 
	`¥ötf
("Test READCAPACITY16 ... ");

251 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

252 i‡(
èsk
 =
NULL
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

255 
ªt
 = -1;

256 
föished
;

258 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


259 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


260 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


261 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


262 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("READCAPACITY16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

265 
ªt
 = -1;

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
föished
;

269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

270 
	`¥ötf
("[OK]\n");

273 
	`¥ötf
("Test GETLBASTATUS ... ");

274 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 0, 64);

275 i‡(
èsk
 =
NULL
) {

276 
	`¥ötf
("[FAILED]\n");

277 
	`¥ötf
("FaûedÅÿ£nd GETLBASTATUS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

278 
ªt
 = -1;

279 
föished
;

281 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


282 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


283 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


284 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


285 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

286 
	`¥ötf
("[FAILED]\n");

287 
	`¥ötf
("GETLBASTATUSáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

288 
ªt
 = -1;

289 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
föished
;

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
	`¥ötf
("[OK]\n");

296 
	`¥ötf
("Test PREFETCH10.\n");

297 
ªt
 = 
	`¥e„tch10_nomedium
(
iscsi
, 
lun
, 0, 1, 1, 0);

298 i‡(
ªt
 != 0) {

299 
föished
;

303 
	`¥ötf
("Test PREFETCH16.\n");

304 
ªt
 = 
	`¥e„tch16_nomedium
(
iscsi
, 
lun
, 0, 1, 1, 0);

305 i‡(
ªt
 != 0) {

306 
föished
;

310 
	`¥ötf
("Test VERIFY10.\n");

311 
ªt
 = 
	`vîify10_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

312 i‡(
ªt
 != 0) {

313 
föished
;

317 
	`¥ötf
("Test VERIFY12.\n");

318 
ªt
 = 
	`vîify12_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

319 i‡(
ªt
 != 0) {

320 
föished
;

323 
	`¥ötf
("Test VERIFY16.\n");

324 
ªt
 = 
	`vîify16_nomedium
(
iscsi
, 
lun
, 0, 
block_size
, block_size, 0, 0, 1, 
buf
);

325 i‡(
ªt
 != 0) {

326 
föished
;

331 i‡(!
d©a_loss
) {

332 
	`¥ötf
("--dataloss flag isÇot set. Skippingáll WRITEÅests\n");

333 
ªt
 = -2;

334 
föished
;

342 
	`¥ötf
("Test WRITE10 ... ");

343 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

344 i‡(
èsk
 =
NULL
) {

345 
	`¥ötf
("[FAILED]\n");

346 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

347 
ªt
 = -1;

348 
föished
;

350 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


351 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


352 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


353 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


354 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

355 
	`¥ötf
("[FAILED]\n");

356 
	`¥ötf
("WRITE10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

357 
ªt
 = -1;

358 
	`scsi_‰ì_scsi_èsk
(
èsk
);

359 
föished
;

361 
	`scsi_‰ì_scsi_èsk
(
èsk
);

362 
	`¥ötf
("[OK]\n");

365 
	`¥ötf
("Test WRITE12 ... ");

366 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

367 i‡(
èsk
 =
NULL
) {

368 
	`¥ötf
("[FAILED]\n");

369 
	`¥ötf
("FaûedÅÿ£nd WRITE12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

370 
ªt
 = -1;

371 
föished
;

373 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


374 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


375 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


376 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


377 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

378 
	`¥ötf
("[FAILED]\n");

379 
	`¥ötf
("WRITE12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

380 
ªt
 = -1;

381 
	`scsi_‰ì_scsi_èsk
(
èsk
);

382 
föished
;

384 
	`scsi_‰ì_scsi_èsk
(
èsk
);

385 
	`¥ötf
("[OK]\n");

388 
	`¥ötf
("Test WRITE16 ... ");

389 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

390 i‡(
èsk
 =
NULL
) {

391 
	`¥ötf
("[FAILED]\n");

392 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

393 
ªt
 = -1;

394 
föished
;

396 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


397 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


398 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


399 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


400 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

401 
	`¥ötf
("[FAILED]\n");

402 
	`¥ötf
("WRITE16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

403 
ªt
 = -1;

404 
	`scsi_‰ì_scsi_èsk
(
èsk
);

405 
föished
;

407 
	`scsi_‰ì_scsi_èsk
(
èsk
);

408 
	`¥ötf
("[OK]\n");

411 
	`¥ötf
("Test WRITEVERIFY10 ... ");

412 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

413 i‡(
èsk
 =
NULL
) {

414 
	`¥ötf
("[FAILED]\n");

415 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

416 
ªt
 = -1;

417 
föished
;

419 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


420 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


421 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


422 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


423 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

424 
	`¥ötf
("[FAILED]\n");

425 
	`¥ötf
("WRITEVERIFY10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

426 
ªt
 = -1;

427 
	`scsi_‰ì_scsi_èsk
(
èsk
);

428 
föished
;

430 
	`scsi_‰ì_scsi_èsk
(
èsk
);

431 
	`¥ötf
("[OK]\n");

434 
	`¥ötf
("Test WRITEVERIFY12 ... ");

435 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

436 i‡(
èsk
 =
NULL
) {

437 
	`¥ötf
("[FAILED]\n");

438 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY12 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

439 
ªt
 = -1;

440 
föished
;

442 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


443 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


444 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


445 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


446 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

447 
	`¥ötf
("[FAILED]\n");

448 
	`¥ötf
("WRITEVERIFY12áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

449 
ªt
 = -1;

450 
	`scsi_‰ì_scsi_èsk
(
èsk
);

451 
föished
;

453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`¥ötf
("[OK]\n");

457 
	`¥ötf
("Test WRITEVERIFY16 ... ");

458 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 0);

459 i‡(
èsk
 =
NULL
) {

460 
	`¥ötf
("[FAILED]\n");

461 
	`¥ötf
("FaûedÅÿ£nd WRITEVERIFY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

462 
ªt
 = -1;

463 
föished
;

465 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


466 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


467 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


468 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


469 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

470 
	`¥ötf
("[FAILED]\n");

471 
	`¥ötf
("WRITEVERIFY16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

472 
ªt
 = -1;

473 
	`scsi_‰ì_scsi_èsk
(
èsk
);

474 
föished
;

476 
	`scsi_‰ì_scsi_èsk
(
èsk
);

477 
	`¥ötf
("[OK]\n");

480 
	`¥ötf
("Test ORWRITE ... ");

481 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

482 i‡(
èsk
 =
NULL
) {

483 
	`¥ötf
("[FAILED]\n");

484 
	`¥ötf
("FaûedÅÿ£nd ORWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

485 
ªt
 = -1;

486 
föished
;

488 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


489 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


490 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


491 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


492 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

493 
	`¥ötf
("[FAILED]\n");

494 
	`¥ötf
("ORWRITEáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

495 
ªt
 = -1;

496 
	`scsi_‰ì_scsi_èsk
(
èsk
);

497 
föished
;

499 
	`scsi_‰ì_scsi_èsk
(
èsk
);

500 
	`¥ötf
("[OK]\n");

503 
	`¥ötf
("Test COMPAREWRITE ... ");

504 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 0, 
buf
, 
block_size
, block_size, 0, 0, 1, 1, 0);

505 i‡(
èsk
 =
NULL
) {

506 
	`¥ötf
("[FAILED]\n");

507 
	`¥ötf
("FaûedÅÿ£nd COMPAREWRITE comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

508 
ªt
 = -1;

509 
föished
;

511 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


512 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


513 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


514 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


515 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

516 
	`¥ötf
("[FAILED]\n");

517 
	`¥ötf
("COMPAREWRITEáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

518 
ªt
 = -1;

519 
	`scsi_‰ì_scsi_èsk
(
èsk
);

520 
föished
;

522 
	`scsi_‰ì_scsi_èsk
(
èsk
);

523 
	`¥ötf
("[OK]\n");

526 
	`¥ötf
("Test WRITESAME10 ... ");

527 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 0,

528 
buf
, 
block_size
,

531 i‡(
èsk
 =
NULL
) {

532 
	`¥ötf
("[FAILED]\n");

533 
	`¥ötf
("FaûedÅÿ£nd WRITESAME10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

534 
ªt
 = -1;

535 
föished
;

537 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


538 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


539 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


540 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


541 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

542 
	`¥ötf
("[FAILED]\n");

543 
	`¥ötf
("WRITESAME10áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

544 
ªt
 = -1;

545 
	`scsi_‰ì_scsi_èsk
(
èsk
);

546 
föished
;

548 
	`scsi_‰ì_scsi_èsk
(
èsk
);

549 
	`¥ötf
("[OK]\n");

552 
	`¥ötf
("Test WRITESAME16 ... ");

553 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

554 
buf
, 
block_size
,

557 i‡(
èsk
 =
NULL
) {

558 
	`¥ötf
("[FAILED]\n");

559 
	`¥ötf
("FaûedÅÿ£nd WRITESAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

560 
ªt
 = -1;

561 
föished
;

563 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


564 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


565 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


566 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


567 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

568 
	`¥ötf
("[FAILED]\n");

569 
	`¥ötf
("WRITESAME16áfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

570 
ªt
 = -1;

571 
	`scsi_‰ì_scsi_èsk
(
èsk
);

572 
föished
;

574 
	`scsi_‰ì_scsi_èsk
(
èsk
);

575 
	`¥ötf
("[OK]\n");

578 
	`¥ötf
("Test UNMAP ... ");

579 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

580 i‡(
èsk
 =
NULL
) {

581 
	`¥ötf
("[FAILED]\n");

582 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

583 
ªt
 = -1;

584 
föished
;

586 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


587 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


588 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


589 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


590 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

591 
	`¥ötf
("[FAILED]\n");

592 
	`¥ötf
("UNMAPáfterÉject failed withÅhe wrong sense code. Should fail with NOT_READY/MEDIUM_NOT_PRESENT*\n");

593 
ªt
 = -1;

594 
	`scsi_‰ì_scsi_èsk
(
èsk
);

595 
föished
;

597 
	`scsi_‰ì_scsi_èsk
(
èsk
);

598 
	`¥ötf
("[OK]\n");

602 
	`¥ötf
("TryÅo mountÅhe mediaágain ... ");

603 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

604 i‡(
èsk
 =
NULL
) {

605 
	`¥ötf
("[FAILED]\n");

606 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

607 
ªt
 = -1;

608 
föished
;

610 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

611 
	`¥ötf
("[FAILED]\n");

612 
	`¥ötf
("STARTSTOPUNIT comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

613 
ªt
 = -1;

614 
	`scsi_‰ì_scsi_èsk
(
èsk
);

615 
föished
;

617 
	`scsi_‰ì_scsi_èsk
(
èsk
);

618 
	`¥ötf
("[OK]\n");

620 
	`¥ötf
("Check with TESTUNITREADYÅhatÅhe medium isÖresentágain.\n");

621 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

622 i‡(
ªt
 != 0) {

623 
föished
;

627 
föished
:

628 
	`¥ötf
("Make sureÅhe media is mountedágain beforeÅheÇextÅest ... ");

629 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

630 i‡(
èsk
 =
NULL
) {

631 
	`¥ötf
("[FAILED]\n");

632 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

635 
	`scsi_‰ì_scsi_èsk
(
èsk
);

636 
	`¥ötf
("[OK]\n");

638 
	`iscsi_logout_sync
(
iscsi
);

639 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

640  
ªt
;

641 
	}
}

	@test-tool/0380_preventallow_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0380_¥evíèŒow_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0380_preventallow_simple:\n");

31 
	`¥ötf
("=========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic PREVENTALLOW functionality.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we can clear itágain\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

46 i‡(!
d©a_loss
) {

47 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

48 
ªt
 = -2;

49 
föished
;

53 
ªt
 = 0;

56 i‡(
öq
->
rmb
) {

57 
	`¥ötf
("Media isÑemovable. PREVENTALLOW should work\n");

59 
	`¥ötf
("Media isÇotÑemovable. PREVENTALLOW should fail\n");

61 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

62 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

73 i‡(
öq
->
rmb
) {

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
ªt
 = -1;

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
	`¥ötf
("[OK]\n");

86 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

87 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

88 i‡(
èsk
 =
NULL
) {

89 
	`¥ötf
("[FAILED]\n");

90 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

91 
ªt
 = -1;

92 
föished
;

97 i‡(
öq
->
rmb
) {

98 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
	`¥ötf
("[OK]\n");

110 
föished
:

111 
	`iscsi_logout_sync
(
iscsi
);

112 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

113  
ªt
;

114 
	}
}

	@test-tool/0381_preventallow_eject.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0381_¥evíèŒow_eje˘
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0381_preventallow_eject:\n");

31 
	`¥ötf
("========================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test we canÇotÉject media when PREVENTALLOW isáctive.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

36 
	`¥ötf
("3, LoadÅhe mediaágain in case it wasÉjected\n");

37 
	`¥ötf
("4, Clear PREVENTALLOWágain\n");

38 
	`¥ötf
("\n");

42 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

43 i‡(
iscsi
 =
NULL
) {

44 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

48 i‡(!
d©a_loss
) {

49 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

50 
ªt
 = -2;

51 
föished
;

54 i‡(!
öq
->
rmb
) {

55 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

56 
ªt
 = -2;

57 
föished
;

60 
ªt
 = 0;

63 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

64 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

75 i‡(
öq
->
rmb
) {

76 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

77 
	`¥ötf
("[FAILED]\n");

78 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 
ªt
 = -1;

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
föished
;

84 
	`scsi_‰ì_scsi_èsk
(
èsk
);

85 
	`¥ötf
("[OK]\n");

88 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

89 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

90 i‡(
èsk
 =
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


97 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


98 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("Eject failed. [OK]\n");

109 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

110 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

111 i‡(
èsk
 =
NULL
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
föished
;

120 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

125 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

126 i‡(
èsk
 =
NULL
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

129 
ªt
 = -1;

130 
föished
;

135 i‡(
öq
->
rmb
) {

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`¥ötf
("[FAILED]\n");

138 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

139 
ªt
 = -1;

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
föished
;

144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

145 
	`¥ötf
("[OK]\n");

148 
föished
:

149 
	`iscsi_logout_sync
(
iscsi
);

150 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

151  
ªt
;

152 
	}
}

	@test-tool/0382_preventallow_itnexus_loss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0382_¥evíèŒow_ô√xus_loss
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
;

30 
	`¥ötf
("0382_preventallow_itnexus_loss:\n");

31 
	`¥ötf
("===============================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅhatán I_T_NexusÜoss clears PREVENTALLOW.\n");

34 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

35 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

36 
	`¥ötf
("3, Tear downÅhe I_T_NexusándÑe-login onáÇewÇexus\n");

37 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

38 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

39 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

50 i‡(!
d©a_loss
) {

51 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

52 
ªt
 = -2;

53 
föished
;

57 
ªt
 = 0;

60 i‡(!
öq
->
rmb
) {

61 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

62 
ªt
 = -2;

63 
föished
;

66 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

67 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

78 i‡(
öq
->
rmb
) {

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
	`¥ötf
("[OK]\n");

91 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

92 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

93 i‡(
èsk
 =
NULL
) {

94 
	`¥ötf
("[FAILED]\n");

95 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

96 
ªt
 = -1;

97 
föished
;

99 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


100 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


101 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

102 
	`¥ötf
("[FAILED]\n");

103 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

104 
ªt
 = -1;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
föished
;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
	`¥ötf
("Eject failed. [OK]\n");

112 
	`¥ötf
("Tear downÅhe IT_Nexusánd createáÇew one ... ");

113 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

114 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

115 i‡(
iscsi
 =
NULL
) {

116 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

117 
föished
;

119 
	`¥ötf
("[OK]\n");

124 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

125 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

126 i‡(
èsk
 =
NULL
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

129 
ªt
 = -1;

130 
föished
;

132 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

135 
ªt
 = -1;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
föished
;

139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

140 
	`¥ötf
("[OK]\n");

143 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

144 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

145 i‡(
èsk
 =
NULL
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

148 
ªt
 = -1;

149 
föished
;

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 
	`¥ötf
("[OK]\n");

158 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

159 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

169 i‡(
öq
->
rmb
) {

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
föished
;

178 
	`scsi_‰ì_scsi_èsk
(
èsk
);

179 
	`¥ötf
("[OK]\n");

182 
föished
:

183 
	`iscsi_logout_sync
(
iscsi
);

184 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

185  
ªt
;

186 
	}
}

	@test-tool/0383_preventallow_target_warm_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0383_¥evíèŒow_èrgë_w¨m_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0383_preventallow_target_warm_reset:\n");

49 
	`¥ötf
("====================================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá Warm ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá Warm ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅheÅarget\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

158 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

159 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

160 i‡(
èsk
 =
NULL
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

163 
ªt
 = -1;

164 
föished
;

166 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

167 
	`¥ötf
("[FAILED]\n");

168 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

169 
ªt
 = -1;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
föished
;

173 
	`scsi_‰ì_scsi_èsk
(
èsk
);

174 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

178 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

179 i‡(
èsk
 =
NULL
) {

180 
	`¥ötf
("[FAILED]\n");

181 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

182 
ªt
 = -1;

183 
föished
;

188 
	`scsi_‰ì_scsi_èsk
(
èsk
);

189 
	`¥ötf
("[OK]\n");

192 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

193 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

194 i‡(
èsk
 =
NULL
) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

197 
ªt
 = -1;

198 
föished
;

203 i‡(
öq
->
rmb
) {

204 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

205 
	`¥ötf
("[FAILED]\n");

206 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

207 
ªt
 = -1;

208 
	`scsi_‰ì_scsi_èsk
(
èsk
);

209 
föished
;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
	`¥ötf
("[OK]\n");

216 
föished
:

217 
	`iscsi_logout_sync
(
iscsi
);

218 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

219  
ªt
;

220 
	}
}

	@test-tool/0384_preventallow_target_cold_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0384_¥evíèŒow_èrgë_cﬁd_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0384_preventallow_target_cold_reset:\n");

49 
	`¥ötf
("====================================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá Cold ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá Cold ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅheÅarget\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

159 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`¥ötf
("[FAILED]\n");

169 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

170 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

178 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

179 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
	`¥ötf
("[OK]\n");

193 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

194 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

195 i‡(
èsk
 =
NULL
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
föished
;

204 i‡(
öq
->
rmb
) {

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

213 
	`scsi_‰ì_scsi_èsk
(
èsk
);

214 
	`¥ötf
("[OK]\n");

217 
föished
:

218 
	`iscsi_logout_sync
(
iscsi
);

219 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

220  
ªt
;

221 
	}
}

	@test-tool/0385_preventallow_lun_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<pﬁl.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	smgmt_èsk
 {

26 
uöt32_t
 
	m°©us
;

27 
uöt32_t
 
	mföished
;

30 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
, *
¥iv©e_d©a
)

33 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

35 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

36 
mgmt_èsk
->
föished
 = 1;

37 
	}
}

40 
	$T0385_¥evíèŒow_lun_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0385_preventallow_lun_reset:\n");

49 
	`¥ötf
("============================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatáÅargetÑeset clears PREVENTALLOW.\n");

52 
	`¥ötf
("1, Verify we can set PREVENTALLOW (ifÅhe medium isÑemovable)\n");

53 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

54 
	`¥ötf
("3, Sendá LUN ResetÅoÅheÅarget\n");

55 
	`¥ötf
("4, Verify we canÉjectÅhe media\n");

56 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

57 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 i‡(!
d©a_loss
) {

69 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

70 
ªt
 = -2;

71 
föished
;

74 i‡(!
öq
->
rmb
) {

75 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

76 
ªt
 = -2;

77 
föished
;

80 
ªt
 = 0;

83 
	`¥ötf
("TryÅo set PREVENTALLOW ... ");

84 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

85 i‡(
èsk
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

88 
ªt
 = -1;

89 
föished
;

95 i‡(
öq
->
rmb
) {

96 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

99 
ªt
 = -1;

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
föished
;

104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

105 
	`¥ötf
("[OK]\n");

108 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

109 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

116 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


117 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


118 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

119 
	`¥ötf
("[FAILED]\n");

120 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
föished
;

125 
	`scsi_‰ì_scsi_èsk
(
èsk
);

126 
	`¥ötf
("Eject failed. [OK]\n");

129 
	`¥ötf
("Sendá LUN ResetÅoÅheÅarget ... ");

130 
	`iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi
, 
lun
, 
mgmt_cb
, &
mgmt_èsk
);

131 
mgmt_èsk
.
föished
 == 0) {

132 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

133 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

135 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

136 
	`¥ötf
("Poll failed");

137 
föished
;

139 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

140 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

144 i‡(
mgmt_èsk
.
°©us
 != 0) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

147 
föished
;

149 
	`¥ötf
("[OK]\n");

151 
agaö
:

152 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions.\n");

153 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

154 i‡(
ªt
 != 0) {

155 
agaö
;

159 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

167 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

168 
	`¥ötf
("[FAILED]\n");

169 
	`¥ötf
("STARTSTOPUNIT comm™d should havêw‹ked buàô faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

170 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

178 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

179 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

180 i‡(
èsk
 =
NULL
) {

181 
	`¥ötf
("[FAILED]\n");

182 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

183 
ªt
 = -1;

184 
föished
;

189 
	`scsi_‰ì_scsi_èsk
(
èsk
);

190 
	`¥ötf
("[OK]\n");

193 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

194 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

195 i‡(
èsk
 =
NULL
) {

196 
	`¥ötf
("[FAILED]\n");

197 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

198 
ªt
 = -1;

199 
föished
;

204 i‡(
öq
->
rmb
) {

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

213 
	`scsi_‰ì_scsi_èsk
(
èsk
);

214 
	`¥ötf
("[OK]\n");

217 
föished
:

218 
	`iscsi_logout_sync
(
iscsi
);

219 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

220  
ªt
;

221 
	}
}

	@test-tool/0386_preventallow_2_it_nexuses.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0386_¥evíèŒow_2_ôl_√xu£s
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0386_preventallow_2_itl_nexuses:\n");

32 
	`¥ötf
("============================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatÉach ITÇexus has its own PREVENT setting\n");

35 
	`¥ötf
("1, Verify we can set PREVENTALLOW onÅwo IT_Nexusen (ifÅhe medium isÑemovable)\n");

36 
	`¥ötf
("2, Verify we canÇoÜongerÉjectÅhe media\n");

37 
	`¥ötf
("3, RemoveÅhe PREVENT onÅhis IT_Nexus\n");

38 
	`¥ötf
("4, Verify we can stillÇotÉjectÅhe media\n");

39 
	`¥ötf
("5, LoadÅhe mediaágain in case it wasÉjected\n");

40 
	`¥ötf
("6, Clear PREVENTALLOWágain\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 i‡(!
d©a_loss
) {

52 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

53 
ªt
 = -2;

54 
föished
;

57 i‡(!
öq
->
rmb
) {

58 
	`¥ötf
("Media isÇotÑemovable. SkippingÅests\n");

59 
ªt
 = -2;

60 
föished
;

63 
ªt
 = 0;

66 
	`¥ötf
("TryÅo set PREVENTALLOW on 2 different IT_Nexusen ... ");

67 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 1);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

78 i‡(
öq
->
rmb
) {

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

84 
föished
;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

90 i‡(
iscsi
 =
NULL
) {

91 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

94 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi2
, 
lun
, 1);

95 i‡(
èsk
 =
NULL
) {

96 
	`¥ötf
("[FAILED]\n");

97 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi2
));

98 
ªt
 = -1;

99 
föished
;

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

102 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

106 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


114 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


115 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

118 
ªt
 = -1;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
föished
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
	`¥ötf
("Eject failed. [OK]\n");

126 
	`¥ötf
("RemoveÅhe PREVENT onÅhis IT_Nexus ... ");

127 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

128 i‡(
èsk
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
föished
;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
	`¥ötf
("[OK]\n");

138 
	`¥ötf
("TryÅoÉjectÅhe media ... ");

139 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 0);

140 i‡(
èsk
 =
NULL
) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

143 
ªt
 = -1;

144 
föished
;

146 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


147 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


148 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("STARTSTOPUNIT comm™d should havêÁûed wôh ILLEGAL_REQUEST/MEDIUM_REMOVAL_PREVENTED wôh : faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

155 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
	`¥ötf
("Eject failed. [OK]\n");

159 
	`¥ötf
("LoadÅhe mediaágain in case it wasÉjected ... ");

160 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 1, 0, 0, 0, 1, 1);

161 i‡(
èsk
 =
NULL
) {

162 
	`¥ötf
("[FAILED]\n");

163 
	`¥ötf
("FaûedÅÿ£nd STARTSTOPUNIT comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

164 
ªt
 = -1;

165 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
	`¥ötf
("[OK]\n");

174 
	`¥ötf
("ClearÅhe PREVENTALLOWágain ... ");

175 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 0);

176 i‡(
èsk
 =
NULL
) {

177 
	`¥ötf
("[FAILED]\n");

178 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

179 
ªt
 = -1;

180 
föished
;

185 i‡(
öq
->
rmb
) {

186 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

187 
	`¥ötf
("[FAILED]\n");

188 
	`¥ötf
("PREVENTALLOW comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
ªt
 = -1;

190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

191 
föished
;

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi2
, 
lun
, 0);

197 i‡(
èsk
 =
NULL
) {

198 
	`¥ötf
("[FAILED]\n");

199 
	`¥ötf
("FaûedÅÿ£nd PREVENTALLOW comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi2
));

200 
ªt
 = -1;

201 
föished
;

203 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 
	`¥ötf
("[OK]\n");

207 
föished
:

208 
	`iscsi_logout_sync
(
iscsi
);

209 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

210 i‡(
iscsi2
 !
NULL
) {

211 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

213  
ªt
;

214 
	}
}

	@test-tool/0390_mandatory_opcodes_sbc.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T0390_m™d©‹y_›codes_sbc
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
 = 0, 
lun
;

29 
d©a
[4096];

31 
	`¥ötf
("0390_mandatory_opcodes_sbc:\n");

32 
	`¥ötf
("===========================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test support foráll mandatory opcodes for SBC devices\n");

35 
	`¥ötf
("1, Verify FORMAT UNIT isávailable\n");

36 
	`¥ötf
("2, Verify INQUIRY isávailable\n");

37 
	`¥ötf
("3, Verify MAINTENANCE IN isávailable (if SCCS bit is set)\n");

38 
	`¥ötf
("4, Verify MAINTENANCE OUT isávailable (if SCCS bit is set)\n");

39 
	`¥ötf
("5, Verify READ CAPACITY10 isávailable\n");

40 
	`¥ötf
("6, Verify READ CAPACITY16 isávailable\n");

41 
	`¥ötf
("7, Verify RECEIVE DIAGNOSTIC RESULT isávailable (if ENCSERV bit is set)\n");

42 
	`¥ötf
("8, Verify REDUNDANCY GROUP IN isávailable (if SCCS bit is set)\n");

43 
	`¥ötf
("9, Verify REDUNDANCY GROUP OUT isávailable (if SCCS bit is set)\n");

44 
	`¥ötf
("10, Verify REPORT LUNS isávailable\n");

45 
	`¥ötf
("11, Verify REQUEST SENSE isávailable\n");

46 
	`¥ötf
("12, Verify SEND DIAGNOSTIC isávailable\n");

47 
	`¥ötf
("13, Verify SPARE IN isávailable (if SCCS bit is set)\n");

48 
	`¥ötf
("14, Verify SPARE OUT isávailable (if SCCS bit is set)\n");

49 
	`¥ötf
("15, Verify TEST UNIT READY isávailable\n");

50 
	`¥ötf
("16, Verify UNAMP isávailable (if LBPME bit is set)\n");

51 
	`¥ötf
("17, Verify VOLUME SET IN isávailable (if SCCS bit is set)\n");

52 
	`¥ötf
("18, Verify VOLUME SET OUT isávailable (if SCCS bit is set)\n");

53 
	`¥ötf
("19, Verify WRITE SAME16 isávailable (if LBPME bit is set)\n");

54 
	`¥ötf
("20, Verify WRITE SAME32 isávailable (if LBPME bit is set)\n");

55 
	`¥ötf
("\n");

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

65 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

66 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Not SBC device."

70 i‡(!
d©a_loss
) {

71 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] --dataloss flagÇot set."

76 
	`¥ötf
("Test FORMAT UNIT ... ");

77 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

80 
	`¥ötf
("Test INQUIRY.\n");

81 i‡(
	`öquúy
(
iscsi
, 
lun
, 0, 0, 64, 
NULL
) == -1) {

82 
ªt
 = -1;

86 
	`¥ötf
("Test MAINTENANCE IN ... ");

87 i‡(
öq
->
sccs
 == 0) {

88 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

90 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

94 
	`¥ötf
("Test MAINTENANCE OUT ... ");

95 i‡(
öq
->
sccs
 == 0) {

96 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

98 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

102 
	`¥ötf
("Test READ CAPACITY10 ... ");

103 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
,0 ,0);

104 i‡(
èsk
 =
NULL
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("FaûedÅÿ£nd READ CAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
föished
;

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("READ CAPACITY10 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

115 
	`¥ötf
("[OK]\n");

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
	`¥ötf
("Test READ CAPACITY16 ... ");

121 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

122 i‡(
èsk
 =
NULL
) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("FaûedÅÿ£nd READ CAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

125 
ªt
 = -1;

126 
föished
;

128 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("READ CAPACITY16 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

133 
	`¥ötf
("[OK]\n");

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 
	`¥ötf
("Test RECEIVE DIAGNOSTIC RESULT ... ");

139 i‡(
öq
->
íc£rv
 == 0) {

140 
	`¥ötf
("[ENCSERV == 0, SKIPPING TEST]\n");

142 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

146 
	`¥ötf
("Test REDUNDANCY GROUP IN ... ");

147 i‡(
öq
->
sccs
 == 0) {

148 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

150 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

154 
	`¥ötf
("Test REDUNDANCY GROUP OUT ... ");

155 i‡(
öq
->
sccs
 == 0) {

156 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

158 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

162 
	`¥ötf
("Test REPORT LUNS ... ");

163 
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 64);

164 i‡(
èsk
 =
NULL
) {

165 
	`¥ötf
("[FAILED]\n");

166 
	`¥ötf
("FaûedÅÿ£nd REPORT LUNS comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = -1;

168 
föished
;

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`¥ötf
("[FAILED]\n");

172 
	`¥ötf
("REPORT LUNS comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

173 
ªt
 = -1;

175 
	`¥ötf
("[OK]\n");

177 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
	`¥ötf
("Test REQUEST SENSE ... ");

181 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

184 
	`¥ötf
("Test SEND DIAGNOSTIC ... ");

185 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

188 
	`¥ötf
("Test SPARE IN ... ");

189 i‡(
öq
->
sccs
 == 0) {

190 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

191 
föished
;

193 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

196 
	`¥ötf
("Test SPARE OUT ... ");

197 i‡(
öq
->
sccs
 == 0) {

198 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

200 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

204 
	`¥ötf
("Test TEST UNIT READY.\n");

205 i‡(
	`ã°unôªady
(
iscsi
, 
lun
) == -1) {

206 
ªt
 = -1;

210 
	`¥ötf
("Test UNMAP ... ");

211 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

212 
	`¥ötf
("[LBPME == 0, SKIPPING TEST]\n");

214 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 0, 0, 
NULL
, 0);

215 i‡(
èsk
 =
NULL
) {

216 
	`¥ötf
("[FAILED]\n");

217 
	`¥ötf
("FaûedÅÿ£nd UNMAP comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

218 
ªt
 = -1;

219 
föished
;

221 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

222 
	`¥ötf
("[FAILED]\n");

223 
	`¥ötf
("UNMAP comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

224 
ªt
 = -1;

226 
	`¥ötf
("[OK]\n");

228 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
	`¥ötf
("Test VOLUME SET IN ... ");

233 i‡(
öq
->
sccs
 == 0) {

234 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

236 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

240 
	`¥ötf
("Test VOLUME SET OUT ... ");

241 i‡(
öq
->
sccs
 == 0) {

242 
	`¥ötf
("[SCCS == 0, SKIPPING TEST]\n");

244 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

248 
	`¥ötf
("Test WRITE SAME16 ... ");

249 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0){

250 
	`¥ötf
("[LBPME == 0, SKIPPING TEST]\n");

252 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 0,

253 
d©a
, 
block_size
,

256 i‡(
èsk
 =
NULL
) {

257 
	`¥ötf
("[FAILED]\n");

258 
	`¥ötf
("FaûedÅÿ£nd WRITE SAME16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

259 
ªt
 = -1;

260 
föished
;

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`¥ötf
("[FAILED]\n");

264 
	`¥ötf
("WRITE SAME16 comm™d: faûed wôh sí£ %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

265 
ªt
 = -1;

267 
	`¥ötf
("[OK]\n");

269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

272 
	`¥ötf
("Test WRITE SAME32 ... ");

273 
	`¥ötf
("[TEST NOT IMPLEMENTED YET]\n");

276 
föished
:

277 
	`iscsi_logout_sync
(
iscsi
);

278 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

279  
ªt
;

280 
	}
}

	@test-tool/0400_inquiry_basic.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0400_öquúy_basic
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_°™d¨d
 *
°d_öq
;

30 
ªt
, 
lun
, 
i
;

31 
fuŒ_size
;

33 
	`¥ötf
("0400_inquiry_basic:\n");

34 
	`¥ötf
("===================\n");

35 i‡(
show_öfo
) {

36 
	`¥ötf
("TestÅhe standard INQUIRY data format.\n");

37 
	`¥ötf
("1, Check we canÑeadÅhe standard INQUIRY data.\n");

38 
	`¥ötf
("2, Standard data must beátÜeast 36 bytes in size.\n");

39 
	`¥ötf
("3, Device-type must beÉither of DISK/TAPE/CDROM.\n");

40 
	`¥ötf
("4, CheckÅhatÖeripheral-qualifier field is 0.\n");

41 
	`¥ötf
("5, CheckÅhatÅhe version field is valid.\n");

42 
	`¥ötf
("6, CheckÅhatÑesponse-data-format is valid.\n");

43 
	`¥ötf
("7, CheckÅhatádditional-length is valid.\n");

44 
	`¥ötf
("8, Verify HiSup flag is set.\n");

45 
	`¥ötf
("9, Verify vendor-identification is in ASCII.\n");

46 
	`¥ötf
("10, VerifyÖroduct-identification is in ASCII.\n");

47 
	`¥ötf
("11, VerifyÖroduct-revision-level is in ASCII.\n");

48 
	`¥ötf
("12, Verify AERC is clear in SPC-3ándÜater.\n");

49 
	`¥ötf
("13, Verify TrmTsk is clear in SPC-2ándÜater.\n");

50 
	`¥ötf
("\n");

54 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

55 i‡(
iscsi
 =
NULL
) {

56 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

61 
ªt
 = 0;

65 
	`¥ötf
("Read standard INQUIRY data ... ");

67 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 255);

68 i‡(
èsk
 =
NULL
) {

69 
	`¥ötf
("[FAILED]\n");

70 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
ªt
 = -1;

72 
föished
;

74 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

75 
	`¥ötf
("[FAILED]\n");

76 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
ªt
 = -1;

79 
föished
;

81 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

82 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

83 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
föished
;

93 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

94 i‡(
°d_öq
 =
NULL
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

97 
	`scsi_‰ì_scsi_èsk
(
èsk
);

98 
ªt
 = -1;

99 
föished
;

101 
	`¥ötf
("[OK]\n");

103 
	`¥ötf
("CheckÅhat standard data is >= 36 bytes in size ... ");

104 i‡(
fuŒ_size
 < 36) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("Standard INQUIRY data isÜessÅhan 36 bytes.\n");

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
ªt
 = -1;

109 
föished
;

111 
	`¥ötf
("[OK]\n");

113 
	`¥ötf
("Check device-type isÉither of DISK, TAPE or CD/DVD ... ");

114 
°d_öq
->
devi˚_ty≥
) {

115 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

116 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

117 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("Devi˚-ty≥ i†nŸ DISK, TAPE o∏CD/DVD. Devi˚Ñï‹ãd:%s\n", 
	`scsi_devty≥_to_°r
(
°d_öq
->
devi˚_ty≥
));

122 
ªt
 = -1;

123 
ã°4
;

125 
	`¥ötf
("[OK]\n");

128 
ã°4
:

129 
	`¥ötf
("Check PREIPHERAL QUALIFIER FIELD is 0 ... ");

130 i‡(
°d_öq
->
quÆifõr
 != 0) {

131 
	`¥ötf
("[FAILED]\n");

132 
	`¥ötf
("QUALIFIER wa†nŸ 0, iàwa†%d\n", 
°d_öq
->
quÆifõr
);

133 
ªt
 = -1;

134 
ã°5
;

136 
	`¥ötf
("[OK]\n");

138 
ã°5
:

139 
	`¥ötf
("Check VERSION field isÉither 0x4, 0x5 or 0x6 ... ");

140 
°d_öq
->
vîsi⁄
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("InvÆid VERSION:%d. Should bê0x4, 0x5 o∏0x6\n", 
°d_öq
->
vîsi⁄
);

148 
ªt
 = -1;

149 
ã°6
;

151 
	`¥ötf
("[OK]\n");

153 
ã°6
:

154 
	`¥ötf
("Check RESPONSE DATA FORMAT is 2 ... ");

155 i‡(
°d_öq
->
ª•⁄£_d©a_f‹m©
 != 2) {

156 
	`¥ötf
("[FAILED]\n");

157 
	`¥ötf
("InvÆid RESPONSE_DATA_FORMAT:%d. Should bê2\n", 
°d_öq
->
ª•⁄£_d©a_f‹m©
);

158 
ªt
 = -1;

159 
ã°7
;

161 
	`¥ötf
("[OK]\n");

163 
ã°7
:

164 
	`¥ötf
("Verify Additional-Length ... ");

165 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 + 5 !
fuŒ_size
) {

166 
	`¥ötf
("[FAILED]\n");

167 
	`¥ötf
("InvÆidáddôi⁄Æ-Àngth. Wa†%d buàshould bê%d\n", 
°d_öq
->
addôi⁄Æ_Àngth
, 
fuŒ_size
-5);

168 
ªt
 = -1;

169 
ã°8
;

171 
	`¥ötf
("[OK]\n");

173 
ã°8
:

174 
	`¥ötf
("Verify HiSup is set ... ");

175 i‡(!
°d_öq
->
hisup
) {

176 
	`¥ötf
("[FAILED]\n");

177 
	`¥ötf
("HiSup flag isÇot set.\n");

178 
ªt
 = -1;

179 
ã°9
;

181 
	`¥ötf
("[OK]\n");

183 
ã°9
:

184 
	`¥ötf
("Verify VENDOR_IDENTIFICATION is in ASCII ... ");

185 
i
 = 8; i < 16; i++) {

187 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

190 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("VENDOR_IDENTIFICATION containsÇon-ASCII characters\n");

196 
ªt
 = -1;

197 
ã°10
;

199 
	`¥ötf
("[OK]\n");

201 
ã°10
:

202 
	`¥ötf
("Verify PRODUCT_IDENTIFICATION is in ASCII ... ");

203 
i
 = 16; i < 32; i++) {

205 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

208 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

212 
	`¥ötf
("[FAILED]\n");

213 
	`¥ötf
("PRODUCT_IDENTIFICATION containsÇon-ASCII characters\n");

214 
ªt
 = -1;

215 
ã°11
;

217 
	`¥ötf
("[OK]\n");

219 
ã°11
:

220 
	`¥ötf
("Verify PRODUCT_REVISION_LEVEL is in ASCII ... ");

221 
i
 = 32; i < 36; i++) {

223 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

226 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

230 
	`¥ötf
("[FAILED]\n");

231 
	`¥ötf
("PRODUCT_REVISION_LEVEL containsÇon-ASCII characters\n");

232 
ªt
 = -1;

233 
ã°12
;

235 
	`¥ötf
("[OK]\n");

237 
ã°12
:

238 
	`¥ötf
("Verify AERC is clear in SPC-3ándÜater ... ");

239 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x80 && 
°d_öq
->
vîsi⁄
 >= 5) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("AERC is set butÅhis deviceÑeports SPC-3 orÜater\n");

242 
ªt
 = -1;

243 
ã°13
;

245 
	`¥ötf
("[OK]\n");

247 
ã°13
:

248 
	`¥ötf
("Verify TrmTsk is clear in SPC-2ándÜater ... ");

249 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x40 && 
°d_öq
->
vîsi⁄
 >= 4) {

250 
	`¥ötf
("[FAILED]\n");

251 
	`¥ötf
("TrmTsk is set butÅhis deviceÑeports SPC-2 orÜater\n");

252 
ªt
 = -1;

253 
ã°14
;

255 
	`¥ötf
("[OK]\n");

257 
ã°14
:

261 
	`scsi_‰ì_scsi_èsk
(
èsk
);

264 
föished
:

265 
	`iscsi_logout_sync
(
iscsi
);

266 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

267  
ªt
;

268 
	}
}

	@test-tool/0401_inquiry_alloclen.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0401_öquúy_Ælo˛í
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
, 
i
;

31 
	`¥ötf
("0401_inquiry_alloclen:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test INQUIRY withálloclen 0-255.\n");

35 
	`¥ötf
("1, Test standard inquiry withálloclen 0-255 is successful\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

51 
	`¥ötf
("Test INQUIRY withálloclen 0-255 ... ");

52 
i
 = 0; i < 256; i++) {

53 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
i
);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("INQUIRY comm™d wôháŒo˛í:%d faûed : %s\n", 
i
, 
	`iscsi_gë_îr‹
(
iscsi
));

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
ªt
 = -1;

65 
föished
;

67 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
	`¥ötf
("[OK]\n");

71 
föished
:

72 
	`iscsi_logout_sync
(
iscsi
);

73 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

74  
ªt
;

75 
	}
}

	@test-tool/0402_inquiry_evpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0402_öquúy_evpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
, 
i
;

31 
	`¥ötf
("0402_inquiry_evpd:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhe EVPD flag.\n");

35 
	`¥ötf
("1, TestÅhat EVPD==0ánd PC!=0 isánÉrror\n");

36 
	`¥ötf
("\n");

40 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

41 i‡(
iscsi
 =
NULL
) {

42 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

51 
	`¥ötf
("Test INQUIRY with EVPD==0ánd PC!=0 ... ");

52 
i
 = 1; i < 256; i++) {

53 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 
i
, 255);

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

61 
	`¥ötf
("[FAILED]\n");

62 
	`¥ötf
("INQUIRY should havêÁûed wôh CHECK_CONDITION/ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

63 
	`scsi_‰ì_scsi_èsk
(
èsk
);

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


68 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


69 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("INQUIRY should havêÁûed wôh wr⁄g sí£ code. IàÁûed wôh %†buàshould havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -1;

74 
föished
;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
	`¥ötf
("[OK]\n");

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsi
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

83  
ªt
;

84 
	}
}

	@test-tool/0403_inquiry_supported_vpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0403_öquúy_suµ‹ãd_vpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_suµ‹ãd_∑ges
 *
°d_öq
;

30 
size_t
 
i
;

31 
ªt
, 
lun
, 
j
;

32 
fuŒ_size
;

33 
∑ge_code
;

34 
scsi_öquúy_∑gecode
 
ªquúed_•c_∑ges
[] = {

35 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

36 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION


39 
	`¥ötf
("0403_inquiry_supported_vpd:\n");

40 
	`¥ötf
("==========================\n");

41 i‡(
show_öfo
) {

42 
	`¥ötf
("CheckÅhe INQUIRY SUPPORTED VPDÖage.\n");

43 
	`¥ötf
("1, Check we canÑeadÅhe SUPPORTED VPDÖage.\n");

44 
	`¥ötf
("2, Verify we haveáll mandatory SPC VPDÖages\n");

45 
	`¥ötf
("\n");

49 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

50 i‡(
iscsi
 =
NULL
) {

51 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

55 
ªt
 = 0;

57 
	`¥ötf
("Read SUPPORTED VPD data ... ");

59 
∑ge_code
 = 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
;

60 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 255);

61 i‡(
èsk
 =
NULL
) {

62 
	`¥ötf
("[FAILED]\n");

63 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

64 
ªt
 = -1;

65 
föished
;

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`¥ötf
("[FAILED]\n");

69 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

70 
	`scsi_‰ì_scsi_èsk
(
èsk
);

71 
ªt
 = -1;

72 
föished
;

74 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

75 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 
fuŒ_size
)Ë=
NULL
) {

80 
	`¥ötf
("[FAILED]\n");

81 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
föished
;

86 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

87 i‡(
°d_öq
 =
NULL
) {

88 
	`¥ötf
("[FAILED]\n");

89 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

90 
	`scsi_‰ì_scsi_èsk
(
èsk
);

91 
ªt
 = -1;

92 
föished
;

94 
	`¥ötf
("[OK]\n");

96 
	`¥ötf
("Verify we haveáll mandatory SPC VPDÖages:\n");

97 
i
 = 0; i < (
ªquúed_•c_∑ges
Ë/ (
scsi_öquúy_∑gecode
); i++) {

98 
	`¥ötf
("VîifyÅhêèrgë suµ‹t†∑gê0x%02x ... ", 
ªquúed_•c_∑ges
[
i
]);

99 
j
 = 0; j < 
°d_öq
->
num_∑ges
; j++) {

100 i‡(
ªquúed_•c_∑ges
[
i
] =
°d_öq
->
∑ges
[
j
]) {

104 i‡(
j
 =
°d_öq
->
num_∑ges
) {

105 
	`¥ötf
("[FAILED]\n");

106 
	`¥ötf
("T¨gë didÇŸÑï‹à∑gê0x%02x. Thi†∑gêi†m™d©‹y i¿SPC.\n", 
ªquúed_•c_∑ges
[
i
]);

107 
ªt
 = -1;

109 
	`¥ötf
("[OK]\n");

113 
	`scsi_‰ì_scsi_èsk
(
èsk
);

115 
föished
:

116 
	`iscsi_logout_sync
(
iscsi
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118  
ªt
;

119 
	}
}

	@test-tool/0404_inquiry_all_reported_vpd.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0404_öquúy_Æl_ªp‹ãd_vpd
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
;

29 
scsi_öquúy_suµ‹ãd_∑ges
 *
sup_öq
;

30 
ªt
, 
lun
, 
i
;

31 
fuŒ_size
;

32 
scsi_öquúy_∑gecode
 
∑ge_code
;

34 
	`¥ötf
("0404_inquiry_all_reported_vpd:\n");

35 
	`¥ötf
("==========================\n");

36 i‡(
show_öfo
) {

37 
	`¥ötf
("CheckÅhe INQUIRY SUPPORTED VPDÖage.\n");

38 
	`¥ötf
("1, Check we canÑeadÅhe SUPPORTED VPDÖage.\n");

39 
	`¥ötf
("2, Verify we canÑeadÉachÑeportedÖageánd checkÅhe qualifier,device-typeándÖage code onÅheÑeturned data\n");

40 
	`¥ötf
("\n");

44 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

45 i‡(
iscsi
 =
NULL
) {

46 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
ªt
 = 0;

55 
	`¥ötf
("Read SUPPORTED VPD data ... ");

57 
∑ge_code
 = 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
;

58 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 255);

59 i‡(
èsk
 =
NULL
) {

60 
	`¥ötf
("[FAILED]\n");

61 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
föished
;

65 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

68 
	`scsi_‰ì_scsi_èsk
(
èsk
);

69 
ªt
 = -1;

70 
föished
;

72 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

73 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

74 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
∑ge_code
, 
fuŒ_size
)Ë=
NULL
) {

78 
	`¥ötf
("[FAILED]\n");

79 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

80 
ªt
 = -1;

81 
föished
;

84 
sup_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

85 i‡(
sup_öq
 =
NULL
) {

86 
	`¥ötf
("[FAILED]\n");

87 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
ªt
 = -1;

90 
föished
;

92 
	`¥ötf
("[OK]\n");

94 
	`¥ötf
("ReadÉachÖageánd verify qualifier,ÅypeándÖage code:\n");

95 
i
 = 0; i < 
sup_öq
->
num_∑ges
; i++) {

96 
scsi_èsk
 *
pc_èsk
;

98 
	`¥ötf
("VîifyÖagê0x%02x c™ bêªad ... ", 
sup_öq
->
∑ges
[
i
]);

99 
pc_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
sup_öq
->
∑ges
[
i
], 255);

100 i‡(
pc_èsk
 =
NULL
) {

101 
	`¥ötf
("[FAILED]\n");

102 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

103 
ªt
 = -1;

106 i‡(
pc_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

107 
	`¥ötf
("[FAILED]\n");

108 
	`¥ötf
("FaûedÅÿªad VPDÖagê: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

109 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

110 
ªt
 = -1;

113 
	`¥ötf
("[OK]\n");

115 
	`¥ötf
("VîifyÖagê0x%02x quÆifõ∏ ... ", 
sup_öq
->
∑ges
[
i
]);

116 i‡((
pc_èsk
->
d©aö
.
d©a
[0] & 0xe0Ë>> 5 !
sup_öq
->
quÆifõr
) {

117 
	`¥ötf
("[FAILED]\n");

118 
	`¥ötf
("Qualifier differs between VPDÖages: %x != %x\n",

119 
pc_èsk
->
d©aö
.
d©a
[0] & 0xe0, 
sup_öq
->
quÆifõr
);

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

124 
	`¥ötf
("[OK]\n");

127 
	`¥ötf
("VîifyÖagê0x%02x devi˚Åy≥ ... ", 
sup_öq
->
∑ges
[
i
]);

128 i‡((
pc_èsk
->
d©aö
.
d©a
[0] & 0x1fË!
sup_öq
->
devi˚_ty≥
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("Device Type differs between VPDÖages: %x != %x\n",

131 
pc_èsk
->
d©aö
.
d©a
[0] & 0x1f, 
sup_öq
->
devi˚_ty≥
);

132 
ªt
 = -1;

133 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

136 
	`¥ötf
("[OK]\n");

139 
	`¥ötf
("VîifyÖagê0x%02xÖagêcodê ... ", 
sup_öq
->
∑ges
[
i
]);

140 i‡(
pc_èsk
->
d©aö
.
d©a
[1] !
sup_öq
->
∑ges
[
i
]) {

141 
	`¥ötf
("[FAILED]\n");

142 
	`¥ötf
("Page code is wrong: %x != %x\n",

143 
pc_èsk
->
d©aö
.
d©a
[1], 
sup_öq
->
∑ges
[
i
]);

144 
ªt
 = -1;

145 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

148 
	`¥ötf
("[OK]\n");

151 
	`scsi_‰ì_scsi_èsk
(
pc_èsk
);

154 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 
föished
:

157 
	`iscsi_logout_sync
(
iscsi
);

158 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

159  
ªt
;

160 
	}
}

	@test-tool/0410_readtoc_basic.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0410_ªadtoc_basic
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
;

28 
scsi_èsk
 *
èsk
, *
èsk1
;

29 
scsi_öquúy_°™d¨d
 *
°d_öq
;

30 
scsi_ªadˇ∑côy10
 *
rc10
;

31 
scsi_ªadtoc_li°
 *
li°
, *
li°1
;

32 
ªt
, 
lun
, 
i
, 
toc_devi˚
, 
fuŒ_size
;

33 
is_bœnk
 = 0;

34 
no_medium
 = 0;

36 
	`¥ötf
("0410_readtoc_basic:\n");

37 
	`¥ötf
("===================\n");

38 i‡(
show_öfo
) {

39 
	`¥ötf
("Test Read TOC command.\n");

40 
	`¥ötf
(" If device doesÇot support, just verifyáppropriateÉrrorÑeturned\n");

41 
	`¥ötf
("1, Verify we canÑeadÅhe TOC:Årack 0,Çon-MSF. (non-MMC devices shouldÑeturn sense)\n");

42 
	`¥ötf
("2, Make sureátÜeast 4 bytesÑeturnedás header.\n");

43 
	`¥ötf
("3, Verify we canÑeadÅhe TOC:Årack 1,Çon-MSF.\n");

44 
	`¥ötf
("4, Make sureátÜeast 4 bytesÑeturnedás header.\n");

45 
	`¥ötf
("5, VerifyÅrack 0ánd 1 bothÑeturnedÅhe same data.\n");

46 
	`¥ötf
("\n");

50 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

51 i‡(
iscsi
 =
NULL
) {

52 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

60 
	`¥ötf
("Read standard INQUIRY data ... ");

62 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 255);

63 i‡(
èsk
 =
NULL
) {

64 
	`¥ötf
("[FAILED]\n");

65 
	`¥ötf
("FaûedÅÿ£nd INQUIRY comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

66 
ªt
 = -1;

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("INQUIRY comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
	`scsi_‰ì_scsi_èsk
(
èsk
);

73 
ªt
 = -1;

74 
föished
;

76 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

77 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
föished
;

88 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

89 i‡(
°d_öq
 =
NULL
) {

90 
	`¥ötf
("[FAILED]\n");

91 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

92 
	`scsi_‰ì_scsi_èsk
(
èsk
);

93 
ªt
 = -1;

94 
föished
;

96 
	`¥ötf
("[OK]\n");

98 
	`¥ötf
("Check device-type isÉither of DISK, TAPE or CD/DVD ... ");

99 
°d_öq
->
devi˚_ty≥
) {

100 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

101 
toc_devi˚
 = 1;

103 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

104 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

105 
toc_devi˚
 = 0;

109 
	`¥ötf
("[SKIPPED]\n");

110 
	`¥ötf
("ThisÅest is onlyávailable on SBC/SBC/SSC devices\n");

111 
ªt
 = -2;

112 
föished
;

114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

115 
	`¥ötf
("[OK]\n");

118 
	`¥ötf
("CD/DVD Device. Check if mediumÖresent ... ");

119 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

120 i‡(
èsk
 =
NULL
) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿ£ndÑódˇ∑côy10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

127 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

128 i‡(
rc10
 =
NULL
) {

129 
	`¥ötf
("[FAILED]\n");

130 
	`¥ötf
("ÁûedÅÿunm¨shÆ»ªadˇ∑côy10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

131 
ªt
 = -1;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
föished
;

136 
is_bœnk
 = 
rc10
->
lba
 ? 0 : 1;

139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


140 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


141 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


142 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


143 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

144 
no_medium
 = 1;

145 
	`¥ötf
("[OK]\n");

146 
	`¥ötf
("No medium in drive. Mediumáccess commands should fail\n");

147 
ã°1
;

148 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("Ródˇ∑côy comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
föished
;

156 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
	`¥ötf
("[OK]\n");

159 i‡(
is_bœnk
) {

160 
	`¥ötf
("Blank diskÜoaded. ReadTOC should fail.\n");

162 
	`¥ötf
("There isá disk inÅhe drive. ReadTOC should work.\n");

167 
ã°1
:

168 
	`¥ötf
("Verify we can READTOC format 0000b (TOC)Årack 0 (%s) ... ",

169 
toc_devi˚
 ? "On MMC Device" : "OnÇon-MMC Device"

172 
èsk
 = 
	`iscsi_ªadtoc_sync
(
iscsi
, 
lun
, 0, 0, 0, 255);

173 i‡(
èsk
 =
NULL
) {

174 
	`¥ötf
("[FAILED]\n");

175 
	`¥ötf
("FaûedÅÿ£nd READTOC comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

176 
ªt
 = -1;

177 
föished
;

182 i‡(
no_medium
) {

183 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

184 
	`¥ötf
("[FAILED]\n");

185 
	`¥ötf
("READTOC Should have failed sinceÇo medium isÜoaded.\n");

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
ªt
 = -1;

188 
föished
;

191 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


192 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


193 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
 &&Åask->£n£.ascq !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


194 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

195 
	`¥ötf
("[FAILED]\n");

196 
	`¥ötf
("READTOC failed butáscq was wrong. Should "

198 "Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
ªt
 = -1;

201 
föished
;

204 
	`¥ötf
("[OK]\n");

205 
	`¥ötf
("No disk, we gotÅhe correct sense codeÅhat medium isÇotÖresent. SkippingÅheÑemainder ofÅheÅest\n");

206 
	`scsi_‰ì_scsi_èsk
(
èsk
);

207 
föished
;

213 i‡(!
toc_devi˚
) {

214 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

215 
	`¥ötf
("[FAILED]\n");

216 
	`¥ötf
("READTOC Should have failed\n");

217 
ªt
 = -1;

218 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


219 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


220 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

221 
	`¥ötf
("[FAILED]\n");

222 
	`¥ötf
("READTOC faûed buàascq wa†wr⁄g. Should havêÁûed wôh ILLEGAL_REQUEST/INVALID OPERATION_CODE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

223 
ªt
 = -1;

225 
	`¥ötf
("[OK]\n");

226 
	`¥ötf
("Notán MMC device so READTOC failedás it should. SkippingÑest ofÅest\n");

228 
	`scsi_‰ì_scsi_èsk
(
èsk
);

229 
föished
;

232 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

233 
	`¥ötf
("[FAILED]\n");

234 
	`¥ötf
("READTOC comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

235 
	`scsi_‰ì_scsi_èsk
(
èsk
);

236 
ªt
 = -1;

237 
föished
;

239 
	`¥ötf
("[OK]\n");

242 
	`¥ötf
("Verify we gotátÜeast 4 bytes of data forÅrack 0 ... ");

243 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

244 i‡(
fuŒ_size
 < 4) {

245 
	`¥ötf
("[FAILED]\n");

246 
	`¥ötf
("TOC D©®Lígth %d < 4\n", 
fuŒ_size
);

247 
	`scsi_‰ì_scsi_èsk
(
èsk
);

248 
ªt
 = -1;

249 
föished
;

251 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

252 i‡(
li°
 =
NULL
) {

253 
	`¥ötf
("[FAILED]\n");

254 
	`¥ötf
("Read TOC Unmarshall failed\n");

255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

256 
ªt
 = -1;

257 
föished
;

259 
	`¥ötf
("[OK]\n");

261 
	`¥ötf
("Verify we can READTOC format 0000b (TOC)Årack 1 ... ");

262 
èsk1
 = 
	`iscsi_ªadtoc_sync
(
iscsi
, 
lun
, 0, 1, 0, 255);

263 i‡(
èsk1
 =
NULL
) {

264 
	`¥ötf
("[FAILED]\n");

265 
	`¥ötf
("FaûedÅÿ£nd READTOC comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
ªt
 = -1;

268 
föished
;

271 i‡(
èsk1
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`¥ötf
("[FAILED]\n");

273 
	`¥ötf
("READTOC comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

274 
	`scsi_‰ì_scsi_èsk
(
èsk
);

275 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

276 
ªt
 = -1;

277 
föished
;

279 
	`¥ötf
("[OK]\n");

281 
	`¥ötf
("Verify we gotátÜeast 4 bytes of data forÅrack 1 ... ");

282 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk1
);

283 i‡(
fuŒ_size
 < 4) {

284 
	`¥ötf
("[FAILED]\n");

285 
	`¥ötf
("TOC D©®Lígth %d < 4\n", 
fuŒ_size
);

286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

287 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

288 
ªt
 = -1;

289 
föished
;

291 
li°1
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk1
);

292 i‡(
li°1
 =
NULL
) {

293 
	`¥ötf
("[FAILED]\n");

294 
	`¥ötf
("Read TOC Unmarshall failed\n");

295 
	`scsi_‰ì_scsi_èsk
(
èsk
);

296 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

297 
ªt
 = -1;

298 
föished
;

300 
	`¥ötf
("[OK]\n");

302 
	`¥ötf
("VerifyÅrack 0ánd 1 bothÑeturnedÅhe same data ... ");

303 i‡(
li°
->
num
 !
li°1
->num ||

304 
li°
->
fú°
 !
li°1
->first ||

305 
li°
->
œ°
 !
li°1
->last) {

306 
	`¥ötf
("[FAILED]\n");

307 
	`¥ötf
("Read TOC header ofÜba 0 != TOC ofÜba 1.\n");

308 
ªt
 = -1;

309 
	`scsi_‰ì_scsi_èsk
(
èsk
);

310 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

311 
föished
;

314 
i
=0; i<
li°
->
num
; i++) {

315 i‡(
li°
->
desc
[
i
].desc.
toc
.
adr
 !
li°1
->desc[i].desc.toc.adr ||

316 
li°
->
desc
[
i
].desc.
toc
.
c⁄åﬁ
 !
li°1
->desc[i].desc.toc.control ||

317 
li°
->
desc
[
i
].desc.
toc
.
åack
 !
li°1
->desc[i].desc.toc.track ||

318 
li°
->
desc
[
i
].desc.
toc
.
lba
 !
li°1
->desc[i].desc.toc.lba) {

319 
	`¥ötf
("[FAILED]\n");

320 
	`¥ötf
("Read TOC descriptors ofÜba 0 != TOC ofÜba 1.\n");

321 
ªt
 = -1;

322 
	`scsi_‰ì_scsi_èsk
(
èsk
);

323 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

324 
föished
;

327 
	`¥ötf
("[OK]\n");

328 
	`scsi_‰ì_scsi_èsk
(
èsk
);

329 
	`scsi_‰ì_scsi_èsk
(
èsk1
);

332 
föished
:

333 
	`iscsi_logout_sync
(
iscsi
);

334 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

335  
ªt
;

336 
	}
}

	@test-tool/0420_reserve6_simple.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0420_ª£rve6_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0420_reserve6_simple:\n");

32 
	`¥ötf
("===================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("Test RESERVE6/RELEASE6 commands if supported.\n");

35 
	`¥ötf
(" If device doesÇot support, just verifyáppropriateÉrrorÑeturned\n");

36 
	`¥ötf
("1. Test simple RESERVE6 followed by RELEASE6\n");

37 
	`¥ötf
("2. Test Initator 1 canÑeserve ifálreadyÑeserved by Intiator 1.\n");

38 
	`¥ötf
("3. Test Initiator 2 can'tÑeserve ifálreadyÑeserved by Initiator 1.\n");

39 
	`¥ötf
("3a. Test Initiator 2Ñelease whenÑeserved by Initiator 1Ñeturns success, but withoutÑeleasing.\n");

40 
	`¥ötf
("4. Test Initiator 1 canÅestunitready ifÑeserved by Initiator 1.\n");

41 
	`¥ötf
("5. Test Initiator 2 can'tÅestunitready ifÑeserved by Initiator 1.\n");

42 
	`¥ötf
("6. Test Initiator 2 can getÑeservation once Intiator 1ÑeleasesÑeservation.\n");

44 
	`¥ötf
("\n");

48 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

49 i‡(
iscsi
 =
NULL
) {

50 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

55 i‡(
iscsi2
 =
NULL
) {

56 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 1;

58 
föished
;

61 
ªt
 = 0;

63 
	`¥ötf
("Send RESERVE6 ... ");

64 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

65 i‡(
èsk
 =
NULL
) {

66 
	`¥ötf
("[FAILED]\n");

67 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

68 
	`iscsi_gë_îr‹
(
iscsi
));

69 
ªt
 = -1;

70 
föished
;

72 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

73 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


74 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


75 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

76 
	`¥ötf
("[OK]\n");

77 
	`¥ötf
("RESERVE6 Not Supported\n");

78 
	`scsi_‰ì_scsi_èsk
(
èsk
);

79 
föished
;

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed butáscq was wrong. Should "

85 
	`iscsi_gë_îr‹
(
iscsi
));

86 
ªt
 = -1;

87 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 
föished
;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
	`¥ötf
("[OK]\n");

94 
	`¥ötf
("Send RELEASE6 ... ");

95 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

96 i‡(
èsk
 =
NULL
) {

97 
	`¥ötf
("[FAILED]\n");

98 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

99 
	`iscsi_gë_îr‹
(
iscsi
));

100 
ªt
 = -1;

101 
föished
;

103 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("RELEASE6 command failed : %s\n",

106 
	`iscsi_gë_îr‹
(
iscsi
));

107 
ªt
 = -1;

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

109 
föished
;

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
	`¥ötf
("[OK]\n");

114 
	`¥ötf
("TestÅhatÑeservation works.\n");

115 
	`¥ötf
("Send RESERVE6 from Initiator 1. ... ");

116 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

117 i‡(
èsk
 =
NULL
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

120 
	`iscsi_gë_îr‹
(
iscsi
));

121 
ªt
 = -1;

122 
föished
;

124 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("RESERVE6 command failed : %s\n",

127 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
	`scsi_‰ì_scsi_èsk
(
èsk
);

130 
föished
;

132 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 
	`¥ötf
("[OK]\n");

135 
	`¥ötf
("Send RESERVE6 from Initiator 2. Expect conflict. ... ");

136 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

137 i‡(
èsk
 =
NULL
) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

140 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
föished
;

145 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

146 
	`¥ötf
("[FAILED]\n");

147 
	`¥ötf
("Expected RESERVATION CONFLICT\n");

148 
ªt
 = -1;

149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 
föished
;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
	`¥ötf
("[OK]\n");

155 
	`¥ötf
("Send RELEASE6 from Initiator 2..Expect NO-OP. ... ");

156 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi2
, 
lun
);

157 i‡(
èsk
 =
NULL
) {

158 
	`¥ötf
("[FAILED]\n");

159 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

160 
	`iscsi_gë_îr‹
(
iscsi
));

161 
ªt
 = -1;

162 
föished
;

165 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

166 
	`¥ötf
("[FAILED]\n");

167 
	`¥ötf
("RELEASE6 command: failed with sense %s\n",

168 
	`iscsi_gë_îr‹
(
iscsi
));

169 
ªt
 = -1;

171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

172 
föished
;

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
	`¥ötf
("[OK]\n");

177 
	`¥ötf
("Send TESTUNITREADY from Initiator 1\n");

178 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

179 i‡(
ªt
 != 0) {

180 
föished
;

183 
	`¥ötf
("Send TESTUNITREADY from Initiator 2. Expect conflict.\n");

184 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

185 i‡(
ªt
 != 0) {

186 
föished
;

189 
	`¥ötf
("TestÅhatÑeleaseáctually works\n");

190 
	`¥ötf
("Send RELEASE6 from Initiator 1 ... ");

191 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

192 i‡(
èsk
 =
NULL
) {

193 
	`¥ötf
("[FAILED]\n");

194 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

195 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
föished
;

199 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

200 
	`¥ötf
("[FAILED]\n");

201 
	`¥ötf
("RELEASE6 command failed : %s\n",

202 
	`iscsi_gë_îr‹
(
iscsi
));

203 
ªt
 = -1;

204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

205 
föished
;

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

208 
	`¥ötf
("[OK]\n");

210 
	`¥ötf
("Send RESERVE6 Initiator 2 ... ");

211 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

212 i‡(
èsk
 =
NULL
) {

213 
	`¥ötf
("[FAILED]\n");

214 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

215 
	`iscsi_gë_îr‹
(
iscsi
));

216 
ªt
 = -1;

217 
föished
;

219 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

220 
	`¥ötf
("[FAILED]\n");

221 
	`¥ötf
("RESERVE6 command failed : %s\n",

222 
	`iscsi_gë_îr‹
(
iscsi
));

223 
ªt
 = -1;

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
föished
;

227 
	`scsi_‰ì_scsi_èsk
(
èsk
);

228 
	`¥ötf
("[OK]\n");

230 
	`¥ötf
("Send RELEASE6 Initiator 2 ... ");

231 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi2
, 
lun
);

232 i‡(
èsk
 =
NULL
) {

233 
	`¥ötf
("[FAILED]\n");

234 
	`¥ötf
("FailedÅo send RELEASE6 command : %s\n",

235 
	`iscsi_gë_îr‹
(
iscsi
));

236 
ªt
 = -1;

237 
föished
;

239 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

240 
	`¥ötf
("[FAILED]\n");

241 
	`¥ötf
("RELEASE6 command failed : %s\n",

242 
	`iscsi_gë_îr‹
(
iscsi
));

243 
ªt
 = -1;

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
föished
;

247 
	`scsi_‰ì_scsi_èsk
(
èsk
);

248 
	`¥ötf
("[OK]\n");

249 
föished
;

252 
föished
:

253 i‡(
iscsi2
 !
NULL
) {

254 
	`iscsi_logout_sync
(
iscsi2
);

255 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

257 i‡(
iscsi
 !
NULL
) {

258 
	`iscsi_logout_sync
(
iscsi
);

259 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

261  
ªt
;

262 
	}
}

	@test-tool/0421_reserve6_lun_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~<pﬁl.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	smgmt_èsk
 {

27 
uöt32_t
 
	m°©us
;

28 
uöt32_t
 
	mföished
;

31 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

32 *
comm™d_d©a
, *
¥iv©e_d©a
)

34 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

36 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

37 
mgmt_èsk
->
föished
 = 1;

38 
	}
}

40 
	$T0421_ª£rve6_lun_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0421_reserve6_lun_reset:\n");

49 
	`¥ötf
("========================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatá RESERVE6 is dropped byá LUN-reset\n");

52 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

53 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

54 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator\n");

55 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator\n");

56 
	`¥ötf
("4, Sendá LUN-resetÅoÅheÅarget\n");

57 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

69 i‡(
iscsi2
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
ªt
 = 0;

79 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

80 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

81 i‡(
èsk
 =
NULL
) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

84 
	`iscsi_gë_îr‹
(
iscsi
));

85 
ªt
 = -1;

86 
föished
;

88 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


89 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


90 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

91 
	`¥ötf
("[SKIPPED]\n");

92 
	`¥ötf
("RESERVE6 Not Supported\n");

93 
ªt
 = -2;

94 
	`scsi_‰ì_scsi_èsk
(
èsk
);

95 
föished
;

97 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

98 
	`¥ötf
("[FAILED]\n");

99 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

100 
	`iscsi_gë_îr‹
(
iscsi
));

101 
ªt
 = -1;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
föished
;

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
	`¥ötf
("[OK]\n");

109 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

110 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

111 i‡(
ªt
 != 0) {

112 
föished
;

116 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

117 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

118 i‡(
ªt
 != 0) {

119 
föished
;

122 
	`¥ötf
("Sendá LUN ResetÅoÅheÅarget ... ");

123 
	`iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi
, 
lun
, 
mgmt_cb
, &
mgmt_èsk
);

124 
mgmt_èsk
.
föished
 == 0) {

125 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

126 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

128 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

129 
	`¥ötf
("Poll failed");

130 
föished
;

132 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

133 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

137 i‡(
mgmt_èsk
.
°©us
 != 0) {

138 
	`¥ötf
("[FAILED]\n");

139 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

140 
föished
;

142 
	`¥ötf
("[OK]\n");

148 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions onÅhe second initiator.\n");

149 
agaö
:

150 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

151 i‡(
ªt
 != 0) {

152 
agaö
;

156 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

157 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

158 i‡(
ªt
 != 0) {

159 
föished
;

163 
föished
:

164 i‡(
iscsi2
 !
NULL
) {

165 
	`iscsi_logout_sync
(
iscsi2
);

166 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

168 i‡(
iscsi
 !
NULL
) {

169 
	`iscsi_logout_sync
(
iscsi
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

172  
ªt
;

173 
	}
}

	@test-tool/0422_reserve6_logout.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0422_ª£rve6_logout
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0422_reserve6_logout:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatá RESERVE6 is dropped whenÅhe session isÜogged out\n");

35 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

36 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

37 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

38 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

39 
	`¥ötf
("4, LogoutÅhe first initiator.\n");

40 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

52 i‡(
iscsi2
 =
NULL
) {

53 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

62 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

63 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

67 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`¥ötf
("[SKIPPED]\n");

75 
	`¥ötf
("RESERVE6 Not Supported\n");

76 
ªt
 = -2;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

83 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

93 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

94 i‡(
ªt
 != 0) {

95 
föished
;

99 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

100 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

101 i‡(
ªt
 != 0) {

102 
föished
;

105 
	`¥ötf
("LogoutÅhe first initiator ... ");

106 
	`iscsi_logout_sync
(
iscsi
);

107 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

108 
iscsi
 = 
NULL
;

109 
	`¥ötf
("[OK]\n");

111 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

112 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

113 i‡(
ªt
 != 0) {

114 
föished
;

118 
föished
:

119 i‡(
iscsi2
 !
NULL
) {

120 
	`iscsi_logout_sync
(
iscsi2
);

121 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

123 i‡(
iscsi
 !
NULL
) {

124 
	`iscsi_logout_sync
(
iscsi
);

125 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

127  
ªt
;

128 
	}
}

	@test-tool/0423_reserve6_sessionloss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~"iscsi.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	$T0423_ª£rve6_£ssi⁄loss
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

27 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

28 
scsi_èsk
 *
èsk
;

29 
ªt
, 
lun
;

31 
	`¥ötf
("0423_reserve6_sessionloss:\n");

32 
	`¥ötf
("=====================\n");

33 i‡(
show_öfo
) {

34 
	`¥ötf
("TestÅhatá RESERVE6 is dropped whenÅhe session is dropped\n");

35 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

36 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

37 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

38 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

39 
	`¥ötf
("4, Drop session forÅhe first initiator.\n");

40 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

52 i‡(
iscsi2
 =
NULL
) {

53 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

57 
ªt
 = 0;

62 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

63 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

64 i‡(
èsk
 =
NULL
) {

65 
	`¥ötf
("[FAILED]\n");

66 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

67 
	`iscsi_gë_îr‹
(
iscsi
));

68 
ªt
 = -1;

69 
föished
;

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`¥ötf
("[SKIPPED]\n");

75 
	`¥ötf
("RESERVE6 Not Supported\n");

76 
ªt
 = -2;

77 
	`scsi_‰ì_scsi_èsk
(
èsk
);

78 
föished
;

80 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

81 
	`¥ötf
("[FAILED]\n");

82 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

83 
	`iscsi_gë_îr‹
(
iscsi
));

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

93 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

94 i‡(
ªt
 != 0) {

95 
föished
;

99 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

100 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

101 i‡(
ªt
 != 0) {

102 
föished
;

106 
	`¥ötf
("DropÅhe sessionÅoÅhe first initiator ... ");

107 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

108 
iscsi
 = 
NULL
;

109 
	`¥ötf
("[OK]\n");

111 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator.\n");

112 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

113 i‡(
ªt
 != 0) {

114 
föished
;

118 
föished
:

119 i‡(
iscsi2
 !
NULL
) {

120 
	`iscsi_logout_sync
(
iscsi2
);

121 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

123 i‡(
iscsi
 !
NULL
) {

124 
	`iscsi_logout_sync
(
iscsi
);

125 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

127  
ªt
;

128 
	}
}

	@test-tool/0424_reserve6_target_reset.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

21 
	~<pﬁl.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	smgmt_èsk
 {

27 
uöt32_t
 
	m°©us
;

28 
uöt32_t
 
	mföished
;

31 
	$mgmt_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

32 *
comm™d_d©a
, *
¥iv©e_d©a
)

34 
mgmt_èsk
 *mgmt_èsk = (mgmt_èsk *)
¥iv©e_d©a
;

36 
mgmt_èsk
->
°©us
 = *(
uöt32_t
 *)
comm™d_d©a
;

37 
mgmt_èsk
->
föished
 = 1;

38 
	}
}

40 
	$T0424_ª£rve6_èrgë_ª£t
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

43 
scsi_èsk
 *
èsk
;

44 
ªt
, 
lun
;

45 
mgmt_èsk
 mgmt_task = {0, 0};

46 
pﬁlfd
 
pfd
;

48 
	`¥ötf
("0424_reserve6_target_reset:\n");

49 
	`¥ötf
("========================\n");

50 i‡(
show_öfo
) {

51 
	`¥ötf
("TestÅhatá RESERVE6 is dropped byá Target-reset\n");

52 
	`¥ötf
(" If device doesÇot support RESERVE6, just skipÅheÅest.\n");

53 
	`¥ötf
("1, ReserveÅhe device fromÅhe first initiator.\n");

54 
	`¥ötf
("2, Verify we canáccessÅhe LUN fromÅhe first initiator\n");

55 
	`¥ötf
("3, Verify we can NOTáccessÅhe LUN fromÅhe second initiator\n");

56 
	`¥ötf
("4, Sendá Target-reset\n");

57 
	`¥ötf
("5, Verify we canáccessÅhe LUN fromÅhe second initiator\n");

58 
	`¥ötf
("\n");

62 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

63 i‡(
iscsi
 =
NULL
) {

64 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

68 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun
);

69 i‡(
iscsi2
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
ªt
 = 0;

76 
	`¥ötf
("Send RESERVE6 fromÅhe first initiator ... ");

77 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

78 i‡(
èsk
 =
NULL
) {

79 
	`¥ötf
("[FAILED]\n");

80 
	`¥ötf
("FailedÅo send RESERVE6 command : %s\n",

81 
	`iscsi_gë_îr‹
(
iscsi
));

82 
ªt
 = -1;

83 
föished
;

85 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


86 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


87 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

88 
	`¥ötf
("[SKIPPED]\n");

89 
	`¥ötf
("RESERVE6 Not Supported\n");

90 
ªt
 = -2;

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
föished
;

94 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("RESERVE6 failed with sense:%s\n",

97 
	`iscsi_gë_îr‹
(
iscsi
));

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

106 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe first initiator.\n");

107 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

108 i‡(
ªt
 != 0) {

109 
föished
;

113 
	`¥ötf
("Verify we can NOTáccessÅhe LUN fromÅhe second initiator.\n");

114 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsi2
, 
lun
);

115 i‡(
ªt
 != 0) {

116 
föished
;

119 
	`¥ötf
("Sendá Target Cold-Reset ... ");

120 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi
, 
mgmt_cb
, &
mgmt_èsk
);

121 
mgmt_èsk
.
föished
 == 0) {

122 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

123 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

125 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

126 
	`¥ötf
("Poll failed");

127 
föished
;

129 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

130 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

134 i‡(
mgmt_èsk
.
°©us
 != 0) {

135 
	`¥ötf
("[FAILED]\n");

136 
	`¥ötf
("FailedÅoÑesetÅhe LUN\n");

137 
föished
;

139 
	`¥ötf
("[OK]\n");

145 
	`¥ötf
("Use TESTUNITREADYánd clearány unitáttentions onÅhe second initiator.\n");

146 
agaö
:

147 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

148 i‡(
ªt
 != 0) {

149 
agaö
;

153 
	`¥ötf
("Verify we canáccessÅhe LUN fromÅhe second initiator ... ");

154 
ªt
 = 
	`ã°unôªady
(
iscsi2
, 
lun
);

155 i‡(
ªt
 != 0) {

156 
föished
;

160 
föished
:

161 i‡(
iscsi2
 !
NULL
) {

162 
	`iscsi_logout_sync
(
iscsi2
);

163 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

165 i‡(
iscsi
 !
NULL
) {

166 
	`iscsi_logout_sync
(
iscsi
);

167 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

169  
ªt
;

170 
	}
}

	@test-tool/0430_report_all_supported_ops.c

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<˘y≥.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$T0430_ªp‹t_Æl_suµ‹ãd_›s
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

28 
iscsi_c⁄ãxt
 *
iscsi
;

29 
scsi_èsk
 *
èsk
;

30 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
tmp_rsoc
;

31 
ªt
, 
lun
;

32 
fuŒ_size
;

33 
i
;

35 
	`¥ötf
("0430_report_all_supported_ops:\n");

36 
	`¥ötf
("===================\n");

37 i‡(
show_öfo
) {

38 
	`¥ötf
("Test MaintenanceIn: Report Supported Operations.\n");

39 
	`¥ötf
("1, Report Supported Ops (noÅimeout information).\n");

40 
	`¥ötf
("2, Report Supported Ops (withÅimeout information).\n");

41 
	`¥ötf
("\n");

45 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

46 i‡(
iscsi
 =
NULL
) {

47 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

51 
ªt
 = 0;

53 
	`¥ötf
("See if Report Supported Opcodes is supported... ");

55 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

56 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

58 i‡(
èsk
 =
NULL
) {

59 
	`¥ötf
("[FAILED]\n");

60 
	`¥ötf
("FailedÅo send Report Supported Opcodes command : %s\n",

61 
	`iscsi_gë_îr‹
(
iscsi
));

62 
ªt
 = -1;

63 
föished
;

65 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


66 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


67 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

68 
	`¥ötf
("[SKIPPED]\n");

69 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

70 
	`iscsi_gë_îr‹
(
iscsi
));

71 
	`scsi_‰ì_scsi_èsk
(
èsk
);

72 
ªt
 = -2;

73 
föished
;

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`¥ötf
("[FAILED]\n");

77 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

78 
	`iscsi_gë_îr‹
(
iscsi
));

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
ªt
 = -1;

81 
föished
;

83 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

85 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

86 
	`scsi_‰ì_scsi_èsk
(
èsk
);

88 i‡((
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

89 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

90 
fuŒ_size
)Ë=
NULL
) {

91 
	`¥ötf
("[FAILED]\n");

92 
	`¥ötf
("REPORT SUPPORTED OPCODES faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

93 
ªt
 = -1;

94 
föished
;

97 
tmp_rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

98 i‡(
tmp_rsoc
 =
NULL
) {

99 
	`¥ötf
("[FAILED]\n");

100 
	`¥ötf
("failedÅo unmarshall REPORT SUPPORTED OPCODES datain blob\n");

101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

102 
ªt
 = -1;

103 
föished
;

106 
	`¥ötf
("Suµ‹ãd Comm™ds: %d\n", 
tmp_rsoc
->
num_des¸ùt‹s
);

107 
	`¥ötf
("=======================\n");

108 
i
 = 0; i < 
tmp_rsoc
->
num_des¸ùt‹s
; i++) {

109 
	`¥ötf
("op:%x\tsa:%x\tcdbÜength:%d\n",

110 
tmp_rsoc
->
des¸ùt‹s
[
i
].
›code
,

111 
tmp_rsoc
->
des¸ùt‹s
[
i
].
ß
,

112 
tmp_rsoc
->
des¸ùt‹s
[
i
].
cdb_Àn
);

115 
	`¥ötf
("\n[OK]\n");

116 
	`scsi_‰ì_scsi_èsk
(
èsk
);

119 
	`¥ötf
("See if Report Supported Opcodes with Timeouts is supported... ");

121 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

122 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

124 i‡(
èsk
 =
NULL
) {

125 
	`¥ötf
("[FAILED]\n");

126 
	`¥ötf
("FailedÅo send Report Supported Opcodes command : %s\n",

127 
	`iscsi_gë_îr‹
(
iscsi
));

128 
ªt
 = -1;

129 
föished
;

131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


132 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


133 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE


134 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
)) {

135 
	`¥ötf
("[SKIPPED]\n");

136 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

137 
	`iscsi_gë_îr‹
(
iscsi
));

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
ªt
 = -2;

140 
föished
;

142 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

143 
	`¥ötf
("[FAILED]\n");

144 
	`¥ötf
("REPORT SUPPORTED OPCODES command failed : %s\n",

145 
	`iscsi_gë_îr‹
(
iscsi
));

146 
	`scsi_‰ì_scsi_èsk
(
èsk
);

147 
ªt
 = -1;

148 
föished
;

150 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

152 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

156 i‡((
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

157 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

158 
fuŒ_size
)Ë=
NULL
) {

159 
	`¥ötf
("[FAILED]\n");

160 
	`¥ötf
("REPORT SUPPORTED OPCODES faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
ªt
 = -1;

162 
föished
;

165 
tmp_rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

166 i‡(
tmp_rsoc
 =
NULL
) {

167 
	`¥ötf
("[FAILED]\n");

168 
	`¥ötf
("failedÅo unmarshall REPORT SUPPORTED OPCODES datain blob\n");

169 
	`scsi_‰ì_scsi_èsk
(
èsk
);

170 
ªt
 = -1;

171 
föished
;

174 
	`¥ötf
("Suµ‹ãd Comm™d†(wôhÅimeouàöf‹m©i⁄): %d\n", 
tmp_rsoc
->
num_des¸ùt‹s
);

175 
	`¥ötf
("=======================\n");

177 
	`¥ötf
("\n[OK]\n");

178 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
föished
:

181 
	`iscsi_logout_sync
(
iscsi
);

182 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

183  
ªt
;

184 
	}
}

	@test-tool/1000_cmdsn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	gch™ge_cmd¢
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

29 
ch™ge_cmd¢
) {

32 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
maxcmd¢
 + 1);

36 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 0);

40 
ch™ge_cmd¢
 = 0;

42 
	}
}

44 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

45 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

47 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

48 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

50 
°©e
->
föished
 = 1;

51 
°©e
->
°©us
 = status;

53 i‡(
°©us
) {

54 
èsk
->
°©us
 = status;

56 
	}
}

59 
	$T1000_cmd¢_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

61 
iscsi_c⁄ãxt
 *
iscsi
;

62 
scsi_èsk
 *
èsk
;

63 
ªt
, 
lun
;

64 
d©a
[4096 * 2];

65 
iscsi_async_°©e
 
ã°_°©e
;

67 
	`¥ötf
("1000_cmdsn_invalid:\n");

68 
	`¥ötf
("==================\n");

69 i‡(
show_öfo
) {

70 
	`¥ötf
("Test sending commands with invalid cmdsn values.\n");

71 
	`¥ötf
("CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN\n");

72 
	`¥ötf
("1, TestÅhatá CMDSN > MAXCMDSN isánÉrror\n");

73 
	`¥ötf
("2, TestÅhatá CMDSN == 0 isánÉrror\n");

74 
	`¥ötf
("\n");

78 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

79 i‡(
iscsi
 =
NULL
) {

80 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

84 i‡(!
d©a_loss
) {

85 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

86 
ªt
 = -2;

87 
föished
;

91 
ªt
 = 0;

93 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

94 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

95 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

97 
	`¥ötf
("Write 2 blocks with CMDSN > MAXCMDSN ... ");

98 
ch™ge_cmd¢
 = 1;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

104 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

106 
ã°_cb
, &
ã°_°©e
);

107 i‡(
èsk
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

110 
ªt
 = -1;

111 
föished
;

113 
ã°_°©e
.
èsk
 =Åask;

114 
ã°_°©e
.
föished
 = 0;

115 
ã°_°©e
.
°©us
 = 0;

116 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

117 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

118 
	`¥ötf
("[FAILED]\n");

119 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

120 
ªt
 = -1;

121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

122 
föished
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

125 
	`¥ötf
("[OK]\n");

129 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

130 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

131 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

133 
	`¥ötf
("Wrôê2 block†wôh CMDSN =0 ... ");
	`fÊush
(
°dout
);

134 
ch™ge_cmd¢
 = 2;

139 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

140 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

142 
ã°_cb
, &
ã°_°©e
);

143 i‡(
èsk
 =
NULL
) {

144 
	`¥ötf
("[FAILED]\n");

145 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

146 
ªt
 = -1;

147 
föished
;

149 
ã°_°©e
.
èsk
 =Åask;

150 
ã°_°©e
.
föished
 = 0;

151 
ã°_°©e
.
°©us
 = 0;

152 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

153 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

154 
	`¥ötf
("[FAILED]\n");

155 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

156 
ªt
 = -1;

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
föished
;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

161 
	`¥ötf
("[OK]\n");

165 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

167 
föished
:

168 
loˇl_iscsi_queue_pdu
 = 
NULL
;

169 
	`iscsi_logout_sync
(
iscsi
);

170 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

171  
ªt
;

172 
	}
}

	@test-tool/1010_datasn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	g˛amp_d©a¢
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

29 
uöt32_t
 
d©a¢
;

31 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

34 
˛amp_d©a¢
) {

37 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 0);

41 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 27);

45 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], -1);

49 
d©a¢
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[36]);

50 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 1 - 
d©a¢
);

54 
	}
}

56 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

57 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

59 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

60 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

62 
°©e
->
föished
 = 1;

63 
°©e
->
°©us
 = status;

65 i‡(
°©us
) {

66 
èsk
->
°©us
 = status;

68 
	}
}

71 
	$T1010_d©a¢_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

73 
iscsi_c⁄ãxt
 *
iscsi
;

74 
scsi_èsk
 *
èsk
;

75 
ªt
, 
lun
;

76 
d©a
[4096 * 2];

77 
iscsi_async_°©e
 
ã°_°©e
;

79 
	`¥ötf
("1010_datasn_invalid:\n");

80 
	`¥ötf
("==================\n");

81 i‡(
show_öfo
) {

82 
	`¥ötf
("Test sending commands with invalid datasn values.\n");

83 
	`¥ötf
("1, TestÅhat 2 DATA-IN with DATASN==0 isánÉrror\n");

84 
	`¥ötf
("2, TestÅhat 2 DATA-IN with DATASN==27 isánÉrror\n");

85 
	`¥ötf
("3, TestÅhat 2 DATA-IN with DATASN==-1 isánÉrror\n");

86 
	`¥ötf
("4, TestÅhat 2 DATA-IN with DATASN inÑeverse order (1,0) isánÉrror\n");

87 
	`¥ötf
("\n");

91 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

92 i‡(
iscsi
 =
NULL
) {

93 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

97 i‡(!
d©a_loss
) {

98 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

99 
ªt
 = -2;

100 
föished
;

104 
ªt
 = 0;

106 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

107 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

108 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

110 
	`¥ötf
("Write 2 DATA-IN with DATASN == 0 ... ");

114 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

116 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

118 
ã°_cb
, &
ã°_°©e
);

119 i‡(
èsk
 =
NULL
) {

120 
	`¥ötf
("[FAILED]\n");

121 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

122 
ªt
 = -1;

123 
föished
;

125 
˛amp_d©a¢
 = 1;

126 
ã°_°©e
.
èsk
 =Åask;

127 
ã°_°©e
.
föished
 = 0;

128 
ã°_°©e
.
°©us
 = 0;

129 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

130 
˛amp_d©a¢
 = 0;

131 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

132 
	`¥ötf
("[FAILED]\n");

133 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

134 
ªt
 = -1;

135 
	`scsi_‰ì_scsi_èsk
(
èsk
);

136 
föished
;

138 
	`scsi_‰ì_scsi_èsk
(
èsk
);

139 
	`¥ötf
("[OK]\n");

143 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

144 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

145 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

147 
	`¥ötf
("Write 2 DATA-IN with DATASN == 27 ... ");

151 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

153 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

155 
ã°_cb
, &
ã°_°©e
);

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 
˛amp_d©a¢
 = 2;

163 
ã°_°©e
.
èsk
 =Åask;

164 
ã°_°©e
.
föished
 = 0;

165 
ã°_°©e
.
°©us
 = 0;

166 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

167 
˛amp_d©a¢
 = 0;

168 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

169 
	`¥ötf
("[FAILED]\n");

170 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

171 
ªt
 = -1;

172 
	`scsi_‰ì_scsi_èsk
(
èsk
);

173 
föished
;

175 
	`scsi_‰ì_scsi_èsk
(
èsk
);

176 
	`¥ötf
("[OK]\n");

180 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

181 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

182 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

184 
	`¥ötf
("Write 2 DATA-IN with DATASN == -1 ... ");

188 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

190 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

192 
ã°_cb
, &
ã°_°©e
);

193 i‡(
èsk
 =
NULL
) {

194 
	`¥ötf
("[FAILED]\n");

195 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
ªt
 = -1;

197 
föished
;

199 
˛amp_d©a¢
 = 3;

200 
ã°_°©e
.
èsk
 =Åask;

201 
ã°_°©e
.
föished
 = 0;

202 
ã°_°©e
.
°©us
 = 0;

203 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

204 
˛amp_d©a¢
 = 0;

205 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

206 
	`¥ötf
("[FAILED]\n");

207 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

208 
ªt
 = -1;

209 
	`scsi_‰ì_scsi_èsk
(
èsk
);

210 
föished
;

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
	`¥ötf
("[OK]\n");

217 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

220 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

221 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

222 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

224 
	`¥ötf
("Write 2 DATA-IN with DATASN inÑeverse order (1, 0) ... ");

228 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

230 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

232 
ã°_cb
, &
ã°_°©e
);

233 i‡(
èsk
 =
NULL
) {

234 
	`¥ötf
("[FAILED]\n");

235 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

236 
ªt
 = -1;

237 
föished
;

239 
˛amp_d©a¢
 = 4;

240 
ã°_°©e
.
èsk
 =Åask;

241 
ã°_°©e
.
föished
 = 0;

242 
ã°_°©e
.
°©us
 = 0;

243 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

244 
˛amp_d©a¢
 = 0;

245 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

246 
	`¥ötf
("[FAILED]\n");

247 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

248 
ªt
 = -1;

249 
	`scsi_‰ì_scsi_èsk
(
èsk
);

250 
föished
;

252 
	`scsi_‰ì_scsi_èsk
(
èsk
);

253 
	`¥ötf
("[OK]\n");

257 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

260 
föished
:

262 
loˇl_iscsi_queue_pdu
 = 
NULL
;

263 
	`iscsi_logout_sync
(
iscsi
);

264 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

265  
ªt
;

266 
	}
}

	@test-tool/1020_bufferoffset_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

25 
	gch™ge_buf„roff£t
;

27 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

29 
uöt32_t
 
buf„r_off£t
;

31 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

34 
buf„r_off£t
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[40]);

35 
ch™ge_buf„roff£t
) {

38 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„r_off£t
 + 1024*1024);

42 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„r_off£t
 - 
block_size
);

46 
	}
}

48 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

49 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

51 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

52 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

54 
°©e
->
föished
 = 1;

55 
°©e
->
°©us
 = status;

57 i‡(
°©us
) {

58 
èsk
->
°©us
 = status;

60 
	}
}

63 
	$T1020_buf„roff£t_övÆid
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

65 
iscsi_c⁄ãxt
 *
iscsi
;

66 
scsi_èsk
 *
èsk
;

67 
ªt
, 
lun
;

68 
d©a
[4096 * 256];

69 
iscsi_async_°©e
 
ã°_°©e
;

71 
	`¥ötf
("1020_bufferoffset_invalid:\n");

72 
	`¥ötf
("==========================\n");

73 i‡(
show_öfo
) {

74 
	`¥ötf
("Test sending commands with invalid bufferoffset values.\n");

75 
	`¥ötf
("WeÇegotiate both DataPDUInOrderánd DataSequenceInOrder so BufferOffset must be in sequence both withinándácross multiple sequences\n");

76 
	`¥ötf
("1, TestÅhat BufferOffset==1MÅoo high isánÉrror\n");

77 
	`¥ötf
("2, TestÅhat BufferOffset==-'block_size' isánÉrror\n");

78 
	`¥ötf
("\n");

82 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

83 i‡(
iscsi
 =
NULL
) {

84 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

89 i‡(!
d©a_loss
) {

90 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

91 
ªt
 = -2;

92 
föished
;

96 
ªt
 = 0;

98 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

99 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

100 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

102 
	`¥ötf
("Write 2 DATA-IN with BUFFEROFFSET 1MÅoo high ... ");

106 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

108 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

110 
ã°_cb
, &
ã°_°©e
);

111 i‡(
èsk
 =
NULL
) {

112 
	`¥ötf
("[FAILED]\n");

113 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

114 
ªt
 = -1;

115 
föished
;

117 
ch™ge_buf„roff£t
 = 1;

118 
ã°_°©e
.
èsk
 =Åask;

119 
ã°_°©e
.
föished
 = 0;

120 
ã°_°©e
.
°©us
 = 0;

121 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

122 
ch™ge_buf„roff£t
 = 0;

123 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

124 
	`¥ötf
("[FAILED]\n");

125 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

126 
ªt
 = -1;

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
föished
;

130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

131 
	`¥ötf
("[OK]\n");

135 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

136 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

137 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

139 
	`¥ötf
("Wrôê2 DATA-IN wôh BUFFEROFFSET==-%zu ... ", 
block_size
);

143 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

145 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 0, 
d©a
, 2 * 
block_size
, block_size,

147 
ã°_cb
, &
ã°_°©e
);

148 i‡(
èsk
 =
NULL
) {

149 
	`¥ötf
("[FAILED]\n");

150 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

151 
ªt
 = -1;

152 
föished
;

154 
ch™ge_buf„roff£t
 = 2;

155 
ã°_°©e
.
èsk
 =Åask;

156 
ã°_°©e
.
föished
 = 0;

157 
ã°_°©e
.
°©us
 = 0;

158 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

159 
ch™ge_buf„roff£t
 = 0;

160 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

161 
	`¥ötf
("[FAILED]\n");

162 
	`¥ötf
("WRITE10 command successful. Should have failed withÉrror\n");

163 
ªt
 = -1;

164 
	`scsi_‰ì_scsi_èsk
(
èsk
);

165 
föished
;

167 
	`scsi_‰ì_scsi_èsk
(
èsk
);

168 
	`¥ötf
("[OK]\n");

172 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 0);

173 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

174 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

176 
föished
:

177 
loˇl_iscsi_queue_pdu
 = 
NULL
;

178 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

179  
ªt
;

180 
	}
}

	@test-tool/1030_unsolicited_data_overflow.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<¨∑/öë.h
>

21 
	~"iscsi.h
"

22 
	~"iscsi-¥iv©e.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

26 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

27 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

29 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

30 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

32 
°©e
->
föished
 = 1;

33 
°©e
->
°©us
 = status;

35 i‡(
°©us
) {

36 
èsk
->
°©us
 = status;

38 
	}
}

40 
	$T1030_unsﬁicôed_d©a_ovîÊow
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
;

43 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

44 
scsi_èsk
 *
èsk
;

45 
ªt
, 
lun
;

46 *
buf
 = 
NULL
;

47 
iscsi_async_°©e
 
ã°_°©e
;

49 
	`¥ötf
("1030_unsolicited_data_overflow:\n");

50 
	`¥ötf
("===============================\n");

51 i‡(
show_öfo
) {

52 
	`¥ötf
("Test sending command with way more unsolicited dataÅhanÅheÅarget supports\n");

53 
	`¥ötf
("1, Send HUGE unsolicited dataÅoÅheÅarget.\n");

54 
	`¥ötf
("2, VerifyÅheÅarget is stillálive\n");

55 
	`¥ötf
("\n");

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

65 i‡(!
d©a_loss
) {

66 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

67 
ªt
 = -2;

68 
föished
;

72 
ªt
 = 0;

74 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

77 
iscsi
->
fú°_bur°_Àngth
 *= 16;

78 
buf
 = 
	`mÆloc
(
iscsi
->
fú°_bur°_Àngth
);

80 
	`¥ötf
("WriteÅoo much unsolicited data ... ");

84 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

87 
èsk
 = 
	`iscsi_wrôe16_èsk
(
iscsi
, 
lun
, 0, 
buf
,

88 
iscsi
->
fú°_bur°_Àngth
, 
block_size
,

90 
ã°_cb
, &
ã°_°©e
);

91 i‡(
èsk
 =
NULL
) {

92 
	`¥ötf
("[FAILED]\n");

93 
	`¥ötf
("FaûedÅÿ£nd WRITE16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

94 
ªt
 = -1;

95 
föished
;

98 
ã°_°©e
.
èsk
 =Åask;

99 
ã°_°©e
.
föished
 = 0;

100 
ã°_°©e
.
°©us
 = 0;

101 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

102 
	`¥ötf
("[OK]\n");

105 
	`¥ötf
("VerifyÅheÅarget is stillálive ... ");

106 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

107 i‡(
iscsi2
 =
NULL
) {

108 
	`¥ötf
("[FAILED]\n");

109 
	`¥ötf
("Target is dead?\n");

110 
ªt
 = -1;

111 
föished
;

113 
	`¥ötf
("[OK]\n");

115 
föished
:

116 
	`‰ì
(
buf
);

117 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

118 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

119  
ªt
;

120 
	}
}

	@test-tool/1031_unsolicited_data_out.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<¨∑/öë.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°.h
"

28 
	$my_iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_d©a
 *
d©a
,

29 *
d±r
, 
dsize
, 
pduÆignmít
)

31 
Àn
, 
Æig√d
;

32 *
buf
;

34 i‡(
dsize
 == 0) {

35 
	`¥ötf
("TryingÅoáppend zero size dataÅo iscsi_data");

39 
Àn
 = 
d©a
->
size
 + 
dsize
;

40 
Æig√d
 = 
Àn
;

41 i‡(
pduÆignmít
) {

42 
Æig√d
 = (aligned+3)&0xfffffffc;

44 
buf
 = 
	`mÆloc
(
Æig√d
);

45 i‡(
buf
 =
NULL
) {

46 
	`¥ötf
("ÁûedÅÿÆloˇã buf„∏f‹ %d byãs", 
Àn
);

50 i‡(
d©a
->
size
 > 0) {

51 
	`mem˝y
(
buf
, 
d©a
->d©a, d©a->
size
);

53 
	`mem˝y
(
buf
 + 
d©a
->
size
, 
d±r
, 
dsize
);

54 i‡(
Àn
 !
Æig√d
) {

56 
	`mem£t
(
buf
+
Àn
, 0, 
Æig√d
-len);

59 
	`‰ì
(
d©a
->data);

61 
d©a
->d©®
buf
;

62 
d©a
->
size
 = 
Àn
;

65 
	}
}

68 
	$my_iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

69 *
d±r
, 
dsize
)

71 i‡(
	`my_iscsi_add_d©a
(
iscsi
, &
pdu
->
outd©a
, 
d±r
, 
dsize
, 1) != 0) {

72 
	`¥ötf
("failedÅoádd dataÅoÖdu buffer");

77 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->outd©a.
size
 - 
ISCSI_HEADER_SIZE
);

80 
	}
}

83 
	$my_iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
)

85 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[16], 
ôt
);

86 
	}
}

89 
	$my_iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
)

91 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[28], 
exp°©¢¢
);

92 
	}
}

95 
	$my_iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
)

97 
pdu
->
outd©a
.
d©a
[1] = 
Êags
;

98 
	}
}

101 
	$my_iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
)

103 
pdu
->
outd©a
.
d©a
[8] = 
lun
 >> 8;

104 
pdu
->
outd©a
.
d©a
[9] = 
lun
 & 0xff;

105 
	}
}

107 
iscsi_pdu
 *

108 
	$my_iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

109 
iscsi_›code
 
ª•⁄£_›code
, 
uöt32_t
 
ôt
, uöt32_à
Êags
)

111 
iscsi_pdu
 *
pdu
;

113 
pdu
 = 
	`mÆloc
((
iscsi_pdu
));

114 i‡(
pdu
 =
NULL
) {

115 
	`¥ötf
("failedÅoállocateÖdu");

116  
NULL
;

118 
	`mem£t
(
pdu
, 0, (
iscsi_pdu
));

120 
pdu
->
outd©a
.
size
 = 
ISCSI_HEADER_SIZE
;

121 
pdu
->
outd©a
.
d©a
 = 
	`mÆloc
’du->outd©a.
size
);

123 i‡(
pdu
->
outd©a
.
d©a
 =
NULL
) {

124 
	`¥ötf
("failedÅoállocateÖdu header");

125 
	`‰ì
(
pdu
);

126  
NULL
;

128 
	`mem£t
(
pdu
->
outd©a
.
d©a
, 0,Ödu->outd©a.
size
);

131 
pdu
->
outd©a
.
d©a
[0] = 
›code
;

132 
pdu
->
ª•⁄£_›code
 =Ñesponse_opcode;

135 i‡(
›code
 =
ISCSI_PDU_LOGIN_REQUEST
) {

136 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[8], &
iscsi
->
isid
[0], 6);

140 
	`my_iscsi_pdu_£t_ôt
(
pdu
, 
ôt
);

141 
pdu
->
ôt
 = itt;

144 
pdu
->
Êags
 = flags;

146  
pdu
;

147 
	}
}

149 
	$T1031_unsﬁicôed_d©a_out
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

151 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
;

152 
iscsi_c⁄ãxt
 *
iscsi2
 = 
NULL
;

153 
i
, 
ªt
, 
lun
;

154 
buf
[1024];

156 
	`¥ötf
("1031_unsolicited_data_out:\n");

157 
	`¥ötf
("==========================\n");

158 i‡(
show_öfo
) {

159 
	`¥ötf
("Test sending unsolicited DATA-OUTÅhatáreÇotássociated withány SCSI-command.\n");

160 
	`¥ötf
("1, Send 100 DATA-OUT PDUs\n");

161 
	`¥ötf
("2, VerifyÅheÅarget is stillálive\n");

162 
	`¥ötf
("\n");

166 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

167 i‡(
iscsi
 =
NULL
) {

168 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

173 
ªt
 = 0;

175 
	`¥ötf
("Send unsolicited DATA-OUT PDUs ... ");

176 
i
 = 0; i < 100; i++) {

177 
iscsi_pdu
 *
pdu
;

179 
pdu
 = 
	`my_iscsi_Æloˇã_pdu_wôh_ôt_Êags
(
iscsi
, 
ISCSI_PDU_DATA_OUT
,

180 
ISCSI_PDU_NO_PDU
,

181 
i
 + 0x1000,

182 
ISCSI_PDU_DELETE_WHEN_SENT
|
ISCSI_PDU_NO_CALLBACK
);

183 i‡(
pdu
 =
NULL
) {

184 
	`¥ötf
("FailedÅoállocated PDU. Aborting\n");

185 
ªt
 = -2;

186 
föished
;

188 
	`my_iscsi_pdu_£t_pduÊags
(
pdu
, 
ISCSI_PDU_SCSI_FINAL
);

189 
	`my_iscsi_pdu_£t_lun
(
pdu
, 
lun
);

190 
	`my_iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
+1);

191 i‡(
	`my_iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, 
buf
, (buf)) != 0) {

192 
	`¥ötf
("FailedÅoádd dataÅo PDU. Aborting\n");

193 
ªt
 = -2;

194 
föished
;

196 
pdu
->
ˇŒback
 = 
NULL
;

197 
pdu
->
¥iv©e_d©a
 = 
NULL
;

198 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

199 
	`¥ötf
("FailedÅo queue PDU. Aborting\n");

200 
ªt
 = -2;

201 
föished
;

204 
	`¥ötf
("[OK]\n");

209 
	`¥ötf
("Sendá TESTUNITREADYánd flushÅx queue.\n");

210 
ªt
 = 
	`ã°unôªady
(
iscsi
, 
lun
);

211 i‡(
ªt
 != 0) {

212 
föished
;

216 
	`¥ötf
("VerifyÅheÅarget is stillálive ... ");

217 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

218 i‡(
iscsi2
 =
NULL
) {

219 
	`¥ötf
("[FAILED]\n");

220 
	`¥ötf
("Target is dead?\n");

221 
ªt
 = -1;

222 
föished
;

224 
	`¥ötf
("[OK]\n");

227 
föished
:

228 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

229 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

230  
ªt
;

231 
	}
}

	@test-tool/1040_saturate_maxcmdsn.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gnum_cmds_ö_Êight
;

28 
	$ã°_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

29 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

31 
iscsi_async_°©e
 *
°©e
 = 
¥iv©e_d©a
;

33 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

34 
°©e
->
°©us
 = status;

37 i‡(--
num_cmds_ö_Êight
 == 0) {

38 
°©e
->
föished
 = 1;

40 
	}
}

42 
	#T1040_NO_OF_WRITES
 (1024)

	)

44 
	$T1040_ßtuøã_maxcmd¢
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

46 
iscsi_c⁄ãxt
 *
iscsi
;

47 
scsi_èsk
 *
èsk
;

48 
i
, 
ªt
, 
lun
;

49 *
d©a
 = 
NULL
;

50 
iscsi_async_°©e
 
ã°_°©e
;

52 
	`¥ötf
("1040_saturate_maxcmdsn:\n");

53 
	`¥ötf
("=======================\n");

54 i‡(
show_öfo
) {

55 
	`¥ötf
("Test sending so many commands we saturate maxcmdsn we doÑecoverÉventually\n");

56 
	`¥ötf
("1, Send 1024 commands in one goánd make sure weÉventually finishÅhe queue of commands in flight\n");

57 
	`¥ötf
("\n");

61 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

62 i‡(
iscsi
 =
NULL
) {

63 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

67 i‡(
T1040_NO_OF_WRITES
*2*
iscsi
->
fú°_bur°_Àngth
 > 
block_size
 * 
num_blocks
) {

68 
	`¥ötf
("èrgë i†toÿsmÆ»f‹Åhi†ã°.áàÀa° %u byã†¨êªquúed\n",
T1040_NO_OF_WRITES
*2*
iscsi
->
fú°_bur°_Àngth
);

69 
ªt
 = -1;

70 
föished
;

74 i‡(!
d©a_loss
) {

75 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

76 
ªt
 = -2;

77 
föished
;

81 
ªt
 = 0;

86 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

88 
d©a
 = 
	`mÆloc
(2*
iscsi
->
fú°_bur°_Àngth
);

89 i‡(
d©a
 =
NULL
) {

90 
	`¥ötf
("failedÅo malloc data buffer\n");

91 
ªt
 = -1;

92 
föished
;

95 
run
=0;

98 i‡(
run
 || 
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
) {

99 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

100 
	`¥ötf
("Síd %d Wrôe†w/ ISCSI_IMMEDIATE_DATA_NOÉachÇìdögá R2T sÿth© wêßtuøãÅhêmaxcmd¢ queuê... ",
T1040_NO_OF_WRITES
);

102 
	`¥ötf
("Síd %d Wrôe†w/ ISCSI_IMMEDIATE_DATA_YESÉachÇìdögá R2T sÿth© wêßtuøãÅhêmaxcmd¢ queuê... ",
T1040_NO_OF_WRITES
);

105 
i
 = 0; i < 
T1040_NO_OF_WRITES
; i++) {

106 
num_cmds_ö_Êight
++;

107 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 2 * iscsi->
fú°_bur°_Àngth
 * 
i
 / 
block_size
, 
d©a
, 2 * iscsi->first_burst_length, block_size,

109 
ã°_cb
, &
ã°_°©e
);

110 i‡(
èsk
 =
NULL
) {

111 
	`¥ötf
("[FAILED]\n");

112 
	`¥ötf
("FaûedÅÿ£nd WRITE10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

113 
ªt
 = -1;

114 
föished
;

118 
ã°_°©e
.
èsk
 =Åask;

119 
ã°_°©e
.
föished
 = 0;

120 
ã°_°©e
.
°©us
 = 0;

121 
	`waô_u¡û_ã°_föished
(
iscsi
, &
ã°_°©e
);

122 i‡(
num_cmds_ö_Êight
 != 0) {

123 
	`¥ötf
("[FAILED]\n");

124 
	`¥ötf
("DidÇot completeáll I/O before deadline.\n");

125 
ªt
 = -1;

126 
föished
;

127 } i‡(
ã°_°©e
.
°©us
 != 0) {

128 
	`¥ötf
("[FAILED]\n");

129 
	`¥ötf
("Notáll I/O commands succeeded.\n");

130 
ªt
 = -1;

131 
föished
;

133 
	`¥ötf
("[OK]\n");

134 
run
++;

135 } 
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_YES
);

138 
föished
:

139 
	`‰ì
(
d©a
);

140 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

141  
ªt
;

142 
	}
}

	@test-tool/1041_unsolicited_immediate_data.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gpdu_was_vÆid
;

31 
	$my_queue_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

33 
pdu_was_vÆid
 = 1;

35 i‡(!(
pdu
->
outd©a
.
d©a
[1] & 0x80)) {

36 
	`¥ötf
("SCSI-Command PDU with immediate data didÇot haveÅhe F-flag set.\n");

37 
pdu_was_vÆid
 = 0;

40 i‡–(
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]Ë& 0x00ffffffË!
block_size
) {

41 
	`¥ötf
("SCSI-Command PDU didÇot have one block of immediate data.\n");

42 
pdu_was_vÆid
 = 0;

46 
	}
}

48 
	$T1041_unsﬁicôed_immedüã_d©a
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

50 
iscsi_c⁄ãxt
 *
iscsi
;

51 
scsi_èsk
 *
èsk
;

52 
ªt
, 
lun
;

53 
iscsi_uæ
 *iscsi_url;

54 
d©a
[4096];

56 
	`¥ötf
("1041_unsolicited_immediate_data:\n");

57 
	`¥ötf
("================================\n");

58 i‡(
show_öfo
) {

59 
	`¥ötf
("Test we can send unsolicited dataÅoÅheÅarget\n");

60 
	`¥ötf
("1, LoginÅoÅarget with IMMEDIATE_DATA=YESánd INITIAL_R2T=YES.\n");

61 
	`¥ötf
("2, Write one blockÅoÅheÅargetás immediate data.\n");

62 
	`¥ötf
("3, VerifyÅhatÅhe PDU sent hasÅhe F-flag set.\n");

63 
	`¥ötf
("4, VerifyÅhatÅhe PDU sent has <block-size> of immediate data.\n");

64 
	`¥ötf
("\n");

68 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

69 i‡(
iscsi
 =
NULL
) {

70 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

74 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

75 i‡(
iscsi_uæ
 =
NULL
) {

76 
	`¥ötf
("FailedÅoÖarse iscsi url\n");

81 i‡(!
d©a_loss
) {

82 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

83 
ªt
 = -2;

84 
föished
;

88 
ªt
 = 0;

94 
	`¥ötf
("LoginÅoÅarget with IMMEDIATE_DATA=YESánd INITIAL_R2T=YES ... ");

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96 
iscsi_uæ
->
iscsi
 = 
NULL
;

97 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

98 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

99 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

100 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

101 
	`iscsi_£t_immedüã_d©a
(
iscsi
, 
ISCSI_IMMEDIATE_DATA_YES
);

102 
	`iscsi_£t_öôül_r2t
(
iscsi
, 
ISCSI_INITIAL_R2T_YES
);

103 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
lun
) != 0) {

104 
	`¥ötf
("[FAILED]\n");

105 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë wôh IMMEDIATE_DATA=YESánd INITIAL_R2T=YES %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
ªt
 = -1;

107 
föished
;

109 i‡(
iscsi
->
u£_immedüã_d©a
 !
ISCSI_IMMEDIATE_DATA_YES
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("FailedÅoÇegotiate IMMEDIATE_DATA==YES withÅarget\n");

112 
ªt
 = -1;

113 
föished
;

115 i‡(
iscsi
->
u£_öôül_r2t
 !
ISCSI_INITIAL_R2T_YES
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("FailedÅoÇegotiate INITIAL_R2T==YES withÅarget\n");

118 
ªt
 = -1;

119 
föished
;

121 
	`¥ötf
("[OK]\n");

125 
	`¥ötf
("Write one blockás immediate data ... ");

126 
loˇl_iscsi_queue_pdu
 = 
my_queue_immedüã_d©a
;

127 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

128 
loˇl_iscsi_queue_pdu
 = 
NULL
;

132 i‡(
pdu_was_vÆid
 == 0) {

133 
	`¥ötf
("[FAILED]\n");

134 
	`¥ötf
("PDUÅo send was invalid.\n");

135 
ªt
 = -1;

136 
föished
;

138 i‡(
èsk
 =
NULL
) {

139 
	`¥ötf
("[FAILED]\n");

140 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
ªt
 = -1;

142 
föished
;

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

145 
	`¥ötf
("[FAILED]\n");

146 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

147 
ªt
 = -1;

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
föished
;

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
	`¥ötf
("[OK]\n");

157 
föished
:

158 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

161  
ªt
;

162 
	}
}

	@test-tool/1042_unsolicited_nonimmediate_data.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"iscsi-¥iv©e.h
"

22 
	~"scsi-lowÀvñ.h
"

23 
	~"iscsi-ã°.h
"

24 
	~<°dlib.h
>

26 
	gpdu_was_vÆid
 = 1;

31 
	$my_queue_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

34 i‡((
pdu
->
outd©a
.
d©a
[0] & 0x3fË=
ISCSI_PDU_SCSI_REQUEST
) {

35 i‡(
pdu
->
outd©a
.
d©a
[1] & 0x80) {

36 
	`¥ötf
("SCSI-Command PDU with immediate data hadÅhe F-flag set.\n");

37 
pdu_was_vÆid
 = 0;

40 i‡–
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]) & 0x00ffffff ) {

41 
	`¥ötf
("SCSI-Command PDU hadÇon-zero datasegmentsize.\n");

42 
pdu_was_vÆid
 = 0;

47 i‡((
pdu
->
outd©a
.
d©a
[0] & 0x3fË=
ISCSI_PDU_DATA_OUT
) {

48 i‡(!(
pdu
->
outd©a
.
d©a
[1] & 0x80)) {

49 
	`¥ötf
("The DATA-OUT PDU didÇot haveÅhe F-flag set.\n");

50 
pdu_was_vÆid
 = 0;

53 i‡–(
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[4]Ë& 0x00ffffffË!
block_size
) {

54 
	`¥ötf
("The DATA-OUT PDU didÇot carryá full block.\n");

55 
pdu_was_vÆid
 = 0;

62 
	}
}

64 
	$T1042_unsﬁicôed_n⁄immedüã_d©a
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

66 
iscsi_c⁄ãxt
 *
iscsi
;

67 
scsi_èsk
 *
èsk
;

68 
ªt
, 
lun
;

69 
iscsi_uæ
 *iscsi_url;

70 
d©a
[4096];

72 
	`¥ötf
("1042_unsolicited_nonimmediate_data:\n");

73 
	`¥ötf
("================================\n");

74 i‡(
show_öfo
) {

75 
	`¥ötf
("Test we can send unsolicitedÇonimmediate dataÅoÅheÅarget\n");

76 
	`¥ötf
("1, LoginÅoÅarget with IMMEDIATE_DATA=NOánd INITIAL_R2T=NO.\n");

77 
	`¥ötf
("2, Write one blockÅoÅheÅarget.\n");

78 
	`¥ötf
("3, VerifyÅhatÅhe COMMAND PDU doesÇot haveÅhe F-flag set.\n");

79 
	`¥ötf
("4, VerifyÅhatÅhe COMMAND PDU sent hasÇo immediate data.\n");

80 
	`¥ötf
("5, VerifyÅhatÅhe DATA-OUT PDU hasÅhe F-flag set.\n");

81 
	`¥ötf
("6, VerifyÅhatÅhe DATA-OUT PDU has one block of data.\n");

82 
	`¥ötf
("\n");

86 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

87 i‡(
iscsi
 =
NULL
) {

88 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

92 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

93 i‡(
iscsi_uæ
 =
NULL
) {

94 
	`¥ötf
("FailedÅoÖarse iscsi url\n");

98 i‡(!
d©a_loss
) {

99 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

100 
ªt
 = -2;

101 
föished
;

105 
ªt
 = 0;

111 
	`¥ötf
("LoginÅoÅarget with IMMEDIATE_DATA=NOánd INITIAL_R2T=NO ... ");

112 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

113 
iscsi_uæ
->
iscsi
 = 
NULL
;

114 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

115 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

116 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

117 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

118 
	`iscsi_£t_immedüã_d©a
(
iscsi
, 
ISCSI_IMMEDIATE_DATA_NO
);

119 
	`iscsi_£t_öôül_r2t
(
iscsi
, 
ISCSI_INITIAL_R2T_NO
);

120 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
lun
) != 0) {

121 
	`¥ötf
("[FAILED]\n");

122 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë wôh IMMEDIATE_DATA=NOánd INITIAL_R2T=NO %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

123 
ªt
 = -1;

124 
föished
;

126 i‡(
iscsi
->
u£_immedüã_d©a
 !
ISCSI_IMMEDIATE_DATA_NO
) {

127 
	`¥ötf
("[FAILED]\n");

128 
	`¥ötf
("FailedÅoÇegotiate IMMEDIATE_DATA==NO withÅarget\n");

129 
ªt
 = -1;

130 
föished
;

133 i‡(
iscsi
->
u£_öôül_r2t
 !
ISCSI_INITIAL_R2T_NO
) {

134 
	`¥ötf
("[SKIPPED]\n");

135 
	`¥ötf
("Target doesÇotállow INITIAL_R2T==NO. SkippingÅest\n");

136 
ªt
 = -2;

137 
föished
;

139 
	`¥ötf
("[OK]\n");

143 
	`¥ötf
("Write one blockás unsolicited data-out ... ");

144 
loˇl_iscsi_queue_pdu
 = 
my_queue_immedüã_d©a
;

145 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 0, 
d©a
, 
block_size
, block_size, 0, 0, 0, 0, 0);

146 
loˇl_iscsi_queue_pdu
 = 
NULL
;

150 i‡(
pdu_was_vÆid
 == 0) {

151 
	`¥ötf
("[FAILED]\n");

152 
	`¥ötf
("PDUÅo send was invalid.\n");

153 
ªt
 = -1;

154 
föished
;

156 i‡(
èsk
 =
NULL
) {

157 
	`¥ötf
("[FAILED]\n");

158 
	`¥ötf
("FaûedÅÿ£nd wrôe10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

159 
ªt
 = -1;

160 
föished
;

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

163 
	`¥ötf
("[FAILED]\n");

164 
	`¥ötf
("Wrôe10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

165 
ªt
 = -1;

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

167 
föished
;

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
	`¥ötf
("[OK]\n");

175 
föished
:

176 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

177 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

179  
ªt
;

180 
	}
}

	@test-tool/1100_persistent_reserve_in_read_keys_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
, 
Æ
;

30 
	`¥ötf
("1100_persistent_reserve_in_read_keys_simple:\n");

31 
	`¥ötf
("============================================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("Test basic PERSISTENT_RESERVE_IN/READ_KEYS functionality.\n");

34 
	`¥ötf
("1, VerifyÅhat READ_KEYS works.\n"),

35 
	`¥ötf
("2, VerifyÅhat DATA-IN isátÜeast 8 bytes.\n");

36 
	`¥ötf
("3, VerifyÅhat ADDITIONAL_LENGTH matches DATA-IN size.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Send PERSISTENT_RESERVE_IN/READ_KEYS ... ");

51 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

52 
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


61 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


62 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

63 
	`¥ötf
("[SKIPPED]\n");

64 
	`¥ötf
("PERSISTENT_RESERVE_IN Not Supported\n");

65 
ªt
 = -2;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
föished
;

76 
	`¥ötf
("[OK]\n");

80 
	`¥ötf
("VerifyÅhat DATA-IN isátÜeast 8 bytes ... ");

81 i‡(
èsk
->
d©aö
.
size
 < 8) {

82 
	`¥ötf
("[FAILED]\n");

83 
	`¥ötf
("DATA-INÑeturnedÜessÅhan 8 bytes\n");

84 
ªt
 = -1;

85 
	`scsi_‰ì_scsi_èsk
(
èsk
);

86 
föished
;

88 
	`¥ötf
("[OK]\n");

92 
	`¥ötf
("VerifyÅhat ADDITIONAL_LENGTH matches DATA-IN size ... ");

93 
Æ
 = 
	`scsi_gë_uöt32
(&
èsk
->
d©aö
.
d©a
[4]);

94 i‡(
Æ
 !
èsk
->
d©aö
.
size
 - 8) {

95 
	`¥ötf
("[FAILED]\n");

96 
	`¥ötf
("ADDITIONAL_LENGTH was %d bytes but %d wasÉxpected.\n",

97 
Æ
, 
èsk
->
d©aö
.
size
 - 8);

98 
ªt
 = -1;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
föished
;

102 
	`scsi_‰ì_scsi_èsk
(
èsk
);

103 
	`¥ötf
("[OK]\n");

107 
föished
:

108 
	`iscsi_logout_sync
(
iscsi
);

109 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

110  
ªt
;

111 
	}
}

	@test-tool/1110_persistent_reserve_in_serviceaction_range.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~"iscsi.h
"

21 
	~"scsi-lowÀvñ.h
"

22 
	~"iscsi-ã°.h
"

24 
	$T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

26 
iscsi_c⁄ãxt
 *
iscsi
;

27 
scsi_èsk
 *
èsk
;

28 
ªt
, 
lun
, 
i
;

30 
	`¥ötf
("1110_persistent_reserve_in_serviceaction_range:\n");

31 
	`¥ötf
("============================================\n");

32 i‡(
show_öfo
) {

33 
	`¥ötf
("TestÅheÑange for PERSISTENT_RESERVE_IN serviceáctions.\n");

34 
	`¥ötf
("1, VerifyÅhat PERSISTENT_RESERVE_IN works.\n"),

35 
	`¥ötf
("2, VerifyÅhat SERVICE ACTIONS 0 - 3 works.\n");

36 
	`¥ötf
("3, VerifyÅhat SERVICE ACTIONS > 3 fail.\n");

37 
	`¥ötf
("\n");

41 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

42 i‡(
iscsi
 =
NULL
) {

43 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

47 
ªt
 = 0;

50 
	`¥ötf
("Verify PERSISTENT_RESERVE_IN works ... ");

51 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

52 
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

54 i‡(
èsk
 =
NULL
) {

55 
	`¥ötf
("[FAILED]\n");

56 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

57 
ªt
 = -1;

58 
föished
;

60 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


61 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


62 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

63 
	`¥ötf
("[SKIPPED]\n");

64 
	`¥ötf
("PERSISTENT_RESERVE_IN Not Supported\n");

65 
ªt
 = -2;

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
föished
;

69 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

70 
	`¥ötf
("[FAILED]\n");

71 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

72 
ªt
 = -1;

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
föished
;

76 
	`scsi_‰ì_scsi_èsk
(
èsk
);

77 
	`¥ötf
("[OK]\n");

81 
	`¥ötf
("VerifyÅhat SERVICE ACTIONS 0 - 3 works ... ");

82 
i
 = 0; i < 4; i ++) {

83 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

84 
i
,

86 i‡(
èsk
 =
NULL
) {

87 
	`¥ötf
("[FAILED]\n");

88 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

89 
ªt
 = -1;

90 
föished
;

92 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

93 
	`¥ötf
("[FAILED]\n");

94 
	`¥ötf
("PERSISTENT_RESERVE_IN wôh sîvi˚a˘i⁄:%d faûed wôh sí£. %s\n", 
i
, 
	`iscsi_gë_îr‹
(
iscsi
));

95 
ªt
 = -1;

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
föished
;

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
	`¥ötf
("[OK]\n");

104 
	`¥ötf
("VerifyÅhat SERVICE ACTIONS > 3 fails ... ");

105 
i
 = 4; i < 0x20; i ++) {

106 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

107 
i
,

109 i‡(
èsk
 =
NULL
) {

110 
	`¥ötf
("[FAILED]\n");

111 
	`¥ötf
("FaûedÅÿ£nd PERSISTENT_RESERVE_IN comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

112 
ªt
 = -1;

113 
föished
;

115 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

116 
	`¥ötf
("[FAILED]\n");

117 
	`¥ötf
("PERSISTENT_RESERVE_IN comm™d suc˚ssfu»f‹ invÆid Sîvi˚A˘i⁄: %d\n", 
i
);

118 
ªt
 = -1;

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
föished
;

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

124 
	`¥ötf
("[OK]\n");

128 
föished
:

129 
	`iscsi_logout_sync
(
iscsi
);

130 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

131  
ªt
;

132 
	}
}

	@test-tool/1120_persistent_register_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

28 
	$T1120_≥rsi°ít_ªgi°î_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
;

31 
ªt
, 
lun
;

32 c⁄° 
key
 = 
	`ønd_key
();

35 
	`¥ötf
("1120_persistent_register_simple:\n");

36 
	`¥ötf
("============================================\n");

37 i‡(
show_öfo
) {

38 
	`¥ötf
("Test basic PERSISTENT_RESERVE_OUT/REGISTER functionality.\n");

39 
	`¥ötf
("1, Register witháÅarget using REGISTER_AND_IGNORE.\n");

40 
	`¥ötf
("2, Make sure READ_KEYS seesÅheÑegistration.\n");

41 
	`¥ötf
("3, Make sure we cannot REGISTERágain\n");

42 
	`¥ötf
("4, RemoveÅheÑegistration using REGISTER\n");

43 
	`¥ötf
("5, Make sure READ_KEYS showsÅheÑegistration is gone.\n");

44 
	`¥ötf
("\n");

48 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

49 i‡(
iscsi
 =
NULL
) {

50 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

54 i‡(!
d©a_loss
) {

55 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

56 
ªt
 = -2;

57 
föished
;

60 
ªt
 = 0;

63 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

64 i‡(
ªt
 != 0) {

65 
föished
;

69 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsi
, 
lun
, 
key
, 1);

70 i‡(
ªt
 != 0) {

71 
föished
;

75 
ªt
 = 
	`¥out_ªªgi°î_key_Áûs
(
iscsi
, 
lun
, 
key
+1);

76 i‡(
ªt
 != 0) {

77 
föished
;

81 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

82 i‡(
ªt
 != 0) {

83 
föished
;

88 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsi
, 
lun
, 
key
, 0);

89 i‡(
ªt
 != 0) {

90 
föished
;

93 
föished
:

94 
	`iscsi_logout_sync
(
iscsi
);

95 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

96  
ªt
;

97 
	}
}

	@test-tool/1130_persistent_reserve_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

30 
scsi_≥rsi°ít_out_ty≥
 
	g¥_ty≥s_to_ã°
[] = {

31 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

32 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

33 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

34 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

35 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

40 
	$T1130_≥rsi°ít_ª£rve_sim∂e
(c⁄° *
öôüt‹
, c⁄° *
uæ
)

42 
iscsi_c⁄ãxt
 *
iscsi
;

43 
ªt
;

44 
lun
;

45 c⁄° 
key
 = 
	`ønd_key
();

46 
i
;

48 
	`¥ötf
("1130_persistent_reserve_simple:\n");

49 
	`¥ötf
("=========================================\n");

50 i‡(
show_öfo
) {

51 
idx
 = 1;

53 
	`¥ötf
("TestÅhat we can useÉachÅype of Persistent Reservation,\n");

54 
	`¥ötf
("ándÅhat we canÑeleaseÉachÅype,ás well\n");

55 
	`¥ötf
("%d, Wêˇ¿ªgi°îá key\n", 
idx
++);

56 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

57 
	`¥ötf
("%d, C™Ñe£rvê%s\n", 
idx
++,

58 
	`scsi_¥_ty≥_°r
(
¥_ty≥s_to_ã°
[
i
]));

59 
	`¥ötf
("%d, C™ÑódÑe£rv©i⁄\n", 
idx
++);

60 
	`¥ötf
("%d, C™Ññó£Ñe£rv©i⁄\n", 
idx
++);

62 
	`¥ötf
("%d, C™ uƒegi°î\n", 
idx
++);

66 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

67 i‡(
iscsi
 =
NULL
) {

68 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

78 
ªt
 = 0;

81 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

82 i‡(
ªt
 != 0)

83 
föished
;

86 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

87 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 = 
¥_ty≥s_to_ã°
[
i
];

90 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

91 i‡(
ªt
 != 0)

92 
föished
;

95 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

96 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

97 
¥_ty≥
);

98 i‡(
ªt
 != 0)

99 
föished
;

102 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

103 i‡(
ªt
 != 0)

104 
föished
;

108 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

109 i‡(
ªt
 != 0)

110 
föished
;

112 
föished
:

114 
	`iscsi_logout_sync
(
iscsi
);

115 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

116  
ªt
;

117 
	}
}

	@test-tool/1140_persistent_reserve_access_check_ea.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1140_persistent_reserve_access_check_ea:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1141_persistent_reserve_access_check_we.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1141_≥rsi°ít_ª£rve_ac˚ss_check_we
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1141_persistent_reserve_access_check_we:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1142_persistent_reserve_access_check_earo.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1142_persistent_reserve_access_check_earo:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1143_persistent_reserve_access_check_wero.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1143_persistent_reserve_access_check_wero:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1144_persistent_reserve_access_check_eaar.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1144_persistent_reserve_access_check_eaar:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/1145_persistent_reserve_access_check_wear.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°.h
"

27 
	$T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór
(c⁄° *
öôüt‹
,

28 c⁄° *
uæ
)

30 
iscsi_c⁄ãxt
 *
iscsi
 = 
NULL
, *
iscsi2
 = NULL;

31 
ªt
;

32 
lun
, 
lun2
;

33 c⁄° 
key
 = 
	`ønd_key
();

34 c⁄° 
key2
 = 
	`ønd_key
();

35 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 =

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
;

37 c⁄° *
¥_ty≥_°r
 = 
	`scsi_¥_ty≥_°r
(
¥_ty≥
);

38 *
buf
 = 
NULL
;

41 
	`¥ötf
("1145_persistent_reserve_access_check_wear:\n");

42 
	`¥ötf
("=========================================\n");

43 i‡(
show_öfo
) {

44 
idx
 = 1;

46 
	`¥ötf
("TestÅhatáccess constrolsáre correct for %s Persistent Reservations\n",

47 
¥_ty≥_°r
);

48 
	`¥ötf
("%d, %s Reservation Holder Read Access\n",

49 
idx
++, 
¥_ty≥_°r
);

50 
	`¥ötf
("%d, %s Reservation Holder Write Access\n",

51 
idx
++, 
¥_ty≥_°r
);

52 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot haveÑeadáccess\n",

53 
idx
++, 
¥_ty≥_°r
);

54 
	`¥ötf
("%d,Çon-%s Reservation Holder doesÇot have writeáccess\n",

55 
idx
++, 
¥_ty≥_°r
);

59 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹
, 
uæ
, &
lun
);

60 i‡(
iscsi
 =
NULL
) {

61 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

62 
ªt
 = -1;

63 
föished
;

65 
iscsi2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
uæ
, &
lun2
);

66 i‡(
iscsi2
 =
NULL
) {

67 
	`¥ötf
("FailedÅoÜoginÅoÅarget (2nd initiator)\n");

68 
ªt
 = -1;

69 
föished
;

72 i‡(!
d©a_loss
) {

73 
	`¥ötf
("--dataloss flag isÇot set. SkippingÅest\n");

74 
ªt
 = -2;

75 
föished
;

79 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi
, 
lun
, 
key
);

80 i‡(
ªt
 != 0)

81 
föished
;

82 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

83 i‡(
ªt
 != 0)

84 
föished
;

87 
ªt
 = 
	`¥out_ª£rve
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

88 i‡(
ªt
 != 0)

89 
föished
;

92 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi
, 
lun
,

93 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

94 
¥_ty≥
);

95 i‡(
ªt
 != 0)

96 
föished
;

98 
buf
 = 
	`mÆloc
(512);

99 i‡(
buf
 =
NULL
) {

100 
	`¥ötf
("failedÅoállocate 512 byes of memory\n");

101 
ªt
 = -1;

102 
föished
;

106 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi
, 
lun
, 
buf
);

107 i‡(
ªt
 != 0)

108 
föished
;

111 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi
, 
lun
, 
buf
);

112 i‡(
ªt
 != 0)

113 
föished
;

116 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

117 i‡(
ªt
 != 0)

118 
föished
;

121 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

122 i‡(
ªt
 != 0)

123 
föished
;

126 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

127 i‡(
ªt
 != 0) {

128 
föished
;

132 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
buf
);

133 i‡(
ªt
 != 0)

134 
föished
;

137 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
buf
);

138 i‡(
ªt
 != 0)

139 
föished
;

142 
ªt
 = 
	`¥out_ªÀa£
(
iscsi
, 
lun
, 
key
, 
¥_ty≥
);

143 i‡(
ªt
 != 0)

144 
föished
;

147 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi
, 
lun
, 0, 
key
);

148 i‡(
ªt
 != 0)

149 
föished
;

151 
föished
:

153 i‡(
iscsi
) {

154 
	`iscsi_logout_sync
(
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

157 i‡(
iscsi2
) {

158 
	`iscsi_logout_sync
(
iscsi2
);

159 
	`iscsi_de°roy_c⁄ãxt
(
iscsi2
);

161 i‡(
buf
)

162 
	`‰ì
(
buf
);

163  
ªt
;

164 
	}
}

	@test-tool/iscsi-support.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°d¨g.h
>

28 
	~<öây≥s.h
>

29 
	~<°rög.h
>

30 
	~<pﬁl.h
>

31 
	~<‚m©ch.h
>

32 
	~"¶i°.h
"

33 
	~"iscsi.h
"

34 
	~"scsi-lowÀvñ.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"iscsi-suµ‹t.h
"

42 c⁄° *
	göôüt‹«me1
 =

44 c⁄° *
	göôüt‹«me2
 =

47 c⁄° *
	gtgt_uæ
;

49 
scsi_öquúy_°™d¨d
 *
	göq
;

50 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
	göq_lbp
;

51 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
	göq_bdc
;

52 
scsi_öquúy_block_limôs
 *
	göq_bl
;

53 
scsi_ªadˇ∑côy16
 *
	grc16
;

54 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
	grs›
;

56 
size_t
 
	gblock_size
;

57 
uöt64_t
 
	gnum_blocks
;

58 
	glbµb
;

59 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
	gdevi˚_ty≥
;

60 
	gd©a_loss
;

61 
	gÆlow_ßnôize
;

62 
	gªad⁄ly
;

63 
	gsbc3_suµ‹t
;

64 
	gmaximum_å™s„r_Àngth
;

66 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

68 
	$loggög
(
Àvñ
, c⁄° *
f‹m©
, ...)

70 
va_li°
 
≠
;

71 
mesßge
[1024];

72 
ªt
;

74 i‡(
logÀvñ
 < 
Àvñ
) {

78 i‡(
	`°∫cmp
(
LOG_BLANK_LINE
, 
f‹m©
, 
LOG_BLANK_LINE_CMP_LEN
)==0) {

79 
	`¥ötf
("\n");

83 
	`va_°¨t
(
≠
, 
f‹m©
);

84 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

85 
	`va_íd
(
≠
);

87 i‡(
ªt
 < 0) {

91 
	`¥ötf
(" %s\n", 
mesßge
);

92 
	}
}

94 
iscsi_c⁄ãxt
 *

95 
	$iscsi_c⁄ãxt_logö
(c⁄° *
öôüt‹«me
, c⁄° *
uæ
, *
lun
)

97 
iscsi_c⁄ãxt
 *
iscsi
;

98 
iscsi_uæ
 *iscsi_url;

101 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹«me
);

102 i‡(
iscsi
 =
NULL
) {

103 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

104  
NULL
;

107 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

108 i‡(
iscsi_uæ
 =
NULL
) {

109 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

110 
	`iscsi_gë_îr‹
(
iscsi
));

111 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

112  
NULL
;

116 
iscsi
->
is_loggedö
 = 1;

117 
iscsi
->
is_c⁄√˘ed
 = 1;

118 
	`iscsi_£t_èrgë«me
(
iscsi
, " ");

119 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

120 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

122 i‡(
iscsi_uæ
->
u£r
 !
NULL
) {

123 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

124 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

125 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

126 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

127  
NULL
;

131 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi->
lun
) != 0) {

132 
	`Ârötf
(
°dîr
, "iscsi-suµ‹t: Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

133 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

134 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

135  
NULL
;

137 i‡(
lun
 !
NULL
) {

138 *
lun
 = 
iscsi_uæ
->lun;

141 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

142  
iscsi
;

143 
	}
}

146 
	$waô_u¡û_ã°_föished
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_async_°©e
 *
°©e
)

148 
pﬁlfd
 
pfd
;

149 
cou¡
 = 0;

150 
ªt
;

152 
°©e
->
föished
 == 0) {

153 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

154 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

156 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

157 i‡(
ªt
 < 0) {

158 
	`¥ötf
("Poll failed");

159 
	`exô
(10);

161 i‡(
ªt
 == 0) {

162 i‡(
cou¡
++ > 5) {

163 
iscsi_pdu
 *
pdu
;

165 
°©e
->
föished
 = 1;

166 
°©e
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

167 
°©e
->
èsk
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

169 (
pdu
 = 
iscsi
->
outqueue
)) {

170 
	`SLIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

172 (
pdu
 = 
iscsi
->
waôpdu
)) {

173 
	`SLIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

179 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

180 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

184 
	}
}

187 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

189 i‡(
loˇl_iscsi_queue_pdu
 !
NULL
) {

190 
	`loˇl_iscsi_queue_pdu
(
iscsi
, 
pdu
);

192  
	`ªÆ_iscsi_queue_pdu
(
iscsi
, 
pdu
);

193 
	}
}

196 
	$‹wrôe
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

197 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

198 
dpo
, 
fua
, 
fua_nv
, 
group
,

199 *
d©a
)

201 
scsi_èsk
 *
èsk
;

203 
	`loggög
(
LOG_VERBOSE
, "Síd ORWRITE LBA:%" 
PRIu64
 " blocks:%d "

205 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

206 
dpo
, 
fua
, 
fua_nv
, 
group
);

208 i‡(!
d©a_loss
) {

209 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

213 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
,

214 
d©a
, 
d©Æí
, 
blocksize
,

215 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

216 i‡(
èsk
 =
NULL
) {

217 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

218 
	`iscsi_gë_îr‹
(
iscsi
));

221 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


222 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


223 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

228 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

229 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE command: "

230 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
	`scsi_‰ì_scsi_èsk
(
èsk
);

236 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned SUCCESS.");

238 
	}
}

241 
	$‹wrôe_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

242 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

243 
dpo
, 
fua
, 
fua_nv
, 
group
,

244 *
d©a
)

246 
scsi_èsk
 *
èsk
;

248 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting INVALID_FIELD_IN_CDB) "

249 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

251 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

252 
dpo
, 
fua
, 
fua_nv
, 
group
);

254 i‡(!
d©a_loss
) {

255 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

259 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

260 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

261 i‡(
èsk
 =
NULL
) {

262 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

263 
	`iscsi_gë_îr‹
(
iscsi
));

266 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


267 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


268 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

270 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

273 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

274 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

276 
	`scsi_‰ì_scsi_èsk
(
èsk
);

279 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


280 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


281 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

282 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

285 
	`iscsi_gë_îr‹
(
iscsi
));

286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

290 
	`scsi_‰ì_scsi_èsk
(
èsk
);

291 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

293 
	}
}

296 
	$‹wrôe_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

297 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

298 
dpo
, 
fua
, 
fua_nv
, 
group
,

299 *
d©a
)

301 
scsi_èsk
 *
èsk
;

303 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting LBA_OUT_OF_RANGE) "

304 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

306 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

307 
dpo
, 
fua
, 
fua_nv
, 
group
);

309 i‡(!
d©a_loss
) {

310 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

314 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

315 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

316 i‡(
èsk
 =
NULL
) {

317 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

318 
	`iscsi_gë_îr‹
(
iscsi
));

321 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


322 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


323 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

324 
	`scsi_‰ì_scsi_èsk
(
èsk
);

325 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

328 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

329 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

331 
	`scsi_‰ì_scsi_èsk
(
èsk
);

334 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


335 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


336 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

337 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

339 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

340 
	`scsi_‰ì_scsi_èsk
(
èsk
);

344 
	`scsi_‰ì_scsi_èsk
(
èsk
);

345 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

347 
	}
}

350 
	$‹wrôe_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

351 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

352 
dpo
, 
fua
, 
fua_nv
, 
group
,

353 *
d©a
)

355 
scsi_èsk
 *
èsk
;

357 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting WRITE_PROTECTED) "

358 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

360 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

361 
dpo
, 
fua
, 
fua_nv
, 
group
);

363 i‡(!
d©a_loss
) {

364 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

368 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

369 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

370 i‡(
èsk
 =
NULL
) {

371 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

372 
	`iscsi_gë_îr‹
(
iscsi
));

375 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


376 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


377 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

378 
	`scsi_‰ì_scsi_èsk
(
èsk
);

379 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

382 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

383 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE successful but should "

385 
	`scsi_‰ì_scsi_èsk
(
èsk
);

388 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


389 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


390 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

391 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE failed with wrong sense. "

394 
	`iscsi_gë_îr‹
(
iscsi
));

395 
	`scsi_‰ì_scsi_èsk
(
èsk
);

399 
	`scsi_‰ì_scsi_èsk
(
èsk
);

400 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

402 
	}
}

405 
	$‹wrôe_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

406 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

407 
dpo
, 
fua
, 
fua_nv
, 
group
,

408 *
d©a
)

410 
scsi_èsk
 *
èsk
;

412 
	`loggög
(
LOG_VERBOSE
, "Send ORWRITE (Expecting MEDIUM_NOT_PRESENT) "

413 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

415 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

416 
dpo
, 
fua
, 
fua_nv
, 
group
);

418 i‡(!
d©a_loss
) {

419 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

423 
èsk
 = 
	`iscsi_‹wrôe_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

424 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

425 i‡(
èsk
 =
NULL
) {

426 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send ORWRITE command: %s",

427 
	`iscsi_gë_îr‹
(
iscsi
));

430 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


431 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


432 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

433 
	`scsi_‰ì_scsi_èsk
(
èsk
);

434 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

437 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

438 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

439 
	`scsi_‰ì_scsi_èsk
(
èsk
);

442 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


443 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


444 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


445 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


446 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

447 
	`loggög
(
LOG_NORMAL
, "[FAILED] ORWRITE Should have failed "

449 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

450 
	`scsi_‰ì_scsi_èsk
(
èsk
);

454 
	`scsi_‰ì_scsi_èsk
(
èsk
);

455 
	`loggög
(
LOG_VERBOSE
, "[OK] ORWRITEÑeturned MEDIUM_NOT_PRESENT.");

457 
	}
}

460 
	$¥ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
£rvi˚_a˘i⁄
,

461 
suc˚ss_ex≥˘ed
)

463 c⁄° 
buf_sz
 = 16384;

464 
scsi_èsk
 *
èsk
;

465 
ªt
 = 0;

468 
	`loggög
(
LOG_VERBOSE
, "Síd PRIN/SA=0x%02x,Éx≥˘ %s", 
£rvi˚_a˘i⁄
,

469 
suc˚ss_ex≥˘ed
 ? "success" : "failure");

471 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

472 
£rvi˚_a˘i⁄
, 
buf_sz
);

473 i‡(
èsk
 =
NULL
) {

474 
	`loggög
(
LOG_NORMAL
,

476 
	`iscsi_gë_îr‹
(
iscsi
));

479 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


480 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


481 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

482 
	`scsi_‰ì_scsi_èsk
(
èsk
);

483 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

487 i‡(
suc˚ss_ex≥˘ed
) {

488 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

489 
	`loggög
(
LOG_NORMAL
,

491 
£rvi˚_a˘i⁄
, 
	`iscsi_gë_îr‹
(
iscsi
));

492 
ªt
 = -1;

495 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

496 
	`loggög
(
LOG_NORMAL
,

498 
£rvi˚_a˘i⁄
);

499 
ªt
 = -1;

503 
	`scsi_‰ì_scsi_èsk
(
èsk
);

504 
èsk
 = 
NULL
;

506  
ªt
;

507 
	}
}

510 
	$¥ö_ªad_keys
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
scsi_èsk
 **
ç
,

511 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 **
rkp
)

513 c⁄° 
buf_sz
 = 16384;

514 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

517 
	`loggög
(
LOG_VERBOSE
, "Send PRIN/READ_KEYS");

519 *
ç
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

520 
SCSI_PERSISTENT_RESERVE_READ_KEYS
, 
buf_sz
);

521 i‡(*
ç
 =
NULL
) {

522 
	`loggög
(
LOG_NORMAL
,

524 
	`iscsi_gë_îr‹
(
iscsi
));

527 i‡((*
ç
)->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


528 && (*
ç
)->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


529 && (*
ç
)->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

530 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

533 i‡((*
ç
)->
°©us
 !
SCSI_STATUS_GOOD
) {

534 
	`loggög
(
LOG_NORMAL
,

536 
	`iscsi_gë_îr‹
(
iscsi
));

540 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(*
ç
);

541 i‡(
rk
 =
NULL
) {

542 
	`loggög
(
LOG_NORMAL
,

544 
	`iscsi_gë_îr‹
(
iscsi
));

547 i‡(
rkp
 !
NULL
)

548 *
rkp
 = 
rk
;

551 
	}
}

554 
	$¥out_ªgi°î_™d_ign‹e
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

555 
ßrk
)

557 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

558 
scsi_èsk
 *
èsk
;

559 
ªt
 = 0;

563 
	`loggög
(
LOG_VERBOSE
,

565 
iscsi
->
öôüt‹_«me
);

567 i‡(!
d©a_loss
) {

568 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

572 
	`mem£t
(&
poc
, 0,  (poc));

573 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

574 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

575 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
,

576 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

577 i‡(
èsk
 =
NULL
) {

578 
	`loggög
(
LOG_NORMAL
,

580 
	`iscsi_gë_îr‹
(
iscsi
));

583 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

584 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

585 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

586 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PROUT Not Supported");

587 
ªt
 = -2;

588 
dun
;

590 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

591 
	`loggög
(
LOG_NORMAL
,

593 
	`iscsi_gë_îr‹
(
iscsi
));

594 
ªt
 = -1;

597 
dun
:

598 
	`scsi_‰ì_scsi_èsk
(
èsk
);

599  
ªt
;

600 
	}
}

603 
	$¥out_ªgi°î_key
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

604 
ßrk
, 
rk
)

606 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

607 
scsi_èsk
 *
èsk
;

608 
ªt
 = 0;

613 
	`loggög
(
LOG_VERBOSE
, "Send PROUT/REGISTERÅo %s init=%s",

614 
ßrk
 != 0 ? "register" : "unregister",

615 
iscsi
->
öôüt‹_«me
);

617 i‡(!
d©a_loss
) {

618 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

622 
	`mem£t
(&
poc
, 0,  (poc));

623 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

624 
poc
.
ª£rv©i⁄_key
 = 
rk
;

625 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

626 
SCSI_PERSISTENT_RESERVE_REGISTER
,

627 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

628 i‡(
èsk
 =
NULL
) {

629 
	`loggög
(
LOG_NORMAL
,

631 
	`iscsi_gë_îr‹
(
iscsi
));

634 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


635 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


636 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

637 
	`scsi_‰ì_scsi_èsk
(
èsk
);

638 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

641 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

642 
	`loggög
(
LOG_NORMAL
,

644 
	`iscsi_gë_îr‹
(
iscsi
));

645 
ªt
 = -1;

648 
	`scsi_‰ì_scsi_èsk
(
èsk
);

650  
ªt
;

651 
	}
}

654 
	$¥ö_vîify_key_¥e£n˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

655 
key
, 
¥e£¡
)

657 
scsi_èsk
 *
èsk
;

658 c⁄° 
buf_sz
 = 16384;

659 
i
;

660 
key_found
;

661 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

662 
ªt
 = 0;

665 
	`loggög
(
LOG_VERBOSE
,

667 
¥e£¡
 ? "present" : "absent",

668 
iscsi
->
öôüt‹_«me
);

670 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

671 
SCSI_PERSISTENT_RESERVE_READ_KEYS
, 
buf_sz
);

672 i‡(
èsk
 =
NULL
) {

673 
	`loggög
(
LOG_NORMAL
,

675 
	`iscsi_gë_îr‹
(
iscsi
));

678 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


679 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


680 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

681 
	`scsi_‰ì_scsi_èsk
(
èsk
);

682 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

686 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

687 
	`loggög
(
LOG_NORMAL
,

689 
	`iscsi_gë_îr‹
(
iscsi
));

690 
ªt
 = -1;

691 
dun
;

694 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

695 i‡(
rk
 =
NULL
) {

696 
	`loggög
(
LOG_NORMAL
,

698 
	`iscsi_gë_îr‹
(
iscsi
));

699 
ªt
 = -1;

700 
dun
;

703 
key_found
 = 0;

704 
i
 = 0; i < 
rk
->
num_keys
; i++) {

705 i‡(
rk
->
keys
[
i
] =
key
)

706 
key_found
 = 1;

709 i‡((
¥e£¡
 && !
key_found
) || (!present && key_found)) {

710 i‡(
¥e£¡
)

711 
	`loggög
(
LOG_NORMAL
,

714 
	`loggög
(
LOG_NORMAL
,

716 
ªt
 = -1;

719 
dun
:

720 
	`scsi_‰ì_scsi_èsk
(
èsk
);

721  
ªt
;

722 
	}
}

725 
	$¥out_ªªgi°î_key_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

726 
ßrk
)

728 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

729 
scsi_èsk
 *
èsk
;

730 
ªt
 = 0;

733 
	`loggög
(
LOG_VERBOSE
,

735 
iscsi
->
öôüt‹_«me
);

737 i‡(!
d©a_loss
) {

738 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

742 
	`mem£t
(&
poc
, 0,  (poc));

743 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

744 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

745 
SCSI_PERSISTENT_RESERVE_REGISTER
,

746 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

747 i‡(
èsk
 =
NULL
) {

748 
	`loggög
(
LOG_NORMAL
,

750 
	`iscsi_gë_îr‹
(
iscsi
));

753 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


754 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


755 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

756 
	`scsi_‰ì_scsi_èsk
(
èsk
);

757 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

761 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

762 
	`loggög
(
LOG_NORMAL
,

764 
ªt
 = -1;

767 
	`scsi_‰ì_scsi_èsk
(
èsk
);

768  
ªt
;

769 
	}
}

772 
	$¥out_ª£rve
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

773 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

775 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

776 
scsi_èsk
 *
èsk
;

777 
ªt
 = 0;

781 
	`loggög
(
LOG_VERBOSE
,

783 
¥_ty≥
, 
	`scsi_¥_ty≥_°r
(pr_type),

784 
iscsi
->
öôüt‹_«me
);

786 i‡(!
d©a_loss
) {

787 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

791 
	`mem£t
(&
poc
, 0,  (poc));

792 
poc
.
ª£rv©i⁄_key
 = 
key
;

793 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

794 
SCSI_PERSISTENT_RESERVE_RESERVE
,

795 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

796 
¥_ty≥
, &
poc
);

797 i‡(
èsk
 =
NULL
) {

798 
	`loggög
(
LOG_NORMAL
,

800 
	`iscsi_gë_îr‹
(
iscsi
));

803 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


804 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


805 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

806 
	`scsi_‰ì_scsi_èsk
(
èsk
);

807 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

811 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

812 
	`loggög
(
LOG_NORMAL
,

814 
	`iscsi_gë_îr‹
(
iscsi
));

815 
ªt
 = -1;

818 
	`scsi_‰ì_scsi_èsk
(
èsk
);

819  
ªt
;

820 
	}
}

823 
	$¥out_ªÀa£
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

824 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

826 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

827 
scsi_èsk
 *
èsk
;

828 
ªt
 = 0;

831 
	`loggög
(
LOG_VERBOSE
,

833 
¥_ty≥
, 
iscsi
->
öôüt‹_«me
);

835 i‡(!
d©a_loss
) {

836 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

840 
	`mem£t
(&
poc
, 0,  (poc));

841 
poc
.
ª£rv©i⁄_key
 = 
key
;

842 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi
, 
lun
,

843 
SCSI_PERSISTENT_RESERVE_RELEASE
,

844 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

845 
¥_ty≥
, &
poc
);

846 i‡(
èsk
 =
NULL
) {

847 
	`loggög
(
LOG_NORMAL
,

849 
	`iscsi_gë_îr‹
(
iscsi
));

852 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


853 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


854 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

855 
	`scsi_‰ì_scsi_èsk
(
èsk
);

856 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

860 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

861 
	`loggög
(
LOG_NORMAL
,

863 
	`iscsi_gë_îr‹
(
iscsi
));

864 
ªt
 = -1;

867 
	`scsi_‰ì_scsi_èsk
(
èsk
);

868  
ªt
;

869 
	}
}

872 
	$¥ö_vîify_ª£rved_as
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

873 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

875 
scsi_èsk
 *
èsk
;

876 c⁄° 
buf_sz
 = 16384;

877 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

878 
ªt
 = 0;

881 
	`loggög
(
LOG_VERBOSE
,

883 
¥_ty≥
, 
iscsi
->
öôüt‹_«me
);

885 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

886 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

887 i‡(
èsk
 =
NULL
) {

888 
	`loggög
(
LOG_NORMAL
,

890 
	`iscsi_gë_îr‹
(
iscsi
));

893 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


894 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


895 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

896 
	`scsi_‰ì_scsi_èsk
(
èsk
);

897 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

901 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

902 
	`loggög
(
LOG_NORMAL
,

904 
	`iscsi_gë_îr‹
(
iscsi
));

905 
ªt
 = -1;

906 
dun
;

908 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

909 i‡(
º
 =
NULL
) {

910 
	`loggög
(
LOG_NORMAL
,

912 
	`iscsi_gë_îr‹
(
iscsi
));

913 
ªt
 = -1;

914 
dun
;

916 i‡(!
º
->
ª£rved
) {

917 
	`loggög
(
LOG_NORMAL
,

919 
ªt
 = -1;

920 
dun
;

922 i‡(
º
->
ª£rv©i⁄_key
 !
key
) {

923 
	`loggög
(
LOG_NORMAL
,

925 
PRIu64
 ".",

926 
key
, 
º
->
ª£rv©i⁄_key
);

927 
ªt
 = -1;

928 
dun
;

930 i‡(
º
->
¥_ty≥
 !=Ör_type) {

931 
	`loggög
(
LOG_NORMAL
,

933 
¥_ty≥
, 
º
->pr_type);

935 
ªt
 = -1;

936 
dun
;

939 
dun
:

941 
	`scsi_‰ì_scsi_èsk
(
èsk
);

942  
ªt
;

943 
	}
}

946 
	$¥ö_vîify_nŸ_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

948 
scsi_èsk
 *
èsk
;

949 c⁄° 
buf_sz
 = 16384;

950 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

951 
ªt
 = 0;

954 
	`loggög
(
LOG_VERBOSE
,

956 
iscsi
->
öôüt‹_«me
);

958 
èsk
 = 
	`iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi
, 
lun
,

959 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

960 i‡(
èsk
 =
NULL
) {

961 
	`loggög
(
LOG_NORMAL
,

963 
	`iscsi_gë_îr‹
(
iscsi
));

966 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


967 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


968 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

969 
	`scsi_‰ì_scsi_èsk
(
èsk
);

970 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

974 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

975 
	`loggög
(
LOG_NORMAL
,

977 
	`iscsi_gë_îr‹
(
iscsi
));

978 
ªt
 = -1;

979 
dun
;

981 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

982 i‡(
º
 =
NULL
) {

983 
	`loggög
(
LOG_NORMAL
,

985 
	`iscsi_gë_îr‹
(
iscsi
));

986 
ªt
 = -1;

987 
dun
;

989 i‡(
º
->
ª£rved
) {

990 
	`loggög
(
LOG_NORMAL
,

992 
ªt
 = -1;

993 
dun
;

996 
dun
:

998 
	`scsi_‰ì_scsi_èsk
(
èsk
);

999  
ªt
;

1000 
	}
}

1003 
	$vîify_ªad_w‹ks
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1005 
scsi_èsk
 *
èsk
;

1006 c⁄° 
uöt32_t
 
lba
 = 1;

1007 c⁄° 
blksize
 = 512;

1008 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1009 
ªt
 = 0;

1016 
	`loggög
(
LOG_VERBOSE
, "Send READ10Åo verify READ works init=%s",

1017 
iscsi
->
öôüt‹_«me
);

1019 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blksize
,

1021 i‡(
èsk
 =
NULL
) {

1022 
	`loggög
(
LOG_NORMAL
,

1024 
	`iscsi_gë_îr‹
(
iscsi
));

1028 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1029 
	`loggög
(
LOG_NORMAL
,

1031 
	`iscsi_gë_îr‹
(
iscsi
));

1032 
ªt
 = -1;

1033 
dun
;

1035 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1037 
dun
:

1038 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1039  
ªt
;

1040 
	}
}

1043 
	$vîify_wrôe_w‹ks
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1045 
scsi_èsk
 *
èsk
;

1046 c⁄° 
uöt32_t
 
lba
 = 1;

1047 c⁄° 
blksize
 = 512;

1048 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1049 
ªt
 = 0;

1056 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10Åo verify WRITE works init=%s",

1057 
iscsi
->
öôüt‹_«me
);

1059 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
buf
, 
d©Æí
, 
blksize
,

1061 i‡(
èsk
 =
NULL
) {

1062 
	`loggög
(
LOG_NORMAL
,

1064 
	`iscsi_gë_îr‹
(
iscsi
));

1067 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1068 
	`loggög
(
LOG_NORMAL
,

1070 
	`iscsi_gë_îr‹
(
iscsi
));

1071 
ªt
 = -1;

1073 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1074  
ªt
;

1075 
	}
}

1078 
	$vîify_ªad_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1080 
scsi_èsk
 *
èsk
;

1081 c⁄° 
uöt32_t
 
lba
 = 1;

1082 c⁄° 
blksize
 = 512;

1083 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1084 
ªt
 = 0;

1091 
	`loggög
(
LOG_VERBOSE
,

1093 
iscsi
->
öôüt‹_«me
);

1095 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blksize
,

1097 i‡(
èsk
 =
NULL
) {

1098 
	`loggög
(
LOG_NORMAL
,

1100 
	`iscsi_gë_îr‹
(
iscsi
));

1104 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1105 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1106 
	`loggög
(
LOG_NORMAL
,

1108 
ªt
 = -1;

1109 
dun
;

1116 
dun
:

1117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1118  
ªt
;

1119 
	}
}

1122 
	$vîify_wrôe_Áûs
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
buf
)

1124 
scsi_èsk
 *
èsk
;

1125 c⁄° 
uöt32_t
 
lba
 = 1;

1126 c⁄° 
blksize
 = 512;

1127 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1128 
ªt
 = 0;

1135 
	`loggög
(
LOG_VERBOSE
,

1137 
iscsi
->
öôüt‹_«me
);

1139 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
buf
, 
d©Æí
, 
blksize
,

1141 i‡(
èsk
 =
NULL
) {

1142 
	`loggög
(
LOG_NORMAL
,

1144 
	`iscsi_gë_îr‹
(
iscsi
));

1148 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1149 
	`loggög
(
LOG_NORMAL
,

1151 
ªt
 = -1;

1152 
dun
;

1159 
dun
:

1160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1161  
ªt
;

1162 
	}
}

1165 
	$synchr⁄izeˇche10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1167 
scsi_èsk
 *
èsk
;

1169 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE10 LBA:%d blocks:%d"

1171 
lba
, 
num
, 
sync_nv
, 
immed
);

1173 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1174 
sync_nv
, 
immed
);

1175 i‡(
èsk
 =
NULL
) {

1176 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE10 command: %s",

1177 
	`iscsi_gë_îr‹
(
iscsi
));

1180 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1181 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1182 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1183 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE10 isÇot implemented onÅarget");

1184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1187 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1188 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE10 command: "

1189 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1195 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE10Ñeturned SUCCESS.");

1197 
	}
}

1200 
	$synchr⁄izeˇche10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1202 
scsi_èsk
 *
èsk
;

1204 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE10 (Expecting MEDIUM_NOT_PRESENT) LBA:%d blocks:%d"

1206 
lba
, 
num
, 
sync_nv
, 
immed
);

1208 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1209 
sync_nv
, 
immed
);

1210 i‡(
èsk
 =
NULL
) {

1211 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE10 command: %s",

1212 
	`iscsi_gë_îr‹
(
iscsi
));

1215 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1216 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1217 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1218 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE10 isÇot implemented onÅarget");

1219 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1222 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1223 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1227 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1228 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1229 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1230 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1231 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1232 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECAHCE10 Should have failed "

1234 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1235 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1240 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE10Ñeturned MEDIUM_NOT_PRESENT.");

1242 
	}
}

1245 
	$synchr⁄izeˇche16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1247 
scsi_èsk
 *
èsk
;

1249 
	`loggög
(
LOG_VERBOSE
, "Síd SYNCHRONIZECACHE16 LBA:%" 
PRIu64
 " blocks:%d"

1251 
lba
, 
num
, 
sync_nv
, 
immed
);

1253 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1254 
sync_nv
, 
immed
);

1255 i‡(
èsk
 =
NULL
) {

1256 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE16 command: %s",

1257 
	`iscsi_gë_îr‹
(
iscsi
));

1260 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1261 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1262 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1263 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE16 isÇot implemented onÅarget");

1264 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1267 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1268 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 command: "

1269 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1270 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1274 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1275 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE16Ñeturned SUCCESS.");

1277 
	}
}

1280 
	$synchr⁄izeˇche16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
sync_nv
, 
immed
)

1282 
scsi_èsk
 *
èsk
;

1284 
	`loggög
(
LOG_VERBOSE
, "Síd SYNCHRONIZECACHE16 (Ex≥˘ög MEDIUM_NOT_PRESENTËLBA:%" 
PRIu64
 " blocks:%d"

1286 
lba
, 
num
, 
sync_nv
, 
immed
);

1288 
èsk
 = 
	`iscsi_synchr⁄izeˇche16_sync
(
iscsi
, 
lun
, 
lba
, 
num
,

1289 
sync_nv
, 
immed
);

1290 i‡(
èsk
 =
NULL
) {

1291 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send SYNCHRONIZECAHCE16 command: %s",

1292 
	`iscsi_gë_îr‹
(
iscsi
));

1295 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1296 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1297 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1298 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECAHCE16 isÇot implemented onÅarget");

1299 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1302 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1303 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1304 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1307 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1308 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1309 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1310 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1311 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1312 
	`loggög
(
LOG_NORMAL
, "[FAILED] SYNCHRONIZECACHE16 Should have failed "

1314 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1315 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1319 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1320 
	`loggög
(
LOG_VERBOSE
, "[OK] SYNCHRONIZECAHCE16Ñeturned MEDIUM_NOT_PRESENT.");

1322 
	}
}

1324 
	$ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1326 
scsi_èsk
 *
èsk
;

1328 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE IMMED:%d AUSE:%d SA:%d "

1330 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1332 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1333 
d©a
);

1334 i‡(
èsk
 =
NULL
) {

1335 
	`loggög
(
LOG_NORMAL
,

1337 
	`iscsi_gë_îr‹
(
iscsi
));

1340 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1341 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1342 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1343 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

1345 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1348 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1349 
	`loggög
(
LOG_NORMAL
,

1351 
	`iscsi_gë_îr‹
(
iscsi
));

1352 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1355 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1356 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned SUCCESS.");

1358 
	}
}

1360 
	$ßnôize_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1362 
scsi_èsk
 *
èsk
;

1364 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting INVALID_FIELD_IN_CDB) "

1367 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1369 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1370 
d©a
);

1371 i‡(
èsk
 =
NULL
) {

1372 
	`loggög
(
LOG_NORMAL
,

1374 
	`iscsi_gë_îr‹
(
iscsi
));

1377 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1378 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1379 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1380 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

1382 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1385 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1386 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE successful but should "

1388 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1391 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1392 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1393 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

1394 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE failed with wrong "

1397 
	`iscsi_gë_îr‹
(
iscsi
));

1398 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1402 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1403 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned ILLEGAL_REQUEST/"

1406 
	}
}

1408 
	$ßnôize_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1410 
scsi_èsk
 *
èsk
;

1412 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting RESERVATION_CONFLICT) "

1415 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1417 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1418 
d©a
);

1419 i‡(
èsk
 =
NULL
) {

1420 
	`loggög
(
LOG_NORMAL
,

1422 
	`iscsi_gë_îr‹
(
iscsi
));

1425 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1426 
	`loggög
(
LOG_NORMAL
,

1428 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1432 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

1433 
	`loggög
(
LOG_NORMAL
, "[FAILED] Expected RESERVATION CONFLICT. "

1434 "Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1438 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1439 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned RESERVATION_CONFLICT.");

1441 
	}
}

1443 
	$ßnôize_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
)

1445 
scsi_èsk
 *
èsk
;

1447 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting WRITE_PROTECTED) "

1450 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1452 
èsk
 = 
	`iscsi_ßnôize_sync
(
iscsi
, 
lun
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1453 
d©a
);

1454 i‡(
èsk
 =
NULL
) {

1455 
	`loggög
(
LOG_NORMAL
,

1457 
	`iscsi_gë_îr‹
(
iscsi
));

1460 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1461 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE successful but should "

1463 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1466 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1467 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


1468 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

1469 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE failed with wrong "

1472 
	`iscsi_gë_îr‹
(
iscsi
));

1473 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1477 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1478 
	`loggög
(
LOG_VERBOSE
, "[OK] SANITIZEÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

1480 
	}
}

1482 
	$°¨t°›unô
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1484 
scsi_èsk
 *
èsk
;

1486 
	`loggög
(
LOG_VERBOSE
, "Síd STARTSTOPUNIT IMMED:%d PCM:%d PC:%d NO_FLUSH:%d LOEJ:%d START:%d", 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1487 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1488 
l€j
, 
°¨t
);

1489 i‡(
èsk
 =
NULL
) {

1490 
	`loggög
(
LOG_NORMAL
,

1492 
	`iscsi_gë_îr‹
(
iscsi
));

1495 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1496 
	`loggög
(
LOG_NORMAL
,

1498 
	`iscsi_gë_îr‹
(
iscsi
));

1499 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1502 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1503 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned SUCCESS.");

1505 
	}
}

1507 
	$°¨t°›unô_¥evíåemovÆ
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1509 
scsi_èsk
 *
èsk
;

1511 
	`loggög
(
LOG_VERBOSE
, "Send STARTSTOPUNIT (Expecting MEDIUM_REMOVAL_PREVENTED) "

1513 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1515 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1516 
l€j
, 
°¨t
);

1517 i‡(
èsk
 =
NULL
) {

1518 
	`loggög
(
LOG_NORMAL
,

1520 
	`iscsi_gë_îr‹
(
iscsi
));

1523 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1524 
	`loggög
(
LOG_NORMAL
,

1526 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1529 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1530 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1531 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
) {

1532 
	`loggög
(
LOG_NORMAL
, "[FAILED] STARTSTOPUNIT Should have failed "

1534 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1535 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1538 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1539 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned MEDIUM_REMOVAL_PREVENTED.");

1541 
	}
}

1543 
	$°¨t°›unô_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

1545 
scsi_èsk
 *
èsk
;

1547 
	`loggög
(
LOG_VERBOSE
, "Send STARTSTOPUNIT (Expecting SANITIZE_IN_PROGRESS) "

1549 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1551 
èsk
 = 
	`iscsi_°¨t°›unô_sync
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
, 
no_Êush
,

1552 
l€j
, 
°¨t
);

1553 i‡(
èsk
 =
NULL
) {

1554 
	`loggög
(
LOG_NORMAL
,

1556 
	`iscsi_gë_îr‹
(
iscsi
));

1559 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1560 
	`loggög
(
LOG_NORMAL
,

1562 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1565 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1566 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1567 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

1568 
	`loggög
(
LOG_NORMAL
, "[FAILED] STARTSTOPUNIT Should have failed "

1570 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1571 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1574 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1575 
	`loggög
(
LOG_VERBOSE
, "[OK] STARTSTOPUNITÑeturned SANITIZE_IN_PROGRESS.");

1577 
	}
}

1580 
	$ã°unôªady
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1582 
scsi_èsk
 *
èsk
;

1584 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY");

1585 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1586 i‡(
èsk
 =
NULL
) {

1587 
	`loggög
(
LOG_NORMAL
,

1589 
	`iscsi_gë_îr‹
(
iscsi
));

1592 i‡(
èsk
->
°©us
 =
SCSI_STATUS_TIMEOUT
) {

1593 
	`loggög
(
LOG_NORMAL
,

1595 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1598 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1599 
	`loggög
(
LOG_NORMAL
,

1601 
	`iscsi_gë_îr‹
(
iscsi
));

1602 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1605 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1606 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned SUCCESS.");

1608 
	}
}

1611 
	$ã°unôªady_˛ór_ua
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1613 
scsi_èsk
 *
èsk
;

1614 
ªt
 = -1;

1616 
	`loggög
(
LOG_VERBOSE
,

1618 
iscsi
->
öôüt‹_«me
);

1620 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1621 i‡(
èsk
 =
NULL
) {

1622 
	`loggög
(
LOG_NORMAL
,

1624 
	`iscsi_gë_îr‹
(
iscsi
));

1625 
out
;

1627 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1628 
	`loggög
(
LOG_NORMAL
,

1630 
	`iscsi_gë_îr‹
(
iscsi
));

1631 
out
;

1633 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADY doesÇotÑeturn unit "

1635 
ªt
 = 0;

1637 
out
:

1638 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1639  
ªt
;

1640 
	}
}

1643 
	$ã°unôªady_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1645 
scsi_èsk
 *
èsk
;

1647 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting MEDIUM_NOT_PRESENT)");

1648 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1649 i‡(
èsk
 =
NULL
) {

1650 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1651 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1654 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1655 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

1656 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1659 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1660 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1661 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1662 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1663 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1664 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY Should have failed "

1666 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1667 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1670 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1671 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned MEDIUM_NOT_PRESENT.");

1673 
	}
}

1676 
	$ã°unôªady_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1678 
scsi_èsk
 *
èsk
;

1680 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting SANITIZE_IN_PROGRESS)");

1681 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1682 i‡(
èsk
 =
NULL
) {

1683 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1684 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1687 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1688 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY command successful. But should have failed with NOT_READY/SANITIZE_IN_PROGRESS");

1689 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1692 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1693 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1694 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

1695 
	`loggög
(
LOG_NORMAL
, "[FAILED] TESTUNITREADY Should have failed "

1697 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1698 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1701 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1702 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned SANITIZE_IN_PROGRESS.");

1704 
	}
}

1707 
	$ã°unôªady_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1709 
scsi_èsk
 *
èsk
;

1711 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting RESERVATION_CONFLICT)");

1712 
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
);

1713 i‡(
èsk
 =
NULL
) {

1714 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send TESTUNITREADY "

1715 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1718 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

1719 
	`loggög
(
LOG_NORMAL
, "[FAILED] Expected RESERVATION CONFLICT");

1722 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1723 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADYÑeturned RESERVATION_CONFLICT.");

1725 
	}
}

1727 
	$com∑ª™dwrôe
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1728 *
d©a
, 
uöt32_t
 
Àn
, 
blocksize
,

1729 
wΩrŸe˘
, 
dpo
,

1730 
fua
, 
group_numbî
)

1732 
scsi_èsk
 *
èsk
;

1734 
	`loggög
(
LOG_VERBOSE
, "Síd COMPARE_AND_WRITE LBA:%" 
PRIu64


1736 
lba
, 
Àn
, 
wΩrŸe˘
);

1738 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
lba
,

1739 
d©a
, 
Àn
, 
blocksize
,

1740 
wΩrŸe˘
, 
dpo
, 
fua
, 0, 
group_numbî
);

1741 i‡(
èsk
 =
NULL
) {

1742 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send COMPARE_AND_WRITE "

1744 
	`iscsi_gë_îr‹
(
iscsi
));

1747 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1748 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1749 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1750 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] COMPARE_AND_WRITE isÇot "

1752 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1755 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1756 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE command: "

1757 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1758 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1762 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1763 
	`loggög
(
LOG_VERBOSE
, "[OK] COMPARE_AND_WRITEÑeturned SUCCESS.");

1765 
	}
}

1767 
	$com∑ª™dwrôe_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1768 
uöt64_t
 
lba
, *
d©a
,

1769 
uöt32_t
 
Àn
, 
blocksize
,

1770 
wΩrŸe˘
, 
dpo
,

1771 
fua
, 
group_numbî
)

1773 
scsi_èsk
 *
èsk
;

1775 
	`loggög
(
LOG_VERBOSE
, "Síd COMPARE_AND_WRITE LBA:%" 
PRIu64


1777 
lba
, 
Àn
, 
wΩrŸe˘
);

1779 
èsk
 = 
	`iscsi_com∑ª™dwrôe_sync
(
iscsi
, 
lun
, 
lba
,

1780 
d©a
, 
Àn
, 
blocksize
,

1781 
wΩrŸe˘
, 
dpo
, 
fua
, 0, 
group_numbî
);

1782 i‡(
èsk
 =
NULL
) {

1783 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send COMPARE_AND_WRITE "

1785 
	`iscsi_gë_îr‹
(
iscsi
));

1788 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1789 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1790 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1791 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] COMPARE_AND_WRITE isÇot "

1793 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1796 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1797 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE successful "

1799 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1803 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1804 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE


1805 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
) {

1806 
	`loggög
(
LOG_NORMAL
, "[FAILED] COMPARE_AND_WRITE failed with "

1809 "£n£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1810 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1814 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1815 
	`loggög
(
LOG_VERBOSE
, "[OK] COMPARE_AND_WRITEÑeturned MISCOMPARE.");

1817 
	}
}

1819 
scsi_èsk
 *
	$gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1821 
scsi_èsk
 *
èsk
;

1823 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS LBA:%" 
PRIu64
 "álloc_len:%d",

1824 
lba
, 
Àn
);

1826 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1827 i‡(
èsk
 =
NULL
) {

1828 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1830 
	`iscsi_gë_îr‹
(
iscsi
));

1831  
NULL
;

1833 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1834 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1835 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1836 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1838 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1839  
NULL
;

1842 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned SUCCESS.");

1843  
èsk
;

1844 
	}
}

1846 
	$gë_lba_°©us
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1848 
scsi_èsk
 *
èsk
;

1850 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS LBA:%" 
PRIu64
 "álloc_len:%d",

1851 
lba
, 
Àn
);

1853 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1854 i‡(
èsk
 =
NULL
) {

1855 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1857 
	`iscsi_gë_îr‹
(
iscsi
));

1860 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1861 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1862 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1863 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1865 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1868 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1869 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS command: "

1870 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1871 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1875 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1876 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned SUCCESS.");

1878 
	}
}

1880 
	$gë_lba_°©us_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1882 
scsi_èsk
 *
èsk
;

1884 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS (Ex≥˘ög LBA_OUT_OF_RANGEËLBA:%" 
PRIu64
 "álloc_len:%d",

1885 
lba
, 
Àn
);

1887 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1888 i‡(
èsk
 =
NULL
) {

1889 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1891 
	`iscsi_gë_îr‹
(
iscsi
));

1894 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1895 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1896 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1897 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1899 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1902 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1903 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUSÑeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

1904 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1907 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1908 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


1909 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

1910 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1911 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1915 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1916 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

1918 
	}
}

1920 
	$gë_lba_°©us_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
)

1922 
scsi_èsk
 *
èsk
;

1924 
	`loggög
(
LOG_VERBOSE
, "Send GET_LBA_STATUS (Expecting MEDIUM_NOT_PRESENT) "

1925 "LBA:%" 
PRIu64
 "álloc_len:%d",

1926 
lba
, 
Àn
);

1928 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi
, 
lun
, 
lba
, 
Àn
);

1929 i‡(
èsk
 =
NULL
) {

1930 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send GET_LBA_STATUS "

1932 
	`iscsi_gë_îr‹
(
iscsi
));

1935 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1936 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1937 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1938 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GET_LBA_STATUS isÇot "

1940 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1943 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1944 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUSÑeturned SUCCESS. Should have failed with MEDIUM_NOT_PRESENT.");

1945 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1948 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


1949 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


1950 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


1951 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


1952 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

1953 
	`loggög
(
LOG_NORMAL
, "[FAILED] GET_LBA_STATUS faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

1954 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1958 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1959 
	`loggög
(
LOG_VERBOSE
, "[OK] GET_LBA_STATUSÑeturned MEDIUM_NOT_PRESENT.");

1961 
	}
}

1964 
	$¥e„tch10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
num
, 
immed
, 
group
)

1966 
scsi_èsk
 *
èsk
;

1968 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 LBA:%d blocks:%d"

1970 
lba
, 
num
, 
immed
, 
group
);

1972 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

1973 i‡(
èsk
 =
NULL
) {

1974 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

1975 
	`iscsi_gë_îr‹
(
iscsi
));

1978 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


1979 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


1980 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

1981 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

1982 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1985 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1986 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 command: "

1987 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

1988 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1992 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1993 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned SUCCESS.");

1995 
	}
}

1998 
	$¥e„tch10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1999 
num
, 
immed
, 
group
)

2001 
scsi_èsk
 *
èsk
;

2003 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 (Expecting LBA_OUT_OF_RANGE) "

2005 
lba
, 
num
, 
immed
, 
group
);

2007 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2008 i‡(
èsk
 =
NULL
) {

2009 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

2010 
	`iscsi_gë_îr‹
(
iscsi
));

2013 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2014 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2015 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2016 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

2017 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2020 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2021 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10Ñeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2022 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2025 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2026 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2027 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2028 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2029 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2033 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2034 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2036 
	}
}

2039 
	$¥e„tch10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2040 
num
, 
immed
, 
group
)

2042 
scsi_èsk
 *
èsk
;

2044 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 (Expecting MEDIUM_NOT_PRESENT) "

2046 
lba
, 
num
, 
immed
, 
group
);

2048 
èsk
 = 
	`iscsi_¥e„tch10_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2049 i‡(
èsk
 =
NULL
) {

2050 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH10 command: %s",

2051 
	`iscsi_gë_îr‹
(
iscsi
));

2055 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2056 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2057 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2058 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented onÅarget");

2059 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2062 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2063 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10Ñeturned SUCCESS. Should have failed with NOT_READY/MEDIUM_NOT_PRESENT.");

2064 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2067 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2068 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2069 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2070 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2071 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2072 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH10 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2073 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2077 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2078 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH10Ñeturned MEDIUM_NOT_PRESENT.");

2080 
	}
}

2083 
	$¥e„tch16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
num
, 
immed
, 
group
)

2085 
scsi_èsk
 *
èsk
;

2087 
	`loggög
(
LOG_VERBOSE
, "Síd PREFETCH16 LBA:%" 
PRIu64
 " blocks:%d"

2089 
lba
, 
num
, 
immed
, 
group
);

2091 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2092 i‡(
èsk
 =
NULL
) {

2093 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2094 
	`iscsi_gë_îr‹
(
iscsi
));

2097 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2098 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2099 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2100 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2101 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2105 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 command: "

2106 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2112 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned SUCCESS.");

2114 
	}
}

2117 
	$¥e„tch16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2118 
num
, 
immed
, 
group
)

2120 
scsi_èsk
 *
èsk
;

2122 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH16 (Expecting LBA_OUT_OF_RANGE) "

2123 "LBA:%" 
PRIu64
 " blocks:%d immed:%d group:%d",

2124 
lba
, 
num
, 
immed
, 
group
);

2126 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2127 i‡(
èsk
 =
NULL
) {

2128 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2129 
	`iscsi_gë_îr‹
(
iscsi
));

2132 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2133 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2134 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2135 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2139 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2140 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16Ñeturned SUCCESS. Should have failed with ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2145 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2146 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2147 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2153 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2155 
	}
}

2158 
	$¥e„tch16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2159 
num
, 
immed
, 
group
)

2161 
scsi_èsk
 *
èsk
;

2163 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH16 (Expecting MEDIUM_NOT_PRESENT) "

2164 "LBA:%" 
PRIu64
 " blocks:%d immed:%d group:%d",

2165 
lba
, 
num
, 
immed
, 
group
);

2167 
èsk
 = 
	`iscsi_¥e„tch16_sync
(
iscsi
, 
lun
, 
lba
, 
num
, 
immed
, 
group
);

2168 i‡(
èsk
 =
NULL
) {

2169 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREFETCH16 command: %s",

2170 
	`iscsi_gë_îr‹
(
iscsi
));

2174 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2175 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2176 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2177 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented onÅarget");

2178 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2181 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2182 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16Ñeturned SUCCESS. Should have failed with NOT_READY/MEDIUM_NOT_PRESENT.");

2183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2186 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2187 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2188 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2189 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2190 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2191 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREFETCH16 faûed wôhÅhêwr⁄g sí£ code. Should havêÁûed wôh NOT_READY/MEDIUM_NOT_PRESENT buàÁûed wôh sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

2192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2196 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2197 
	`loggög
(
LOG_VERBOSE
, "[OK] PREFETCH16Ñeturned MEDIUM_NOT_PRESENT.");

2199 
	}
}

2202 
	$¥evíèŒow
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
¥evít
)

2204 
scsi_èsk
 *
èsk
;

2206 
	`loggög
(
LOG_VERBOSE
, "Síd PREVENTALLOWÖªvít:%d", 
¥evít
);

2207 
èsk
 = 
	`iscsi_¥evíèŒow_sync
(
iscsi
, 
lun
, 
¥evít
);

2208 i‡(
èsk
 =
NULL
) {

2209 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREVENTALLOW "

2210 "comm™d: %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2213 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2214 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2215 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2216 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREVENTALLOW isÇot implemented onÅarget");

2217 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2220 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2221 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREVENTALLOW command: "

2222 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2227 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2228 
	`loggög
(
LOG_VERBOSE
, "[OK] PREVENTALLOWÑeturned SUCCESS.");

2230 
	}
}

2233 
	$ªad6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2234 
uöt32_t
 
d©Æí
, 
blocksize
,

2235 *
d©a
)

2237 
scsi_èsk
 *
èsk
;

2239 
	`loggög
(
LOG_VERBOSE
, "Send READ6 LBA:%d blocks:%d",

2240 
lba
, 
d©Æí
 / 
blocksize
);

2242 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
);

2243 i‡(
èsk
 =
NULL
) {

2244 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ6 command: %s",

2245 
	`iscsi_gë_îr‹
(
iscsi
));

2248 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2249 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2250 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2251 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2252 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

2255 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2256 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 command: "

2257 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2258 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2262 i‡(
d©a
 !
NULL
) {

2263 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2267 
	`loggög
(
LOG_VERBOSE
, "[OK] READ6Ñeturned SUCCESS.");

2269 
	}
}

2272 
	$ªad6_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2273 
uöt32_t
 
d©Æí
, 
blocksize
,

2274 *
d©a
)

2276 
scsi_èsk
 *
èsk
;

2278 
	`loggög
(
LOG_VERBOSE
, "Send READ6 (Expecting LBA_OUT_OF_RANGE) "

2280 
lba
, 
d©Æí
 / 
blocksize
);

2282 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
);

2283 i‡(
èsk
 =
NULL
) {

2284 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ6 command: %s",

2285 
	`iscsi_gë_îr‹
(
iscsi
));

2288 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2289 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2290 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2292 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

2295 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2296 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 successful but should "

2298 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2301 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2302 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2303 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2304 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 failed with wrong sense. "

2306 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2307 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2311 i‡(
d©a
 !
NULL
) {

2312 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2315 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2316 
	`loggög
(
LOG_VERBOSE
, "[OK] READ6Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2318 
	}
}

2320 
scsi_èsk
*

2321 
	$ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2322 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2323 
dpo
, 
fua
, 
fua_nv
, 
group
,

2324 *
d©a
)

2326 
scsi_èsk
 *
èsk
;

2328 
	`loggög
(
LOG_VERBOSE
, "Send READ10 LBA:%d blocks:%dÑdprotect:%d "

2330 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2331 
dpo
, 
fua
, 
fua_nv
, 
group
);

2333 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2334 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2335 i‡(
èsk
 =
NULL
) {

2336 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2337 
	`iscsi_gë_îr‹
(
iscsi
));

2338  
NULL
;

2341 i‡(
d©a
 !
NULL
) {

2342 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2345 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned SUCCESS.");

2346  
èsk
;

2347 
	}
}

2350 
	$ªad10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2351 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2352 
dpo
, 
fua
, 
fua_nv
, 
group
,

2353 *
d©a
)

2355 
scsi_èsk
 *
èsk
;

2357 
	`loggög
(
LOG_VERBOSE
, "Send READ10 LBA:%d blocks:%dÑdprotect:%d "

2359 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2360 
dpo
, 
fua
, 
fua_nv
, 
group
);

2362 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2363 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2364 i‡(
èsk
 =
NULL
) {

2365 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2366 
	`iscsi_gë_îr‹
(
iscsi
));

2369 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2370 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 command: "

2371 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2372 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2376 i‡(
d©a
 !
NULL
) {

2377 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2380 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2381 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned SUCCESS.");

2383 
	}
}

2386 
	$ªad10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2387 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2388 
dpo
, 
fua
, 
fua_nv
, 
group
,

2389 *
d©a
)

2391 
scsi_èsk
 *
èsk
;

2393 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting INVALID_FIELD_IN_CDB) "

2396 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2397 
dpo
, 
fua
, 
fua_nv
, 
group
);

2399 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2400 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2401 i‡(
èsk
 =
NULL
) {

2402 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2403 
	`iscsi_gë_îr‹
(
iscsi
));

2406 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2407 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2409 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2412 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2413 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2414 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2415 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 failed with wrong sense. "

2418 
	`iscsi_gë_îr‹
(
iscsi
));

2419 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2423 i‡(
d©a
 !
NULL
) {

2424 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2427 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2428 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2430 
	}
}

2433 
	$ªad10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2434 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2435 
dpo
, 
fua
, 
fua_nv
, 
group
,

2436 *
d©a
)

2438 
scsi_èsk
 *
èsk
;

2440 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting LBA_OUT_OF_RANGE) "

2443 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2444 
dpo
, 
fua
, 
fua_nv
, 
group
);

2446 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2447 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2448 i‡(
èsk
 =
NULL
) {

2449 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2450 
	`iscsi_gë_îr‹
(
iscsi
));

2453 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2454 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2456 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2459 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2460 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2461 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2462 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 failed with wrong sense. "

2464 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2465 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2469 i‡(
d©a
 !
NULL
) {

2470 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2473 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2474 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2476 
	}
}

2479 
	$ªad10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2480 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2481 
dpo
, 
fua
, 
fua_nv
, 
group
,

2482 *
d©a
)

2484 
scsi_èsk
 *
èsk
;

2486 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting MEDIUM_NOT_PRESENT) "

2489 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2490 
dpo
, 
fua
, 
fua_nv
, 
group
);

2492 
èsk
 = 
	`iscsi_ªad10_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2493 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2494 i‡(
èsk
 =
NULL
) {

2495 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ10 command: %s",

2496 
	`iscsi_gë_îr‹
(
iscsi
));

2499 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2500 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 successful but should "

2502 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2505 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2506 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2507 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2508 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2509 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2510 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ10 Should have failed "

2512 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2513 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2517 i‡(
d©a
 !
NULL
) {

2518 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2521 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2522 
	`loggög
(
LOG_VERBOSE
, "[OK] READ10Ñeturned MEDIUM_NOT_PRESENT.");

2524 
	}
}

2527 
	$ªad12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2528 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2529 
dpo
, 
fua
, 
fua_nv
, 
group
,

2530 *
d©a
)

2532 
scsi_èsk
 *
èsk
;

2534 
	`loggög
(
LOG_VERBOSE
, "Send READ12 LBA:%d blocks:%dÑdprotect:%d "

2536 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2537 
dpo
, 
fua
, 
fua_nv
, 
group
);

2539 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2540 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2541 i‡(
èsk
 =
NULL
) {

2542 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2543 
	`iscsi_gë_îr‹
(
iscsi
));

2546 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2547 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2548 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2549 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2550 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2553 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2554 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 command: "

2555 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2556 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2560 i‡(
d©a
 !
NULL
) {

2561 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2564 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2565 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned SUCCESS.");

2567 
	}
}

2570 
	$ªad12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2571 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2572 
dpo
, 
fua
, 
fua_nv
, 
group
,

2573 *
d©a
)

2575 
scsi_èsk
 *
èsk
;

2577 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting INVALID_FIELD_IN_CDB) "

2580 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2581 
dpo
, 
fua
, 
fua_nv
, 
group
);

2583 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2584 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2585 i‡(
èsk
 =
NULL
) {

2586 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2587 
	`iscsi_gë_îr‹
(
iscsi
));

2590 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2591 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2592 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2593 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2594 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2597 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2598 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2600 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2603 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2604 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2605 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2606 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 failed with wrong sense. "

2609 
	`iscsi_gë_îr‹
(
iscsi
));

2610 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2614 i‡(
d©a
 !
NULL
) {

2615 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2618 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2619 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2621 
	}
}

2624 
	$ªad12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2625 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2626 
dpo
, 
fua
, 
fua_nv
, 
group
,

2627 *
d©a
)

2629 
scsi_èsk
 *
èsk
;

2631 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting LBA_OUT_OF_RANGE) "

2634 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2635 
dpo
, 
fua
, 
fua_nv
, 
group
);

2637 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2638 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2639 i‡(
èsk
 =
NULL
) {

2640 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2641 
	`iscsi_gë_îr‹
(
iscsi
));

2644 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2645 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2646 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2647 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2648 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2651 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2652 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2654 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2657 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2658 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2659 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2660 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 failed with wrong sense. "

2662 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2663 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2667 i‡(
d©a
 !
NULL
) {

2668 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2671 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2672 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2674 
	}
}

2677 
	$ªad12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2678 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2679 
dpo
, 
fua
, 
fua_nv
, 
group
,

2680 *
d©a
)

2682 
scsi_èsk
 *
èsk
;

2684 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting MEDIUM_NOT_PRESENT) "

2687 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2688 
dpo
, 
fua
, 
fua_nv
, 
group
);

2690 
èsk
 = 
	`iscsi_ªad12_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2691 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2692 i‡(
èsk
 =
NULL
) {

2693 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ12 command: %s",

2694 
	`iscsi_gë_îr‹
(
iscsi
));

2697 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2698 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2699 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2700 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2701 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

2704 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2705 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 successful but should "

2707 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2710 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2711 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2712 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2713 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2714 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2715 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ12 Should have failed "

2717 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2718 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2722 i‡(
d©a
 !
NULL
) {

2723 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2726 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2727 
	`loggög
(
LOG_VERBOSE
, "[OK] READ12Ñeturned MEDIUM_NOT_PRESENT*.");

2729 
	}
}

2732 
	$ªad16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2733 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2734 
dpo
, 
fua
, 
fua_nv
, 
group
,

2735 *
d©a
)

2737 
scsi_èsk
 *
èsk
;

2739 
	`loggög
(
LOG_VERBOSE
, "Síd READ16 LBA:%" 
PRId64
 " blocks:%d "

2741 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2742 
dpo
, 
fua
, 
fua_nv
, 
group
);

2744 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2745 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2746 i‡(
èsk
 =
NULL
) {

2747 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2748 
	`iscsi_gë_îr‹
(
iscsi
));

2751 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2752 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2753 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2754 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2755 i‡(
sbc3_suµ‹t
) {

2756 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2759 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2763 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

2764 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 command: "

2765 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2766 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2770 i‡(
d©a
 !
NULL
) {

2771 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2774 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2775 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned SUCCESS.");

2777 
	}
}

2780 
	$ªad16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2781 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2782 
dpo
, 
fua
, 
fua_nv
, 
group
,

2783 *
d©a
)

2785 
scsi_èsk
 *
èsk
;

2787 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting INVALID_FIELD_IN_CDB) "

2788 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2790 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2791 
dpo
, 
fua
, 
fua_nv
, 
group
);

2793 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2794 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2795 i‡(
èsk
 =
NULL
) {

2796 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2797 
	`iscsi_gë_îr‹
(
iscsi
));

2800 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2801 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2802 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2803 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2804 i‡(
sbc3_suµ‹t
) {

2805 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2808 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2812 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2813 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2815 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2818 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2819 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2820 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

2821 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 failed with wrong sense. "

2824 
	`iscsi_gë_îr‹
(
iscsi
));

2825 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2829 i‡(
d©a
 !
NULL
) {

2830 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2833 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2834 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

2836 
	}
}

2839 
	$ªad16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2840 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2841 
dpo
, 
fua
, 
fua_nv
, 
group
,

2842 *
d©a
)

2844 
scsi_èsk
 *
èsk
;

2846 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting LBA_OUT_OF_RANGE) "

2847 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2849 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2850 
dpo
, 
fua
, 
fua_nv
, 
group
);

2852 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2853 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2854 i‡(
èsk
 =
NULL
) {

2855 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2856 
	`iscsi_gë_îr‹
(
iscsi
));

2859 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2860 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2861 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2862 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2863 i‡(
sbc3_suµ‹t
) {

2864 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2867 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2871 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2872 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2874 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2877 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2878 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


2879 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

2880 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 failed with wrong sense. "

2882 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

2883 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2887 i‡(
d©a
 !
NULL
) {

2888 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2891 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2892 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

2894 
	}
}

2897 
	$ªad16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2898 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2899 
dpo
, 
fua
, 
fua_nv
, 
group
,

2900 *
d©a
)

2902 
scsi_èsk
 *
èsk
;

2904 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting MEDIUM_NOT_PRESENT) "

2905 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2907 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2908 
dpo
, 
fua
, 
fua_nv
, 
group
);

2910 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2911 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2912 i‡(
èsk
 =
NULL
) {

2913 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2914 
	`iscsi_gë_îr‹
(
iscsi
));

2917 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2918 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


2919 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

2920 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2921 i‡(
sbc3_suµ‹t
) {

2922 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 isÇotávailable butÅhe device claims SBC-3 support.");

2925 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implementedánd SBC-3 isÇot claimed.");

2929 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2930 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2932 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2935 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2936 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2937 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


2938 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


2939 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

2940 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 Should have failed "

2942 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2943 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2947 i‡(
d©a
 !
NULL
) {

2948 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2951 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2952 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned MEDIUM_NOT_PRESENT.");

2954 
	}
}

2957 
	$ªad16_ßnôize
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2958 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

2959 
dpo
, 
fua
, 
fua_nv
, 
group
,

2960 *
d©a
)

2962 
scsi_èsk
 *
èsk
;

2964 
	`loggög
(
LOG_VERBOSE
, "Send READ16 (Expecting SANITIZE_IN_PROGRESS) "

2965 "LBA:%" 
PRId64
 " blocks:%dÑdprotect:%d "

2967 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

2968 
dpo
, 
fua
, 
fua_nv
, 
group
);

2970 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

2971 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

2972 i‡(
èsk
 =
NULL
) {

2973 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READ16 command: %s",

2974 
	`iscsi_gë_îr‹
(
iscsi
));

2977 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

2978 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 successful but should "

2980 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2983 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


2984 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


2985 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

2986 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ16 Should have failed "

2988 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

2989 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2993 i‡(
d©a
 !
NULL
) {

2994 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

2997 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2998 
	`loggög
(
LOG_VERBOSE
, "[OK] READ16Ñeturned SANITIZE_IN_PROGRESS");

3000 
	}
}

3003 
	$ªadˇ∑côy10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
pmi
)

3005 
scsi_èsk
 *
èsk
;

3007 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY10 LBA:%dÖmi:%d",

3008 
lba
, 
pmi
);

3010 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 
lba
, 
pmi
);

3011 i‡(
èsk
 =
NULL
) {

3012 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY10 command: %s",

3013 
	`iscsi_gë_îr‹
(
iscsi
));

3016 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3017 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 command: "

3018 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3019 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3023 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3024 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY10Ñeturned SUCCESS.");

3026 
	}
}

3029 
	$ªadˇ∑côy10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, 
pmi
)

3031 
scsi_èsk
 *
èsk
;

3033 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY10 (Expecting MEDIUM_NOT_PRESENT) "

3035 
lba
, 
pmi
);

3037 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 
lba
, 
pmi
);

3038 i‡(
èsk
 =
NULL
) {

3039 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY10 command: %s",

3040 
	`iscsi_gë_îr‹
(
iscsi
));

3043 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3044 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3045 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3048 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3049 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3050 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3051 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3052 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3053 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY10 Should have failed "

3055 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3056 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3060 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3061 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY10Ñeturned MEDIUM_NOT_PRESENT.");

3063 
	}
}

3066 
	$ªadˇ∑côy16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
Æloc_Àn
)

3068 
scsi_èsk
 *
èsk
;

3071 
	`loggög
(
LOG_VERBOSE
, "Síd READCAPACITY16áŒoc_Àn:%d", 
Æloc_Àn
);

3073 
èsk
 = 
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 
Æloc_Àn
);

3074 i‡(
èsk
 =
NULL
) {

3075 
	`loggög
(
LOG_NORMAL
, "Out-of-memory: FailedÅo create "

3079 
èsk
 = 
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
,Åask, 
NULL
);

3080 i‡(
èsk
 =
NULL
) {

3081 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3082 
	`iscsi_gë_îr‹
(
iscsi
));

3085 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3086 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3087 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3088 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3089 i‡(
öq
->
¥Ÿe˘
) {

3090 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇot "

3096 i‡(
sbc3_suµ‹t
) {

3097 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

3100 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implementedánd SBC-3 isÇot claimed.");

3104 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3105 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 command: "

3106 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3112 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY16Ñeturned SUCCESS.");

3114 
	}
}

3117 
	$ªadˇ∑côy16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
Æloc_Àn
)

3119 
scsi_èsk
 *
èsk
;

3121 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY16 (Expecting MEDIUM_NOT_PRESENT) "

3122 "Æloc_Àn:%d", 
Æloc_Àn
);

3124 
èsk
 = 
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 
Æloc_Àn
);

3125 i‡(
èsk
 =
NULL
) {

3126 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3127 
	`iscsi_gë_îr‹
(
iscsi
));

3130 
èsk
 = 
	`iscsi_scsi_comm™d_sync
(
iscsi
, 
lun
,Åask, 
NULL
);

3131 i‡(
èsk
 =
NULL
) {

3132 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send READCAPACITY16 command: %s",

3133 
	`iscsi_gë_îr‹
(
iscsi
));

3136 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3137 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3138 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3139 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3140 i‡(
sbc3_suµ‹t
) {

3141 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

3144 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implementedánd SBC-3 isÇot claimed.");

3148 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3149 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3153 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3154 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3155 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3156 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3157 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3158 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 Should have failed "

3160 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3161 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3166 
	`loggög
(
LOG_VERBOSE
, "[OK] READCAPACITY16Ñeturned MEDIUM_NOT_PRESENT.");

3168 
	}
}

3171 
	$ªÀa£6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3173 
scsi_èsk
 *
èsk
;

3174 
i
, 
ªs
 = 0;

3176 
	`loggög
(
LOG_VERBOSE
, "Send RELEASE6");

3178 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3179 
èsk
 = 
	`iscsi_ªÀa£6_sync
(
iscsi
, 
lun
);

3180 i‡(
èsk
 =
NULL
) {

3181 
	`loggög
(
LOG_NORMAL
,

3183 
	`iscsi_gë_îr‹
(
iscsi
));

3184 
ªs
 = -1;

3187 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

3188 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3189 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3190 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3191 
	`loggög
(
LOG_NORMAL
, "[FAILED] RELEASE6 command: "

3193 
	`iscsi_gë_îr‹
(
iscsi
));

3194 
ªs
 = -1;

3196 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3199 i‡(
ªs
 == 0)

3200 
	`loggög
(
LOG_VERBOSE
, "[OK] RELEASE6Ñeturned SUCCESS.");

3201  
ªs
;

3202 
	}
}

3204 
	$ªp‹t_suµ‹ãd_›codes
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_èsk
 **
ßve_èsk
)

3206 
scsi_èsk
 *
èsk
;

3208 
	`loggög
(
LOG_VERBOSE
, "Send REPORT_SUPPORTED_OPCODE RCTD:%d OPTIONS:%d "

3210 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3212 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

3213 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3214 i‡(
èsk
 =
NULL
) {

3215 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send "

3217 
	`iscsi_gë_îr‹
(
iscsi
));

3220 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3221 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3222 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3223 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] REPORT_SUPPORTED_OPCODES isÇot "

3225 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3228 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3229 
	`loggög
(
LOG_NORMAL
, "[FAILED] REPORT_SUPPORTED_OPCODES "

3231 
	`iscsi_gë_îr‹
(
iscsi
));

3232 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3236 i‡(
ßve_èsk
 !
NULL
) {

3237 *
ßve_èsk
 = 
èsk
;

3239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3242 
	`loggög
(
LOG_VERBOSE
, "[OK] REPORT_SUPPORTED_OPCODESÑeturned SUCCESS.");

3244 
	}
}

3246 
	$ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_èsk
 **
ßve_èsk
)

3248 
scsi_èsk
 *
èsk
;

3250 
	`loggög
(
LOG_VERBOSE
, "Send REPORT_SUPPORTED_OPCODE (expecting INVALID_FIELD_IN_CDB) RCTD:%d OPTIONS:%d "

3252 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3254 
èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi
, 
lun
,

3255 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

3256 i‡(
èsk
 =
NULL
) {

3257 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send "

3259 
	`iscsi_gë_îr‹
(
iscsi
));

3262 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3263 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3264 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3265 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] REPORT_SUPPORTED_OPCODES isÇot "

3267 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3270 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3271 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3272 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3273 
	`loggög
(
LOG_NORMAL
, "[FAILED] REPORT_SUPPORTED_OPCODES should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3274 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3278 i‡(
ßve_èsk
 !
NULL
) {

3279 *
ßve_èsk
 = 
èsk
;

3281 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3284 
	`loggög
(
LOG_VERBOSE
, "[OK] REPORT_SUPPORTED_OPCODESÑeturned "

3287 
	}
}

3290 
	$ª£rve6
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3292 
scsi_èsk
 *
èsk
;

3293 
i
, 
ªs
 = 0;

3295 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6");

3297 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3298 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

3299 i‡(
èsk
 =
NULL
) {

3300 
	`loggög
(
LOG_NORMAL
,

3302 
	`iscsi_gë_îr‹
(
iscsi
));

3303 
ªs
 = -1;

3306 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3307 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3308 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3309 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot "

3311 
ªs
 = -2;

3312 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

3313 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3314 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3315 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3316 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

3318 
	`iscsi_gë_îr‹
(
iscsi
));

3319 
ªs
 = -1;

3321 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3324 i‡(
ªs
 == 0)

3325 
	`loggög
(
LOG_VERBOSE
, "[OK] RESERVE6Ñeturned SUCCESS.");

3326  
ªs
;

3327 
	}
}

3330 
	$ª£rve6_c⁄Êi˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

3332 
scsi_èsk
 *
èsk
;

3333 
i
, 
ªs
 = 0;

3335 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6 (Expecting RESERVATION_CONFLICT)");

3337 
i
 = 0; i < 3 && 
ªs
 == 0; ++i) {

3338 
èsk
 = 
	`iscsi_ª£rve6_sync
(
iscsi
, 
lun
);

3339 i‡(
èsk
 =
NULL
) {

3340 
	`loggög
(
LOG_NORMAL
,

3342 
	`iscsi_gë_îr‹
(
iscsi
));

3343 
ªs
 = -1;

3346 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3347 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3348 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3349 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot"

3351 
ªs
 = -2;

3352 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
 &&

3353 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3354 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


3355 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

3356 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

3358 
ªs
 = -1;

3360 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3363 i‡(
ªs
 == 0)

3364 
	`loggög
(
LOG_VERBOSE
,

3366  
ªs
;

3367 
	}
}

3370 
	$unm≠
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3372 
scsi_èsk
 *
èsk
;

3374 
	`loggög
(
LOG_VERBOSE
, "Síd UNMAPÜi°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3375 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3376 i‡(
èsk
 =
NULL
) {

3377 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3378 
	`iscsi_gë_îr‹
(
iscsi
));

3381 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3382 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3383 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3384 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3385 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3388 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3389 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3390 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3394 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3395 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned SUCCESS.");

3397 
	}
}

3400 
	$unm≠_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3402 
scsi_èsk
 *
èsk
;

3404 
	`loggög
(
LOG_VERBOSE
, "Send UNMAP (Expecting WRITE_PROTECTED) "

3405 "li°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3407 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3408 i‡(
èsk
 =
NULL
) {

3409 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3410 
	`iscsi_gë_îr‹
(
iscsi
));

3413 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3414 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3415 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3416 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3417 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3420 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3421 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP successful but should "

3423 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3426 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3427 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


3428 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

3429 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP failed with wrong sense. "

3432 
	`iscsi_gë_îr‹
(
iscsi
));

3433 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3437 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3438 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned DATA_PROTECTION/WRITE_PROTECTED.");

3440 
	}
}

3443 
	$unm≠_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
)

3445 
scsi_èsk
 *
èsk
;

3447 
	`loggög
(
LOG_VERBOSE
, "Send UNMAP (Expecting MEDIUM_NOT_PRESENT) "

3448 "li°_Àn:%dánch‹:%d", 
li°_Àn
, 
™ch‹
);

3450 
èsk
 = 
	`iscsi_unm≠_sync
(
iscsi
, 
lun
, 
™ch‹
, 0, 
li°
, 
li°_Àn
);

3451 i‡(
èsk
 =
NULL
) {

3452 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send UNMAP command: %s",

3453 
	`iscsi_gë_îr‹
(
iscsi
));

3456 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3457 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3458 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3459 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP isÇot implemented onÅarget");

3460 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3463 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3464 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP successful but should "

3466 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3469 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3470 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3471 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3472 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3473 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3474 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP Should have failed "

3476 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3477 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3481 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3482 
	`loggög
(
LOG_VERBOSE
, "[OK] UNMAPÑeturned MEDIUM_NOT_PRESENT.");

3484 
	}
}

3487 
	$vîify10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3489 
scsi_èsk
 *
èsk
;

3491 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY10 LBA:%d blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3492 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3493 i‡(
èsk
 =
NULL
) {

3494 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3495 
	`iscsi_gë_îr‹
(
iscsi
));

3498 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3499 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3500 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3501 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3502 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3505 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3506 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3507 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3511 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3512 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned SUCCESS.");

3514 
	}
}

3517 
	$vîify10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3519 
scsi_èsk
 *
èsk
;

3521 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting MEDIUM_NOT_PRESENT) "

3523 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3525 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3526 i‡(
èsk
 =
NULL
) {

3527 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3528 
	`iscsi_gë_îr‹
(
iscsi
));

3531 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3532 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3533 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3534 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3535 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3538 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3539 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3540 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3543 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3544 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3545 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3546 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3547 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3548 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3549 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3553 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3554 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned MEDIUM_NOT_PRESENT.");

3556 
	}
}

3559 
	$vîify10_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3561 
scsi_èsk
 *
èsk
;

3563 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting MISCOMPARE) "

3565 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3567 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3568 i‡(
èsk
 =
NULL
) {

3569 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3570 
	`iscsi_gë_îr‹
(
iscsi
));

3573 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3574 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3575 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3576 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3577 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3580 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3581 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with MISCOMPARE");

3582 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3585 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3586 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3587 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3591 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3592 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned MISCOMPARE.");

3594 
	}
}

3597 
	$vîify10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3599 
scsi_èsk
 *
èsk
;

3601 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting LBA_OUT_OF_RANGE) "

3603 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3605 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3606 i‡(
èsk
 =
NULL
) {

3607 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3608 
	`iscsi_gë_îr‹
(
iscsi
));

3611 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3612 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3613 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3614 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3615 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3618 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3619 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with LBA_OUT_OF_RANGE");

3620 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3623 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3624 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3625 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

3626 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3627 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3631 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3632 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned LBA_OUT_OF_RANGE.");

3634 
	}
}

3637 
	$vîify10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3639 
scsi_èsk
 *
èsk
;

3641 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting INVALID_FIELD_IN_CDB) "

3643 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3645 
èsk
 = 
	`iscsi_vîify10_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3646 i‡(
èsk
 =
NULL
) {

3647 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY10 command: %s",

3648 
	`iscsi_gë_îr‹
(
iscsi
));

3651 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3652 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3653 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3654 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented onÅarget");

3655 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3658 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3659 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 successful but should have failed with LBA_OUT_OF_RANGE");

3660 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3663 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3664 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3665 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3666 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY10 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3667 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3671 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3672 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY10Ñeturned INVALID_FIELD_IN_CDB.");

3674 
	}
}

3677 
	$vîify12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3679 
scsi_èsk
 *
èsk
;

3681 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY12 LBA:%d blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3682 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3683 i‡(
èsk
 =
NULL
) {

3684 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3685 
	`iscsi_gë_îr‹
(
iscsi
));

3688 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3689 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3690 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3691 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3692 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3695 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3696 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3697 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3701 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3702 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned SUCCESS.");

3704 
	}
}

3707 
	$vîify12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3709 
scsi_èsk
 *
èsk
;

3711 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting MEDIUM_NOT_PRESENT) "

3713 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3715 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3716 i‡(
èsk
 =
NULL
) {

3717 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3718 
	`iscsi_gë_îr‹
(
iscsi
));

3721 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3722 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3723 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3724 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3725 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3728 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3729 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3730 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3733 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3734 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3735 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3736 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3737 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3738 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3739 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3743 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3744 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned MEDIUM_NOT_PRESENT.");

3746 
	}
}

3749 
	$vîify12_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3751 
scsi_èsk
 *
èsk
;

3753 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (expecting MISCOMPARE) "

3755 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3757 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3758 i‡(
èsk
 =
NULL
) {

3759 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3760 
	`iscsi_gë_îr‹
(
iscsi
));

3763 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3764 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3765 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3766 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3767 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3770 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3771 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with MISCOMPARE");

3772 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3775 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3776 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3777 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3781 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3782 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned MISCOMPARE.");

3784 
	}
}

3787 
	$vîify12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3789 
scsi_èsk
 *
èsk
;

3791 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting LBA_OUT_OF_RANGE) "

3793 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3795 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3796 i‡(
èsk
 =
NULL
) {

3797 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3798 
	`iscsi_gë_îr‹
(
iscsi
));

3801 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3802 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3803 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3804 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3805 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3808 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3809 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with LBA_OUT_OF_RANGE");

3810 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3813 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3814 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3815 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

3816 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3817 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3821 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3822 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned LBA_OUT_OF_RANGE.");

3824 
	}
}

3827 
	$vîify12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3829 
scsi_èsk
 *
èsk
;

3831 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting INVALID_FIELD_IN_CDB) "

3833 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3835 
èsk
 = 
	`iscsi_vîify12_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3836 i‡(
èsk
 =
NULL
) {

3837 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY12 command: %s",

3838 
	`iscsi_gë_îr‹
(
iscsi
));

3841 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3842 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3843 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3844 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented onÅarget");

3845 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3848 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3849 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 successful but should have failed with LBA_OUT_OF_RANGE");

3850 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3853 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3854 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


3855 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

3856 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY12 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

3857 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3861 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3862 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY12Ñeturned INVALID_FIELD_IN_CDB.");

3864 
	}
}

3867 
	$vîify16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3869 
scsi_èsk
 *
èsk
;

3871 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY16 LBA:%" 
PRIu64
 " blocks:%d v¥Ÿe˘:%d dpo:%d bytchk:%d", 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3872 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3873 i‡(
èsk
 =
NULL
) {

3874 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3875 
	`iscsi_gë_îr‹
(
iscsi
));

3878 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3879 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3880 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3881 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3882 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3885 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

3886 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 comm™d: faûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3887 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3891 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3892 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned SUCCESS.");

3894 
	}
}

3897 
	$vîify16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3899 
scsi_èsk
 *
èsk
;

3901 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting MEDIUM_NOT_PRESENT) "

3902 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3903 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3905 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3906 i‡(
èsk
 =
NULL
) {

3907 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3908 
	`iscsi_gë_îr‹
(
iscsi
));

3911 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3912 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3913 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3914 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3915 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3918 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3919 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

3920 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3923 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


3924 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


3925 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


3926 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


3927 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

3928 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16á·îÉje˘ faûed wôhÅhêwr⁄g sí£ code. Should faû wôh NOT_READY/MEDIUM_NOT_PRESENT* buàÁûed wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

3929 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3933 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3934 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned NOT_MEDIUM_NOT_PRESENT.");

3936 
	}
}

3939 
	$vîify16_miscom∑ª
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3941 
scsi_èsk
 *
èsk
;

3943 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting MISCOMPARE) "

3944 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3945 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3947 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3948 i‡(
èsk
 =
NULL
) {

3949 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3950 
	`iscsi_gë_îr‹
(
iscsi
));

3953 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3954 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3955 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3956 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3957 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3960 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3961 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with MISCOMPARE");

3962 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3965 i‡(
èsk
->
£n£
.
key
 !
SCSI_SENSE_MISCOMPARE
) {

3966 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 comm™dÑëu∫ed wr⁄g sí£ key. MISCOMPARE MISCOMPARE 0x%xÉx≥˘ed buàgŸ key 0x%x. Sí£:%s", 
SCSI_SENSE_MISCOMPARE
, 
èsk
->
£n£
.
key
, 
	`iscsi_gë_îr‹
(
iscsi
));

3967 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3971 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3972 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned MISCOMPARE.");

3974 
	}
}

3977 
	$vîify16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

3979 
scsi_èsk
 *
èsk
;

3981 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting LBA_OUT_OF_RANGE) "

3982 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

3983 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

3985 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

3986 i‡(
èsk
 =
NULL
) {

3987 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

3988 
	`iscsi_gë_îr‹
(
iscsi
));

3991 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


3992 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


3993 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

3994 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

3995 
	`scsi_‰ì_scsi_èsk
(
èsk
);

3998 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3999 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with LBA_OUT_OF_RANGE");

4000 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4003 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4004 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4005 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4006 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 should havêÁûed wôh ILLEGAL_REQUEST/LBA_OUT_OF_RANGE. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

4007 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4011 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4012 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned LBA_OUT_OF_RANGE.");

4014 
	}
}

4017 
	$vîify16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
)

4019 
scsi_èsk
 *
èsk
;

4021 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY16 (Expecting INVALID_FIELD_IN_CDB) "

4022 "LBA:%" 
PRIu64
 " blocks:%d vprotect:%d dpo:%d bytchk:%d",

4023 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

4025 
èsk
 = 
	`iscsi_vîify16_sync
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

4026 i‡(
èsk
 =
NULL
) {

4027 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send VERIFY16 command: %s",

4028 
	`iscsi_gë_îr‹
(
iscsi
));

4031 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4032 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4033 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4034 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented onÅarget");

4035 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4038 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4039 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 successful but should have failed with LBA_OUT_OF_RANGE");

4040 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4043 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4044 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4045 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4046 
	`loggög
(
LOG_NORMAL
, "[FAILED] VERIFY16 should havêÁûed wôh ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB. Sí£:%s", 
	`iscsi_gë_îr‹
(
iscsi
));

4047 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4051 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4052 
	`loggög
(
LOG_VERBOSE
, "[OK] VERIFY16Ñeturned INVALID_FIELD_IN_CDB.");

4054 
	}
}

4057 
	$wrôe10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4058 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4059 
dpo
, 
fua
, 
fua_nv
, 
group
,

4060 *
d©a
)

4062 
scsi_èsk
 *
èsk
;

4064 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 LBA:%d blocks:%d "

4066 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4067 
dpo
, 
fua
, 
fua_nv
, 
group
);

4069 i‡(!
d©a_loss
) {

4070 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4074 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
,

4075 
d©a
, 
d©Æí
, 
blocksize
,

4076 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4077 i‡(
èsk
 =
NULL
) {

4078 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4079 
	`iscsi_gë_îr‹
(
iscsi
));

4082 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4083 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4084 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4085 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4086 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4089 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4090 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 command: "

4091 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4092 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4096 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4097 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned SUCCESS.");

4099 
	}
}

4102 
	$wrôe10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4103 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4104 
dpo
, 
fua
, 
fua_nv
, 
group
,

4105 *
d©a
)

4107 
scsi_èsk
 *
èsk
;

4109 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting INVALID_FIELD_IN_CDB) "

4112 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4113 
dpo
, 
fua
, 
fua_nv
, 
group
);

4115 i‡(!
d©a_loss
) {

4116 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4120 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4121 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4122 i‡(
èsk
 =
NULL
) {

4123 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4124 
	`iscsi_gë_îr‹
(
iscsi
));

4127 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4128 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4129 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4130 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4131 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4134 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4135 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4137 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4140 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4141 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4142 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4143 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4146 
	`iscsi_gë_îr‹
(
iscsi
));

4147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4152 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4154 
	}
}

4157 
	$wrôe10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4158 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4159 
dpo
, 
fua
, 
fua_nv
, 
group
,

4160 *
d©a
)

4162 
scsi_èsk
 *
èsk
;

4164 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting LBA_OUT_OF_RANGE) "

4167 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4168 
dpo
, 
fua
, 
fua_nv
, 
group
);

4170 i‡(!
d©a_loss
) {

4171 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4175 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4176 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4177 i‡(
èsk
 =
NULL
) {

4178 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4179 
	`iscsi_gë_îr‹
(
iscsi
));

4182 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4183 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4184 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4185 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4186 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4189 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4190 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4195 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4196 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4197 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4198 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4200 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4201 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4205 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4206 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4208 
	}
}

4211 
	$wrôe10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4212 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4213 
dpo
, 
fua
, 
fua_nv
, 
group
,

4214 *
d©a
)

4216 
scsi_èsk
 *
èsk
;

4218 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting WRITE_PROTECTED) "

4221 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4222 
dpo
, 
fua
, 
fua_nv
, 
group
);

4224 i‡(!
d©a_loss
) {

4225 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4229 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4230 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4231 i‡(
èsk
 =
NULL
) {

4232 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4233 
	`iscsi_gë_îr‹
(
iscsi
));

4236 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4237 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4238 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4240 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4243 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4244 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4246 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4249 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4250 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4251 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4252 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 failed with wrong sense. "

4255 
	`iscsi_gë_îr‹
(
iscsi
));

4256 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4260 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4261 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4263 
	}
}

4266 
	$wrôe10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4267 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4268 
dpo
, 
fua
, 
fua_nv
, 
group
,

4269 *
d©a
)

4271 
scsi_èsk
 *
èsk
;

4273 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting MEDIUM_NOT_PRESENT) "

4276 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4277 
dpo
, 
fua
, 
fua_nv
, 
group
);

4279 i‡(!
d©a_loss
) {

4280 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4284 
èsk
 = 
	`iscsi_wrôe10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4285 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4286 i‡(
èsk
 =
NULL
) {

4287 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE10 command: %s",

4288 
	`iscsi_gë_îr‹
(
iscsi
));

4291 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4292 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4293 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4294 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4295 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

4298 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4299 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 successful but should "

4301 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4304 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4305 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4306 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4307 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4308 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4309 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE10 Should have failed "

4311 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4312 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4316 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4317 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE10Ñeturned MEDIUM_NOT_PRESENT.");

4319 
	}
}

4322 
	$wrôe12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4323 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4324 
dpo
, 
fua
, 
fua_nv
, 
group
,

4325 *
d©a
)

4327 
scsi_èsk
 *
èsk
;

4329 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 LBA:%d blocks:%d "

4331 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4332 
dpo
, 
fua
, 
fua_nv
, 
group
);

4334 i‡(!
d©a_loss
) {

4335 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4339 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
,

4340 
d©a
, 
d©Æí
, 
blocksize
,

4341 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4342 i‡(
èsk
 =
NULL
) {

4343 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4344 
	`iscsi_gë_îr‹
(
iscsi
));

4347 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4348 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4349 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4350 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4351 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4354 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4355 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 command: "

4356 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4357 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4361 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4362 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned SUCCESS.");

4364 
	}
}

4367 
	$wrôe12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4368 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4369 
dpo
, 
fua
, 
fua_nv
, 
group
,

4370 *
d©a
)

4372 
scsi_èsk
 *
èsk
;

4374 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting INVALID_FIELD_IN_CDB) "

4377 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4378 
dpo
, 
fua
, 
fua_nv
, 
group
);

4380 i‡(!
d©a_loss
) {

4381 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4385 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4386 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4387 i‡(
èsk
 =
NULL
) {

4388 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4389 
	`iscsi_gë_îr‹
(
iscsi
));

4392 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4393 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4394 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4395 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4396 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4399 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4400 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4402 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4405 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4406 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4407 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4408 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4411 
	`iscsi_gë_îr‹
(
iscsi
));

4412 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4416 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4417 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4419 
	}
}

4422 
	$wrôe12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4423 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4424 
dpo
, 
fua
, 
fua_nv
, 
group
,

4425 *
d©a
)

4427 
scsi_èsk
 *
èsk
;

4429 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting LBA_OUT_OF_RANGE) "

4432 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4433 
dpo
, 
fua
, 
fua_nv
, 
group
);

4435 i‡(!
d©a_loss
) {

4436 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4440 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4441 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4442 i‡(
èsk
 =
NULL
) {

4443 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4444 
	`iscsi_gë_îr‹
(
iscsi
));

4447 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4448 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4449 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4450 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4451 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4454 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4455 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4457 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4460 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4461 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4462 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4463 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4465 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4466 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4470 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4471 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4473 
	}
}

4476 
	$wrôe12_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4477 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4478 
dpo
, 
fua
, 
fua_nv
, 
group
,

4479 *
d©a
)

4481 
scsi_èsk
 *
èsk
;

4483 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting WRITE_PROTECTED) "

4486 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4487 
dpo
, 
fua
, 
fua_nv
, 
group
);

4489 i‡(!
d©a_loss
) {

4490 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4494 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4495 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4496 i‡(
èsk
 =
NULL
) {

4497 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4498 
	`iscsi_gë_îr‹
(
iscsi
));

4501 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4502 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4503 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4504 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4505 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4508 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4509 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4511 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4514 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4515 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4516 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4517 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 failed with wrong sense. "

4520 
	`iscsi_gë_îr‹
(
iscsi
));

4521 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4525 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4526 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4528 
	}
}

4531 
	$wrôe12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

4532 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4533 
dpo
, 
fua
, 
fua_nv
, 
group
,

4534 *
d©a
)

4536 
scsi_èsk
 *
èsk
;

4538 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting MEDIUM_NOT_PRESENT) "

4541 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4542 
dpo
, 
fua
, 
fua_nv
, 
group
);

4544 i‡(!
d©a_loss
) {

4545 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4549 
èsk
 = 
	`iscsi_wrôe12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4550 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4551 i‡(
èsk
 =
NULL
) {

4552 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE12 command: %s",

4553 
	`iscsi_gë_îr‹
(
iscsi
));

4556 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4557 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4558 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4559 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4560 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

4563 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4564 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 successful but should "

4566 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4569 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4570 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4571 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4572 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4573 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4574 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE12 Should have failed "

4576 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4577 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4581 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4582 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE12Ñeturned MEDIUM_NOT_PRESENT.");

4584 
	}
}

4587 
	$wrôe16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4588 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4589 
dpo
, 
fua
, 
fua_nv
, 
group
,

4590 *
d©a
)

4592 
scsi_èsk
 *
èsk
;

4594 
	`loggög
(
LOG_VERBOSE
, "Síd WRITE16 LBA:%" 
PRId64
 " blocks:%d "

4596 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4597 
dpo
, 
fua
, 
fua_nv
, 
group
);

4599 i‡(!
d©a_loss
) {

4600 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4604 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
,

4605 
d©a
, 
d©Æí
, 
blocksize
,

4606 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4607 i‡(
èsk
 =
NULL
) {

4608 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4609 
	`iscsi_gë_îr‹
(
iscsi
));

4612 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4613 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4614 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4615 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4616 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4619 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4620 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 command: "

4621 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4622 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4626 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4627 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned SUCCESS.");

4629 
	}
}

4632 
	$wrôe16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4633 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4634 
dpo
, 
fua
, 
fua_nv
, 
group
,

4635 *
d©a
)

4637 
scsi_èsk
 *
èsk
;

4639 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting INVALID_FIELD_IN_CDB) "

4640 "LBA:%" 
PRId64
 " blocks:%d wrprotect:%d "

4642 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4643 
dpo
, 
fua
, 
fua_nv
, 
group
);

4645 i‡(!
d©a_loss
) {

4646 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4650 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4651 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4652 i‡(
èsk
 =
NULL
) {

4653 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4654 
	`iscsi_gë_îr‹
(
iscsi
));

4657 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4658 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4659 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4660 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4661 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4664 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4665 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4667 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4670 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4671 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4672 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4673 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4676 
	`iscsi_gë_îr‹
(
iscsi
));

4677 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4681 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4682 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

4684 
	}
}

4687 
	$wrôe16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4688 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4689 
dpo
, 
fua
, 
fua_nv
, 
group
,

4690 *
d©a
)

4692 
scsi_èsk
 *
èsk
;

4694 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting LBA_OUT_OF_RANGE) "

4695 "LBA:%" 
PRId64
 " blocks:%d wrprotect:%d "

4697 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4698 
dpo
, 
fua
, 
fua_nv
, 
group
);

4700 i‡(!
d©a_loss
) {

4701 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4705 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4706 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4707 i‡(
èsk
 =
NULL
) {

4708 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4709 
	`iscsi_gë_îr‹
(
iscsi
));

4712 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4713 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4714 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4715 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4716 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4719 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4720 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4722 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4725 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4726 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4727 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4728 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4730 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4731 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4735 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4736 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4738 
	}
}

4741 
	$wrôe16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4742 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4743 
dpo
, 
fua
, 
fua_nv
, 
group
,

4744 *
d©a
)

4746 
scsi_èsk
 *
èsk
;

4748 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting WRITE_PROTECTED) "

4749 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

4751 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4752 
dpo
, 
fua
, 
fua_nv
, 
group
);

4754 i‡(!
d©a_loss
) {

4755 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4759 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4760 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4761 i‡(
èsk
 =
NULL
) {

4762 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4763 
	`iscsi_gë_îr‹
(
iscsi
));

4766 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4767 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4769 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4772 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4773 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4774 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4775 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4776 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4779 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4780 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


4781 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

4782 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 failed with wrong sense. "

4785 
	`iscsi_gë_îr‹
(
iscsi
));

4786 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4790 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4791 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

4793 
	}
}

4796 
	$wrôe16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

4797 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

4798 
dpo
, 
fua
, 
fua_nv
, 
group
,

4799 *
d©a
)

4801 
scsi_èsk
 *
èsk
;

4803 
	`loggög
(
LOG_VERBOSE
, "Send WRITE16 (Expecting MEDIUM_NOT_PRESENT) "

4804 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

4806 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

4807 
dpo
, 
fua
, 
fua_nv
, 
group
);

4809 i‡(!
d©a_loss
) {

4810 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4814 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

4815 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
);

4816 i‡(
èsk
 =
NULL
) {

4817 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITE16 command: %s",

4818 
	`iscsi_gë_îr‹
(
iscsi
));

4821 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4822 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 successful but should "

4824 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4827 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4828 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4829 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4830 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4831 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

4834 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4835 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


4836 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


4837 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


4838 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

4839 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITE16 Should have failed "

4841 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4842 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4846 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4847 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITE16Ñeturned MEDIUM_NOT_PRESENT.");

4849 
	}
}

4852 
	$wrôeßme10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4854 
scsi_èsk
 *
èsk
;

4855 
uöt64_t
 
ªÆd©Æí
;

4857 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 LBA:%d blocks:%d "

4859 
lba
, 
num
, 
wΩrŸe˘
,

4860 
™ch‹
, 
unm≠_Êag
, 
group
);

4862 i‡(!
d©a_loss
) {

4863 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4867 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4868 
d©a
, 
d©Æí
, 
num
,

4869 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4870 i‡(
èsk
 =
NULL
) {

4871 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4872 
	`iscsi_gë_îr‹
(
iscsi
));

4875 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4876 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4877 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4878 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4879 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4882 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4883 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4884 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

4885 i‡(
öq_bl
->
w¢z
 =1 && 
d©Æí
 == 0) {

4886 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Target doesÇot support WRITESAME10 with NUMBER OF LOGICAL BLOCKS == 0");

4887 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4891 i‡(
d©Æí
 == 0) {

4892 
ªÆd©Æí
 = 
num_blocks
;

4894 
ªÆd©Æí
 = 
d©Æí
;

4896 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
ªÆd©Æí
 > inq_bl->max_ws_len) {

4897 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Number of WRITESAME10Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

4898 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4902 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

4903 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 command: "

4904 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

4905 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4909 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4910 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned SUCCESS.");

4912 
	}
}

4915 
	$wrôeßme10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4917 
scsi_èsk
 *
èsk
;

4919 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting LBA_OUT_OF_RANGE) "

4922 
lba
, 
num
, 
wΩrŸe˘
,

4923 
™ch‹
, 
unm≠_Êag
, 
group
);

4925 i‡(!
d©a_loss
) {

4926 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4930 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4931 
d©a
, 
d©Æí
, 
num
,

4932 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4933 i‡(
èsk
 =
NULL
) {

4934 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4935 
	`iscsi_gë_îr‹
(
iscsi
));

4938 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4939 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4940 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4941 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4942 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4945 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4946 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

4948 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4951 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


4952 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


4953 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

4954 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

4956 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

4957 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4961 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4962 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

4964 
	}
}

4967 
	$wrôeßme10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

4969 
scsi_èsk
 *
èsk
;

4971 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting INVALID_FIELD_IN_CDB) "

4974 
lba
, 
num
, 
wΩrŸe˘
,

4975 
™ch‹
, 
unm≠_Êag
, 
group
);

4977 i‡(!
d©a_loss
) {

4978 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

4982 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

4983 
d©a
, 
d©Æí
, 
num
,

4984 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

4985 i‡(
èsk
 =
NULL
) {

4986 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

4987 
	`iscsi_gë_îr‹
(
iscsi
));

4990 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


4991 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


4992 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

4993 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

4994 
	`scsi_‰ì_scsi_èsk
(
èsk
);

4997 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

4998 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

5000 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5003 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5004 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5005 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5006 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

5009 
	`iscsi_gë_îr‹
(
iscsi
));

5010 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5014 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5015 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.");

5017 
	}
}

5020 
	$wrôeßme10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5022 
scsi_èsk
 *
èsk
;

5024 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting WRITE_PROTECTED) "

5027 
lba
, 
num
, 
wΩrŸe˘
,

5028 
™ch‹
, 
unm≠_Êag
, 
group
);

5030 i‡(!
d©a_loss
) {

5031 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5035 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

5036 
d©a
, 
d©Æí
, 
num
,

5037 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5038 i‡(
èsk
 =
NULL
) {

5039 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

5040 
	`iscsi_gë_îr‹
(
iscsi
));

5043 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5044 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5045 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5046 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

5047 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5050 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5051 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 successful but should "

5053 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5056 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5057 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5058 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5059 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 failed with wrong sense. "

5061 "WRITE_PROTECTED. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5062 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5066 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5067 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5069 
	}
}

5072 
	$wrôeßme10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5074 
scsi_èsk
 *
èsk
;

5076 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting MEDIUM_NOT_PRESENT) "

5079 
lba
, 
num
, 
wΩrŸe˘
,

5080 
™ch‹
, 
unm≠_Êag
, 
group
);

5082 i‡(!
d©a_loss
) {

5083 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5087 
èsk
 = 
	`iscsi_wrôeßme10_sync
(
iscsi
, 
lun
, 
lba
,

5088 
d©a
, 
d©Æí
, 
num
,

5089 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5090 i‡(
èsk
 =
NULL
) {

5091 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME10 command: %s",

5092 
	`iscsi_gë_îr‹
(
iscsi
));

5095 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5096 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5097 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5098 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented onÅarget");

5099 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5102 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5103 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

5104 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5107 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5108 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5109 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5110 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5111 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5112 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 Should have failed "

5114 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5120 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME10Ñeturned MEDIUM_NOT_PRESENT.");

5122 
	}
}

5125 
	$wrôeßme16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5127 
scsi_èsk
 *
èsk
;

5128 
uöt64_t
 
ªÆd©Æí
;

5130 
	`loggög
(
LOG_VERBOSE
, "Síd WRITESAME16 LBA:%" 
PRIu64
 " blocks:%d "

5132 
lba
, 
num
, 
wΩrŸe˘
,

5133 
™ch‹
, 
unm≠_Êag
, 
group
);

5135 i‡(!
d©a_loss
) {

5136 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5140 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5141 
d©a
, 
d©Æí
, 
num
,

5142 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5143 i‡(
èsk
 =
NULL
) {

5144 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5145 
	`iscsi_gë_îr‹
(
iscsi
));

5148 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5149 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5150 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5151 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5155 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5156 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5157 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5158 i‡(
öq_bl
->
w¢z
 =1 && 
d©Æí
 == 0) {

5159 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Target doesÇot support WRITESAME16 with NUMBER OF LOGICAL BLOCKS == 0");

5160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5164 i‡(
d©Æí
 == 0) {

5165 
ªÆd©Æí
 = 
num_blocks
;

5167 
ªÆd©Æí
 = 
d©Æí
;

5169 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
ªÆd©Æí
 > inq_bl->max_ws_len) {

5170 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Number of WRITESAME16Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

5171 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5175 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5176 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 command: "

5177 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5178 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5182 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5183 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned SUCCESS.");

5185 
	}
}

5188 
	$wrôeßme16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5190 
scsi_èsk
 *
èsk
;

5192 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting LBA_OUT_OF_RANGE) "

5193 "LBA:%" 
PRIu64
 " blocks:%d "

5195 
lba
, 
num
, 
wΩrŸe˘
,

5196 
™ch‹
, 
unm≠_Êag
, 
group
);

5198 i‡(!
d©a_loss
) {

5199 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5203 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5204 
d©a
, 
d©Æí
, 
num
,

5205 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5206 i‡(
èsk
 =
NULL
) {

5207 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5208 
	`iscsi_gë_îr‹
(
iscsi
));

5211 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5212 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5213 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5214 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5215 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5218 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5219 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5221 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5224 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5225 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5226 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5227 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5229 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5235 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5237 
	}
}

5240 
	$wrôeßme16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5242 
scsi_èsk
 *
èsk
;

5244 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting INVALID_FIELD_IN_CDB) "

5245 "LBA:%" 
PRIu64
 " blocks:%d "

5247 
lba
, 
num
, 
wΩrŸe˘
,

5248 
™ch‹
, 
unm≠_Êag
, 
group
);

5250 i‡(!
d©a_loss
) {

5251 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5255 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5256 
d©a
, 
d©Æí
, 
num
,

5257 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5258 i‡(
èsk
 =
NULL
) {

5259 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5260 
	`iscsi_gë_îr‹
(
iscsi
));

5263 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5264 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5265 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5266 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5267 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5270 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5271 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5273 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5276 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5277 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5278 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5279 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5282 
	`iscsi_gë_îr‹
(
iscsi
));

5283 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5287 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5288 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IN_CDB.");

5290 
	}
}

5293 
	$wrôeßme16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5295 
scsi_èsk
 *
èsk
;

5297 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting WRITE_PROTECTED) "

5298 "LBA:%" 
PRIu64
 " blocks:%d "

5300 
lba
, 
num
, 
wΩrŸe˘
,

5301 
™ch‹
, 
unm≠_Êag
, 
group
);

5303 i‡(!
d©a_loss
) {

5304 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5308 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5309 
d©a
, 
d©Æí
, 
num
,

5310 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5311 i‡(
èsk
 =
NULL
) {

5312 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5313 
	`iscsi_gë_îr‹
(
iscsi
));

5316 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5317 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5318 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5319 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5320 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5323 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5324 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 successful but should "

5326 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5329 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5330 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5331 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5332 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 failed with wrong sense. "

5334 "WRITE_PROTECTED. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5335 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5339 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5340 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5342 
	}
}

5345 
	$wrôeßme16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
)

5347 
scsi_èsk
 *
èsk
;

5349 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME16 (Expecting MEDIUM_NOT_PRESENT) "

5350 "LBA:%" 
PRIu64
 " blocks:%d "

5352 
lba
, 
num
, 
wΩrŸe˘
,

5353 
™ch‹
, 
unm≠_Êag
, 
group
);

5355 i‡(!
d©a_loss
) {

5356 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5360 
èsk
 = 
	`iscsi_wrôeßme16_sync
(
iscsi
, 
lun
, 
lba
,

5361 
d©a
, 
d©Æí
, 
num
,

5362 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
);

5363 i‡(
èsk
 =
NULL
) {

5364 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITESAME16 command: %s",

5365 
	`iscsi_gë_îr‹
(
iscsi
));

5368 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5369 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5370 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5371 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented onÅarget");

5372 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5375 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5376 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 command successful. But should have failed with NOT_READY/MEDIUM_NOT_PRESENT*");

5377 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5380 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5381 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5382 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5383 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5384 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5385 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 Should have failed "

5387 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5388 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5392 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5393 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITESAME16Ñeturned MEDIUM_NOT_PRESENT.");

5395 
	}
}

5398 
	$wrôevîify10
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5399 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5400 
dpo
, 
bytchk
, 
group
,

5401 *
d©a
)

5403 
scsi_èsk
 *
èsk
;

5405 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 LBA:%d blocks:%d "

5407 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5408 
dpo
, 
bytchk
, 
group
);

5410 i‡(!
d©a_loss
) {

5411 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5415 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
,

5416 
d©a
, 
d©Æí
, 
blocksize
,

5417 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5418 i‡(
èsk
 =
NULL
) {

5419 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5420 
	`iscsi_gë_îr‹
(
iscsi
));

5423 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5424 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5425 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5426 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5427 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5430 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5431 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 command: "

5432 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5433 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5437 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5438 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned SUCCESS.");

5440 
	}
}

5443 
	$wrôevîify10_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5444 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5445 
dpo
, 
bytchk
, 
group
,

5446 *
d©a
)

5448 
scsi_èsk
 *
èsk
;

5450 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting INVALID_FIELD_IN_CDB) "

5453 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5454 
dpo
, 
bytchk
, 
group
);

5456 i‡(!
d©a_loss
) {

5457 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5461 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5462 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5463 i‡(
èsk
 =
NULL
) {

5464 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5465 
	`iscsi_gë_îr‹
(
iscsi
));

5468 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5469 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5470 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5471 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5472 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5475 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5476 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5478 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5481 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5482 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5483 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5484 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5487 
	`iscsi_gë_îr‹
(
iscsi
));

5488 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5492 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5493 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

5495 
	}
}

5498 
	$wrôevîify10_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5499 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5500 
dpo
, 
bytchk
, 
group
,

5501 *
d©a
)

5503 
scsi_èsk
 *
èsk
;

5505 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting LBA_OUT_OF_RANGE) "

5508 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5509 
dpo
, 
bytchk
, 
group
);

5511 i‡(!
d©a_loss
) {

5512 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5516 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5517 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5518 i‡(
èsk
 =
NULL
) {

5519 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5520 
	`iscsi_gë_îr‹
(
iscsi
));

5523 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5524 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5525 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5526 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5527 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5530 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5531 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5533 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5536 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5537 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5538 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5539 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5541 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5542 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5546 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5547 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5549 
	}
}

5552 
	$wrôevîify10_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5553 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5554 
dpo
, 
bytchk
, 
group
,

5555 *
d©a
)

5557 
scsi_èsk
 *
èsk
;

5559 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting WRITE_PROTECTED) "

5562 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5563 
dpo
, 
bytchk
, 
group
);

5565 i‡(!
d©a_loss
) {

5566 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5570 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5571 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5572 i‡(
èsk
 =
NULL
) {

5573 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5574 
	`iscsi_gë_îr‹
(
iscsi
));

5577 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5578 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5579 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5580 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5581 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5584 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5585 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5587 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5590 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5591 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5592 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5593 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 failed with wrong sense. "

5596 
	`iscsi_gë_îr‹
(
iscsi
));

5597 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5601 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5602 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5604 
	}
}

5607 
	$wrôevîify10_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5608 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5609 
dpo
, 
bytchk
, 
group
,

5610 *
d©a
)

5612 
scsi_èsk
 *
èsk
;

5614 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting MEDIUM_NOT_PRESENT) "

5617 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5618 
dpo
, 
bytchk
, 
group
);

5620 i‡(!
d©a_loss
) {

5621 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5625 
èsk
 = 
	`iscsi_wrôevîify10_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5626 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5627 i‡(
èsk
 =
NULL
) {

5628 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY10 command: %s",

5629 
	`iscsi_gë_îr‹
(
iscsi
));

5632 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5633 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5634 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5635 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5636 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

5639 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5640 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 successful but should "

5642 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5645 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5646 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5647 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5648 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5649 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5650 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY10 Should have failed "

5652 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5653 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5657 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5658 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY10Ñeturned MEDIUM_NOT_PRESENT.");

5660 
	}
}

5663 
	$wrôevîify12
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5664 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5665 
dpo
, 
bytchk
, 
group
,

5666 *
d©a
)

5668 
scsi_èsk
 *
èsk
;

5670 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 LBA:%d blocks:%d "

5672 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5673 
dpo
, 
bytchk
, 
group
);

5675 i‡(!
d©a_loss
) {

5676 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5680 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
,

5681 
d©a
, 
d©Æí
, 
blocksize
,

5682 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5683 i‡(
èsk
 =
NULL
) {

5684 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5685 
	`iscsi_gë_îr‹
(
iscsi
));

5688 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5689 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5690 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5691 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5692 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5695 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5696 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 command: "

5697 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5698 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5702 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5703 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned SUCCESS.");

5705 
	}
}

5708 
	$wrôevîify12_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5709 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5710 
dpo
, 
bytchk
, 
group
,

5711 *
d©a
)

5713 
scsi_èsk
 *
èsk
;

5715 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting INVALID_FIELD_IN_CDB) "

5718 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5719 
dpo
, 
bytchk
, 
group
);

5721 i‡(!
d©a_loss
) {

5722 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5726 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5727 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5728 i‡(
èsk
 =
NULL
) {

5729 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5730 
	`iscsi_gë_îr‹
(
iscsi
));

5733 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5734 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5735 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5736 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5737 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5740 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5741 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5743 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5746 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5747 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5748 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

5749 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5752 
	`iscsi_gë_îr‹
(
iscsi
));

5753 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5757 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5758 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

5760 
	}
}

5763 
	$wrôevîify12_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5764 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5765 
dpo
, 
bytchk
, 
group
,

5766 *
d©a
)

5768 
scsi_èsk
 *
èsk
;

5770 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting LBA_OUT_OF_RANGE) "

5773 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5774 
dpo
, 
bytchk
, 
group
);

5776 i‡(!
d©a_loss
) {

5777 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5781 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5782 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5783 i‡(
èsk
 =
NULL
) {

5784 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5785 
	`iscsi_gë_îr‹
(
iscsi
));

5788 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5789 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5790 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5791 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5792 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5795 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5796 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5798 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5801 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5802 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


5803 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

5804 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5806 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

5807 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5811 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5812 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

5814 
	}
}

5817 
	$wrôevîify12_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5818 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5819 
dpo
, 
bytchk
, 
group
,

5820 *
d©a
)

5822 
scsi_èsk
 *
èsk
;

5824 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting WRITE_PROTECTED) "

5827 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5828 
dpo
, 
bytchk
, 
group
);

5830 i‡(!
d©a_loss
) {

5831 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5835 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5836 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5837 i‡(
èsk
 =
NULL
) {

5838 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5839 
	`iscsi_gë_îr‹
(
iscsi
));

5842 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5843 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5844 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5845 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5846 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5849 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5850 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5852 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5855 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5856 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


5857 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

5858 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 failed with wrong sense. "

5861 
	`iscsi_gë_îr‹
(
iscsi
));

5862 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5866 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5867 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

5869 
	}
}

5872 
	$wrôevîify12_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

5873 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5874 
dpo
, 
bytchk
, 
group
,

5875 *
d©a
)

5877 
scsi_èsk
 *
èsk
;

5879 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting MEDIUM_NOT_PRESENT) "

5882 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5883 
dpo
, 
bytchk
, 
group
);

5885 i‡(!
d©a_loss
) {

5886 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5890 
èsk
 = 
	`iscsi_wrôevîify12_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5891 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5892 i‡(
èsk
 =
NULL
) {

5893 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY12 command: %s",

5894 
	`iscsi_gë_îr‹
(
iscsi
));

5897 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5898 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5899 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5900 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5901 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

5904 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

5905 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 successful but should "

5907 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5910 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


5911 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


5912 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


5913 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


5914 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

5915 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY12 Should have failed "

5917 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5918 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5922 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5923 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY12Ñeturned MEDIUM_NOT_PRESENT.");

5925 
	}
}

5928 
	$wrôevîify16
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

5929 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5930 
dpo
, 
bytchk
, 
group
,

5931 *
d©a
)

5933 
scsi_èsk
 *
èsk
;

5935 
	`loggög
(
LOG_VERBOSE
, "Síd WRITEVERIFY16 LBA:%" 
PRIu64
 " blocks:%d "

5937 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5938 
dpo
, 
bytchk
, 
group
);

5940 i‡(!
d©a_loss
) {

5941 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5945 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
,

5946 
d©a
, 
d©Æí
, 
blocksize
,

5947 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5948 i‡(
èsk
 =
NULL
) {

5949 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

5950 
	`iscsi_gë_îr‹
(
iscsi
));

5953 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5954 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


5955 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

5956 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5957 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

5960 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

5961 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 command: "

5962 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

5963 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5967 
	`scsi_‰ì_scsi_èsk
(
èsk
);

5968 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned SUCCESS.");

5970 
	}
}

5973 
	$wrôevîify16_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

5974 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

5975 
dpo
, 
bytchk
, 
group
,

5976 *
d©a
)

5978 
scsi_èsk
 *
èsk
;

5980 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting INVALID_FIELD_IN_CDB) "

5981 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

5983 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

5984 
dpo
, 
bytchk
, 
group
);

5986 i‡(!
d©a_loss
) {

5987 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

5991 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

5992 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

5993 i‡(
èsk
 =
NULL
) {

5994 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

5995 
	`iscsi_gë_îr‹
(
iscsi
));

5998 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


5999 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6000 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6001 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6002 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6005 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6006 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6008 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6011 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6012 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6013 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

6014 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6017 
	`iscsi_gë_îr‹
(
iscsi
));

6018 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6022 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6023 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

6025 
	}
}

6028 
	$wrôevîify16_lbaouto‰™ge
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6029 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6030 
dpo
, 
bytchk
, 
group
,

6031 *
d©a
)

6033 
scsi_èsk
 *
èsk
;

6035 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting LBA_OUT_OF_RANGE) "

6036 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6038 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6039 
dpo
, 
bytchk
, 
group
);

6041 i‡(!
d©a_loss
) {

6042 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6046 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6047 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6048 i‡(
èsk
 =
NULL
) {

6049 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6050 
	`iscsi_gë_îr‹
(
iscsi
));

6053 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6054 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6055 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6056 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6057 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6060 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6061 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6063 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6066 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6067 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6068 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
) {

6069 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6071 "LBA_OUT_OF_RANGE. Sí£:%s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

6072 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6076 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6077 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned ILLEGAL_REQUEST/LBA_OUT_OF_RANGE.");

6079 
	}
}

6082 
	$wrôevîify16_wrôïrŸe˘ed
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6083 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6084 
dpo
, 
bytchk
, 
group
,

6085 *
d©a
)

6087 
scsi_èsk
 *
èsk
;

6089 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting WRITE_PROTECTED) "

6090 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6092 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6093 
dpo
, 
bytchk
, 
group
);

6095 i‡(!
d©a_loss
) {

6096 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6100 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6101 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6102 i‡(
èsk
 =
NULL
) {

6103 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6104 
	`iscsi_gë_îr‹
(
iscsi
));

6107 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6108 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6109 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6111 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6114 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6115 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6121 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_DATA_PROTECTION


6122 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_PROTECTED
) {

6123 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 failed with wrong sense. "

6126 
	`iscsi_gë_îr‹
(
iscsi
));

6127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6132 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned DATA_PROTECTION/WRITE_PROTECTED.");

6134 
	}
}

6137 
	$wrôevîify16_nomedium
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

6138 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

6139 
dpo
, 
bytchk
, 
group
,

6140 *
d©a
)

6142 
scsi_èsk
 *
èsk
;

6144 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY16 (Expecting MEDIUM_NOT_PRESENT) "

6145 "LBA:%" 
PRIu64
 " blocks:%d wrprotect:%d "

6147 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

6148 
dpo
, 
bytchk
, 
group
);

6150 i‡(!
d©a_loss
) {

6151 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

6155 
èsk
 = 
	`iscsi_wrôevîify16_sync
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

6156 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
);

6157 i‡(
èsk
 =
NULL
) {

6158 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send WRITEVERIFY16 command: %s",

6159 
	`iscsi_gë_îr‹
(
iscsi
));

6162 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


6163 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


6164 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

6165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6166 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

6169 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6170 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 successful but should "

6172 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6175 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6176 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_NOT_READY


6177 || (
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


6178 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN


6179 && 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
)) {

6180 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITEVERIFY16 Should have failed "

6182 "wôh %s", 
	`iscsi_gë_îr‹
(
iscsi
));

6183 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6187 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6188 
	`loggög
(
LOG_VERBOSE
, "[OK] WRITEVERIFY16Ñeturned MEDIUM_NOT_PRESENT.");

6190 
	}
}

6193 
	$öquúy
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
, 
scsi_èsk
 **
ßve_èsk
)

6195 
scsi_èsk
 *
èsk
;

6197 
	`loggög
(
LOG_VERBOSE
, "Send INQUIRYÉvpd:%dÖage_code:%02xálloc_len:%d",

6198 
evpd
, 
∑ge_code
, 
maxsize
);

6199 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
);

6200 i‡(
èsk
 =
NULL
) {

6201 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send INQUIRY command: "

6202 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

6205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6206 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY command: failed with "

6207 "£n£. %s", 
	`iscsi_gë_îr‹
(
iscsi
));

6208 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6212 i‡(
ßve_èsk
 !
NULL
) {

6213 *
ßve_èsk
 = 
èsk
;

6215 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6218 
	`loggög
(
LOG_VERBOSE
, "[OK] INQUIRYÑeturned SUCCESS.");

6220 
	}
}

6223 
	$öquúy_övÆidfõldöcdb
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
)

6225 
scsi_èsk
 *
èsk
;

6227 
	`loggög
(
LOG_VERBOSE
, "Send INQUIRY (Expecting INVALID_FIELD_IN_CDB)Évpd:%dÖage_code:%02xálloc_len:%d",

6228 
evpd
, 
∑ge_code
, 
maxsize
);

6229 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
);

6230 i‡(
èsk
 =
NULL
) {

6231 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send INQUIRY command: "

6232 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

6235 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

6236 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY successful but should "

6238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6242 i‡(
èsk
->
°©us
 !
SCSI_STATUS_CHECK_CONDITION


6243 || 
èsk
->
£n£
.
key
 !
SCSI_SENSE_ILLEGAL_REQUEST


6244 || 
èsk
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
) {

6245 
	`loggög
(
LOG_NORMAL
, "[FAILED] INQUIRY failed with wrong sense. "

6248 
	`iscsi_gë_îr‹
(
iscsi
));

6249 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6253 
	`scsi_‰ì_scsi_èsk
(
èsk
);

6254 
	`loggög
(
LOG_VERBOSE
, "[OK] INQUIRYÑeturned ILLEGAL_REQUEST/INVALID_FIELD_IB_CDB.");

6256 
	}
}

6258 
scsi_comm™d_des¸ùt‹
 *

6259 
	$gë_comm™d_des¸ùt‹
(
›code
, 
ß
)

6261 
i
;

6263 i‡(
rs›
 =
NULL
) {

6264  
NULL
;

6267 
i
 = 0; i < 
rs›
->
num_des¸ùt‹s
; i++) {

6268 i‡(
rs›
->
des¸ùt‹s
[
i
].
›code
 == opcode

6269 && 
rs›
->
des¸ùt‹s
[
i
].
ß
 == sa) {

6270  &
rs›
->
des¸ùt‹s
[
i
];

6274  
NULL
;

6275 
	}
}

6277 
	$£t_swp
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

6279 
ªt
 = 0;

6280 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

6281 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

6282 
scsi_mode_£n£
 *
ms
;

6283 
scsi_mode_∑ge
 *
mp
;

6285 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

6286 
£n£_èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
,

6287 1, 
SCSI_MODESENSE_PC_CURRENT
,

6288 
SCSI_MODEPAGE_CONTROL
,

6290 i‡(
£n£_èsk
 =
NULL
) {

6291 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SENSE6 command: %s",

6292 
	`iscsi_gë_îr‹
(
iscsi
));

6293 
ªt
 = -1;

6294 
föished
;

6296 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6297 
	`loggög
(
LOG_NORMAL
, "MODE_SENSE6 failed: %s",

6298 
	`iscsi_gë_îr‹
(
iscsi
));

6299 
ªt
 = -1;

6300 
föished
;

6302 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

6303 i‡(
ms
 =
NULL
) {

6304 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

6306 
ªt
 = -1;

6307 
föished
;

6309 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

6310 i‡(
mp
 =
NULL
) {

6311 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

6312 
ªt
 = -1;

6313 
föished
;

6316 
	`loggög
(
LOG_VERBOSE
, "Turn SWP ON");

6317 
mp
->
c⁄åﬁ
.
swp
 = 1;

6319 
£À˘_èsk
 = 
	`iscsi_mode£À˘6_sync
(
iscsi
, 
lun
,

6320 1, 0, 
mp
);

6321 i‡(
£À˘_èsk
 =
NULL
) {

6322 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SELECT6 command: %s",

6323 
	`iscsi_gë_îr‹
(
iscsi
));

6324 
ªt
 = -1;

6325 
föished
;

6327 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6328 
	`loggög
(
LOG_NORMAL
, "MODE_SELECT6 failed: %s",

6329 
	`iscsi_gë_îr‹
(
iscsi
));

6330 
ªt
 = -1;

6331 
föished
;

6334 
föished
:

6335 i‡(
£n£_èsk
 !
NULL
) {

6336 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

6338 i‡(
£À˘_èsk
 !
NULL
) {

6339 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

6341  
ªt
;

6342 
	}
}

6344 
	$˛ór_swp
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

6346 
ªt
 = 0;

6347 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

6348 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

6349 
scsi_mode_£n£
 *
ms
;

6350 
scsi_mode_∑ge
 *
mp
;

6352 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

6353 
£n£_èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsi
, 
lun
,

6354 1, 
SCSI_MODESENSE_PC_CURRENT
,

6355 
SCSI_MODEPAGE_CONTROL
,

6357 i‡(
£n£_èsk
 =
NULL
) {

6358 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SENSE6 command: %s",

6359 
	`iscsi_gë_îr‹
(
iscsi
));

6360 
ªt
 = -1;

6361 
föished
;

6363 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6364 
	`loggög
(
LOG_NORMAL
, "MODE_SENSE6 failed: %s",

6365 
	`iscsi_gë_îr‹
(
iscsi
));

6366 
ªt
 = -1;

6367 
föished
;

6369 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

6370 i‡(
ms
 =
NULL
) {

6371 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

6373 
ªt
 = -1;

6374 
föished
;

6376 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

6377 i‡(
mp
 =
NULL
) {

6378 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

6379 
ªt
 = -1;

6380 
föished
;

6383 
	`loggög
(
LOG_VERBOSE
, "Turn SWP OFF");

6384 
mp
->
c⁄åﬁ
.
swp
 = 0;

6386 
£À˘_èsk
 = 
	`iscsi_mode£À˘6_sync
(
iscsi
, 
lun
,

6387 1, 0, 
mp
);

6388 i‡(
£À˘_èsk
 =
NULL
) {

6389 
	`loggög
(
LOG_NORMAL
, "FailedÅo send MODE_SELECT6 command: %s",

6390 
	`iscsi_gë_îr‹
(
iscsi
));

6391 
ªt
 = -1;

6392 
föished
;

6394 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

6395 
	`loggög
(
LOG_NORMAL
, "MODE_SELECT6 failed: %s",

6396 
	`iscsi_gë_îr‹
(
iscsi
));

6397 
ªt
 = -1;

6398 
föished
;

6401 
föished
:

6402 i‡(
£n£_èsk
 !
NULL
) {

6403 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

6405 i‡(
£À˘_èsk
 !
NULL
) {

6406 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

6408  
ªt
;

6409 
	}
}

	@test-tool/iscsi-test-cu.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<uni°d.h
>

28 
	~<°rög.h
>

29 
	~<gë›t.h
>

30 
	~<‚m©ch.h
>

32 
	~<CUnô/CUnô.h
>

33 
	~<CUnô/Basic.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

37 
	~"iscsi-¥iv©e.h
"

39 
	~"iscsi-suµ‹t.h
"

40 
	~"iscsi-ã°-cu.h
"

44 #i‚de‡
disˇrd_c⁄°


45 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

48 
	#PROG
 "iscsi-ã°-cu"

	)

50 
	glogÀvñ
 = 
LOG_NORMAL
;

56 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

63 
CU_Te°Info
 
ã°s_com∑ª™dwrôe
[] = {

64 { (*)"Sim∂e", 
ã°_com∑ª™dwrôe_sim∂e
 },

65 { (*)"Miscom∑ª", 
ã°_com∑ª™dwrôe_miscom∑ª
 },

66 
CU_TEST_INFO_NULL


67 
	}
};

69 
CU_Te°Info
 
	gã°s_gë_lba_°©us
[] = {

70 { (*)"Sim∂e", 
ã°_gë_lba_°©us_sim∂e
 },

71 { (*)"Bey⁄dEﬁ", 
ã°_gë_lba_°©us_bey⁄d_eﬁ
 },

72 
CU_TEST_INFO_NULL


75 
CU_Te°Info
 
	gã°s_öquúy
[] = {

76 { (*)"Sènd¨d", 
ã°_öquúy_°™d¨d
 },

77 { (*)"AŒocLígth", 
ã°_öquúy_Æloc_Àngth
},

78 { (*)"EVPD", 
ã°_öquúy_evpd
},

79 { (*)"BlockLimôs", 
ã°_öquúy_block_limôs
},

80 { (*)"M™d©‹yVPDSBC", 
ã°_öquúy_m™d©‹y_vpd_sbc
},

81 { (*)"Suµ‹ãdVPD", 
ã°_öquúy_suµ‹ãd_vpd
},

82 { (*)"Vîsi⁄Des¸ùt‹s", 
ã°_öquúy_vîsi⁄_des¸ùt‹s
},

83 
CU_TEST_INFO_NULL


86 
CU_Te°Info
 
	gã°s_m™d©‹y
[] = {

87 { (*)"M™d©‹ySBC", 
ã°_m™d©‹y_sbc
 },

88 
CU_TEST_INFO_NULL


91 
CU_Te°Info
 
	gã°s_mode£n£6
[] = {

92 { (*)"AŒPages", 
ã°_mode£n£6_Æl_∑ges
 },

93 { (*)"ResiduÆs", 
ã°_mode£n£6_ªsiduÆs
 },

94 
CU_TEST_INFO_NULL


97 
CU_Te°Info
 
	gã°s_nomedü
[] = {

98 { (*)"NoMedüSBC", 
ã°_nomedü_sbc
 },

99 
CU_TEST_INFO_NULL


102 
CU_Te°Info
 
	gã°s_‹wrôe
[] = {

103 { (*)"Sim∂e", 
ã°_‹wrôe_sim∂e
 },

104 { (*)"Bey⁄dEﬁ", 
ã°_‹wrôe_bey⁄d_eﬁ
 },

105 { (*)"ZîoBlocks", 
ã°_‹wrôe_0blocks
 },

106 { (*)"PrŸe˘", 
ã°_‹wrôe_wΩrŸe˘
 },

107 { (*)"Fœgs", 
ã°_‹wrôe_Êags
 },

108 { (*)"Vîify", 
ã°_‹wrôe_vîify
 },

109 
CU_TEST_INFO_NULL


112 
CU_Te°Info
 
	gã°s_¥e„tch10
[] = {

113 { (*)"Sim∂e", 
ã°_¥e„tch10_sim∂e
 },

114 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch10_bey⁄d_eﬁ
 },

115 { (*)"ZîoBlocks", 
ã°_¥e„tch10_0blocks
 },

116 { (*)"Fœgs", 
ã°_¥e„tch10_Êags
 },

117 
CU_TEST_INFO_NULL


120 
CU_Te°Info
 
	gã°s_¥e„tch16
[] = {

121 { (*)"Sim∂e", 
ã°_¥e„tch16_sim∂e
 },

122 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch16_bey⁄d_eﬁ
 },

123 { (*)"ZîoBlocks", 
ã°_¥e„tch16_0blocks
 },

124 { (*)"Fœgs", 
ã°_¥e„tch16_Êags
 },

125 
CU_TEST_INFO_NULL


128 
CU_Te°Info
 
	gã°s_¥evíèŒow
[] = {

129 { (*)"Sim∂e", 
ã°_¥evíèŒow_sim∂e
 },

130 { (*)"Eje˘", 
ã°_¥evíèŒow_eje˘
 },

131 { (*)"ITNexusLoss", 
ã°_¥evíèŒow_ô√xus_loss
 },

132 { (*)"Logout", 
ã°_¥evíèŒow_logout
 },

133 { (*)"W¨mRe£t", 
ã°_¥evíèŒow_w¨m_ª£t
 },

134 { (*)"CﬁdRe£t", 
ã°_¥evíèŒow_cﬁd_ª£t
 },

135 { (*)"LUNRe£t", 
ã°_¥evíèŒow_lun_ª£t
 },

136 { (*)"2ITNexu£s", 
ã°_¥evíèŒow_2_ô√xu£s
 },

137 
CU_TEST_INFO_NULL


140 
CU_Te°Info
 
	gã°s_¥ö_ªad_keys
[] = {

141 { (*)"Sim∂e", 
ã°_¥ö_ªad_keys_sim∂e
 },

142 
CU_TEST_INFO_NULL


145 
CU_Te°Info
 
	gã°s_¥out_ªgi°î
[] = {

146 { (*)"Sim∂e", 
ã°_¥out_ªgi°î_sim∂e
 },

147 
CU_TEST_INFO_NULL


150 
CU_Te°Info
 
	gã°s_¥out_ª£rve
[] = {

152 
ã°_¥out_ª£rve_sim∂e
 },

154 
ã°_¥out_ª£rve_ac˚ss_ó
 },

156 
ã°_¥out_ª£rve_ac˚ss_we
 },

158 
ã°_¥out_ª£rve_ac˚ss_óro
 },

160 
ã°_¥out_ª£rve_ac˚ss_wîo
 },

162 
ã°_¥out_ª£rve_ac˚ss_ó¨
 },

164 
ã°_¥out_ª£rve_ac˚ss_wór
 },

166 
ã°_¥out_ª£rve_ow√rshù_ó
 },

168 
ã°_¥out_ª£rve_ow√rshù_we
 },

170 
ã°_¥out_ª£rve_ow√rshù_óro
 },

172 
ã°_¥out_ª£rve_ow√rshù_wîo
 },

174 
ã°_¥out_ª£rve_ow√rshù_ó¨
 },

176 
ã°_¥out_ª£rve_ow√rshù_wór
 },

177 
CU_TEST_INFO_NULL


180 
CU_Te°Info
 
	gã°s_¥ö_£rvi˚a˘i⁄_ønge
[] = {

181 { (*)"R™ge", 
ã°_¥ö_£rvi˚a˘i⁄_ønge
 },

182 
CU_TEST_INFO_NULL


185 
CU_Te°Info
 
	gã°s_ªad6
[] = {

186 { (*)"Sim∂e", 
ã°_ªad6_sim∂e
 },

187 { (*)"Bey⁄dEﬁ", 
ã°_ªad6_bey⁄d_eﬁ
 },

188 
CU_TEST_INFO_NULL


191 
CU_Te°Info
 
	gã°s_ªad10
[] = {

192 { (*)"Sim∂e", 
ã°_ªad10_sim∂e
 },

193 { (*)"Bey⁄dEﬁ", 
ã°_ªad10_bey⁄d_eﬁ
 },

194 { (*)"ZîoBlocks", 
ã°_ªad10_0blocks
 },

195 { (*)"RódPrŸe˘", 
ã°_ªad10_rd¥Ÿe˘
 },

196 { (*)"Fœgs", 
ã°_ªad10_Êags
 },

197 
CU_TEST_INFO_NULL


200 
CU_Te°Info
 
	gã°s_ªad12
[] = {

201 { (*)"Sim∂e", 
ã°_ªad12_sim∂e
 },

202 { (*)"Bey⁄dEﬁ", 
ã°_ªad12_bey⁄d_eﬁ
 },

203 { (*)"ZîoBlocks", 
ã°_ªad12_0blocks
 },

204 { (*)"RódPrŸe˘", 
ã°_ªad12_rd¥Ÿe˘
 },

205 { (*)"Fœgs", 
ã°_ªad12_Êags
 },

206 
CU_TEST_INFO_NULL


209 
CU_Te°Info
 
	gã°s_ªad16
[] = {

210 { (*)"Sim∂e", 
ã°_ªad16_sim∂e
 },

211 { (*)"Bey⁄dEﬁ", 
ã°_ªad16_bey⁄d_eﬁ
 },

212 { (*)"ZîoBlocks", 
ã°_ªad16_0blocks
 },

213 { (*)"RódPrŸe˘", 
ã°_ªad16_rd¥Ÿe˘
 },

214 { (*)"Fœgs", 
ã°_ªad16_Êags
 },

215 
CU_TEST_INFO_NULL


218 
CU_Te°Info
 
	gã°s_ªadˇ∑côy10
[] = {

219 { (*)"Sim∂e", 
ã°_ªadˇ∑côy10_sim∂e
 },

220 
CU_TEST_INFO_NULL


223 
CU_Te°Info
 
	gã°s_ªadˇ∑côy16
[] = {

224 { (*)"Sim∂e", 
ã°_ªadˇ∑côy16_sim∂e
 },

225 { (*)"AŒo˛í", 
ã°_ªadˇ∑côy16_Ælo˛í
 },

226 { (*)"PI", 
ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
 },

227 
CU_TEST_INFO_NULL


230 
CU_Te°Info
 
	gã°s_ªad⁄ly
[] = {

231 { (*)"RódO∆ySBC", 
ã°_ªad⁄ly_sbc
 },

232 
CU_TEST_INFO_NULL


235 
CU_Te°Info
 
	gã°s_ßnôize
[] = {

236 { (*)"BlockEø£", 
ã°_ßnôize_block_îa£
 },

237 { (*)"BlockEø£Re£rved", 
ã°_ßnôize_block_îa£_ª£rved
 },

238 { (*)"Cry±oEø£", 
ã°_ßnôize_¸y±o_îa£
 },

239 { (*)"Cry±oEø£Re£rved", 
ã°_ßnôize_¸y±o_îa£_ª£rved
 },

240 { (*)"ExôFaûuªMode", 
ã°_ßnôize_exô_Áûuª_mode
 },

241 { (*)"InvÆidSîvi˚A˘i⁄", 
ã°_ßnôize_övÆid_£rvi˚a˘i⁄
 },

242 { (*)"Ovîwrôe", 
ã°_ßnôize_ovîwrôe
 },

243 { (*)"OvîwrôeRe£rved", 
ã°_ßnôize_ovîwrôe_ª£rved
 },

244 { (*)"Ród⁄ly", 
ã°_ßnôize_ªad⁄ly
 },

245 { (*)"Re£rv©i⁄s", 
ã°_ßnôize_ª£rv©i⁄s
 },

246 { (*)"Re£t", 
ã°_ßnôize_ª£t
 },

247 
CU_TEST_INFO_NULL


250 
CU_Te°Info
 
	gã°s_ªp‹t_suµ‹ãd_›codes
[] = {

251 { (*)"Sim∂e", 
ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
 },

252 { (*)"O√Comm™d", 
ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
 },

253 { (*)"RCTD", 
ã°_ªp‹t_suµ‹ãd_›codes_r˘d
 },

254 { (*)"SERVACTV", 
ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
 },

255 
CU_TEST_INFO_NULL


258 
CU_Te°Info
 
	gã°s_ª£rve6
[] = {

259 { (*)"Sim∂e", 
ã°_ª£rve6_sim∂e
 },

260 { (*)"2Inôüt‹s", 
ã°_ª£rve6_2öôüt‹s
 },

261 { (*)"Logout", 
ã°_ª£rve6_logout
 },

262 { (*)"ITNexusLoss", 
ã°_ª£rve6_ô√xus_loss
 },

263 { (*)"T¨gëCﬁdRe£t", 
ã°_ª£rve6_èrgë_cﬁd_ª£t
 },

264 { (*)"T¨gëW¨mRe£t", 
ã°_ª£rve6_èrgë_w¨m_ª£t
 },

265 { (*)"LUNRe£t", 
ã°_ª£rve6_lun_ª£t
 },

266 
CU_TEST_INFO_NULL


269 
CU_Te°Info
 
	gã°s_ã°unôªady
[] = {

270 { (*)"Sim∂e", 
ã°_ã°unôªady_sim∂e
 },

271 
CU_TEST_INFO_NULL


274 
CU_Te°Info
 
	gã°s_°¨t°›unô
[] = {

275 { (*)"Sim∂e", 
ã°_°¨t°›unô_sim∂e
 },

276 { (*)"PwrCnd", 
ã°_°¨t°›unô_pwr˙d
 },

277 { (*)"NoL€j", 
ã°_°¨t°›unô_nﬁ€j
 },

278 
CU_TEST_INFO_NULL


281 
CU_Te°Info
 
	gã°s_unm≠
[] = {

282 { (*)"Sim∂e", 
ã°_unm≠_sim∂e
 },

283 { (*)"VPD", 
ã°_unm≠_vpd
 },

284 { (*)"ZîoBlocks", 
ã°_unm≠_0blocks
 },

285 
CU_TEST_INFO_NULL


288 
CU_Te°Info
 
	gã°s_vîify10
[] = {

289 { (*)"Sim∂e", 
ã°_vîify10_sim∂e
 },

290 { (*)"Bey⁄dEﬁ", 
ã°_vîify10_bey⁄d_eﬁ
 },

291 { (*)"ZîoBlocks", 
ã°_vîify10_0blocks
 },

292 { (*)"VîifyPrŸe˘", 
ã°_vîify10_vΩrŸe˘
 },

293 { (*)"Fœgs", 
ã°_vîify10_Êags
 },

294 { (*)"Mism©ch", 
ã°_vîify10_mism©ch
 },

295 { (*)"Mism©chNoCmp", 
ã°_vîify10_mism©ch_no_cmp
 },

296 
CU_TEST_INFO_NULL


299 
CU_Te°Info
 
	gã°s_vîify12
[] = {

300 { (*)"Sim∂e", 
ã°_vîify12_sim∂e
 },

301 { (*)"Bey⁄dEﬁ", 
ã°_vîify12_bey⁄d_eﬁ
 },

302 { (*)"ZîoBlocks", 
ã°_vîify12_0blocks
 },

303 { (*)"VîifyPrŸe˘", 
ã°_vîify12_vΩrŸe˘
 },

304 { (*)"Fœgs", 
ã°_vîify12_Êags
 },

305 { (*)"Mism©ch", 
ã°_vîify12_mism©ch
 },

306 { (*)"Mism©chNoCmp", 
ã°_vîify12_mism©ch_no_cmp
 },

307 
CU_TEST_INFO_NULL


310 
CU_Te°Info
 
	gã°s_vîify16
[] = {

311 { (*)"Sim∂e", 
ã°_vîify16_sim∂e
 },

312 { (*)"Bey⁄dEﬁ", 
ã°_vîify16_bey⁄d_eﬁ
 },

313 { (*)"ZîoBlocks", 
ã°_vîify16_0blocks
 },

314 { (*)"VîifyPrŸe˘", 
ã°_vîify16_vΩrŸe˘
 },

315 { (*)"Fœgs", 
ã°_vîify16_Êags
 },

316 { (*)"Mism©ch", 
ã°_vîify16_mism©ch
 },

317 { (*)"Mism©chNoCmp", 
ã°_vîify16_mism©ch_no_cmp
 },

318 
CU_TEST_INFO_NULL


321 
CU_Te°Info
 
	gã°s_wrôe10
[] = {

322 { (*)"Sim∂e", 
ã°_wrôe10_sim∂e
 },

323 { (*)"Bey⁄dEﬁ", 
ã°_wrôe10_bey⁄d_eﬁ
 },

324 { (*)"ZîoBlocks", 
ã°_wrôe10_0blocks
 },

325 { (*)"WrôePrŸe˘", 
ã°_wrôe10_wΩrŸe˘
 },

326 { (*)"Fœgs", 
ã°_wrôe10_Êags
 },

327 
CU_TEST_INFO_NULL


330 
CU_Te°Info
 
	gã°s_wrôe12
[] = {

331 { (*)"Sim∂e", 
ã°_wrôe12_sim∂e
 },

332 { (*)"Bey⁄dEﬁ", 
ã°_wrôe12_bey⁄d_eﬁ
 },

333 { (*)"ZîoBlocks", 
ã°_wrôe12_0blocks
 },

334 { (*)"WrôePrŸe˘", 
ã°_wrôe12_wΩrŸe˘
 },

335 { (*)"Fœgs", 
ã°_wrôe12_Êags
 },

336 
CU_TEST_INFO_NULL


339 
CU_Te°Info
 
	gã°s_wrôe16
[] = {

340 { (*)"Sim∂e", 
ã°_wrôe16_sim∂e
 },

341 { (*)"Bey⁄dEﬁ", 
ã°_wrôe16_bey⁄d_eﬁ
 },

342 { (*)"ZîoBlocks", 
ã°_wrôe16_0blocks
 },

343 { (*)"WrôePrŸe˘", 
ã°_wrôe16_wΩrŸe˘
 },

344 { (*)"Fœgs", 
ã°_wrôe16_Êags
 },

345 
CU_TEST_INFO_NULL


348 
CU_Te°Info
 
	gã°s_wrôeßme10
[] = {

349 { (*)"Sim∂e", 
ã°_wrôeßme10_sim∂e
 },

350 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme10_bey⁄d_eﬁ
 },

351 { (*)"ZîoBlocks", 
ã°_wrôeßme10_0blocks
 },

352 { (*)"WrôePrŸe˘", 
ã°_wrôeßme10_wΩrŸe˘
 },

353 { (*)"Unm≠", 
ã°_wrôeßme10_unm≠
 },

354 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme10_unm≠_u«lig√d
 },

355 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme10_unm≠_u¡û_íd
 },

356 { (*)"Unm≠VPD", 
ã°_wrôeßme10_unm≠_vpd
 },

357 
CU_TEST_INFO_NULL


360 
CU_Te°Info
 
	gã°s_wrôeßme16
[] = {

361 { (*)"Sim∂e", 
ã°_wrôeßme16_sim∂e
 },

362 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme16_bey⁄d_eﬁ
 },

363 { (*)"ZîoBlocks", 
ã°_wrôeßme16_0blocks
 },

364 { (*)"WrôePrŸe˘", 
ã°_wrôeßme16_wΩrŸe˘
 },

365 { (*)"Unm≠", 
ã°_wrôeßme16_unm≠
 },

366 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme16_unm≠_u«lig√d
 },

367 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme16_unm≠_u¡û_íd
 },

368 { (*)"Unm≠VPD", 
ã°_wrôeßme16_unm≠_vpd
 },

369 
CU_TEST_INFO_NULL


372 
CU_Te°Info
 
	gã°s_wrôevîify10
[] = {

373 { (*)"Sim∂e", 
ã°_wrôevîify10_sim∂e
 },

374 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify10_bey⁄d_eﬁ
 },

375 { (*)"ZîoBlocks", 
ã°_wrôevîify10_0blocks
 },

376 { (*)"WrôePrŸe˘", 
ã°_wrôevîify10_wΩrŸe˘
 },

377 { (*)"Fœgs", 
ã°_wrôevîify10_Êags
 },

378 
CU_TEST_INFO_NULL


381 
CU_Te°Info
 
	gã°s_wrôevîify12
[] = {

382 { (*)"Sim∂e", 
ã°_wrôevîify12_sim∂e
 },

383 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify12_bey⁄d_eﬁ
 },

384 { (*)"ZîoBlocks", 
ã°_wrôevîify12_0blocks
 },

385 { (*)"WrôePrŸe˘", 
ã°_wrôevîify12_wΩrŸe˘
 },

386 { (*)"Fœgs", 
ã°_wrôevîify12_Êags
 },

387 
CU_TEST_INFO_NULL


390 
CU_Te°Info
 
	gã°s_wrôevîify16
[] = {

391 { (*)"Sim∂e", 
ã°_wrôevîify16_sim∂e
 },

392 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify16_bey⁄d_eﬁ
 },

393 { (*)"ZîoBlocks", 
ã°_wrôevîify16_0blocks
 },

394 { (*)"WrôePrŸe˘", 
ã°_wrôevîify16_wΩrŸe˘
 },

395 { (*)"Fœgs", 
ã°_wrôevîify16_Êags
 },

396 
CU_TEST_INFO_NULL


399 
	slibiscsi_suôe_öfo
 {

400 c⁄° *
	mpName
;

401 
CU_InôülizeFunc
 
	mpInôFunc
;

402 
CU_CÀ™upFunc
 
	mpCÀ™upFunc
;

403 
CU_SëUpFunc
 
	mpSëUpFunc
;

404 
CU_TórDownFunc
 
	mpTórDownFunc
;

405 
CU_Te°Info
 *
	mpTe°s
;

406 } 
	tlibiscsi_suôe_öfo
;

408 
	#NON_PGR_FUNCS
 
suôe_öô
, 
suôe_˛ónup
, 
ã°_£tup
, 
ã°_ã¨down


	)

409 
	#PGR_FUNCS
 
suôe_öô_pgr
, 
suôe_˛ónup_pgr
, 
ã°_£tup
, 
ã°_ã¨down


	)

412 
libiscsi_suôe_öfo
 
	gscsi_suôes
[] = {

413 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

414 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

415 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

416 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

417 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

418 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

419 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

420 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

421 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

422 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

423 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

424 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
, 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

425 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

426 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

427 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

428 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

429 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

430 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

431 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

432 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

433 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

434 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

435 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

436 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

437 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

438 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

439 { "UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

440 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

441 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

442 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

443 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

444 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

445 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

446 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

447 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

448 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

449 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

450 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

451 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

452 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

455 
CU_Te°Info
 
	gã°s_iscsi_cmd¢
[] = {

456 { (*)"iSCSICmdSnTooHigh", 
ã°_iscsi_cmd¢_toohigh
 },

457 { (*)"iSCSICmdSnTooLow", 
ã°_iscsi_cmd¢_toﬁow
 },

458 
CU_TEST_INFO_NULL


461 
CU_Te°Info
 
	gã°s_iscsi_d©a¢
[] = {

462 { (*)"iSCSID©aSnInvÆid", 
ã°_iscsi_d©a¢_övÆid
 },

463 
CU_TEST_INFO_NULL


466 
CU_Te°Info
 
	gã°s_iscsi_ªsiduÆs
[] = {

467 { (*)"Ród10InvÆid", 
ã°_ªad10_övÆid
 },

468 { (*)"Ród10ResiduÆs", 
ã°_ªad10_ªsiduÆs
 },

469 { (*)"Ród12ResiduÆs", 
ã°_ªad12_ªsiduÆs
 },

470 { (*)"Ród16ResiduÆs", 
ã°_ªad16_ªsiduÆs
 },

471 { (*)"Wrôe10ResiduÆs", 
ã°_wrôe10_ªsiduÆs
 },

472 { (*)"Wrôe12ResiduÆs", 
ã°_wrôe12_ªsiduÆs
 },

473 { (*)"Wrôe16ResiduÆs", 
ã°_wrôe16_ªsiduÆs
 },

474 { (*)"WrôeVîify10ResiduÆs", 
ã°_wrôevîify10_ªsiduÆs
 },

475 { (*)"WrôeVîify12ResiduÆs", 
ã°_wrôevîify12_ªsiduÆs
 },

476 { (*)"WrôeVîify16ResiduÆs", 
ã°_wrôevîify16_ªsiduÆs
 },

477 
CU_TEST_INFO_NULL


481 
libiscsi_suôe_öfo
 
	giscsi_suôes
[] = {

482 { "iSCSIcmd¢", 
NON_PGR_FUNCS
,

483 
ã°s_iscsi_cmd¢
 },

484 { "iSCSId©a¢", 
NON_PGR_FUNCS
,

485 
ã°s_iscsi_d©a¢
 },

486 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
,

487 
ã°s_iscsi_ªsiduÆs
 },

488 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

492 
libiscsi_suôe_öfo
 
	gÆl_suôes
[] = {

493 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

494 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

495 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

496 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

497 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

498 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

499 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

500 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

501 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

502 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

503 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

504 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
,

505 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

506 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

507 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

508 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

509 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

510 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

511 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

512 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

513 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

514 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

515 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

516 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

517 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

518 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

519 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

520 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

521 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

522 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

523 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

524 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

525 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

526 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

527 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

528 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

529 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

530 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

531 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

532 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

533 { "iSCSIcmd¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_cmd¢
 },

534 { "iSCSId©a¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_d©a¢
 },

535 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
, 
ã°s_iscsi_ªsiduÆs
 },

536 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

539 
libiscsi_suôe_öfo
 
	gscsi_usb_sbc_suôes
[] = {

540 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

541 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

542 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

543 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

544 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

545 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

546 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

547 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

548 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

549 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
,

550 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

551 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

552 { "ProutRe£rve", 
PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

553 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

554 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

555 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

556 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

557 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

558 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

559 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

560 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

561 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

562 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

563 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

564 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

565 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

566 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

567 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

568 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

569 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

570 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

571 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

572 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

573 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

574 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

575 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

576 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

579 
	sã°_Ámûy
 {

580 c⁄° *
	m«me
;

581 
libiscsi_suôe_öfo
 *
	msuôes
;

584 
ã°_Ámûy
 
	gÁmûõs
[] = {

585 { "ALL", 
Æl_suôes
 },

586 { "SCSI", 
scsi_suôes
 },

587 { "iSCSI", 
iscsi_suôes
 },

588 { "SCSI-USB-SBC", 
scsi_usb_sbc_suôes
 },

589 { 
NULL
, NULL}

595 
	gtgt_lun
;

596 
iscsi_c⁄ãxt
 *
	giscsic
;

597 
scsi_èsk
 *
	gèsk
;

598 
	gtgt_lun2
;

599 
iscsi_c⁄ãxt
 *
	giscsic2
;

600 *
	gªad_wrôe_buf
;

604 
	$¥öt_ußge
()

606 
	`Ârötf
(
°dîr
,

608 
PROG
);

609 
	`Ârötf
(
°dîr
,

610 "‹ %†[OPTIONS] <iscsi-uæ>\n", 
PROG
);

611 
	`Ârötf
(
°dîr
,

613 
	`Ârötf
(
°dîr
,

615 
öôüt‹«me1
);

616 
	`Ârötf
(
°dîr
,

618 
öôüt‹«me2
);

619 
	`Ârötf
(
°dîr
,

621 
	`Ârötf
(
°dîr
,

623 
	`Ârötf
(
°dîr
,

625 
	`Ârötf
(
°dîr
,

627 
	`Ârötf
(
°dîr
,

629 
	`Ârötf
(
°dîr
,

631 
	`Ârötf
(
°dîr
,

633 
	`Ârötf
(
°dîr
,

636 
	`Ârötf
(
°dîr
,

638 
	`Ârötf
(
°dîr
,

640 
	`Ârötf
(
°dîr
,

642 
	`Ârötf
(
°dîr
,

644 
	`Ârötf
(
°dîr
, "\n");

645 
	`Ârötf
(
°dîr
,

646 "Whîê<iscsi-uæ> iSCSI URL f‹m© is: %s\n", 
ISCSI_URL_SYNTAX
);

647 
	`Ârötf
(
°dîr
, "\n");

648 
	`Ârötf
(
°dîr
,

650 
	`Ârötf
(
°dîr
,

652 
	`Ârötf
(
°dîr
,

654 
	`Ârötf
(
°dîr
,

656 
	`Ârötf
(
°dîr
, "\n");

657 
	`Ârötf
(
°dîr
,

659 
	`Ârötf
(
°dîr
, "\n");

660 
	}
}

663 
	$ã°_£tup
()

665 
èsk
 = 
NULL
;

666 
ªad_wrôe_buf
 = 
NULL
;

667 
	}
}

670 
	$ã°_ã¨down
()

672 
	`‰ì
(
ªad_wrôe_buf
);

673 
ªad_wrôe_buf
 = 
NULL
;

674 
	`scsi_‰ì_scsi_èsk
(
èsk
);

675 
èsk
 = 
NULL
;

676 
	}
}

679 
	$suôe_öô
()

681 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

682 i‡(
iscsic
 =
NULL
) {

683 
	`Ârötf
(
°dîr
,

687 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


689 
	`ã°_£tup
();

692 
	}
}

695 
	$suôe_˛ónup
()

697 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


699 
	`ã°_ã¨down
();

701 i‡(
iscsic
) {

702 
	`iscsi_logout_sync
(
iscsic
);

703 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

704 
iscsic
 = 
NULL
;

707 
	}
}

710 
	$suôe_öô_pgr
()

712 
	`suôe_öô
();

713 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun2
);

714 i‡(
iscsic2
 =
NULL
) {

715 
	`Ârötf
(
°dîr
,

717 
	`suôe_˛ónup
();

721 
	}
}

724 
	$suôe_˛ónup_pgr
()

726 i‡(
iscsic2
) {

727 
	`iscsi_logout_sync
(
iscsic2
);

728 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

729 
iscsic2
 = 
NULL
;

731 
	`suôe_˛ónup
();

733 
	}
}

736 
	$li°_Æl_ã°s
()

738 
ã°_Ámûy
 *
Â
;

739 
libiscsi_suôe_öfo
 *
•
;

740 
CU_Te°Info
 *
ç
;

742 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

743 
	`¥ötf
("%s\n", 
Â
->
«me
);

744 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

745 
	`¥ötf
("%s.%s\n", 
Â
->
«me
,
•
->
pName
);

746 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

747 
	`¥ötf
("%s.%s.%s\n", 
Â
->
«me
,
•
->
pName
,

748 
ç
->
pName
);

752 
	}
}

755 
CU_Eº‹Code


756 
	$add_ã°s
(c⁄° *
ã°«me_ª
)

758 *
Ámûy_ª
 = 
NULL
;

759 *
suôe_ª
 = 
NULL
;

760 *
ã°_ª
 = 
NULL
;

761 *
˝
;

762 
ã°_Ámûy
 *
Â
;

763 
libiscsi_suôe_öfo
 *
•
;

764 
CU_Te°Info
 *
ç
;

768 i‡(!
ã°«me_ª
) {

769 
Ámûy_ª
 = 
	`°rdup
("*");

770 
suôe_ª
 = 
	`°rdup
("*");

771 
ã°_ª
 = 
	`°rdup
("*");

778 
Ámûy_ª
 = 
	`°rdup
(
ã°«me_ª
);

779 i‡((
˝
 = 
	`°rchr
(
Ámûy_ª
, '.')Ë!
NULL
) {

780 *
˝
++ = 0;

781 
suôe_ª
 = 
	`°rdup
(
˝
);

782 i‡((
˝
 = 
	`°rchr
(
suôe_ª
, '.')Ë!
NULL
) {

783 *
˝
++ = 0;

784 
ã°_ª
 = 
	`°rdup
(
˝
);

787 i‡(!
suôe_ª
)

788 
suôe_ª
 = 
	`°rdup
("*");

789 i‡(!
ã°_ª
)

790 
ã°_ª
 = 
	`°rdup
("*");

791 i‡(!
Ámûy_ª
) {

792 
	`Ârötf
(
°dîr
,

794 
Ámûy_ª
);

795  
CUE_NOTEST
;

803 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

804 i‡(
	`‚m©ch
(
Ámûy_ª
, 
Â
->
«me
, 0) != 0)

807 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

808 
suôe_added
 = 0;

809 
CU_pSuôe
 
pSuôe
 = 
NULL
;

811 i‡(
	`‚m©ch
(
suôe_ª
, 
•
->
pName
, 0) != 0)

814 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

815 i‡(
	`‚m©ch
(
ã°_ª
, 
ç
->
pName
, 0) != 0) {

818 i‡(!
suôe_added
) {

819 
suôe_added
++;

820 #ifde‡
HAVE_CU_SUITEINFO_PSETUPFUNC


821 
pSuôe
 = 
	`CU_add_suôe_wôh_£tup_™d_ã¨down
(
•
->
pName
,

822 
•
->
pInôFunc
, sp->
pCÀ™upFunc
,

823 
•
->
pSëUpFunc
, sp->
pTórDownFunc
);

825 
pSuôe
 = 
	`CU_add_suôe
(
•
->
pName
,

826 
•
->
pInôFunc
, sp->
pCÀ™upFunc
);

829 
	`CU_add_ã°
(
pSuôe
, 
ç
->
pName
,Åp->
pTe°Func
);

835 
	`‰ì
(
Ámûy_ª
);

836 
	`‰ì
(
suôe_ª
);

837 
	`‰ì
(
ã°_ª
);

839  
CUE_SUCCESS
;

840 
	}
}

844 
	$maö
(
¨gc
, *
¨gv
[])

846 *
ã°«me_ª
 = 
NULL
;

847 
lun
;

848 
CU_BasicRunMode
 
mode
 = 
CU_BRM_VERBOSE
;

849 
CU_Eº‹A˘i⁄
 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

850 
ªs
;

851 
scsi_ªadˇ∑côy10
 *
rc10
;

852 
scsi_èsk
 *
öq_èsk
 = 
NULL
;

853 
scsi_èsk
 *
öq_lbp_èsk
 = 
NULL
;

854 
scsi_èsk
 *
öq_bdc_èsk
 = 
NULL
;

855 
scsi_èsk
 *
öq_bl_èsk
 = 
NULL
;

856 
scsi_èsk
 *
rc16_èsk
 = 
NULL
;

857 
scsi_èsk
 *
rs›_èsk
 = 
NULL
;

858 
fuŒ_size
;

859 
is_usb
 = 0;

860 
›ti⁄
 
l⁄g_›ts
[] = {

861 { "hñp", 
no_¨gumít
, 0, '?' },

862 { "li°", 
no_¨gumít
, 0, 'l' },

863 { "öôüt‹-«me", 
ªquúed_¨gumít
, 0, 'i' },

864 { "öôüt‹-«me-2", 
ªquúed_¨gumít
, 0, 'I' },

865 { "ã°", 
ªquúed_¨gumít
, 0, 't' },

866 { "d©Æoss", 
no_¨gumít
, 0, 'd' },

867 { "Ælow-ßnôize", 
no_¨gumít
, 0, 'S' },

868 { "ign‹e", 
no_¨gumít
, 0, 'g' },

869 { "Áû", 
no_¨gumít
, 0, 'f' },

870 { "ab‹t", 
no_¨gumít
, 0, 'A' },

871 { "sûít", 
no_¨gumít
, 0, 's' },

872 { "n‹mÆ", 
no_¨gumít
, 0, 'n' },

873 { "usb", 
no_¨gumít
, 0, 'u' },

874 { "vîbo£", 
no_¨gumít
, 0, 'v' },

875 { "Vîbo£-scsi", 
no_¨gumít
, 0, 'V' },

876 { 
NULL
, 0, 0, 0 }

878 
i
, 
c
;

879 
›t_idx
 = 0;

881 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "?hli:I:t:sdgfAsSnuvV", 
l⁄g_›ts
,

882 &
›t_idx
)) > 0) {

883 
c
) {

886 
	`¥öt_ußge
();

889 
	`li°_Æl_ã°s
();

892 
öôüt‹«me1
 = 
	`°rdup
(
›èrg
);

895 
öôüt‹«me2
 = 
	`°rdup
(
›èrg
);

898 
ã°«me_ª
 = 
	`°rdup
(
›èrg
);

901 
d©a_loss
++;

904 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

907 
îr‹_a˘i⁄
 = 
CUEA_FAIL
;

910 
îr‹_a˘i⁄
 = 
CUEA_ABORT
;

913 
mode
 = 
CU_BRM_SILENT
;

916 
Ælow_ßnôize
 = 1;

919 
mode
 = 
CU_BRM_NORMAL
;

922 
is_usb
 = 1;

925 
mode
 = 
CU_BRM_VERBOSE
;

928 
logÀvñ
 = 
LOG_VERBOSE
;

931 
	`Ârötf
(
°dîr
,

933 
c
, 
¨gv
[
›töd
]);

938 i‡(
›töd
 < 
¨gc
) {

939 
tgt_uæ
 = 
	`°rdup
(
¨gv
[
›töd
++]);

941 i‡(
›töd
 < 
¨gc
) {

942 
	`Ârötf
(
°dîr
, "error:Åoo manyárguments\n");

943 
	`¥öt_ußge
();

948 
ªÆ_iscsi_queue_pdu
 = 
	`dlsym
(
RTLD_NEXT
, "iscsi_queue_pdu");

950 i‡(
tgt_uæ
 =
NULL
) {

951 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

952 
	`¥öt_ußge
();

953 i‡(
ã°«me_ª
)

954 
	`‰ì
(
ã°«me_ª
);

958 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
lun
);

959 i‡(
iscsic
 =
NULL
) {

960 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

969 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsic
, 
lun
, 0, 0);

970 i‡(
èsk
 =
NULL
) {

971 
	`¥ötf
("FailedÅo send READCAPACITY10 command: %s\n",

972 
	`iscsi_gë_îr‹
(
iscsic
));

973 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

976 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

977 
	`¥ötf
("READCAPACITY10 command: failed with sense. %s\n",

978 
	`iscsi_gë_îr‹
(
iscsic
));

979 
	`scsi_‰ì_scsi_èsk
(
èsk
);

980 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

983 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

984 i‡(
rc10
 =
NULL
) {

985 
	`¥ötf
("failedÅo unmarshall READCAPACITY10 data. %s\n",

986 
	`iscsi_gë_îr‹
(
iscsic
));

987 
	`scsi_‰ì_scsi_èsk
(
èsk
);

988 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

991 
block_size
 = 
rc10
->block_size;

992 
num_blocks
 = 
rc10
->
lba
 + 1;

993 
	`scsi_‰ì_scsi_èsk
(
èsk
);

995 
rc16_èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsic
, 
lun
);

996 i‡(
rc16_èsk
 =
NULL
) {

997 
	`¥ötf
("FailedÅo send READCAPACITY16 command: %s\n",

998 
	`iscsi_gë_îr‹
(
iscsic
));

999 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1002 i‡(
rc16_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1003 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
rc16_èsk
);

1004 i‡(
rc16
 =
NULL
) {

1005 
	`¥ötf
("failedÅo unmarshall READCAPACITY16 data. %s\n",

1006 
	`iscsi_gë_îr‹
(
iscsic
));

1007 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1008 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1011 
block_size
 = 
rc16
->
block_Àngth
;

1012 
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

1013 
lbµb
 = 1 << 
rc16
->
lbµbe
;

1016 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 0, 0, 64);

1017 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1018 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1021 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

1022 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

1023 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1026 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 0, 0, 
fuŒ_size
);

1027 i‡(
öq_èsk
 =
NULL
) {

1028 
	`¥ötf
("Inquiry command failed : %s\n",

1029 
	`iscsi_gë_îr‹
(
iscsic
));

1033 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

1034 i‡(
öq
 =
NULL
) {

1035 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1036 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1040 
sbc3_suµ‹t
 = 0;

1041 
i
 = 0; i < 8; i++) {

1042 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0x04C0) {

1043 
sbc3_suµ‹t
 = 1;

1048 
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 64);

1049 i‡(
öq_bl_èsk
 && inq_bl_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1050 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1051 
öq_bl_èsk
 = 
NULL
;

1053 i‡(
öq_bl_èsk
) {

1054 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_bl_èsk
);

1055 i‡(
fuŒ_size
 > 
öq_bl_èsk
->
d©aö
.
size
) {

1056 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1058 i‡((
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 
fuŒ_size
)Ë=
NULL
) {

1059 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1064 
öq_bl
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bl_èsk
);

1065 i‡(
öq_bl
 =
NULL
) {

1066 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1072 
öq_bdc_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
, 255);

1073 i‡(
öq_bdc_èsk
 =
NULL
) {

1074 
	`¥ötf
("FailedÅoÑead Block Device CharacteristicsÖage\n");

1076 i‡(
öq_bdc_èsk
) {

1077 
öq_bdc
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bdc_èsk
);

1078 i‡(
öq_bdc
 =
NULL
) {

1079 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1085 i‡(
rc16
 &&Ñc16->
lbpme
 != 0){

1086 
öq_lbp_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64);

1087 i‡(
öq_lbp_èsk
 =
NULL
 || inq_lbp_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1088 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1091 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_lbp_èsk
);

1092 i‡(
fuŒ_size
 > 
öq_lbp_èsk
->
d©aö
.
size
) {

1093 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1096 i‡((
öq_lbp_èsk
 = 
	`iscsi_öquúy_sync
(
iscsic
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 
fuŒ_size
)Ë=
NULL
) {

1097 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsic
));

1102 
öq_lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_lbp_èsk
);

1103 i‡(
öq_lbp
 =
NULL
) {

1104 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1109 
rs›_èsk
 = 
	`iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsic
, 
lun
,

1110 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0, 65535);

1111 i‡(
rs›_èsk
 =
NULL
) {

1112 
	`¥ötf
("FailedÅo send REPORT_SUPPORTED_OPCODES command: %s\n",

1113 
	`iscsi_gë_îr‹
(
iscsic
));

1114 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1117 i‡(
rs›_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1118 
rs›
 = 
	`scsi_d©aö_unm¨shÆl
(
rs›_èsk
);

1119 i‡(
rs›
 =
NULL
) {

1120 
	`¥ötf
("failedÅo unmarshall REPORT_SUPPORTED_OPCODES "

1122 
	`iscsi_gë_îr‹
(
iscsic
));

1123 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1128 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

1129 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

1131 i‡(
èsk
 =
NULL
) {

1132 
	`¥ötf
("FailedÅo send MODE_SENSE6 command: %s\n",

1133 
	`iscsi_gë_îr‹
(
iscsic
));

1134 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1137 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1138 
scsi_mode_£n£
 *
ms
;

1140 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1141 i‡(
ms
 =
NULL
) {

1142 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

1143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1146 
ªad⁄ly
 = !!(
ms
->
devi˚_•ecific_∑ømëî
 & 0x80);

1148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1150 
	`iscsi_logout_sync
(
iscsic
);

1151 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

1153 i‡(
is_usb
) {

1154 
	`¥ötf
("USB device. Clamping maximumÅransferÜengthÅo 120k\n");

1155 
maximum_å™s„r_Àngth
 = 120 *1024 / 
block_size
;

1158 i‡(
	`CU_öôülize_ªgi°ry
() != 0) {

1159 
	`Ârötf
(
°dîr
, "error: unableÅo initializeÅestÑegistry\n");

1162 i‡(
	`CU_is_ã°_ru¬ög
()) {

1163 
	`Ârötf
(
°dîr
, "error:Åest suite(s)álreadyÑunning!?\n");

1164 
	`exô
(1);

1167 i‡(
	`add_ã°s
(
ã°«me_ª
Ë!
CUE_SUCCESS
) {

1168 
	`Ârötf
(
°dîr
, "error: suiteÑegistration failed: %s\n",

1169 
	`CU_gë_îr‹_msg
());

1170 
	`exô
(1);

1172 
	`CU_basic_£t_mode
(
mode
);

1173 
	`CU_£t_îr‹_a˘i⁄
(
îr‹_a˘i⁄
);

1174 
	`¥ötf
("\n");

1179 
ªs
 = 
	`CU_basic_run_ã°s
();

1181 
	`¥ötf
("Te°†com∂ëed wôhÑëu∫ vÆue: %d\n", 
ªs
);

1183 
	`CU_˛ónup_ªgi°ry
();

1184 i‡(
ã°«me_ª
)

1185 
	`‰ì
(
ã°«me_ª
);

1186 
	`‰ì
(
	`disˇrd_c⁄°
(
tgt_uæ
));

1188 i‡(
öq_èsk
 !
NULL
) {

1189 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1191 i‡(
öq_bl_èsk
 !
NULL
) {

1192 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1194 i‡(
öq_lbp_èsk
 !
NULL
) {

1195 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1197 i‡(
öq_bdc_èsk
 !
NULL
) {

1198 
	`scsi_‰ì_scsi_èsk
(
öq_bdc_èsk
);

1200 i‡(
rc16_èsk
 !
NULL
) {

1201 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1203 i‡(
rs›_èsk
 !
NULL
) {

1204 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1208 
	}
}

	@test-tool/iscsi-test.c

20 
	#_GNU_SOURCE


	)

21 
	~<sys/sysˇŒ.h
>

22 
	~<dlf˙.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<öây≥s.h
>

28 
	~<°rög.h
>

29 
	~<pﬁl.h
>

30 
	~<gë›t.h
>

31 
	~<‚m©ch.h
>

32 
	~"¶i°.h
"

33 
	~"iscsi.h
"

34 
	~"scsi-lowÀvñ.h
"

35 
	~"iscsi-¥iv©e.h
"

36 
	~"iscsi-ã°.h
"

37 
	~"iscsi-suµ‹t.h
"

39 #i‚de‡
disˇrd_c⁄°


40 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

43 
	glogÀvñ
 = 
LOG_VERBOSE
;

45 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

48 
show_öfo
;

50 
	sscsi_ã°
 {

51 c⁄° *
«me
;

52 (*
ã°
)(c⁄° *
öôüt‹
, c⁄° *
uæ
);

55 
scsi_ã°
 
ã°s
[] = {

59 { "T0000_ã°unôªady_sim∂e", 
T0000_ã°unôªady_sim∂e
 },

62 { "T0100_ªad10_sim∂e", 
T0100_ªad10_sim∂e
 },

63 { "T0101_ªad10_bey⁄d_eﬁ", 
T0101_ªad10_bey⁄d_eﬁ
 },

64 { "T0102_ªad10_0blocks", 
T0102_ªad10_0blocks
 },

65 { "T0103_ªad10_rd¥Ÿe˘", 
T0103_ªad10_rd¥Ÿe˘
 },

66 { "T0104_ªad10_Êags", 
T0104_ªad10_Êags
 },

67 { "T0105_ªad10_övÆid", 
T0105_ªad10_övÆid
 },

70 { "T0110_ªadˇ∑côy10_sim∂e", 
T0110_ªadˇ∑côy10_sim∂e
 },

73 { "T0120_ªad6_sim∂e", 
T0120_ªad6_sim∂e
 },

74 { "T0121_ªad6_bey⁄d_eﬁ", 
T0121_ªad6_bey⁄d_eﬁ
 },

75 { "T0122_ªad6_övÆid", 
T0122_ªad6_övÆid
 },

78 { "T0130_vîify10_sim∂e", 
T0130_vîify10_sim∂e
 },

79 { "T0131_vîify10_mism©ch", 
T0131_vîify10_mism©ch
 },

80 { "T0132_vîify10_mism©ch_no_cmp", 
T0132_vîify10_mism©ch_no_cmp
 },

81 { "T0133_vîify10_bey⁄deﬁ", 
T0133_vîify10_bey⁄deﬁ
 },

84 { "T0160_ªadˇ∑côy16_sim∂e", 
T0160_ªadˇ∑côy16_sim∂e
 },

85 { "T0161_ªadˇ∑côy16_Ælo˛í", 
T0161_ªadˇ∑côy16_Ælo˛í
 },

88 { "T0170_unm≠_sim∂e", 
T0170_unm≠_sim∂e
 },

89 { "T0171_unm≠_zîo", 
T0171_unm≠_zîo
 },

92 { "T0180_wrôeßme10_unm≠", 
T0180_wrôeßme10_unm≠
 },

93 { "T0181_wrôeßme10_unm≠_u«lig√d", 
T0181_wrôeßme10_unm≠_u«lig√d
 },

94 { "T0182_wrôeßme10_bey⁄deﬁ", 
T0182_wrôeßme10_bey⁄deﬁ
 },

95 { "T0183_wrôeßme10_wΩrŸe˘", 
T0183_wrôeßme10_wΩrŸe˘
 },

96 { "T0184_wrôeßme10_0blocks", 
T0184_wrôeßme10_0blocks
 },

99 { "T0190_wrôeßme16_unm≠", 
T0190_wrôeßme16_unm≠
 },

100 { "T0191_wrôeßme16_unm≠_u«lig√d", 
T0191_wrôeßme16_unm≠_u«lig√d
 },

101 { "T0192_wrôeßme16_bey⁄deﬁ", 
T0192_wrôeßme16_bey⁄deﬁ
 },

102 { "T0193_wrôeßme16_wΩrŸe˘", 
T0193_wrôeßme16_wΩrŸe˘
 },

103 { "T0194_wrôeßme16_0blocks", 
T0194_wrôeßme16_0blocks
 },

106 { "T0200_ªad16_sim∂e", 
T0200_ªad16_sim∂e
 },

107 { "T0201_ªad16_rd¥Ÿe˘", 
T0201_ªad16_rd¥Ÿe˘
 },

108 { "T0202_ªad16_Êags", 
T0202_ªad16_Êags
 },

109 { "T0203_ªad16_0blocks", 
T0203_ªad16_0blocks
 },

110 { "T0204_ªad16_bey⁄deﬁ", 
T0204_ªad16_bey⁄deﬁ
 },

113 { "T0210_ªad12_sim∂e", 
T0210_ªad12_sim∂e
 },

114 { "T0211_ªad12_rd¥Ÿe˘", 
T0211_ªad12_rd¥Ÿe˘
 },

115 { "T0212_ªad12_Êags", 
T0212_ªad12_Êags
 },

116 { "T0213_ªad12_0blocks", 
T0213_ªad12_0blocks
 },

117 { "T0214_ªad12_bey⁄deﬁ", 
T0214_ªad12_bey⁄deﬁ
 },

120 { "T0220_wrôe16_sim∂e", 
T0220_wrôe16_sim∂e
 },

121 { "T0221_wrôe16_wΩrŸe˘", 
T0221_wrôe16_wΩrŸe˘
 },

122 { "T0222_wrôe16_Êags", 
T0222_wrôe16_Êags
 },

123 { "T0223_wrôe16_0blocks", 
T0223_wrôe16_0blocks
 },

124 { "T0224_wrôe16_bey⁄deﬁ", 
T0224_wrôe16_bey⁄deﬁ
 },

127 { "T0230_wrôe12_sim∂e", 
T0230_wrôe12_sim∂e
 },

128 { "T0231_wrôe12_wΩrŸe˘", 
T0231_wrôe12_wΩrŸe˘
 },

129 { "T0232_wrôe12_Êags", 
T0232_wrôe12_Êags
 },

130 { "T0233_wrôe12_0blocks", 
T0233_wrôe12_0blocks
 },

131 { "T0234_wrôe12_bey⁄deﬁ", 
T0234_wrôe12_bey⁄deﬁ
 },

134 { "T0240_¥e„tch10_sim∂e", 
T0240_¥e„tch10_sim∂e
 },

135 { "T0241_¥e„tch10_Êags", 
T0241_¥e„tch10_Êags
 },

136 { "T0242_¥e„tch10_bey⁄deﬁ", 
T0242_¥e„tch10_bey⁄deﬁ
 },

137 { "T0243_¥e„tch10_0blocks", 
T0243_¥e„tch10_0blocks
 },

140 { "T0250_¥e„tch16_sim∂e", 
T0250_¥e„tch16_sim∂e
 },

141 { "T0251_¥e„tch16_Êags", 
T0251_¥e„tch16_Êags
 },

142 { "T0252_¥e„tch16_bey⁄deﬁ", 
T0252_¥e„tch16_bey⁄deﬁ
 },

143 { "T0253_¥e„tch16_0blocks", 
T0253_¥e„tch16_0blocks
 },

146 { "T0260_gë_lba_°©us_sim∂e", 
T0260_gë_lba_°©us_sim∂e
 },

147 { "T0264_gë_lba_°©us_bey⁄deﬁ", 
T0264_gë_lba_°©us_bey⁄deﬁ
 },

150 { "T0270_vîify16_sim∂e", 
T0270_vîify16_sim∂e
 },

151 { "T0271_vîify16_mism©ch", 
T0271_vîify16_mism©ch
 },

152 { "T0272_vîify16_mism©ch_no_cmp", 
T0272_vîify16_mism©ch_no_cmp
 },

153 { "T0273_vîify16_bey⁄deﬁ", 
T0273_vîify16_bey⁄deﬁ
 },

156 { "T0280_vîify12_sim∂e", 
T0280_vîify12_sim∂e
 },

157 { "T0281_vîify12_mism©ch", 
T0281_vîify12_mism©ch
 },

158 { "T0282_vîify12_mism©ch_no_cmp", 
T0282_vîify12_mism©ch_no_cmp
 },

159 { "T0283_vîify12_bey⁄deﬁ", 
T0283_vîify12_bey⁄deﬁ
 },

162 { "T0290_wrôe10_sim∂e", 
T0290_wrôe10_sim∂e
 },

163 { "T0291_wrôe10_wΩrŸe˘", 
T0291_wrôe10_wΩrŸe˘
 },

164 { "T0292_wrôe10_Êags", 
T0292_wrôe10_Êags
 },

165 { "T0293_wrôe10_0blocks", 
T0293_wrôe10_0blocks
 },

166 { "T0294_wrôe10_bey⁄deﬁ", 
T0294_wrôe10_bey⁄deﬁ
 },

169 { "T0300_ªad⁄ly", 
T0300_ªad⁄ly
 },

172 { "T0310_wrôevîify10_sim∂e", 
T0310_wrôevîify10_sim∂e
 },

173 { "T0311_wrôevîify10_wΩrŸe˘", 
T0311_wrôevîify10_wΩrŸe˘
 },

174 { "T0314_wrôevîify10_bey⁄deﬁ", 
T0314_wrôevîify10_bey⁄deﬁ
 },

177 { "T0320_wrôevîify12_sim∂e", 
T0320_wrôevîify12_sim∂e
 },

178 { "T0321_wrôevîify12_wΩrŸe˘", 
T0321_wrôevîify12_wΩrŸe˘
 },

179 { "T0324_wrôevîify12_bey⁄deﬁ", 
T0324_wrôevîify12_bey⁄deﬁ
 },

182 { "T0330_wrôevîify16_sim∂e", 
T0330_wrôevîify16_sim∂e
 },

183 { "T0331_wrôevîify16_wΩrŸe˘", 
T0331_wrôevîify16_wΩrŸe˘
 },

184 { "T0334_wrôevîify16_bey⁄deﬁ", 
T0334_wrôevîify16_bey⁄deﬁ
 },

187 { "T0340_com∑ª™dwrôe_sim∂e", 
T0340_com∑ª™dwrôe_sim∂e
 },

188 { "T0341_com∑ª™dwrôe_mism©ch", 
T0341_com∑ª™dwrôe_mism©ch
 },

189 { "T0343_com∑ª™dwrôe_bey⁄deﬁ", 
T0343_com∑ª™dwrôe_bey⁄deﬁ
 },

192 { "T0350_‹wrôe_sim∂e", 
T0350_‹wrôe_sim∂e
 },

193 { "T0351_‹wrôe_wΩrŸe˘", 
T0351_‹wrôe_wΩrŸe˘
 },

194 { "T0354_‹wrôe_beyödeﬁ", 
T0354_‹wrôe_bey⁄deﬁ
 },

197 { "T0360_°¨t°›unô_sim∂e", 
T0360_°¨t°›unô_sim∂e
 },

198 { "T0361_°¨t°›unô_pwr˙d", 
T0361_°¨t°›unô_pwr˙d
 },

199 { "T0362_°¨t°›unô_nﬁ€j", 
T0362_°¨t°›unô_nﬁ€j
 },

202 { "T0370_nomedü", 
T0370_nomedü
 },

205 { "T0380_¥evíèŒow_sim∂e", 
T0380_¥evíèŒow_sim∂e
 },

206 { "T0381_¥evíèŒow_eje˘", 
T0381_¥evíèŒow_eje˘
 },

207 { "T0382_¥evíèŒow_ô√xus_loss", 
T0382_¥evíèŒow_ô√xus_loss
 },

208 { "T0383_¥evíèŒow_èrgë_w¨m_ª£t", 
T0383_¥evíèŒow_èrgë_w¨m_ª£t
 },

209 { "T0384_¥evíèŒow_èrgë_cﬁd_ª£t", 
T0384_¥evíèŒow_èrgë_cﬁd_ª£t
 },

210 { "T0385_¥evíèŒow_lun_ª£t", 
T0385_¥evíèŒow_lun_ª£t
 },

211 { "T0386_¥evíèŒow_2_ôl_√xu£s", 
T0386_¥evíèŒow_2_ôl_√xu£s
 },

214 { "T0390_m™d©‹y_›codes_sbc", 
T0390_m™d©‹y_›codes_sbc
 },

217 { "T0400_öquúy_basic", 
T0400_öquúy_basic
 },

218 { "T0401_öquúy_Ælo˛í", 
T0401_öquúy_Ælo˛í
 },

219 { "T0402_öquúy_evpd", 
T0402_öquúy_evpd
 },

220 { "T0403_öquúy_suµ‹ãd_vpd", 
T0403_öquúy_suµ‹ãd_vpd
 },

221 { "T0404_öquúy_Æl_ªp‹ãd_vpd", 
T0404_öquúy_Æl_ªp‹ãd_vpd
 },

224 { "T0410_ªadtoc_basic", 
T0410_ªadtoc_basic
 },

227 { "T0420_ª£rve6_sim∂e", 
T0420_ª£rve6_sim∂e
 },

228 { "T0421_ª£rve6_lun_ª£t", 
T0421_ª£rve6_lun_ª£t
 },

229 { "T0422_ª£rve6_logout", 
T0422_ª£rve6_logout
 },

230 { "T0423_ª£rve6_£ssi⁄loss", 
T0423_ª£rve6_£ssi⁄loss
 },

231 { "T0424_ª£rve6_èrgë_ª£t", 
T0424_ª£rve6_èrgë_ª£t
 },

234 { "T0430_ªp‹t_Æl_suµ‹ãd_›s", 
T0430_ªp‹t_Æl_suµ‹ãd_›s
 },

239 { "T1000_cmd¢_övÆid", 
T1000_cmd¢_övÆid
 },

242 { "T1010_d©a¢_övÆid", 
T1010_d©a¢_övÆid
 },

245 { "T1020_buf„roff£t_övÆid", 
T1020_buf„roff£t_övÆid
 },

248 { "T1030_unsﬁicôed_d©a_ovîÊow", 
T1030_unsﬁicôed_d©a_ovîÊow
 },

249 { "T1031_unsﬁicôed_d©a_out", 
T1031_unsﬁicôed_d©a_out
 },

254 { "T1040_ßtuøã_maxcmd¢", 
T1040_ßtuøã_maxcmd¢
 },

256 { "T1041_unsﬁicôed_immedüã_d©a", 
T1041_unsﬁicôed_immedüã_d©a
 },

257 { "T1042_unsﬁicôed_n⁄immedüã_d©a",
T1042_unsﬁicôed_n⁄immedüã_d©a
 },

260 { "T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e", 
T1100_≥rsi°ít_ª£rve_ö_ªad_keys_sim∂e
 },

261 { "T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge", 
T1110_≥rsi°ít_ª£rve_ö_£rvi˚a˘i⁄_ønge
 },

262 { "T1120_≥rsi°ít_ªgi°î_sim∂e", 
T1120_≥rsi°ít_ªgi°î_sim∂e
 },

263 { "T1130_≥rsi°ít_ª£rve_sim∂e", 
T1130_≥rsi°ít_ª£rve_sim∂e
 },

264 { "T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó", 
T1140_≥rsi°ít_ª£rve_ac˚ss_check_ó
 },

265 { "T1141_≥rsi°ít_ª£rve_ac˚ss_check_we", 
T1141_≥rsi°ít_ª£rve_ac˚ss_check_we
 },

266 { "T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro", 
T1142_≥rsi°ít_ª£rve_ac˚ss_check_óro
 },

267 { "T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo", 
T1143_≥rsi°ít_ª£rve_ac˚ss_check_wîo
 },

268 { "T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨", 
T1144_≥rsi°ít_ª£rve_ac˚ss_check_ó¨
 },

269 { "T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór", 
T1145_≥rsi°ít_ª£rve_ac˚ss_check_wór
 },

271 { 
NULL
, NULL }

272 
	}
};

275 
	$¥öt_ußge
()

277 
	`Ârötf
(
°dîr
, "Usage: iscsi-test [-?] [-?|--help] [--usage] [-t|--test=<test>] [-s|--skip=<test>]\n"

280 
	}
}

282 
	$¥öt_hñp
()

284 
	`Ârötf
(
°dîr
, "Usage: iscsi-test [OPTION...] <iscsi-url>\n");

285 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

286 
	`Ârötf
(
°dîr
, " -I, --initiator-name-2=iqn-name Second initiatornameÅo use\n");

287 
	`Ârötf
(
°dîr
, " -t, --test=test-name WhichÅestÅoÑun. Default isÅoÑunállÅests.\n");

288 
	`Ârötf
(
°dîr
, " -s, --skip=test-name WhichÅestÅo skip. Default isÅoÑunállÅests.\n");

289 
	`Ârötf
(
°dîr
, " -l, --list ListállÅests.\n");

290 
	`Ârötf
(
°dîr
, " -L LUN id.\n");

291 
	`Ârötf
(
°dîr
, " -d device.\n");

292 
	`Ârötf
(
°dîr
, " --info, PrintÉxtra infoáboutáÅest.\n");

293 
	`Ârötf
(
°dîr
, " --dataloss Allow destructiveÅests.\n");

294 
	`Ârötf
(
°dîr
, "\n");

295 
	`Ârötf
(
°dîr
, "Help options:\n");

296 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

297 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

298 
	`Ârötf
(
°dîr
, "\n");

299 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

300 
	`Ârötf
(
°dîr
, "\n");

301 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

302 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

303 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

304 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

305 
	}
}

308 
	$maö
(
¨gc
, *
¨gv
[])

310 c⁄° *
uæ
 = 
NULL
;

311 
show_hñp
 = 0, 
show_ußge
 = 0, 
li°_ã°s
 = 0;

312 
ªs
, 
num_Áûed
, 
num_skù≥d
;

313 
scsi_ã°
 *
ã°
;

314 *
ã°«me
 = 
NULL
;

316 *
skù«me
 = 
NULL
;

317 
lun
;

318 
idx
;

319 
iscsi_c⁄ãxt
 *
iscsi
;

320 
scsi_èsk
 *
èsk
;

321 
scsi_èsk
 *
öq_èsk
;

322 
scsi_èsk
 *
öq_bl_èsk
;

323 
scsi_èsk
 *
rc16_èsk
;

324 
scsi_ªadˇ∑côy10
 *
rc10
;

325 
fuŒ_size
;

326 
c
;

328 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

329 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

330 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

331 {"d©Æoss", 
no_¨gumít
, 
NULL
, 'D'},

332 {"öfo", 
no_¨gumít
, 
NULL
, 'X'},

333 {"li°", 
no_¨gumít
, 
NULL
, 'l'},

334 {"ã°", 
ªquúed_¨gumít
, 
NULL
, 't'},

335 {"skù", 
ªquúed_¨gumít
, 
NULL
, 's'},

336 {"öôüt‹_«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

337 {"öôüt‹_«me-2", 
ªquúed_¨gumít
, 
NULL
, 'I'},

338 {"LUN", 
ªquúed_¨gumít
, 
NULL
, 'L'},

339 {"DEVICE", 
ªquúed_¨gumít
, 
NULL
, 'd'},

342 
›ti⁄_ödex
;

344 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?ui:I:ls:t:L:d:", 
l⁄g_›ti⁄s
,

345 &
›ti⁄_ödex
)) != -1) {

346 
c
) {

349 
show_hñp
 = 1;

352 
show_ußge
 = 1;

355 
li°_ã°s
 = 1;

358 
d©a_loss
 = 1;

361 
show_öfo
 = 1;

364 
skù«me
 = 
›èrg
;

367 
ã°«me
 = 
›èrg
;

370 
öôüt‹«me1
 = 
›èrg
;

373 
öôüt‹«me2
 = 
›èrg
;

379 
lun
 = 
	`©oi
(
›èrg
);

382 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

383 
	`¥öt_hñp
();

384 
	`exô
(0);

389 
ªÆ_iscsi_queue_pdu
 = 
	`dlsym
(
RTLD_NEXT
, "iscsi_queue_pdu");

391 i‡(
show_hñp
 != 0) {

392 
	`¥öt_hñp
();

393 
	`exô
(0);

396 i‡(
show_ußge
 != 0) {

397 
	`¥öt_ußge
();

398 
	`exô
(0);

401 i‡(
li°_ã°s
 != 0) {

402 
ã°
 = &
ã°s
[0];Åe°->
«me
;Åest++) {

403 
	`¥ötf
("%s\n", 
ã°
->
«me
);

404 i‡(
show_öfo
) {

405 
ã°
->
	`ã°
(
öôüt‹«me1
, 
uæ
);

408 
	`exô
(0);

411 i‡(
¨gv
[
›töd
] !
NULL
) {

412 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

415 
iscsi
 = 
	`iscsi_c⁄ãxt_logö
("dummy", 
uæ
, &
lun
);

416 i‡(
iscsi
 =
NULL
) {

417 
	`¥ötf
("FailedÅoÜoginÅoÅarget\n");

425 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

426 i‡(
èsk
 =
NULL
) {

427 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY10 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

428 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

431 
	`Ârötf
(
°dîr
, "%d\n", 
èsk
->
cdb_size
);

432 
idx
 = 0; idx < 
èsk
->
cdb_size
; idx++) {

433 
	`Ârötf
(
°dîr
, "%02x ", 
èsk
->
cdb
[
idx
]);

435 
	`Ârötf
(
°dîr
, "\n");

436 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

437 
	`¥ötf
("READCAPACITY10 comm™d: faûed wôh sí£. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

438 
	`scsi_‰ì_scsi_èsk
(
èsk
);

439 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

442 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

443 i‡(
rc10
 =
NULL
) {

444 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY10 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

445 
	`scsi_‰ì_scsi_èsk
(
èsk
);

446 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

449 
block_size
 = 
rc10
->block_size;

450 
num_blocks
 = 
rc10
->
lba
;

451 
	`scsi_‰ì_scsi_èsk
(
èsk
);

453 
rc16_èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

454 i‡(
rc16_èsk
 =
NULL
) {

455 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

456 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

459 i‡(
rc16_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

460 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
rc16_èsk
);

461 i‡(
rc16
 =
NULL
) {

462 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY16 d©a. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

463 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

464 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

467 
block_size
 = 
rc16
->
block_Àngth
;

468 
num_blocks
 = 
rc16
->
ªtu∫ed_lba
;

469 
lbµb
 = 1 << 
rc16
->
lbµbe
;

473 
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

474 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

475 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

478 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

479 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

480 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

483 i‡((
öq_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 
fuŒ_size
)Ë=
NULL
) {

484 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

488 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

489 i‡(
öq
 =
NULL
) {

490 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

491 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

496 
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 64);

497 i‡(
öq_bl_èsk
 && inq_bl_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

498 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

499 
öq_bl_èsk
 = 
NULL
;

501 i‡(
öq_bl_èsk
) {

502 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_bl_èsk
);

503 i‡(
fuŒ_size
 > 
öq_bl_èsk
->
d©aö
.
size
) {

504 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

506 i‡((
öq_bl_èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 
fuŒ_size
)Ë=
NULL
) {

507 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

512 
öq_bl
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bl_èsk
);

513 i‡(
öq_bl
 =
NULL
) {

514 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

520 
num_Áûed
 = 
num_skù≥d
 = 0;

521 
ã°
 = &
ã°s
[0];Åe°->
«me
;Åest++) {

522 i‡(
ã°«me
 !
NULL
 && 
	`‚m©ch
—e°«me, 
ã°
->
«me
, 0)) {

526 i‡(
skù«me
 !
NULL
) {

527 * 
pchr
 = 
skù«me
;

528 * 
pchr2
 = 
NULL
;

529 
skù
 = 0;

531 
pchr2
 = 
	`°rchr
(
pchr
,',');

532 i‡(
pchr2
)Öchr2[0]=0x00;

533 i‡(!
	`‚m©ch
(
pchr
, 
ã°
->
«me
, 0)) {

534 
skù
 = 1;

536 i‡(
pchr2
Ë{pchr2[0]=',';
pchr
=pchr2+1;}

537 } 
pchr2
);

538 i‡(
skù
) ;

541 
ªs
 = 
ã°
->
	`ã°
(
öôüt‹«me1
, 
uæ
);

542 i‡(
ªs
 == 0) {

543 
	`¥ötf
("TEST %†[OK]\n", 
ã°
->
«me
);

544 } i‡(
ªs
 == -2) {

545 
	`¥ötf
("TEST %†[SKIPPED]\n", 
ã°
->
«me
);

546 
num_skù≥d
++;

548 
	`¥ötf
("TEST %†[FAILED]\n", 
ã°
->
«me
);

549 
num_Áûed
++;

551 
	`¥ötf
("\n");

554 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

555 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

556 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

562  
num_Áûed
 ?Çum_Áûed : 
num_skù≥d
 ? 77 : 0;

563 
	}
}

	@test-tool/test_compareandwrite_miscompare.c

18 
	~<°dio.h
>

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_com∑ª™dwrôe_miscom∑ª
()

33 
i
, 
ªt
;

34 
j
;

35 *
buf
 = 
	`Æloˇ
(2 * 256 * 
block_size
);

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

43 
i
 = 1; i < 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

45 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

46 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

49 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

50 
block_size
, 0, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

53 
	`CU_PASS
("WRITE16 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

60 
buf
[
i
 * 
block_size
 - 27] = 'C';

63 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

65 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

66 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

67 
ªt
 = 
	`com∑ª™dwrôe_miscom∑ª
(
iscsic
, 
tgt_lun
, 0,

68 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

69 i‡(
ªt
 == -2) {

70 
	`CU_PASS
("[SKIPPED] Target doesÇot support "

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

77 "theyáª stû»unch™gedá†'A'", 
i
);

78 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
j
 = 0; j < 
i
 * 
block_size
; j++) {

83 i‡(
buf
[
j
] != 'A') {

84 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

86 
	`CU_FAIL
("Block was writtenÅo");

93 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

95 
i
 = 1; i < 256; i++) {

96 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

97 
i
, 
num_blocks
 - i);

98 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

99 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

102 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

103 
block_size
, 0, 0, 0, 0, 0, 
buf
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

106 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

107 
buf
[
i
 * 
block_size
 - 27] = 'C';

110 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

112 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

113 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

114 
i
, 
num_blocks
 - i);

115 
ªt
 = 
	`com∑ª™dwrôe_miscom∑ª
(
iscsic
, 
tgt_lun
,

116 
num_blocks
 - 
i
,

117 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

118 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

120 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


122 
i
, 
num_blocks
 - i);

123 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

124 
block_size
, 0, 0, 0, 0, 0, 
buf
);

125 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

127 
j
 = 0; j < 
i
 * 
block_size
; j++) {

128 i‡(
buf
[
j
] != 'A') {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

131 
	`CU_FAIL
("Block was writtenÅo");

136 
	}
}

	@test-tool/test_compareandwrite_simple.c

18 
	~<°dio.h
>

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_com∑ª™dwrôe_sim∂e
()

33 
i
, 
ªt
;

34 
j
;

35 *
buf
 = 
	`Æloˇ
(2 * 256 * 
block_size
);

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

43 
i
 = 1; i < 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

45 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

46 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

49 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

50 
block_size
, 0, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

53 
	`CU_PASS
("WRITE16 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

60 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

61 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

62 
ªt
 = 
	`com∑ª™dwrôe
(
iscsic
, 
tgt_lun
, 0,

63 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

64 i‡(
ªt
 == -2) {

65 
	`CU_PASS
("[SKIPPED] Target doesÇot support "

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

72 "theyáªáŒ 'B'", 
i
);

73 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

74 
block_size
, 0, 0, 0, 0, 0, 
buf
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
j
 = 0; j < 
i
 * 
block_size
; j++) {

78 i‡(
buf
[
j
] != 'B') {

79 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

81 
	`CU_FAIL
("Block wasÇot written correctly");

88 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-256 blocksátÅhe "

90 
i
 = 1; i < 256; i++) {

91 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

92 
i
, 
num_blocks
 - i);

93 
	`mem£t
(
buf
, 'A', 2 * 
i
 * 
block_size
);

94 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

97 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

98 
block_size
, 0, 0, 0, 0, 0, 
buf
);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

101 
	`mem£t
(
buf
 + 
i
 * 
block_size
, 'B', i * block_size);

103 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

104 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

105 
i
, 
num_blocks
 - i);

106 
ªt
 = 
	`com∑ª™dwrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

107 
buf
, 2 * 
i
 * 
block_size
, block_size, 0, 0, 0, 0);

108 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

110 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


112 
i
, 
num_blocks
 - i);

113 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

114 
block_size
, 0, 0, 0, 0, 0, 
buf
);

115 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

117 
j
 = 0; j < 
i
 * 
block_size
; j++) {

118 i‡(
buf
[
j
] != 'B') {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

121 
	`CU_FAIL
("Block wasÇot written correctly");

126 
	}
}

	@test-tool/test_get_lba_status_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_gë_lba_°©us_bey⁄d_eﬁ
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS one block beyondÅheÉnd ofÅhe LUN");

36 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 24);

37 i‡(
ªt
 == -2) {

38 
	`CU_PASS
("[SKIPPED] Target doesÇot support GET_LBA_STATUS. SkippingÅest");

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUSát LBA 2^63");

45 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 24);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUSát LBA -1");

50 
ªt
 = 
	`gë_lba_°©us_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0xffffffffffffffff, 24);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	}
}

	@test-tool/test_get_lba_status_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_gë_lba_°©us_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`gë_lba_°©us
(
iscsic
, 
tgt_lun
, 0, 24);

37 i‡(
ªt
 == -2) {

38 
	`CU_PASS
("[SKIPPED] Target doesÇot support GET_LBA_STATUS. SkippingÅest");

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS of 1-256 blocksátÅheÉnd ofÅhe LUN");

46 
i
 = 1; i <= 256; i++) {

47 
ªt
 = 
	`gë_lba_°©us
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, 24);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	}
}

	@test-tool/test_inquiry_alloc_length.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_Æloc_Àngth
()

30 
ªt
, 
i
;

31 
scsi_öquúy_°™d¨d
 *
°d_öq
;

32 
scsi_èsk
 *
èsk2
 = 
NULL
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRYállocationÜength");

38 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage withállocÜength from 0-255");

39 
i
 = 0; i < 256 ; i++) {

40 i‡(
èsk
 !
NULL
) {

41 
	`scsi_‰ì_scsi_èsk
(
èsk
);

42 
èsk
 = 
NULL
;

44 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 
i
, &
èsk
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data whenÑeading withállocÜength 255");

48 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

50 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

51 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

52 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

53 i‡(
°d_öq
 =
NULL
) {

54 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

59 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

60 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "If version is SPC-3 orÜater INQUIRY supports 16-bitállocationÜengths");

70 
°d_öq
->
vîsi⁄
) {

75 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] This device doesÇot claim "

77 
	`CU_PASS
("[SKIPPED] Not SPC-3 orÜater");

78 
föished
;

81 
	`loggög
(
LOG_VERBOSE
, "Version is SPC-3 orÜater. Read INQUIRY data using 16-bitállocationÜength");

82 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 511 (low order byte is 0xff)");

83 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 511, &
èsk
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 512 (low order byte is 0x00)");

87 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 512, &
èsk2
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "INQUIRY data should beÅhe same whenállocationÜength is 511ánd 512 bytes");

91 
ªt
 = 
èsk
->
d©aö
.
size
 !
èsk2
->datain.size;

92 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
ªt
 = 
	`memcmp
(
èsk
->
d©aö
.
d©a
, 
èsk2
->d©aö.d©a,Åask->d©aö.
size
);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
föished
:

98 i‡(
èsk
 !
NULL
) {

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
èsk
 = 
NULL
;

102 i‡(
èsk2
 !
NULL
) {

103 
	`scsi_‰ì_scsi_èsk
(
èsk2
);

104 
èsk2
 = 
NULL
;

106 
	}
}

	@test-tool/test_inquiry_block_limits.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_block_limôs
()

30 
ªt
;

31 
scsi_öquúy_block_limôs
 *
bl
;

32 
scsi_èsk
 *
bl_èsk
 = 
NULL
;

33 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
 = 
NULL
;

34 
scsi_èsk
 *
lbp_èsk
 = 
NULL
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY Block Limits");

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, "Block device. VerifyÅhat we canÑead Block Limits VPD");

42 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

43 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
,

44 64, &
bl_èsk
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 i‡(
ªt
 != 0) {

47 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo send inquiry.");

48 
föished
;

51 
bl
 = 
	`scsi_d©aö_unm¨shÆl
(
bl_èsk
);

52 i‡(
bl
 =
NULL
) {

53 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall inquiry "

55 
	`CU_FAIL
("[FAILURE] failedÅo unmarshall inquiry "

57 
föished
;

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches up withÅhe size ofÅhe DATA-IN buffer.");

61 
	`CU_ASSERT_EQUAL
(
bl_èsk
->
d©aö
.
size
, bl_èsk->d©aö.
d©a
[3] + 4);

62 i‡(
bl_èsk
->
d©aö
.
size
 !bl_èsk->d©aö.
d©a
[3] + 4) {

63 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLengthÑeturned. "

65 
bl_èsk
->
d©aö
.
d©a
[3], bl_èsk->d©aö.
size
 - 4);

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PageLength matches DataIn buffer size");

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches SCSI-level.");

72 i‡(
sbc3_suµ‹t
) {

73 
	`loggög
(
LOG_VERBOSE
, "Device claims SBC-3. VerifyÅhat " "PageLength == 0x3C");

75 
	`loggög
(
LOG_VERBOSE
, "Device isÇot SBC-3. VerifyÅhat "

79 
bl_èsk
->
d©aö
.
d©a
[3]) {

82 i‡(!
sbc3_suµ‹t
) {

83 
	`loggög
(
LOG_NORMAL
, "[WARNING] SBC-3Öagelength (0x3C) "

90 i‡(!
sbc3_suµ‹t
) {

95 
	`CU_FAIL
("[FAILED] InvalidÖagelengthÑeturned");

96 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLengthÑeturned.");

100 i‡(
bl_èsk
->
d©aö
.
d©a
[3] != 0x3c) {

101 
föished
;

109 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅheÜogical blockÖrovisioning VPD");

110 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

111 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
,

112 64, &
lbp_èsk
);

113 i‡(
ªt
 == 0) {

114 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
lbp_èsk
);

115 i‡(
lbp
 =
NULL
) {

116 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall "

121 i‡(
lbp
 &&Übp->
lbpu
) {

129 
	`loggög
(
LOG_VERBOSE
, "Device claims UNMAP support via LBPU");

130 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

132 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠
, 0);

134 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

136 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
 >(1U << 
rc16
->
lbµbe
), 1);

138 i‡(
bl
->
max_unm≠
 != 0xffffffff) {

139 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA "

141 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠
 <= 1024*1024);

144 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

146 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

147 i‡(
bl
->
max_unm≠_bdc
 != 0xffffffff) {

148 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP "

150 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠_bdc
 <= 1024*1024);

153 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot claim UNMAP support via "

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

157 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
, 0);

159 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

161 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

166 
föished
:

167 i‡(
bl_èsk
 !
NULL
) {

168 
	`scsi_‰ì_scsi_èsk
(
bl_èsk
);

170 i‡(
lbp_èsk
 !
NULL
) {

171 
	`scsi_‰ì_scsi_èsk
(
lbp_èsk
);

173 
	}
}

	@test-tool/test_inquiry_evpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_evpd
()

30 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY EVPD bit");

35 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY with EVPD==0ánd PC!=0 isánÉrror");

36 
ªt
 = 
	`öquúy_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 1, 256);

37 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

38 
	}
}

	@test-tool/test_inquiry_mandatory_vpd_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_m™d©‹y_vpd_sbc
()

30 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY support for mandatory SBC VPD");

35 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "SUPPORTED_VPD_PAGES is mandatory for SBC devices. Verify we canÑead it.");

39 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

40 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

41 255, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	`loggög
(
LOG_VERBOSE
, "DEVICE_IDENTIFICATION is mandatory for SBC devices. Verify we canÑead it.");

45 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

46 1, 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
,

47 255, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	}
}

	@test-tool/test_inquiry_standard.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_°™d¨d
()

30 
ªt
, 
i
;

31 
scsi_öquúy_°™d¨d
 *
°d_öq
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe standard INQUIRYÖage");

36 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage");

38 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 260, &
èsk
);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

41 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data");

42 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

44 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

45 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

46 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

47 i‡(
°d_öq
 =
NULL
) {

48 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

53 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

54 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Verify version field isÉither 0x4, 0x5 or 0x6");

57 
°d_öq
->
vîsi⁄
) {

59 
	`loggög
(
LOG_NORMAL
, "[WARNING] Standard INQUIRY data claims "

69 
	`loggög
(
LOG_NORMAL
, "[FAILED] Invalid version in standard "

71 "0x4,0x4,0x6áª vÆid.", 
°d_öq
->
vîsi⁄
);

72 
	`CU_FAIL
("Invalid version in INQUIRY data");

75 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesponse-data-format is 2 "

77 i‡(
°d_öq
->
ª•⁄£_d©a_f‹m©
 != 2) {

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] Response data format is "

80 
°d_öq
->
ª•⁄£_d©a_f‹m©
);

82 
	`CU_ASSERT_EQUAL
(
°d_öq
->
ª•⁄£_d©a_f‹m©
, 2);

84 
	`loggög
(
LOG_VERBOSE
, "Verifyádditional-length is correct");

85 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 !
èsk
->
d©aö
.
size
 - 5) {

86 
	`loggög
(
LOG_NORMAL
, "[FAILED] BadádditionalÜength "

88 
èsk
->
d©aö
.
size
 - 5,

89 
°d_öq
->
addôi⁄Æ_Àngth
);

91 
	`CU_ASSERT_EQUAL
(
°d_öq
->
addôi⁄Æ_Àngth
, 
èsk
->
d©aö
.
size
 - 5);

93 
	`loggög
(
LOG_VERBOSE
, "Verify VENDOR_IDENTIFICATION is in ASCII");

94 
i
 = 8; i < 16; i++) {

96 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

99 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

103 
	`loggög
(
LOG_NORMAL
, "[FAILED] VENDOR_IDENTIFICATION contains "

105 
	`CU_FAIL
("Invalid characters in VENDOR_IDENTIFICATION");

109 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_IDENTIFICATION is in ASCII");

110 
i
 = 16; i < 32; i++) {

112 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

115 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

119 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_IDENTIFICATION contains "

121 
	`CU_FAIL
("Invalid characters in PRODUCT_IDENTIFICATION");

125 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_REVISION_LEVEL is in ASCII");

126 
i
 = 32; i < 36; i++) {

128 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

131 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

135 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_REVISON_LEVEL contains "

137 
	`CU_FAIL
("Invalid characters in PRODUCT_REVISON_LEVEL");

141 
	`loggög
(
LOG_VERBOSE
, "Verify AERC is clear in SPC-3ándÜater");

142 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x80 && 
°d_öq
->
vîsi⁄
 >= 5) {

143 
	`loggög
(
LOG_NORMAL
, "[FAILED] AERC is set butÅhis device "

145 
	`CU_FAIL
("AERC is set but SPC-3+ is claimed");

148 
	`loggög
(
LOG_VERBOSE
, "Verify TRMTSK is clear in SPC-2ándÜater");

149 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x40 && 
°d_öq
->
vîsi⁄
 >= 4) {

150 
	`loggög
(
LOG_NORMAL
, "[FAILED] TRMTSK is set butÅhis device "

152 
	`CU_FAIL
("TRMTSK is set but SPC-2+ is claimed");

155 i‡(
èsk
 !
NULL
) {

156 
	`scsi_‰ì_scsi_èsk
(
èsk
);

157 
èsk
 = 
NULL
;

159 
	}
}

	@test-tool/test_inquiry_supported_vpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_suµ‹ãd_vpd
()

30 
ªt
, 
i
;

31 
scsi_öquúy_suµ‹ãd_∑ges
 *
sup_öq
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY supported VPDÖages");

36 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÅhe SUPPORTED VPDÖage");

37 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

38 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
,

39 255, &
èsk
);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 4 bytes of data");

43 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 4);

45 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

46 
sup_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

47 
	`CU_ASSERT_NOT_EQUAL
(
sup_öq
, 
NULL
);

48 i‡(
sup_öq
 =
NULL
) {

49 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

54 
	`loggög
(
LOG_VERBOSE
, "Verify weÑeadállÅhe supportedÖages");

55 
i
 = 0; i < 
sup_öq
->
num_∑ges
; i++) {

56 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÖage 0x%02x",

57 
sup_öq
->
∑ges
[
i
]);

59 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
,

60 1, 
sup_öq
->
∑ges
[
i
],

61 255, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 i‡(
èsk
 !
NULL
) {

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
èsk
 = 
NULL
;

69 
	}
}

	@test-tool/test_inquiry_version_descriptors.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_öquúy_vîsi⁄_des¸ùt‹s
()

30 
i
, 
˛aimed_ok
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY version descriptors");

35 
öq
->
devi˚_ty≥
) {

36 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

37 
	`loggög
(
LOG_VERBOSE
, "Device isá block device");

39 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SPC");

40 
˛aimed_ok
 = 0;

41 
i
 = 0; i < 8; i++) {

42 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

43 
SCSI_VERSION_DESCRIPTOR_SPC
:

44 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

45 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

46 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

47 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

48 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

49 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

50 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

51 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

52 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

53 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

54 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

55 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

56 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

57 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

58 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

59 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

60 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

61 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

62 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

63 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

64 
˛aimed_ok
 = 1;

68 
	`CU_ASSERT_EQUAL
(
˛aimed_ok
, 1);

69 i‡(
˛aimed_ok
 == 0) {

70 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] Block device "

73 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

77 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SBC");

78 
˛aimed_ok
 = 0;

79 
i
 = 0; i < 8; i++) {

80 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

81 
SCSI_VERSION_DESCRIPTOR_SBC
:

82 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

83 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

84 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

85 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

86 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

87 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

88 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

89 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

90 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

91 
˛aimed_ok
 = 1;

95 
	`CU_ASSERT_EQUAL
(
˛aimed_ok
, 1);

96 i‡(
˛aimed_ok
 == 0) {

97 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] Block device "

100 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

105 
	`loggög
(
LOG_VERBOSE
, "No version descriptorÅests for device"

106 "Åy≥ %d yë.", 
öq
->
devi˚_ty≥
);

108 
	}
}

	@test-tool/test_iscsi_cmdsn_toohigh.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_cmd¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_cmd¢
) {

34 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
maxcmd¢
 + 1);

38 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

42 
ch™ge_cmd¢
 = 0;

44 
	}
}

46 
	$ã°_iscsi_cmd¢_toohigh
()

48 
ªt
;

50 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

51 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

52 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

54 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN > MAXCMDSN must be silently ignored byÅheÅarget");

55 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == MAXCMDSN+1. Should be ignored byÅheÅarget.");

57 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

58 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

59 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

60 
ch™ge_cmd¢
 = 1;

64 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

65 
	`iscsi_£t_timeout
(
iscsic
, 3);

67 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, -1);

69 i‡(
ªt
 == -1) {

70 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

72 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

76 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

78 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	}
}

	@test-tool/test_iscsi_cmdsn_toolow.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_cmd¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_cmd¢
) {

34 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
expcmd¢
 - 1);

38 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

42 
ch™ge_cmd¢
 = 0;

44 
	}
}

46 
	$ã°_iscsi_cmd¢_toﬁow
()

48 
ªt
;

50 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

51 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

52 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

54 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN < EXPCMDSN must be silently ignored byÅheÅarget");

55 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN-1. Should be ignored byÅheÅarget.");

57 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

58 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

59 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

60 
ch™ge_cmd¢
 = 1;

64 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

65 
	`iscsi_£t_timeout
(
iscsic
, 3);

67 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, -1);

69 i‡(
ªt
 == -1) {

70 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

72 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

77 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

78 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

79 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_iscsi_datasn_invalid.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_d©a¢
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

31 
uöt32_t
 
d©a¢
;

33 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

36 
ch™ge_d©a¢
) {

39 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 0);

43 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 27);

47 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], -1);

51 
d©a¢
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[36]);

52 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 1 - 
d©a¢
);

56 
	}
}

58 
	$ã°_iscsi_d©a¢_övÆid
()

60 
ªt
;

61 *
buf
 = 
	`Æloˇ
(2 * 
block_size
);

63 
CHECK_FOR_DATALOSS
;

65 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

66 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI DATASN");

69 
	`loggög
(
LOG_VERBOSE
, "Send 2 DATAIN with DATASN==0. Should fail.");

70 
ch™ge_d©a¢
 = 1;

72 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

73 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

74 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

75 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

76 
	`iscsi_£t_timeout
(
iscsic
, 3);

78 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 2 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 0, 
buf
);

80 i‡(
ªt
 == -2) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

82 
	`CU_PASS
("WRITE10 isÇot implemented.");

85 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

87 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN with DATASN==27. Should fail");

91 
ch™ge_d©a¢
 = 2;

93 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

94 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

95 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

96 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

97 
	`iscsi_£t_timeout
(
iscsic
, 3);

99 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
buf
);

101 i‡(
ªt
 == -2) {

102 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

103 
	`CU_PASS
("WRITE10 isÇot implemented.");

106 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

108 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

111 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN with DATASN==-1. Should fail");

112 
ch™ge_d©a¢
 = 3;

114 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

115 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

116 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

117 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

118 
	`iscsi_£t_timeout
(
iscsic
, 3);

120 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 
block_size
,

121 
block_size
, 0, 0, 0, 0, 0, 
buf
);

122 i‡(
ªt
 == -2) {

123 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

124 
	`CU_PASS
("WRITE10 isÇot implemented.");

127 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

129 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

133 
	`loggög
(
LOG_VERBOSE
, "Send DATAIN inÑeverse order (datasn == 1,0). Should fail");

134 
ch™ge_d©a¢
 = 4;

136 
iscsic
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

137 
iscsic
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

138 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

139 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

140 
	`iscsi_£t_timeout
(
iscsic
, 3);

142 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 100, 2 * 
block_size
,

143 
block_size
, 0, 0, 0, 0, 0, 
buf
);

144 i‡(
ªt
 == -2) {

145 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

146 
	`CU_PASS
("WRITE10 isÇot implemented.");

149 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

151 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

152 
	}
}

	@test-tool/test_mandatory_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_m™d©‹y_sbc
()

30 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test support foráll mandatory opcodes on SBC devices");

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY.");

40 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 255, 
NULL
);

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10.");

44 
ªt
 = 
	`ªadˇ∑côy10
(
iscsic
, 
tgt_lun
, 0, 0);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 i‡(
sbc3_suµ‹t
) {

48 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16. The device claims SBC-3 support.");

49 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 15);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ10.");

54 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

55 0, 0, 0, 0, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 i‡(
sbc3_suµ‹t
) {

59 
	`loggög
(
LOG_VERBOSE
, "Test READ16.Åhe device claims SBC-3 support.");

60 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

61 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY.");

66 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_modesense6_all_pages.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_mode£n£6_Æl_∑ges
()

30 
scsi_mode_£n£
 *
ms
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 AllPages");

36 i‡(
èsk
 !
NULL
) {

37 
	`scsi_‰ì_scsi_èsk
(
èsk
);

38 
èsk
 = 
NULL
;

41 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 commandÅo fetch AllPages");

42 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

43 
SCSI_MODESENSE_PC_CURRENT
,

44 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

46 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

47 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

49 
	`iscsi_gë_îr‹
(
iscsic
));

50 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

53 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

56 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

57 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

58 i‡(
ms
 =
NULL
) {

59 
	`loggög
(
LOG_VERBOSE
, "[FAILED] failedÅo unmarshall mode sense "

61 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

62 
	`scsi_‰ì_scsi_èsk
(
èsk
);

63 
èsk
 = 
NULL
;

66 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat mode dataÜength is >= 3");

70 i‡(
ms
->
mode_d©a_Àngth
 >= 3) {

71 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode dataÜength is >= 3");

73 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Mode dataÜength is < 3");

75 
	`CU_ASSERT_TRUE
(
ms
->
mode_d©a_Àngth
 >= 3);

78 i‡(
èsk
 !
NULL
) {

79 
	`scsi_‰ì_scsi_èsk
(
èsk
);

80 
èsk
 = 
NULL
;

82 
	}
}

	@test-tool/test_modesense6_residuals.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_mode£n£6_ªsiduÆs
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 Residuals");

33 
	`loggög
(
LOG_VERBOSE
, "MODESENSE6 command shouldÇotÑesult inány "

37 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 4 bytes of "

39 i‡(
èsk
 !
NULL
) {

40 
	`scsi_‰ì_scsi_èsk
(
èsk
);

41 
èsk
 = 
NULL
;

43 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

44 
SCSI_MODESENSE_PC_CURRENT
,

45 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

47 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

48 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

50 
	`iscsi_gë_îr‹
(
iscsic
));

51 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

54 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

57 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we gotát most 4 bytes of DATA-IN");

58 i‡(
èsk
->
d©aö
.
size
 > 4) {

59 
	`loggög
(
LOG_NORMAL
, "[FAILED] got moreÅhan 4 bytes of "

62 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] <= 4 bytes of DATA-IN "

65 
	`CU_ASSERT_TRUE
(
èsk
->
d©aö
.
size
 <= 4);

68 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flagÇot set");

69 i‡(
èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_OVERFLOW
) {

70 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

73 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

77 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 255 bytes of "

79 i‡(
èsk
 !
NULL
) {

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
èsk
 = 
NULL
;

83 
èsk
 = 
	`iscsi_mode£n£6_sync
(
iscsic
, 
tgt_lun
, 0,

84 
SCSI_MODESENSE_PC_CURRENT
,

85 
SCSI_MODEPAGE_RETURN_ALL_PAGES
,

87 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

88 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo send MODE_SENSE6 "

90 
	`iscsi_gë_îr‹
(
iscsic
));

91 
	`CU_FAIL
("[FAILED] FailedÅo fetchÅhe All PagesÖage.");

94 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

97 i‡(
èsk
->
d©aö
.
size
 == 255) {

98 
	`loggög
(
LOG_VERBOSE
, "We gotáll 255 bytes of data back "

101 i‡(
èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_UNDERFLOW
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

105 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

108 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
ªsiduÆ_°©us
,

109 
SCSI_RESIDUAL_UNDERFLOW
);

111 
	`loggög
(
LOG_VERBOSE
, "We gotÜessÅhanÅheÑequested 255 bytes "

114 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

115 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set "

118 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

121 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
,

122 
SCSI_RESIDUAL_UNDERFLOW
);

126 i‡(
èsk
 !
NULL
) {

127 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 
èsk
 = 
NULL
;

130 
	}
}

	@test-tool/test_nomedia_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_nomedü_sbc
()

30 
ªt
;

31 
buf
[4096];

32 
unm≠_li°
 
li°
[1];

34 
CHECK_FOR_SBC
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium commands fail when medium isÉjected on SBC devices");

39 i‡(!
öq
->
rmb
) {

40 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

45 
	`loggög
(
LOG_VERBOSE
, "EjectÅhe medium.");

46 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 0);

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY when medium isÉjected.");

50 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE10 when medium isÉjected.");

54 
ªt
 = 
	`synchr⁄izeˇche10_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 1);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE16 when medium isÉjected.");

63 
ªt
 = 
	`synchr⁄izeˇche16_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 1);

64 i‡(
ªt
 == -2) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ10 when medium isÉjected.");

72 
ªt
 = 
	`ªad10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

73 0, 0, 0, 0, 0, 
NULL
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "Test READ12 when medium isÉjected.");

77 
ªt
 = 
	`ªad12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

78 0, 0, 0, 0, 0, 
NULL
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	`loggög
(
LOG_VERBOSE
, "Test READ16 when medium isÉjected.");

82 
ªt
 = 
	`ªad16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

83 0, 0, 0, 0, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10 when medium isÉjected.");

87 
ªt
 = 
	`ªadˇ∑côy10_nomedium
(
iscsic
, 
tgt_lun
, 0, 0);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 when medium isÉjected.");

91 
ªt
 = 
	`ªadˇ∑côy16_nomedium
(
iscsic
, 
tgt_lun
, 15);

92 i‡(
ªt
 == -2) {

93 i‡(
sbc3_suµ‹t
) {

94 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

95 
	`CU_FAIL
("READCAPACITY16 failed butÅhe device claims SBC-3 support.");

97 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

100 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS when medium isÉjected.");

104 
ªt
 = 
	`gë_lba_°©us_nomedium
(
iscsic
, 
tgt_lun
, 0, 24);

105 i‡(
ªt
 == -2) {

106 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

109 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

112 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 when medium isÉjected.");

113 
ªt
 = 
	`¥e„tch10_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 0);

114 i‡(
ªt
 == -2) {

115 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

118 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

121 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 when medium isÉjected.");

122 
ªt
 = 
	`¥e„tch16_nomedium
(
iscsic
, 
tgt_lun
, 0, 1, 1, 0);

123 i‡(
ªt
 == -2) {

124 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

130 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 when medium isÉjected.");

131 
ªt
 = 
	`vîify10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

132 0, 0, 1, 
buf
);

133 i‡(
ªt
 == -2) {

134 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

137 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

140 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 when medium isÉjected.");

141 
ªt
 = 
	`vîify12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

142 0, 0, 1, 
buf
);

143 i‡(
ªt
 == -2) {

144 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

147 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

150 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 when medium isÉjected.");

151 
ªt
 = 
	`vîify16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

152 0, 0, 1, 
buf
);

153 i‡(
ªt
 == -2) {

154 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

160 i‡(!
d©a_loss
) {

161 
	`loggög
(
LOG_VERBOSE
, "[SKIPPING] Dataloss flagÇot set. SkippingÅest for WRITE commands");

162 
föished
;

165 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 when medium isÉjected.");

166 
ªt
 = 
	`wrôe10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

167 0, 0, 0, 0, 0, 
buf
);

168 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

170 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 when medium isÉjected.");

171 
ªt
 = 
	`wrôe12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

172 0, 0, 0, 0, 0, 
buf
);

173 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

175 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 when medium isÉjected.");

176 
ªt
 = 
	`wrôe16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

177 0, 0, 0, 0, 0, 
buf
);

178 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

180 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 when medium isÉjected.");

181 
ªt
 = 
	`wrôevîify10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

182 0, 0, 0, 0, 
buf
);

183 i‡(
ªt
 == -2) {

184 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

187 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

190 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 when medium isÉjected.");

191 
ªt
 = 
	`wrôevîify12_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

192 0, 0, 0, 0, 
buf
);

193 i‡(
ªt
 == -2) {

194 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

197 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

200 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 when medium isÉjected.");

201 
ªt
 = 
	`wrôevîify16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

202 0, 0, 0, 0, 
buf
);

203 i‡(
ªt
 == -2) {

204 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

207 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

210 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE when medium isÉjected.");

211 
ªt
 = 
	`‹wrôe_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

212 0, 0, 0, 0, 0, 
buf
);

213 i‡(
ªt
 == -2) {

214 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

217 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

220 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREWRITE when medium isÉjected.");

221 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] TestÇot implemented yet");

223 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 when medium isÉjected.");

224 
ªt
 = 
	`wrôeßme10_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

225 1, 0, 0, 0, 0, 
buf
);

226 i‡(
ªt
 == -2) {

227 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

230 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

233 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 when medium isÉjected.");

234 
ªt
 = 
	`wrôeßme16_nomedium
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

235 1, 0, 0, 0, 0, 
buf
);

236 i‡(
ªt
 == -2) {

237 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

240 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP when medium isÉjected.");

244 
li°
[0].
lba
 = 0;

245 
li°
[0].
num
 = 
lbµb
;

246 
ªt
 = 
	`unm≠_nomedium
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

247 i‡(
ªt
 == -2) {

248 
	`loggög
(
LOG_NORMAL
, "[SKIPPED]Åarget doesÇot support "

251 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

255 
föished
:

256 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain.");

257 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

258 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

259 
	}
}

	@test-tool/test_orwrite_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_‹wrôe_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==0");

36 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

37 0, 
block_size
,

38 0, 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

41 
	`CU_PASS
("ORWRITE isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocks one blockÖastÉnd-of-LUN");

47 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

48 0, 
block_size
,

49 0, 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==2^63");

54 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

55 0, 
block_size
,

56 0, 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==-1");

61 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_orwrite_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_‹wrôe_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

44 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size,

46 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

49 
	`CU_PASS
("ORWRITE isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==2^63");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

61 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

63 
i
 * 
block_size
, block_size,

64 0, 0, 0, 0, 0, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

76 
i
 * 
block_size
, block_size,

77 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`‹wrôe_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

88 
num_blocks
 - 1,

89 
i
 * 
block_size
, block_size,

90 0, 0, 0, 0, 0, 
buf
);

91 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
	}
}

	@test-tool/test_orwrite_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE flags");

41 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1");

42 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

43 
block_size
, block_size,

44 0, 1, 0, 0, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_orwrite_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

49 
	`CU_PASS
("ORWRITE isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_orwrite_verify.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_‹wrôe_vîify
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 *
ªadbuf
 = 
	`Æloˇ
(256 * 
block_size
);

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

49 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

50 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 0, 0, 0, 
buf
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

55 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

56 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

57 
block_size
, 0, 0, 0, 0, 0, 
buf
);

58 i‡(
ªt
 == -2) {

59 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

60 
	`CU_PASS
("ORWRITE isÇot implemented.");

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

66 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

67 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

71 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

75 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

76 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

81 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

82 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

83 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

86 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

87 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

92 
i
 = 1; i <= 256; i++) {

93 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

97 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

98 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

99 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
buf
);

101 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

104 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

105 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

106 
block_size
, 0, 0, 0, 0, 0, 
buf
);

107 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

110 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

111 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

112 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

115 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

116 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

118 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

119 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

120 
ªt
 = 
	`‹wrôe
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

121 
block_size
, 0, 0, 0, 0, 0, 
buf
);

122 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

124 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

125 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i * 
block_size
,

126 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
);

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

130 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

131 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

132 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

134 
	}
}

	@test-tool/test_orwrite_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`‹wrôe_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE isÇot implemented.");

52 
	`CU_PASS
("ORWRITE isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_prefetch10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_¥e„tch10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==0");

33 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

37 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 i‡(
num_blocks
 > 0x80000000) {

43 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

47 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocks one blockÖastÉnd-of-LUN");

48 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==2^31");

54 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==-1");

60 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_prefetch10_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch10_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with PREFETCH10. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

41 
i
, 0, 0);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

44 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==2^31");

52 
i
 = 1; i <= 256; i++) {

53 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

54 
i
, 0, 0);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 
i
, 0, 0);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 2-256 blocksáll but one block beyondÅheÉnd");

68 
i
 = 2; i <= 256; i++) {

69 
ªt
 = 
	`¥e„tch10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

70 
i
, 0, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	}
}

	@test-tool/test_prefetch10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch10_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 flags");

36 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED==1");

37 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

41 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with GROUP==3");

47 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED=1ánd GROUP==3");

52 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0,

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_prefetch10_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch10_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 0, 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH10 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i, 0, 0);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	}
}

	@test-tool/test_prefetch16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_¥e„tch16_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==0");

33 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

37 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==2^63");

49 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==-1");

55 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_prefetch16_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch16_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocks one block beyondÅheÉnd");

34 
i
 = 1; i <= 256; i++) {

35 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

36 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==2^63");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

49 
i
, 0, 0);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==-1");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

57 
i
, 0, 0);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 2-256 blocksáll but one block beyondÅheÉnd");

63 
i
 = 2; i <= 256; i++) {

64 
ªt
 = 
	`¥e„tch16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

65 
i
, 0, 0);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_prefetch16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch16_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 flags");

36 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED==1");

37 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

41 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with GROUP==3");

47 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED=1ánd GROUP==3");

52 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0,

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_prefetch16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch16_sim∂e
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅhe start ofÅhe LUN");

35 
i
 = 1; i <= 256; i++) {

36 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 0, 
i
, 0, 0);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 isÇot implemented.");

39 
	`CU_PASS
("PREFETCH16 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 
ªt
 = 
	`¥e„tch16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
, i, 0, 0);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	}
}

	@test-tool/test_preventallow_2_itnexuses.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_2_ô√xu£s
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat PREVENT MEDIUM REMOVALáre seen on otherÇexusesás well");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

51 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

52 i‡(
iscsic2
 =
NULL
) {

53 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

57 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium onÅhe second connection");

58 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic2
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "LogoutÅhe second connection fromÅarget");

63 
	`iscsi_logout_sync
(
iscsic2
);

64 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

68 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

69 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

70 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

74 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	}
}

	@test-tool/test_preventallow_cold_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_cﬁd_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform coldÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

53 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

54 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_preventallow_eject.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_eje˘
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat we canÇotÉject medium when PREVENT isáctive");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

51 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

55 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

59 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

63 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "TryÅoÜoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENT flag");

71 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain");

75 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_preventallow_itnexus_loss.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_ô√xus_loss
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat IT-NexusÜoss clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

52 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

54 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

55 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

56 i‡(
iscsic
 =
NULL
) {

57 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

61 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

62 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

66 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

70 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

75 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

76 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

80 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	}
}

	@test-tool/test_preventallow_logout.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_logout
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat LogoutÜoss clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

52 
	`iscsi_logout_sync
(
iscsic
);

53 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

55 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

56 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

57 i‡(
iscsic
 =
NULL
) {

58 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

62 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

63 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

67 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

71 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

76 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

77 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

81 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

82 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

84 
	}
}

	@test-tool/test_preventallow_lun_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_lun_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform LUNÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

55 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_preventallow_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_sim∂e
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test PREVENTALLOW basics");

38 
	`loggög
(
LOG_VERBOSE
, "Test we can set PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

43 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	}
}

	@test-tool/test_preventallow_warm_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥evíèŒow_w¨m_ª£t
()

30 
ªt
;

32 
CHECK_FOR_SBC
;

33 
CHECK_FOR_REMOVABLE
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

38 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

39 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 1);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

43 
ªt
 = 
	`°¨t°›unô_¥evíåemovÆ
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Perform warmÑeset onÅarget");

52 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

55 
	`ã°unôªady
(
iscsic
, 
tgt_lun
) != 0);

58 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

63 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

67 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 0);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

72 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

73 
ªt
 = 
	`¥evíèŒow
(
iscsic
, 
tgt_lun
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

77 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 0, 0, 0, 0, 1, 1);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_prin_read_keys_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥ö_ªad_keys_sim∂e
()

32 
ªt
 = 0;

33 
Æ
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN READ_KEYS works.");

39 
ªt
 = 
	`¥ö_ªad_keys
(
iscsic
, 
tgt_lun
, &
èsk
, 
NULL
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE IN isÇot implemented.");

42 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Test DATA-IN isátÜeast 8 bytes.");

48 i‡(
èsk
->
d©aö
.
size
 < 8) {

49 
	`loggög
(
LOG_NORMAL
,

54 
	`loggög
(
LOG_VERBOSE
, "Test ADDITIONAL_LENGTH matches DATA_IN size.");

55 
Æ
 = 
	`scsi_gë_uöt32
(&
èsk
->
d©aö
.
d©a
[4]);

56 i‡(
Æ
 !
èsk
->
d©aö
.
size
 - 8) {

57 
	`loggög
(
LOG_NORMAL
,

59 
Æ
, 
èsk
->
d©aö
.
size
 - 8);

62 
	}
}

	@test-tool/test_prin_serviceaction_range.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥ö_£rvi˚a˘i⁄_ønge
()

32 
ªt
 = 0;

33 
i
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN ServiceactionÑange.");

40 
ªt
 = 
	`¥ö_ªad_keys
(
iscsic
, 
tgt_lun
, &
èsk
, 
NULL
);

41 i‡(
ªt
 == -2) {

42 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE IN isÇot implemented.");

43 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
i
 = 0; i < 4; i++) {

50 
ªt
 = 
	`¥ö_èsk
(
iscsic
, 
tgt_lun
, 
i
, 1);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
i
 = 4; i < 0x20; i++) {

56 
ªt
 = 
	`¥ö_èsk
(
iscsic
, 
tgt_lun
, 
i
, 0);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	}
}

	@test-tool/test_prout_register_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥out_ªgi°î_sim∂e
()

32 c⁄° 
key
 = 
	`ønd_key
();

33 
ªt
 = 0;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN REGISTER works.");

40 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsic
, 
tgt_lun
, 
key
);

41 i‡(
ªt
 == -2) {

42 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

43 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsic
, 
tgt_lun
, 
key
, 1);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
ªt
 = 
	`¥out_ªªgi°î_key_Áûs
(
iscsic
, 
tgt_lun
, 
key
+1);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsic
, 
tgt_lun
, 0, 
key
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
iscsic
, 
tgt_lun
, 
key
, 0);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_prout_reserve_access.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsi_c⁄ãxt
 *
iscsi1
, 
lun1
,

29 
iscsi_c⁄ãxt
 *
iscsi2
, 
lun2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªg_i2_ˇn_ªad
,

32 
ªg_i2_ˇn_wrôe
,

33 
uƒeg_i2_ˇn_ªad
,

34 
uƒeg_i2_ˇn_wrôe
)

36 
ªt
;

37 c⁄° 
key
 = 
	`ønd_key
();

38 c⁄° 
key2
 = 
	`ønd_key
();

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
,

44 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

47 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi1
, 
lun1
);

48 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

51 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi1
, 
lun1
, 
key
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

54 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

57 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

58 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

59 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

62 
ªt
 = 
	`¥out_ª£rve
(
iscsi1
, 
lun1
, 
key
, 
¥_ty≥
);

63 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

66 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

67 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

68 
¥_ty≥
);

69 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

71 
ªad_wrôe_buf
 = 
	`mÆloc
(512);

72 
	`CU_ASSERT_PTR_NOT_NULL
(
ªad_wrôe_buf
);

75 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi1
, 
lun1
, 
ªad_wrôe_buf
);

76 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

79 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi1
, 
lun1
, 
ªad_wrôe_buf
);

80 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

83 i‡(
ªg_i2_ˇn_ªad
)

84 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

86 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

87 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

90 i‡(
ªg_i2_ˇn_wrôe
)

91 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

93 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

94 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

97 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key
);

98 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

101 i‡(
uƒeg_i2_ˇn_ªad
)

102 
ªt
 = 
	`vîify_ªad_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

104 
ªt
 = 
	`vîify_ªad_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

105 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

108 i‡(
uƒeg_i2_ˇn_wrôe
)

109 
ªt
 = 
	`vîify_wrôe_w‹ks
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

111 
ªt
 = 
	`vîify_wrôe_Áûs
(
iscsi2
, 
lun2
, 
ªad_wrôe_buf
);

112 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

115 
ªt
 = 
	`¥out_ªÀa£
(
iscsi1
, 
lun1
, 
key
, 
¥_ty≥
);

116 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

119 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi1
, 
lun1
, 0, 
key
);

120 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

121 
	}
}

124 
	$ã°_¥out_ª£rve_ac˚ss_ó
()

126 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

127 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

129 
	}
}

132 
	$ã°_¥out_ª£rve_ac˚ss_we
()

134 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

135 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

137 
	}
}

140 
	$ã°_¥out_ª£rve_ac˚ss_óro
()

142 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

143 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

145 
	}
}

148 
	$ã°_¥out_ª£rve_ac˚ss_wîo
()

150 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

151 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

153 
	}
}

156 
	$ã°_¥out_ª£rve_ac˚ss_ó¨
()

158 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

159 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

161 
	}
}

164 
	$ã°_¥out_ª£rve_ac˚ss_wór
()

166 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

167 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

169 
	}
}

	@test-tool/test_prout_reserve_ownership.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsi_c⁄ãxt
 *
iscsi1
, 
lun1
,

29 
iscsi_c⁄ãxt
 *
iscsi2
, 
lun2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªsvn_is_sh¨ed
)

33 
ªt
;

34 c⁄° 
key1
 = 
	`ønd_key
();

35 c⁄° 
key2
 = 
	`ønd_key
();

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
,

41 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

44 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi1
, 
lun1
);

45 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

48 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi1
, 
lun1
, 
key1
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

51 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

54 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

55 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsi2
, 
lun2
, 
key2
);

56 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

59 
ªt
 = 
	`¥out_ª£rve
(
iscsi1
, 
lun1
, 
key1
, 
¥_ty≥
);

60 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

63 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

64 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

65 
¥_ty≥
);

66 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

69 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi1
, 
lun1
, 0, 
key1
);

70 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

73 i‡(
ªsvn_is_sh¨ed
) {

75 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsi1
, 
lun1
,

76 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

77 
¥_ty≥
);

78 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

81 
ªt
 = 
	`¥out_ªÀa£
(
iscsi2
, 
lun2
, 
key2
, 
¥_ty≥
);

82 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

85 
ªt
 = 
	`¥ö_vîify_nŸ_ª£rved
(
iscsi1
, 
lun1
);

86 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

89 (Ë
	`ã°unôªady_˛ór_ua
(
iscsi2
, 
lun2
);

93 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsi2
, 
lun2
, 0, 
key2
);

94 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

95 
	}
}

98 
	$ã°_¥out_ª£rve_ow√rshù_ó
()

100 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

101 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
, 0);

102 
	}
}

105 
	$ã°_¥out_ª£rve_ow√rshù_we
()

107 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

108 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
, 0);

109 
	}
}

112 
	$ã°_¥out_ª£rve_ow√rshù_óro
()

114 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

115 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
, 0);

116 
	}
}

119 
	$ã°_¥out_ª£rve_ow√rshù_wîo
()

121 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

122 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
, 0);

123 
	}
}

126 
	$ã°_¥out_ª£rve_ow√rshù_ó¨
()

128 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

129 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
, 1);

130 
	}
}

133 
	$ã°_¥out_ª£rve_ow√rshù_wór
()

135 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
iscsic
, 
tgt_lun
, 
iscsic2
, 
tgt_lun2
,

136 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
, 1);

137 
	}
}

	@test-tool/test_prout_reserve_simple.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

32 
scsi_≥rsi°ít_out_ty≥
 
	g¥_ty≥s_to_ã°
[] = {

33 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

34 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

35 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

37 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

38 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

44 
	$ã°_¥out_ª£rve_sim∂e
()

46 
ªt
 = 0;

47 
i
;

48 c⁄° 
key
 = 
	`ønd_key
();

51 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

52 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN RESERVE works.");

55 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
iscsic
, 
tgt_lun
, 
key
);

56 i‡(
ªt
 == -2) {

57 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTEN RESERVE OUT isÇot implemented.");

58 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

65 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 = 
¥_ty≥s_to_ã°
[
i
];

68 
ªt
 = 
	`¥out_ª£rve
(
iscsic
, 
tgt_lun
, 
key
, 
¥_ty≥
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
iscsic
, 
tgt_lun
,

73 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

74 
¥_ty≥
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
ªt
 = 
	`¥out_ªÀa£
(
iscsic
, 
tgt_lun
, 
key
, 
¥_ty≥
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
ªt
 = 
	`¥out_ªgi°î_key
(
iscsic
, 
tgt_lun
, 0, 
key
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_read10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==0");

33 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 0, 0, 0, 
NULL
);

35 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

37 i‡(
num_blocks
 > 0x80000000) {

38 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

42 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==2^31");

49 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0, 
block_size
,

50 0, 0, 0, 0, 0, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==-1");

55 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_read10_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad10_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ10. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

44 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
NULL
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==2^31");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

56 
i
 * 
block_size
, block_size,

57 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==-1");

63 
i
 = 1; i <= 256; i++) {

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

68 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test READ10 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
ªt
 = 
	`ªad10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size,

80 0, 0, 0, 0, 0, 
NULL
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	}
}

	@test-tool/test_read10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ10 flags");

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1");

39 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==1 FUA_NV==0");

46 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

47 
block_size
, block_size,

48 0, 0, 1, 0, 0, 
NULL
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==1 FUA_NV==1");

53 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 1, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==0 FUA_NV==1");

60 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 0, 1, 0, 
NULL
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1 FUA==1 FUA_NV==1");

67 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 1, 1, 1, 0, 
NULL
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	}
}

	@test-tool/test_read10_invalid.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_ªad10_övÆid
()

34 
iscsi_d©a
 
d©a
;

35 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
scsi_èsk
 *
èsk_ªt
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test invalid READ10 commands");

40 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

44 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

46 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

47 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

48 
èsk
->
cdb
[8] = 1;

49 
èsk
->
cdb_size
 = 10;

50 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

51 
èsk
->
expx„æí
 = 0;

57 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

60 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

62 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

63 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

64 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

66 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

69 
	`iscsi_gë_îr‹
(
iscsic
));

71 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

73 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

74 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

75 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

78 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

80 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

81 
block_size
);

82 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

83 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

85 
block_size
, 
èsk
->
ªsiduÆ
);

87 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

88 
	`scsi_‰ì_scsi_èsk
(
èsk
);

89 
èsk
 = 
NULL
;

92 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

95 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

96 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

97 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

99 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

100 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

101 
èsk
->
cdb
[8] = 1;

102 
èsk
->
cdb_size
 = 10;

103 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

104 
èsk
->
expx„æí
 = 10000;

106 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

109 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

110 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

111 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

112 
	`iscsi_gë_îr‹
(
iscsic
));

114 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

116 
	`loggög
(
LOG_VERBOSE
, "Verify we gotá whole block back fromÅheÅarget");

117 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

119 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

120 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

124 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

126 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

127 10000 - 
block_size
);

128 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

131 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

135 
èsk
 = 
NULL
;

139 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

140 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

141 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

143 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

144 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

145 
èsk
->
cdb
[8] = 1;

146 
èsk
->
cdb_size
 = 10;

147 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

148 
èsk
->
expx„æí
 = 200;

150 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

151 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

153 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

154 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

155 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

156 
	`iscsi_gë_îr‹
(
iscsic
));

158 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

160 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

161 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

164 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

168 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

170 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

171 
block_size
 - 200);

172 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

175 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

177 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

179 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
èsk
 = 
NULL
;

184 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

185 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

186 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

187 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

189 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

190 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

191 
èsk
->
cdb
[8] = 2;

192 
èsk
->
cdb_size
 = 10;

193 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

194 
èsk
->
expx„æí
 = 
block_size
;

196 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

197 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

199 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

200 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

201 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

202 
	`iscsi_gë_îr‹
(
iscsic
));

204 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

206 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

207 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

209 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

210 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

211 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

214 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

216 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

217 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

220 
block_size
, 
èsk
->
ªsiduÆ
);

222 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

224 
	`scsi_‰ì_scsi_èsk
(
èsk
);

225 
èsk
 = 
NULL
;

229 
	`loggög
(
LOG_VERBOSE
, "Try READ10 for one block but flag itásá write onÅhe iSCSIÜayer.");

230 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

231 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

233 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

234 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

235 
èsk
->
cdb
[8] = 1;

236 
èsk
->
cdb_size
 = 10;

237 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

238 
èsk
->
expx„æí
 = 
block_size
;

240 
d©a
.
size
 = 
block_size
;

241 
d©a
.d©®(*)
buf
;

243 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

244 
	`iscsi_£t_timeout
(
iscsic
, 3);

245 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

246 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

247 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

249 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

250 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

251 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

252 
	`iscsi_gë_îr‹
(
iscsic
));

254 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

255 
	`scsi_‰ì_scsi_èsk
(
èsk
);

256 
èsk
 = 
NULL
;

258 
	}
}

	@test-tool/test_read10_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_rd¥Ÿe˘
()

31 
i
, 
ªt
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 withÇon-zero RDPROTECT");

40 
CHECK_FOR_SBC
;

42 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

43 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

44 
i
 = 1; i < 8; i++) {

45 
ªt
 = 
	`ªad10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

46 
block_size
, block_size,

47 
i
, 0, 0, 0, 0, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

54 
	}
}

	@test-tool/test_read10_residuals.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~<CUnô/CUnô.h
>

28 
	~"iscsi.h
"

29 
	~"iscsi-¥iv©e.h
"

30 
	~"scsi-lowÀvñ.h
"

31 
	~"iscsi-ã°-cu.h
"

35 
	$ã°_ªad10_ªsiduÆs
()

37 
scsi_èsk
 *
èsk_ªt
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test READ10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

45 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

47 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

48 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

49 
èsk
->
cdb
[8] = 1;

50 
èsk
->
cdb_size
 = 10;

51 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

52 
èsk
->
expx„æí
 = 0;

58 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

61 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

63 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

64 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

65 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

67 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

68 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

69 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

70 
	`iscsi_gë_îr‹
(
iscsic
));

72 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

74 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

75 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

76 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

79 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

81 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

82 
block_size
);

83 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

84 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

86 
block_size
, 
èsk
->
ªsiduÆ
);

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

89 
	`scsi_‰ì_scsi_èsk
(
èsk
);

90 
èsk
 = 
NULL
;

93 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

96 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

97 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

98 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

100 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

101 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

102 
èsk
->
cdb
[8] = 1;

103 
èsk
->
cdb_size
 = 10;

104 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

105 
èsk
->
expx„æí
 = 10000;

107 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

108 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

110 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

111 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

112 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

113 
	`iscsi_gë_îr‹
(
iscsic
));

115 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

117 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

118 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

121 
èsk
->
d©aö
.
size
,
block_size
);

123 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

125 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

126 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

127 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

130 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

132 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

133 10000 - 
block_size
);

134 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

135 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

137 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

139 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

140 
	`scsi_‰ì_scsi_èsk
(
èsk
);

141 
èsk
 = 
NULL
;

144 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

145 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

146 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

148 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

149 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

150 
èsk
->
cdb
[8] = 1;

151 
èsk
->
cdb_size
 = 10;

152 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

153 
èsk
->
expx„æí
 = 200;

155 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

156 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

158 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

159 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

160 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

161 
	`iscsi_gë_îr‹
(
iscsic
));

163 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

165 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

166 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

168 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

169 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

170 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

173 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

175 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

176 
block_size
 - 200);

177 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

178 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

180 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

182 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

184 
	`scsi_‰ì_scsi_èsk
(
èsk
);

185 
èsk
 = 
NULL
;

189 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

190 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

191 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

192 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

194 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

195 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

196 
èsk
->
cdb
[8] = 2;

197 
èsk
->
cdb_size
 = 10;

198 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

199 
èsk
->
expx„æí
 = 
block_size
;

201 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

204 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

205 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

206 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

207 
	`iscsi_gë_îr‹
(
iscsic
));

209 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

211 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

212 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

214 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

215 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

216 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

219 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

221 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

222 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

223 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

225 
block_size
, 
èsk
->
ªsiduÆ
);

227 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

229 
	`scsi_‰ì_scsi_èsk
(
èsk
);

230 
èsk
 = 
NULL
;

231 
	}
}

	@test-tool/test_read10_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

51 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

52 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	}
}

	@test-tool/test_read12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad12_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==0");

33 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 0, 0, 0, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

37 
	`CU_PASS
("READ12 isÇot implemented.");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 i‡(
num_blocks
 > 0x80000000) {

43 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

47 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocks one blockÖastÉnd-of-LUN");

48 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

49 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==2^31");

54 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0, 
block_size
,

55 0, 0, 0, 0, 0, 
NULL
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==-1");

60 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

61 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_read12_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad12_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ12. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

44 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
NULL
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

48 
	`CU_PASS
("READ12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==2^31");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

61 
i
 * 
block_size
, block_size,

62 0, 0, 0, 0, 0, 
NULL
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==-1");

68 
i
 = 1; i <= 256; i++) {

69 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

72 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

73 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	`loggög
(
LOG_VERBOSE
, "Test READ12 2-256 blocksáll but one block beyondÅheÉnd");

79 
i
 = 2; i <= 256; i++) {

80 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

83 
ªt
 = 
	`ªad12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

84 
i
 * 
block_size
, block_size,

85 0, 0, 0, 0, 0, 
NULL
);

86 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

88 
	}
}

	@test-tool/test_read12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_Êags
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ12 flags");

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1");

39 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

44 
	`CU_PASS
("READ12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==1 FUA_NV==0");

51 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

52 
block_size
, block_size,

53 0, 0, 1, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==1 FUA_NV==1");

58 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

59 
block_size
, block_size,

60 0, 0, 1, 1, 0, 
NULL
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==0 FUA_NV==1");

65 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

66 
block_size
, block_size,

67 0, 0, 0, 1, 0, 
NULL
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1 FUA==1 FUA_NV==1");

72 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0,

73 
block_size
, block_size,

74 0, 1, 1, 1, 0, 
NULL
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_read12_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_rd¥Ÿe˘
()

31 
i
, 
ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ12 withÇon-zero RDPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

49 
	`CU_PASS
("READ12 isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

58 
	}
}

	@test-tool/test_read12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ªad12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ12 commands withÑesiduals");

37 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

39 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

40 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

42 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

43 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

44 
èsk
->
cdb
[9] = 1;

45 
èsk
->
cdb_size
 = 12;

46 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

47 
èsk
->
expx„æí
 = 0;

53 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

56 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

58 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

59 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

60 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

62 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


63 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


64 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented onÅhisÅarget.");

66 
	`CU_PASS
("READ12 isÇot implemented.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

72 
	`iscsi_gë_îr‹
(
iscsic
));

74 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

77 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

83 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

84 
block_size
);

85 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

88 
block_size
, 
èsk
->
ªsiduÆ
);

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
èsk
 = 
NULL
;

95 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

102 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

103 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

104 
èsk
->
cdb
[9] = 1;

105 
èsk
->
cdb_size
 = 12;

106 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

107 
èsk
->
expx„æí
 = 10000;

109 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

110 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

112 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

115 
	`iscsi_gë_îr‹
(
iscsic
));

117 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

119 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

120 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

123 
èsk
->
d©aö
.
size
,
block_size
);

125 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

127 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

128 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

132 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

134 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

135 10000 - 
block_size
);

136 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

139 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
èsk
 = 
NULL
;

146 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

147 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

148 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

150 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

151 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

152 
èsk
->
cdb
[9] = 1;

153 
èsk
->
cdb_size
 = 12;

154 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

155 
èsk
->
expx„æí
 = 200;

157 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

160 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

162 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

163 
	`iscsi_gë_îr‹
(
iscsic
));

165 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

167 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

168 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

198 
èsk
->
cdb
[9] = 2;

199 
èsk
->
cdb_size
 = 12;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

204 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

206 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

207 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

208 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

209 
	`iscsi_gë_îr‹
(
iscsic
));

211 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

213 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

214 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

217 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

221 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

223 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

224 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

227 
block_size
, 
èsk
->
ªsiduÆ
);

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
èsk
 = 
NULL
;

233 
	}
}

	@test-tool/test_read12_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented.");

44 
	`CU_PASS
("READ12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

52 
i
 = 1; i <= 256; i++) {

53 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

56 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	}
}

	@test-tool/test_read16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ªad16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_SBC
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==0");

35 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

36 0, 0, 0, 0, 0, 
NULL
);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

39 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocks one blockÖastÉnd-of-LUN");

45 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

46 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==2^63");

51 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

52 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==-1");

57 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

58 0, 0, 0, 0, 0, 
NULL
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	}
}

	@test-tool/test_read16_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ûog2
(
size_t
 
i
)

29 
j
 = -1;

31 
i
) {

32 
i
 >>= 1;

33 
j
++;

35  
j
;

36 
	}
}

39 
	$ã°_ªad16_bey⁄d_eﬁ
()

41 
i
, 
ªt
;

43 
CHECK_FOR_SBC
;

45 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocks one block beyondÅheÉnd");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

52 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

53 
i
 * 
block_size
, block_size,

54 0, 0, 0, 0, 0, 
NULL
);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

57 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^63");

65 
i
 = 1; i <= 256; i++) {

66 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

70 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

71 
i
 * 
block_size
, block_size,

72 0, 0, 0, 0, 0, 
NULL
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

78 64 - 
	`ûog2
(
block_size
));

79 
i
 = 1; i <= 256; i++) {

80 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

84 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

85 1ULL << (64 - 
	`ûog2
(
block_size
)),

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
NULL
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

93 63 - 
	`ûog2
(
block_size
));

94 
i
 = 1; i <= 256; i++) {

95 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

99 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

100 1ULL << (63 - 
	`ûog2
(
block_size
)),

101 
i
 * 
block_size
, block_size,

102 0, 0, 0, 0, 0, 
NULL
);

103 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

107 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==-1");

108 
i
 = 1; i <= 256; i++) {

109 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

113 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

114 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

115 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

119 
	`loggög
(
LOG_VERBOSE
, "Test READ16 2-256 blocksáll but one block beyondÅheÉnd");

120 
i
 = 2; i <= 256; i++) {

121 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

125 
ªt
 = 
	`ªad16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

126 
i
 * 
block_size
, block_size,

127 0, 0, 0, 0, 0, 
NULL
);

128 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

130 
	}
}

	@test-tool/test_read16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_Êags
()

31 
ªt
;

33 
CHECK_FOR_SBC
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 flags");

38 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1");

39 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

40 
block_size
, block_size,

41 0, 1, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

44 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==1 FUA_NV==0");

51 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

52 
block_size
, block_size,

53 0, 0, 1, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==1 FUA_NV==1");

58 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

59 
block_size
, block_size,

60 0, 0, 1, 1, 0, 
NULL
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==0 FUA_NV==1");

65 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

66 
block_size
, block_size,

67 0, 0, 0, 1, 0, 
NULL
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1 FUA==1 FUA_NV==1");

72 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

73 
block_size
, block_size,

74 0, 1, 1, 1, 0, 
NULL
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_read16_rdprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_rd¥Ÿe˘
()

31 
i
, 
ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ16 withÇon-zero RDPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot imÜemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

49 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

57 
	}
}

	@test-tool/test_read16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ªad16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 commands withÑesiduals");

37 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

39 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

40 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

42 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

43 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

44 
èsk
->
cdb
[13] = 1;

45 
èsk
->
cdb_size
 = 16;

46 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

47 
èsk
->
expx„æí
 = 0;

53 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

56 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

58 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

59 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

60 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

62 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


63 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


64 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

65 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

66 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

70 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

72 
	`iscsi_gë_îr‹
(
iscsic
));

74 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

77 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

83 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

84 
block_size
);

85 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

88 
block_size
, 
èsk
->
ªsiduÆ
);

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

91 
	`scsi_‰ì_scsi_èsk
(
èsk
);

92 
èsk
 = 
NULL
;

95 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

99 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

100 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

102 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

103 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

104 
èsk
->
cdb
[13] = 1;

105 
èsk
->
cdb_size
 = 16;

106 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

107 
èsk
->
expx„æí
 = 10000;

109 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

110 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

112 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

113 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

115 
	`iscsi_gë_îr‹
(
iscsic
));

117 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

119 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

120 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

123 
èsk
->
d©aö
.
size
,
block_size
);

125 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

127 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

128 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

132 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

134 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

135 10000 - 
block_size
);

136 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

139 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
èsk
 = 
NULL
;

146 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

147 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

148 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

150 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

151 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

152 
èsk
->
cdb
[13] = 1;

153 
èsk
->
cdb_size
 = 16;

154 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

155 
èsk
->
expx„æí
 = 200;

157 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

160 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

161 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

162 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

163 
	`iscsi_gë_îr‹
(
iscsic
));

165 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

167 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

168 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

198 
èsk
->
cdb
[13] = 2;

199 
èsk
->
cdb_size
 = 16;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

204 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

206 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

207 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

208 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

209 
	`iscsi_gë_îr‹
(
iscsic
));

211 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

213 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

214 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

217 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

221 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

223 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

224 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

227 
block_size
, 
èsk
->
ªsiduÆ
);

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

231 
	`scsi_‰ì_scsi_èsk
(
èsk
);

232 
èsk
 = 
NULL
;

233 
	}
}

	@test-tool/test_read16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad16_sim∂e
()

31 
i
, 
ªt
;

33 
CHECK_FOR_SBC
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

42 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

43 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

46 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_read6_beyond_eol.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad6_bey⁄d_eﬁ
()

30 
i
, 
ªt
;

32 i‡(
num_blocks
 >= 0x1fffff) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 255; i++) {

41 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

42 
i
 * 
block_size
, block_size,

43 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

46 
	`CU_PASS
("READ6 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocksát LBA==0x1fffff");

54 
i
 = 1; i <= 255; i++) {

55 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x1fffff,

56 
i
 * 
block_size
, block_size,

57 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test READ6 2-255 blocksáll but one block beyondÅheÉnd");

63 
i
 = 2; i <= 255; i++) {

64 
ªt
 = 
	`ªad6_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

65 
i
 * 
block_size
, block_size,

66 
NULL
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	}
}

	@test-tool/test_read6_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad6_sim∂e
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 255; i++) {

37 
ªt
 = 
	`ªad6
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

38 
block_size
, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 isÇot implemented.");

41 
	`CU_PASS
("READ6 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅheÉnd ofÅhe LUN");

49 i‡(
num_blocks
 >= 0x1fffff) {

50 
	`CU_PASS
("LUN isÅoo big forÑead-at-eolÅests with READ6. SkippingÅest.\n");

52 
i
 = 1; i <= 255; i++) {

53 
ªt
 = 
	`ªad6
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "TransferÜength == 0 means we wantÅoÅransfer "

62 
	`loggög
(
LOG_VERBOSE
, "Test sendingá READ6 withÅransferÜength == 0 "

65 
èsk
 = 
	`iscsi_ªad6_sync
(
iscsic
, 
tgt_lun
, 0,

66 256 * 
block_size
, block_size);

67 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

68 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 command: "

69 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

71 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

73 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we did get 256 blocks of data back");

74 i‡(
èsk
->
d©aö
.
size
 =()(256 * 
block_size
)) {

75 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] TargetÑeturned 256 blocks of "

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] Target didÇotÑeturn 256 "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()(256 * 
block_size
));

82 
	}
}

	@test-tool/test_readcapacity10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy10_sim∂e
()

32 
ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test basic READCAPACITY10");

38 
ªt
 = 
	`ªadˇ∑côy10
(
iscsic
, 
tgt_lun
, 0, 0);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

40 
	}
}

	@test-tool/test_readcapacity16_alloclen.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_Ælo˛í
()

31 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 withálloc_len 0-15 isÇotánÉrror");

37 
i
 = 0; i < 16; i++) {

38 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 
i
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

41 
	`CU_PASS
("READCAPACITY16 isÇot implementedándÇo SBC-3 support claimed.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	}
}

	@test-tool/test_readcapacity16_protection.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
()

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 Protection Information");

34 
CHECK_FOR_SBC
;

36 i‡(
rc16
 =
NULL
) {

37 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅarget.");

38 
	`CU_PASS
("READCAPACITY16 isÇot implemented.");

42 i‡(!
öq
->
¥Ÿe˘
) {

43 
	`loggög
(
LOG_VERBOSE
, "This device doesÇot support PI. "

47 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat PROT_EN is 0");

48 i‡(
rc16
->
¥Ÿ_í
) {

49 
	`loggög
(
LOG_VERBOSE
, "[FAILED] PROT_EN is set but "

54 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PROT_EN is 0");

56 
	`CU_ASSERT_EQUAL
(
rc16
->
¥Ÿ_í
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

59 i‡(
rc16
->
p_ty≥
) {

60 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

65 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

67 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

70 i‡(
rc16
->
p_i_exp
) {

71 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

76 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

78 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

83 
	`loggög
(
LOG_VERBOSE
, "This device supports PI. "

85 i‡(!
rc16
->
¥Ÿ_í
) {

86 
	`loggög
(
LOG_VERBOSE
, "Protection isÇotÉnabled. Verify "

89 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

90 i‡(
rc16
->
p_ty≥
) {

91 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

94 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

96 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

98 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

99 i‡(
rc16
->
p_i_exp
) {

100 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

103 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

105 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

110 
	`loggög
(
LOG_VERBOSE
, "Protection isÉnabled. Verify "

112 
rc16
->
p_ty≥
) {

118 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE is invalid. Must be "

119 "0,1,2 buàwa†%d", 
rc16
->
p_ty≥
);

120 
	`CU_FAIL
("P_TYPE is invalid");

122 
	}
}

	@test-tool/test_readcapacity16_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªadˇ∑côy16_sim∂e
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 works");

37 
ªt
 = 
	`ªadˇ∑côy16
(
iscsic
, 
tgt_lun
, 16);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim support.");

40 
	`CU_PASS
("READCAPACITY16 isÇot implementedándÇo SBC-3 support claimed.");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 
	}
}

	@test-tool/test_readonly_sbc.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad⁄ly_sbc
()

31 
ªt
;

32 
buf
[4096];

33 
unm≠_li°
 
li°
[1];

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_READONLY
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium write commands fail for READ-ONLY SBC devices");

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 fails with WRITE_PROTECTED");

44 
ªt
 = 
	`wrôe10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
buf
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 fails with WRITE_PROTECTED");

49 
ªt
 = 
	`wrôe12_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

50 0, 0, 0, 0, 0, 
buf
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 fails with WRITE_PROTECTED");

54 
ªt
 = 
	`wrôe16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

55 0, 0, 0, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 fails with WRITE_PROTECTED");

59 
ªt
 = 
	`wrôeßme10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, 1,

60 0, 0, 0, 0, 
buf
);

61 i‡(
ªt
 == -2) {

62 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME10Çot supported onÅarget. Skipped.");

64 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 fails with WRITE_PROTECTED");

67 
ªt
 = 
	`wrôeßme16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
block_size
, 1,

68 0, 0, 0, 0, 
buf
);

69 i‡(
ªt
 == -2) {

70 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME16Çot supported onÅarget. Skipped.");

72 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

74 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 UNMAP fails with WRITE_PROTECTED");

75 
ªt
 = 
	`wrôeßme10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

76 
block_size
, 1,

77 0, 1, 0, 0, 
NULL
);

78 i‡(
ªt
 == -2) {

79 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME10Çot supported onÅarget. Skipped.");

81 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

83 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 UNMAP fails with WRITE_PROTECTED");

84 
ªt
 = 
	`wrôeßme16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

85 
block_size
, 1,

86 0, 1, 0, 0, 
NULL
);

87 i‡(
ªt
 == -2) {

88 
	`loggög
(
LOG_VERBOSE
, "WRITE_SAME16Çot supported onÅarget. Skipped.");

90 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

92 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÖhysical block fails with WRITE_PROTECTED");

93 
li°
[0].
lba
 = 0;

94 
li°
[0].
num
 = 
lbµb
;

95 
ªt
 = 
	`unm≠_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

96 i‡(
ªt
 == -2) {

97 
	`loggög
(
LOG_VERBOSE
, "UNMAPÇot supported onÅarget. Skipped.");

99 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

101 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÜogical block fails with WRITE_PROTECTED");

102 
li°
[0].
lba
 = 0;

103 
li°
[0].
num
 = 1;

104 
ªt
 = 
	`unm≠_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

105 i‡(
ªt
 == -2) {

106 
	`loggög
(
LOG_VERBOSE
, "UNMAPÇot supported onÅarget. Skipped.");

108 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

110 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 fails with WRITE_PROTECTED");

111 
ªt
 = 
	`wrôevîify10_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

112 
block_size
, block_size,

113 0, 0, 0, 0, 
buf
);

114 i‡(
ªt
 == -2) {

115 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY10Çot supported onÅarget. Skipped.");

117 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

119 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 fails with WRITE_PROTECTED");

120 
ªt
 = 
	`wrôevîify12_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

121 
block_size
, block_size,

122 0, 0, 0, 0, 
buf
);

123 i‡(
ªt
 == -2) {

124 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY12Çot supported onÅarget. Skipped.");

126 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

128 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 fails with WRITE_PROTECTED");

129 
ªt
 = 
	`wrôevîify16_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

130 
block_size
, block_size,

131 0, 0, 0, 0, 
buf
);

132 i‡(
ªt
 == -2) {

133 
	`loggög
(
LOG_VERBOSE
, "WRITEVERIFY16Çot supported onÅarget. Skipped.");

135 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

137 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE fails with WRITE_PROTECTED");

138 
ªt
 = 
	`‹wrôe_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
, 0,

139 
block_size
, block_size,

140 0, 0, 0, 0, 0, 
buf
);

141 i‡(
ªt
 == -2) {

142 
	`loggög
(
LOG_VERBOSE
, "ORWRITEÇot supported onÅarget. Skipped.");

144 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

147 
	`loggög
(
LOG_VERBOSE
, "Test for COMPAREANDWRITEÇot implemented yet.");

148 
	}
}

	@test-tool/test_report_supported_opcodes_one_command.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_èsk
 *
⁄e_èsk
;

34 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeading one-command");

41 
	`loggög
(
LOG_VERBOSE
, "FetchÜist ofáll supported opcodes");

42 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

43 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

44 65535, &
rso_èsk
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

48 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 != 0) {

56 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

57 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

58 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

61 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command works foráll supported "

63 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

64 
	`loggög
(
LOG_VERBOSE
, "Check opcode:0x%02x ServiceAction:0x%02x",

65 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

66 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

67 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

68 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

70 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(

71 
iscsic
, 
tgt_lun
,

72 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

73 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

74 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

75 65535, 
NULL
);

77 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

80 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

81 
iscsic
, 
tgt_lun
,

82 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

83 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

84 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

85 65535, 
NULL
);

87 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

89 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

90 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

92 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

93 
iscsic
, 
tgt_lun
,

94 0, 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

95 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

96 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

97 65535, 
NULL
);

99 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

102 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes_övÆidfõldöcdb
(

103 
iscsic
, 
tgt_lun
,

104 0, 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

105 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

106 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

107 65535, 
NULL
);

109 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command CDBÜooks sane");

114 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

115 
	`loggög
(
LOG_VERBOSE
, "Check CDB for opcode:0x%02x "

117 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

118 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

119 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(

120 
iscsic
, 
tgt_lun
,

122 
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 ?

123 
SCSI_REPORT_SUPPORTING_SERVICEACTION
 :

124 
SCSI_REPORT_SUPPORTING_OPCODE
,

125 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

126 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

127 65535, &
⁄e_èsk
);

129 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

130 
rsoc_⁄e
 = 
	`scsi_d©aö_unm¨shÆl
(
⁄e_èsk
);

131 
	`CU_ASSERT_NOT_EQUAL
(
rsoc_⁄e
, 
NULL
);

133 
	`loggög
(
LOG_VERBOSE
, "Verify CDBÜength isÇot 0");

134 
	`CU_ASSERT_NOT_EQUAL
(
rsoc_⁄e
->
cdb_Àngth
, 0);

135 i‡(
rsoc_⁄e
->
cdb_Àngth
 == 0) {

136 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDBÜength is 0");

139 
	`loggög
(
LOG_VERBOSE
, "Verify CDB[0] Usage Data == <opcode>");

140 
	`CU_ASSERT_EQUAL
(
rsoc_⁄e
->
cdb_ußge_d©a
[0],

141 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

142 i‡(
rsoc_⁄e
->
cdb_ußge_d©a
[0] !
rsoc
->
des¸ùt‹s
[
i
].
›code
) {

143 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDB[0] Usage Data was "

145 
rsoc_⁄e
->
cdb_ußge_d©a
[0],

146 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

147 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

150 
	`scsi_‰ì_scsi_èsk
(
⁄e_èsk
);

154 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

155 
	}
}

	@test-tool/test_report_supported_opcodes_rctd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_r˘d
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES RCTD flag");

39 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

41 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

42 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

43 65535, &
rso_èsk
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

47 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 i‡(
ªt
 != 0) {

55 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

56 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

57 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

62 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

63 i‡(
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

64 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor with "

66 
	`CU_FAIL
("[FAILED] Command descriptor with "

71 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

74 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

76 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

77 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

78 65535, &
rso_èsk
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 i‡(
ªt
 != 0) {

84 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

85 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

86 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

88 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

90 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

91 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

94 
	`CU_FAIL
("[FAILED] Command descriptor without "

99 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÅimeout descriptors haveÅhe "

101 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

102 i‡(
rsoc
->
des¸ùt‹s
[
i
].
to
.
des¸ùt‹_Àngth
 != 0x0a) {

103 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

105 
	`CU_FAIL
("[FAILED] Command descriptor with "

110 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

111 
	}
}

	@test-tool/test_report_supported_opcodes_servactv.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
()

31 
i
, 
ªt
;

32 
scsi_èsk
 *
rso_èsk
;

33 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES SERVACTV flag");

39 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

40 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

41 65535, &
rso_èsk
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

45 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 i‡(
ªt
 != 0) {

53 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

54 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

55 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

58 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat when SERVACTV is clearÅhen "

60 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

61 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 &&Ñsoc->des¸ùt‹s[i].
ß
) {

62 
	`loggög
(
LOG_NORMAL
, "[FAILED] ServiceAction is "

64 
	`CU_FAIL
("[FAILED] ServiceAction is "

69 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

70 
	}
}

	@test-tool/test_report_supported_opcodes_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test basic READ_SUPPORTED_OPCODES");

36 
ªt
 = 
	`ªp‹t_suµ‹ãd_›codes
(
iscsic
, 
tgt_lun
,

37 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

38 1024, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ_SUPPORTED_OPCODES isÇot "

42 
	`CU_PASS
("READ_SUPPORTED_OPCODES isÇot implemented.");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	}
}

	@test-tool/test_reserve6_2initiators.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_2öôüt‹s
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test RESERVE6/RELEASE6ácrossÅwo initiators");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_NORMAL
, "VerifyÅhatÅhe first initiator canÑe-RESERVE6Åhe sameÑeservation");

49 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

54 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

55 i‡(
iscsic2
 =
NULL
) {

56 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

60 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

61 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_NORMAL
, "TryÅo RELEASE fromÅhe second initiator. Should beáÇop");

66 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_NORMAL
, "Test we can still TESTUNITREADY fromÅhe first initiator");

71 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_NORMAL
, "TESTUNITREADY should fail fromÅhe second initiator");

75 
ªt
 = 
	`ã°unôªady_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should still fail");

80 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe first initiator");

84 
ªt
 = 
	`ªÀa£6
(
iscsic
, 
tgt_lun
);

85 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

87 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

88 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

92 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

93 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
	`iscsi_logout_sync
(
iscsic2
);

96 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

97 
iscsic2
 = 
NULL
;

98 
	}
}

	@test-tool/test_reserve6_itnexus_loss.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_ô√xus_loss
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased on it-nexusÜoss");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

49 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

50 i‡(
iscsic2
 =
NULL
) {

51 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

60 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

62 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

63 
	`¶ìp
(3);

65 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

66 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

67 i‡(
iscsic
 =
NULL
) {

68 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

69 
föished
;

72 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

73 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

77 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
föished
:

81 
	`iscsi_logout_sync
(
iscsic2
);

82 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

83 
iscsic2
 = 
NULL
;

84 
	}
}

	@test-tool/test_reserve6_logout.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_logout
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜogout");

38 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

49 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

50 i‡(
iscsic2
 =
NULL
) {

51 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
iscsic2
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

60 
	`iscsi_logout_sync
(
iscsic
);

61 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

63 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

64 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

65 i‡(
iscsic
 =
NULL
) {

66 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

70 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

71 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

75 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	`iscsi_logout_sync
(
iscsic2
);

79 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

80 
iscsic2
 = 
NULL
;

81 
	}
}

	@test-tool/test_reserve6_lun_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_lun_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜunÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

49 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

59 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

60 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

61 i‡(
iscsic2
 =
NULL
) {

62 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

66 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

67 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

71 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`iscsi_logout_sync
(
iscsic2
);

75 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

76 
iscsic2
 = 
NULL
;

77 
	}
}

	@test-tool/test_reserve6_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_sim∂e
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test basic RESERVE6/RELEASE6 commands if supported");

37 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

40 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`ªÀa£6
(
iscsic
, 
tgt_lun
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	}
}

	@test-tool/test_reserve6_target_cold_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_èrgë_cﬁd_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget coldÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold ResetÅoÅheÅarget");

49 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "CﬁdÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

58 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

59 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

60 i‡(
iscsic2
 =
NULL
) {

61 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

65 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

66 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

70 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`iscsi_logout_sync
(
iscsic2
);

74 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

75 
iscsic2
 = 
NULL
;

76 
	}
}

	@test-tool/test_reserve6_target_warm_reset.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ª£rve6_èrgë_w¨m_ª£t
()

31 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget warmÑeset");

38 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

39 
ªt
 = 
	`ª£rve6
(
iscsic
, 
tgt_lun
);

40 i‡(
ªt
 == -2) {

41 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

42 
	`CU_PASS
("[SKIPPED] Target doesÇot support RESERVE6. SkippingÅest");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm ResetÅoÅheÅarget");

49 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "W¨mÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is slowÅoÑeset");

56 
	`¶ìp
(3);

59 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

60 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

61 i‡(
iscsic2
 =
NULL
) {

62 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

67 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

68 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

72 
ªt
 = 
	`ªÀa£6
(
iscsic2
, 
tgt_lun
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`iscsi_logout_sync
(
iscsic2
);

76 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

77 
iscsic2
 = 
NULL
;

78 
	}
}

	@test-tool/test_sanitize_block_erase.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

22 
	~<öây≥s.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$check_wabîeq
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

36 
èsk_ªt
 = 
	`ªad10_èsk
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

37 0, 0, 0, 0, 0, 
NULL
);

38 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

39 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

41 
öq_bdc
->
wabîeq
) {

43 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

45 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

49 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==1. Reads fromÅhe "

51 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

52 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

58 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

62 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==2. Reads fromÅhe "

64 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


65 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


66 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

72 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

75 
	`CU_FAIL
("[FAILED] Read should have failed "

80 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==3. Reads fromÅhe "

82 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


83 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


84 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

85 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

90 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

93 
	`CU_FAIL
("[FAILED] Read should have failed "

99 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

100 
	}
}

103 
	$check_unm≠
()

105 
i
;

106 
scsi_èsk
 *
èsk_ªt
;

107 
scsi_gë_lba_°©us
 *
lbas
;

108 
uöt64_t
 
lba
;

110 
	`loggög
(
LOG_VERBOSE
, "Read LBA mapping fromÅheÅarget");

111 
èsk_ªt
 = 
	`gë_lba_°©us_èsk
(
iscsic
, 
tgt_lun
, 0, 256);

112 i‡(
èsk_ªt
 =
NULL
) {

113 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

115 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

119 i‡(
èsk_ªt
->
°©us
 !
SCSI_STATUS_GOOD
) {

120 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

122 
	`iscsi_gë_îr‹
(
iscsic
));

123 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

125 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

130 
	`loggög
(
LOG_VERBOSE
, "Unmarshall LBA mapping datain buffer");

131 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk_ªt
);

132 i‡(
lbas
 =
NULL
) {

133 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo unmarshall LBA "

135 
	`CU_FAIL
("[FAILED] FailedÅoÑead unmarshall LBA mapping");

136 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

140 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast one status descriptor "

142 i‡(
lbas
->
num_des¸ùt‹s
 < 1) {

143 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WrongÇumber of LBA status "

145 
lbas
->
num_des¸ùt‹s
);

146 
	`CU_FAIL
("[FAILED] WrongÇumber of LBA status descriptors.");

147 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

151 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll descriptorsáreÉither "

153 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

154 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

155 
PRIu64
 "Åhat it isÇot MAPPED",

156 
i
,

157 
lbas
->
des¸ùt‹s
[
i
].
lba
,

158 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

159 i‡(
lbas
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 =
SCSI_PROVISIONING_TYPE_MAPPED
) {

160 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Descriptor %d is MAPPED."

162 "‹ ANCHOREDá·î SANITIZE", 
i
);

163 
	`CU_FAIL
("[FAILED] LBA status descriptor is MAPPED.");

167 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe descriptors coverÅhe whole LUN");

168 
lba
 = 0;

169 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

170 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

171 
PRIu64
 "Åhat it is in order",

172 
i
,

173 
lbas
->
des¸ùt‹s
[
i
].
lba
,

174 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

175 i‡(
lba
 !
lbas
->
des¸ùt‹s
[
i
].lba) {

176 
	`loggög
(
LOG_VERBOSE
, "[FAILED] LBA status descriptors "

178 
	`CU_FAIL
("[FAILED] LBA status descriptorsÇot in order");

180 
lba
 +
lbas
->
des¸ùt‹s
[
i
].
num_blocks
;

182 i‡(
lba
 !
num_blocks
) {

183 
	`loggög
(
LOG_VERBOSE
, "[FAILED] The LUN isÇot fully"

185 
	`CU_FAIL
("[FAILED] The LUN isÇot fully"

189 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

190 
	}
}

193 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

195 
ªt
;

197 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

198 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

199 
block_size
, 0, 0, 0, 0, 0, 
buf
);

200 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

201 
	}
}

204 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

206 
ªt
;

207 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

209 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

210 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

211 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

213 i‡(
rc16
 =
NULL
) {

217 i‡(
rc16
->
lb¥z
) {

218 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

219 
	`mem£t
(
zbuf
, 0, 256 * 
block_size
);

221 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All blocks "

223 i‡(
	`memcmp
(
zbuf
, 
rbuf
, 256 * 
block_size
)) {

224 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

226 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

229 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

233 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==0 Blocks shouldÇotÑead backás "

235 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

236 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

237 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

239 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

242 
	}
}

245 
	$ã°_ßnôize_block_îa£
()

247 
ªt
;

248 
iscsi_d©a
 
d©a
;

249 
scsi_comm™d_des¸ùt‹
 *
cd
;

250 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

252 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

253 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK ERASE");

255 
CHECK_FOR_SANITIZE
;

256 
CHECK_FOR_DATALOSS
;

258 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE BLOCK_ERASE is supported "

260 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

261 
SCSI_SANITIZE_BLOCK_ERASE
);

262 i‡(
cd
 =
NULL
) {

263 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

265 i‡(
öq_bdc
 && inq_bdc->
wabîeq
) {

266 
	`loggög
(
LOG_NORMAL
, "[FAILED] WABEREQ isÇot 0 but "

268 
	`CU_FAIL
("[FAILED] WABEREQ isÇot 0 but BLOCK ERASE "

272 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

274 
	`CU_PASS
("SANITIZE isÇot implemented.");

278 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

280 i‡(
öq_bdc
 =
NULL
) {

281 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

284 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

288 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have READCAPACITY16");

289 i‡(!
rc16
) {

290 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

292 
	`CU_FAIL
("[FAILED] READCAPACITY16 is missing");

295 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÜogical blockÖrovisioning (LBPME) "

297 i‡(!
rc16
 || !‘c16->
lbpme
)) {

298 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

300 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE opcode is "

304 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

306 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 != 0) {

307 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

308 
	`loggög
(
LOG_NORMAL
, "[WARNING] SANITIZE BLOCK ERASE opcode is "

313 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

317 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

318 
	`öô_lun_wôh_d©a
(
buf
, 0);

319 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

320 
	`öô_lun_wôh_d©a
(
buf
, 
num_blocks
 - 256);

323 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic BLOCK ERASE SANITIZE");

324 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

325 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

326 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

328 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

329 
	`check_lun_is_wùed
(
buf
, 0);

330 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

331 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

333 
d©a
.
size
 = 8;

334 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

335 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

337 
	`loggög
(
LOG_VERBOSE
, "BLOCK_ERASEÖarameterÜistÜength must be 0");

338 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

340 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

341 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 8, &
d©a
);

342 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

344 i‡(
öq_bdc
) {

345 
	`loggög
(
LOG_VERBOSE
, "Check WABEREQ settingándÅhat READ "

347 
	`check_wabîeq
();

350 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll blocksáre unmappedáfter "

352 
	`check_unm≠
();

353 
	}
}

	@test-tool/test_sanitize_block_erase_reserved.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_num
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_num
) {

34 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

42 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

46 
ch™ge_num
 = 0;

48 
	}
}

50 
	$ã°_ßnôize_block_îa£_ª£rved
()

52 
i
, 
ªt
;

54 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE Reserved bits/bytes");

57 
CHECK_FOR_SANITIZE
;

58 
CHECK_FOR_DATALOSS
;

60 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

63 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

65 
ch™ge_num
 = 1;

66 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

67 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

68 i‡(
ªt
 == -2) {

69 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

71 
	`CU_PASS
("SANITIZE isÇot implemented.");

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
i
 = 2; i < 7; i++) {

78 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

79 "byã %d sëÅÿn⁄-zîo", 
i
);

80 
ch™ge_num
 = 
i
;

82 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

83 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_sanitize_crypto_erase.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$check_wa˚ªq
()

33 
scsi_èsk
 *
èsk_ªt
;

35 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

36 
èsk_ªt
 = 
	`ªad10_èsk
(
iscsic
, 
tgt_lun
, 0, 
block_size
, block_size,

37 0, 0, 0, 0, 0, 
NULL
);

38 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

39 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

41 
öq_bdc
->
wabîeq
) {

43 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

45 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

49 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==1. Reads fromÅhe "

51 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

52 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

58 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

62 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==2. Reads fromÅhe "

64 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


65 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


66 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

72 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

75 
	`CU_FAIL
("[FAILED] Read should have failed "

80 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==3. Reads fromÅhe "

82 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


83 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


84 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

85 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

90 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

93 
	`CU_FAIL
("[FAILED] Read should have failed "

99 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

100 
	}
}

103 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

105 
ªt
;

107 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

108 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

109 
block_size
, 0, 0, 0, 0, 0, 
buf
);

110 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

111 
	}
}

114 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

116 
ªt
;

117 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

119 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

120 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

121 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

123 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

124 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

125 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

127 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

129 
	}
}

132 
	$ã°_ßnôize_¸y±o_îa£
()

134 
ªt
;

135 
iscsi_d©a
 
d©a
;

136 
scsi_comm™d_des¸ùt‹
 *
cd
;

137 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

139 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

140 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO ERASE");

142 
CHECK_FOR_SANITIZE
;

143 
CHECK_FOR_DATALOSS
;

145 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE CRYPTO_ERASE is supported "

147 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

148 
SCSI_SANITIZE_CRYPTO_ERASE
);

149 i‡(
cd
 =
NULL
) {

150 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

152 i‡(
öq_bdc
 && inq_bdc->
wa˚ªq
) {

153 
	`loggög
(
LOG_NORMAL
, "[FAILED] WACEREQ isÇot 0 but "

156 
	`CU_FAIL
("[FAILED] WACEREQ isÇot 0 but CRYPTO ERASE "

160 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

162 
	`CU_PASS
("SANITIZE isÇot implemented.");

166 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

168 i‡(
öq_bdc
 =
NULL
) {

169 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE CRYPTO ERASE opcode is "

172 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

177 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

178 
	`öô_lun_wôh_d©a
(
buf
, 0);

179 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

180 
	`öô_lun_wôh_d©a
(
buf
, 
num_blocks
 - 256);

183 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic CRYPTO ERASE SANITIZE");

184 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

185 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

186 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

188 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

189 
	`check_lun_is_wùed
(
buf
, 0);

190 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

191 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

195 
d©a
.
size
 = 8;

196 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

197 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

199 
	`loggög
(
LOG_VERBOSE
, "CRYPTO_ERASEÖarameterÜistÜength must be 0");

200 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

202 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

203 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 8, &
d©a
);

204 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

206 i‡(
öq_bdc
) {

207 
	`loggög
(
LOG_VERBOSE
, "Check WACEREQ settingándÅhat READ "

209 
	`check_wa˚ªq
();

211 
	}
}

	@test-tool/test_sanitize_crypto_erase_reserved.c

18 
	~<°dio.h
>

19 
	~<¨∑/öë.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

27 
	gch™ge_num
;

29 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

31 
ch™ge_num
) {

34 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

42 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

46 
ch™ge_num
 = 0;

48 
	}
}

50 
	$ã°_ßnôize_¸y±o_îa£_ª£rved
()

52 
i
, 
ªt
;

54 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE Reserved bits/bytes");

57 
CHECK_FOR_SANITIZE
;

58 
CHECK_FOR_DATALOSS
;

60 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

63 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

65 
ch™ge_num
 = 1;

66 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

67 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

68 i‡(
ªt
 == -2) {

69 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

71 
	`CU_PASS
("SANITIZE isÇot implemented.");

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
i
 = 2; i < 7; i++) {

78 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

79 "byã %d sëÅÿn⁄-zîo", 
i
);

80 
ch™ge_num
 = 
i
;

82 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

83 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_sanitize_exit_failure_mode.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_exô_Áûuª_mode
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE EXIT FAILURE MODE");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE EXIT FAILURE MODE is "

44 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

45 
SCSI_SANITIZE_EXIT_FAILURE_MODE
);

46 i‡(
cd
 =
NULL
) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE EXIT FAILURE MODE is "

50 
	`CU_PASS
("SANITIZE isÇot implemented.");

54 
d©a
.
size
 = 8;

55 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

56 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

59 
	`loggög
(
LOG_VERBOSE
, "EXIT_FAILURE_MODEÖarameterÜistÜength must "

61 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

63 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

64 0, 0, 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 8, &
d©a
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	}
}

	@test-tool/test_sanitize_invalid_serviceaction.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_övÆid_£rvi˚a˘i⁄
()

32 
i
, 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE for invalid serviceactions");

37 
CHECK_FOR_SANITIZE
;

40 
	`loggög
(
LOG_VERBOSE
, "Testáll invalid serviceáctionsánd make sure "

42 
i
 = 0; i <= 0x1f; i++) {

43 
i
) {

51 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat ServiceAction:0x%02d is "

52 "™Éº‹.", 
i
);

54 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

55 0, 0, 
i
, 0, 
NULL
);

56 i‡(
ªt
 == -2) {

57 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

59 
	`CU_PASS
("SANITIZE isÇot implemented.");

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_sanitize_overwrite.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$öô_lun_wôh_d©a
(
uöt64_t
 
lba
)

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

36 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

37 
block_size
, 0, 0, 0, 0, 0, 
buf
);

38 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

39 
	}
}

42 
	$check_lun_is_wùed
(
uöt64_t
 
lba
, 
c
)

44 
ªt
;

45 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

46 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

48 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

49 
block_size
, 0, 0, 0, 0, 0, 
rbuf
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`mem£t
(
zbuf
, 
c
, 256 * 
block_size
);

54 i‡(
	`memcmp
(
zbuf
, 
rbuf
, 256 * 
block_size
)) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

57 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

60 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

63 
	}
}

66 
	$ã°_ßnôize_ovîwrôe
()

68 
i
, 
ªt
;

69 
iscsi_d©a
 
d©a
;

70 
scsi_comm™d_des¸ùt‹
 *
cd
;

72 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

73 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE");

75 
CHECK_FOR_SANITIZE
;

76 
CHECK_FOR_DATALOSS
;

78 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE is supported "

80 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

81 
SCSI_SANITIZE_OVERWRITE
);

82 i‡(
cd
 =
NULL
) {

83 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

85 
	`CU_PASS
("SANITIZE isÇot implemented.");

89 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

91 i‡(
öq_bdc
 =
NULL
) {

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE OVERWRITE opcode is "

95 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

99 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

101 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 == 0) {

102 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

103 
	`loggög
(
LOG_NORMAL
, "[WARNING] SANITIZE OVERWRITE opcode is "

108 
	`loggög
(
LOG_NORMAL
, "This isá SSD device");

111 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

112 
	`öô_lun_wôh_d©a
(0);

113 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

114 
	`öô_lun_wôh_d©a
(
num_blocks
 - 256);

116 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one full block");

117 
d©a
.
size
 = 
block_size
 + 4;

118 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

119 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

121 
d©a
.data[0] = 0x01;

122 
d©a
.data[1] = 0x00;

123 
d©a
.d©a[2] = 
block_size
 >> 8;

124 
d©a
.d©a[3] = 
block_size
 & 0xff;

125 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

126 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

127 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

129 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

130 
	`check_lun_is_wùed
(0, 0xaa);

131 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

132 
	`check_lun_is_wùed
(
num_blocks
 - 256, 0xaa);

135 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one half block");

136 
d©a
.
size
 = 
block_size
 / 2 + 4;

138 
d©a
.d©a[2] = (
block_size
 / 2) >> 8;

139 
d©a
.d©a[3] = (
block_size
 / 2 ) & 0xff;

141 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

142 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

143 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

146 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of 4 bytes");

147 
d©a
.
size
 = 4 + 4;

149 
d©a
.data[2] = 0;

150 
d©a
.data[3] = 4;

152 
ªt
 = 
	`ßnôize
(
iscsic
, 
tgt_lun
,

153 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

154 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

156 
	`loggög
(
LOG_VERBOSE
, "OVERWRITEÖarameterÜistÜength must "

158 
i
 = 0; i < 5; i++) {

159 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%d isán "

160 "îr‹.", 
i
);

162 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

163 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
i
, &
d©a
);

164 i‡(
ªt
 == -2) {

165 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

167 
	`CU_PASS
("SANITIZE isÇot implemented.");

170 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

175 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%zd (blocksize+5) "

176 "i†™Éº‹.", 
block_size
 + 5);

178 
d©a
.
size
 = 
block_size
 + 8;

179 
d©a
.d©®
	`Æloˇ
(
block_size
 + 8);

180 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

181 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

182 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
block_size
 + 5, &
d©a
);

183 i‡(
ªt
 == -2) {

184 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE isÇot "

186 
	`CU_PASS
("SANITIZE isÇot implemented.");

189 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

193 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE COUNT == 0 isánÉrror");

194 
d©a
.
size
 = 
block_size
 + 4;

196 
d©a
.data[0] = 0x00;

197 
d©a
.data[1] = 0x00;

198 
d©a
.d©a[2] = 
block_size
 >> 8;

199 
d©a
.d©a[3] = 
block_size
 & 0xff;

200 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

201 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

202 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

205 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == 0 isán "

207 
d©a
.
size
 = 
block_size
 + 4;

209 
d©a
.data[0] = 0x00;

210 
d©a
.data[1] = 0x00;

211 
d©a
.data[2] = 0x00;

212 
d©a
.data[3] = 0x00;

213 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

214 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

215 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

218 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == %zd > %zd "

219 "(blocksizeËi†™Éº‹", 
block_size
 + 4, block_size);

221 
d©a
.
size
 = 
block_size
 + 4;

223 
d©a
.data[0] = 0x00;

224 
d©a
.data[1] = 0x00;

225 
d©a
.d©a[2] = (
block_size
 + 4) >> 8;

226 
d©a
.d©a[3] = (
block_size
 + 4) & 0xff;

227 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

228 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

229 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

230 
	}
}

	@test-tool/test_sanitize_overwrite_reserved.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_num
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_num
) {

35 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

43 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

47 
ch™ge_num
 = 0;

49 
	}
}

51 
	$ã°_ßnôize_ovîwrôe_ª£rved
()

53 
i
, 
ªt
;

54 
iscsi_d©a
 
d©a
;

56 
d©a
.
size
 = 
block_size
 + 4;

57 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

58 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

60 
d©a
.data[0] = 0x01;

61 
d©a
.data[1] = 0x00;

62 
d©a
.d©a[2] = 
block_size
 >> 8;

63 
d©a
.d©a[3] = 
block_size
 & 0xff;

65 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

66 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE Reserved bits/bytes");

68 
CHECK_FOR_SANITIZE
;

69 
CHECK_FOR_DATALOSS
;

71 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

73 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

75 
ch™ge_num
 = 1;

76 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

77 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

78 i‡(
ªt
 == -2) {

79 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

81 
	`CU_PASS
("SANITIZE isÇot implemented.");

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

87 
i
 = 2; i < 7; i++) {

88 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

89 "byã %d sëÅÿn⁄-zîo", 
i
);

90 
ch™ge_num
 = 
i
;

92 
ªt
 = 
	`ßnôize_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
,

93 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

96 
	}
}

	@test-tool/test_sanitize_readonly.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_ªad⁄ly
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with READONLY devices");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

43 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

44 i‡(
iscsic2
 =
NULL
) {

45 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

49 
	`loggög
(
LOG_VERBOSE
, "Set Software Write Protect onÅhe second connection");

50 
ªt
 = 
	`£t_swp
(
iscsic2
, 
tgt_lun
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 != 0) {

56 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

58 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

59 
	`¶ìp
(1);

62 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

64 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

65 
SCSI_SANITIZE_OVERWRITE
);

66 i‡(
cd
 =
NULL
) {

67 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

70 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

72 
d©a
.
size
 = 
block_size
 + 4;

73 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

74 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

76 
d©a
.data[0] = 0x01;

77 
d©a
.data[1] = 0x00;

78 
d©a
.d©a[2] = 
block_size
 >> 8;

79 
d©a
.d©a[3] = 
block_size
 & 0xff;

80 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

81 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

82 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

88 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

89 
SCSI_SANITIZE_BLOCK_ERASE
);

90 i‡(
cd
 =
NULL
) {

91 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

94 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

95 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

96 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

97 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

100 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

102 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

103 
SCSI_SANITIZE_CRYPTO_ERASE
);

104 i‡(
cd
 =
NULL
) {

105 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

108 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

109 
ªt
 = 
	`ßnôize_wrôïrŸe˘ed
(
iscsic
, 
tgt_lun
,

110 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

111 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

115 
	`loggög
(
LOG_VERBOSE
, "Clear Software Write Protect onÅhe second connection");

116 
ªt
 = 
	`˛ór_swp
(
iscsic2
, 
tgt_lun
);

118 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

120 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

121 
	`¶ìp
(1);

124 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

125 
iscsic2
 = 
NULL
;

126 
	}
}

	@test-tool/test_sanitize_reservations.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ßnôize_ª£rv©i⁄s
()

32 
ªt
;

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with RESERVATIONS");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

43 
iscsic2
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, 
tgt_uæ
, &
tgt_lun
);

44 i‡(
iscsic2
 =
NULL
) {

45 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

49 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe second "

51 
ªt
 = 
	`ª£rve6
(
iscsic2
, 
tgt_lun
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

57 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

58 
SCSI_SANITIZE_OVERWRITE
);

59 i‡(
cd
 =
NULL
) {

60 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

63 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

65 
d©a
.
size
 = 
block_size
 + 4;

66 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

67 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

69 
d©a
.data[0] = 0x01;

70 
d©a
.data[1] = 0x00;

71 
d©a
.d©a[2] = 
block_size
 >> 8;

72 
d©a
.d©a[3] = 
block_size
 & 0xff;

73 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

74 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

81 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

82 
SCSI_SANITIZE_BLOCK_ERASE
);

83 i‡(
cd
 =
NULL
) {

84 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

87 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

88 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

89 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

93 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

95 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

96 
SCSI_SANITIZE_CRYPTO_ERASE
);

97 i‡(
cd
 =
NULL
) {

98 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

101 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

102 
ªt
 = 
	`ßnôize_c⁄Êi˘
(
iscsic
, 
tgt_lun
,

103 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

108 
	`iscsi_de°roy_c⁄ãxt
(
iscsic2
);

109 
iscsic2
 = 
NULL
;

110 
	}
}

	@test-tool/test_sanitize_reset.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	$ßnôize_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

30 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
 _U_)

32 
	}
}

35 
	$ã°_ßnôize_ª£t
()

37 
ªt
;

38 
scsi_comm™d_des¸ùt‹
 *
cd
;

39 
scsi_èsk
 *
ßnôize_èsk
;

40 
scsi_èsk
 *
æ_èsk
;

41 
iscsi_d©a
 
d©a
;

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

44 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with Task/Lun/Target/SessionÑeset");

46 
CHECK_FOR_SANITIZE
;

47 
CHECK_FOR_DATALOSS
;

49 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE will continue "

51 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

52 
SCSI_SANITIZE_OVERWRITE
);

53 i‡(
cd
 =
NULL
) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

56 
	`CU_PASS
("SANITIZE isÇot implemented.");

60 
	`loggög
(
LOG_VERBOSE
, "Sendánásyncronous SANITIZEÅoÅheÅarget.");

61 
d©a
.
size
 = 
block_size
 + 4;

62 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

63 
	`mem£t
(&
d©a
.d©a[4], 0, 
block_size
);

65 
d©a
.data[0] = 0x01;

66 
d©a
.data[1] = 0x00;

67 
d©a
.d©a[2] = 
block_size
 >> 8;

68 
d©a
.d©a[3] = 
block_size
 & 0xff;

69 
ßnôize_èsk
 = 
	`iscsi_ßnôize_èsk
(
iscsic
, 
tgt_lun
,

70 0, 0, 
SCSI_SANITIZE_OVERWRITE
,

71 
d©a
.
size
, &data,

72 
ßnôize_cb
, 
NULL
);

73 
	`CU_ASSERT_NOT_EQUAL
(
ßnôize_èsk
, 
NULL
);

77 
æ_èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsic
, 0, 64);

78 i‡(
æ_èsk
) {

79 
	`scsi_‰ì_scsi_èsk
(
æ_èsk
);

83 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds incaseÅheÅarget is "

85 
	`¶ìp
(3);

87 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE has startedándÅhat "

89 
ªt
 = 
	`ã°unôªady_ßnôize
(
iscsic
, 
tgt_lun
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat STARTSTOPUNIT fails with "

94 
ªt
 = 
	`°¨t°›unô_ßnôize
(
iscsic
, 
tgt_lun
, 1, 0, 1, 0, 1, 0);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat READ16 fails with "

99 
ªt
 = 
	`ªad16_ßnôize
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

101 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY is stillállowed while "

105 
ªt
 = 
	`öquúy
(
iscsic
, 
tgt_lun
, 0, 0, 255, 
NULL
);

106 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK");

110 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsic
, 
ßnôize_èsk
);

111 i‡(
ªt
 != 0) {

112 
	`loggög
(
LOG_NORMAL
, "ABORT TASK failed. %s",

113 
	`iscsi_gë_îr‹
(
iscsic
));

116 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK SET");

117 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsic
, 
tgt_lun
);

118 i‡(
ªt
 != 0) {

119 
	`loggög
(
LOG_NORMAL
, "ABORT TASK SET failed. %s",

120 
	`iscsi_gë_îr‹
(
iscsic
));

123 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

124 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsic
, 
tgt_lun
);

125 i‡(
ªt
 != 0) {

126 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

129 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm Reset");

130 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsic
);

131 i‡(
ªt
 != 0) {

132 
	`loggög
(
LOG_NORMAL
, "W¨mÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

135 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold Reset");

136 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsic
);

137 i‡(
ªt
 != 0) {

138 
	`loggög
(
LOG_NORMAL
, "CﬁdÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
iscsic
));

141 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

142 
	`iscsi_de°roy_c⁄ãxt
(
iscsic
);

144 
	`loggög
(
LOG_VERBOSE
, "Sleep for one seconds incaseÅheÅarget is "

146 
	`¶ìp
(1);

148 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

149 
iscsic
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, 
tgt_uæ
, &
tgt_lun
);

150 i‡(
iscsic
 =
NULL
) {

151 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE is still going.");

156 
ªt
 = 
	`ã°unôªady_ßnôize
(
iscsic
, 
tgt_lun
);

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

159 
	`loggög
(
LOG_VERBOSE
, "Wait untilÅhe SANITIZE operation has finished");

160 
	`ã°unôªady_˛ór_ua
(
iscsic
, 
tgt_lun
)) {

161 
	`¶ìp
(60);

163 
	}
}

	@test-tool/test_startstopunit_noloej.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_nﬁ€j
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT LOEJ==0");

35 i‡(!
öq
->
rmb
) {

36 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

41 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==0");

42 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

47 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==1");

51 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

56 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==0");

60 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

65 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==1");

69 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

74 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==0");

78 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

83 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==1");

87 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

92 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

93 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==0");

96 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

98 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

100 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

101 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

102 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

104 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==1");

105 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

107 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

109 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

110 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

111 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

115 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

116 
	}
}

	@test-tool/test_startstopunit_pwrcnd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_pwr˙d
()

31 
i
, 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT PowerCondition");

35 i‡(!
öq
->
rmb
) {

36 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

41 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when PC!=0");

42 
i
 = 1; i < 16; i++) {

43 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

44 1, 0, 
i
, 0, 1, 0);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

48 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

53 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
, 1, 0, 0, 0, 1, 1);

54 
	}
}

	@test-tool/test_startstopunit_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_°¨t°›unô_sim∂e
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test basic STARTSTOPUNIT");

37 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

38 i‡(
öq
->
rmb
) {

39 
	`loggög
(
LOG_VERBOSE
, "Media isÑemovable. STARTSTOPUNIT should work");

41 
	`loggög
(
LOG_VERBOSE
, "Media isÇotÑemovable. STARTSTOPUNIT should fail");

44 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

46 i‡(!
öq
->
rmb
) {

47 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

54 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

59 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead fromÅhe media.");

64 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

70 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

76 
ªt
 = 
	`ã°unôªady_nomedium
(
iscsic
, 
tgt_lun
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

81 
ªt
 = 
	`°¨t°›unô
(
iscsic
, 
tgt_lun
,

83 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "Verify we canáccessÅhe mediaágain.");

86 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

87 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

88 
	}
}

	@test-tool/test_testunitready_simple.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_ã°unôªady_sim∂e
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY");

33 
ªt
 = 
	`ã°unôªady
(
iscsic
, 
tgt_lun
);

34 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

35 
	}
}

	@test-tool/test_unmap_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_unm≠_0blocks
()

32 
i
, 
ªt
;

33 
unm≠_li°
 
li°
[257];

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255ásá single descriptor");

41 
i
 = 0; i < 256; i++) {

42 
li°
[0].
lba
 = 
i
;

43 
li°
[0].
num
 = 0;

44 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255 with one descriptorÖer block");

49 
i
 = 0; i < 256; i++) {

50 
li°
[
i
].
lba
 = i;

51 
li°
[
i
].
num
 = 0;

52 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 
i
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksátÉnd-of-LUN");

57 
li°
[0].
lba
 = 
num_blocks
;

58 
li°
[0].
num
 = 0;

59 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255 with one descriptorÖer block,Öossibly \"overlapping\".");

64 
i
 = 0; i < 256; i++) {

65 
li°
[
i
].
lba
 = i/2;

66 
li°
[
i
].
num
 = 0;

68 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 256);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP withoutány descriptors.");

73 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 0);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

76 
	}
}

	@test-tool/test_unmap_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$öô_lun_wôh_d©a
(*
buf
, 
uöt64_t
 
lba
)

31 
ªt
;

33 
	`mem£t
(
buf
, 'a', 256 * 
block_size
);

34 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
lba
, 256 * 
block_size
,

35 
block_size
, 0, 0, 0, 0, 0, 
buf
);

36 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

37 
	}
}

40 
	$ã°_unm≠_sim∂e
()

42 
i
, 
ªt
;

43 
unm≠_li°
 
li°
[257];

44 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

45 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

47 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

48 
	`loggög
(
LOG_VERBOSE
, "Test basic UNMAP");

50 
CHECK_FOR_DATALOSS
;

51 
CHECK_FOR_THIN_PROVISIONING
;

52 
CHECK_FOR_SBC
;

55 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-256 blocksátÅhe start ofÅhe "

58 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

59 
	`öô_lun_wôh_d©a
(
buf
, 0);

61 
i
 = 1; i <= 256; i++) {

62 
	`loggög
(
LOG_VERBOSE
, "UNMAP block†0-%d", 
i
);

63 
li°
[0].
lba
 = 0;

64 
li°
[0].
num
 = 
i
;

65 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

69 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

70 
block_size
, 0, 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 i‡(
rc16
 &&Ñc16->
lb¥z
) {

74 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

76 i‡(
	`memcmp
(
buf
, 
zbuf
, 
i
 * 
block_size
)) {

77 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

79 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

82 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

88 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-256 blocksátÅhe start ofÅhe "

91 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

92 
	`öô_lun_wôh_d©a
(
buf
, 0);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

95 
i
 = 0; i < 256; i++) {

96 
li°
[
i
].
lba
 = i;

97 
li°
[
i
].
num
 = 1;

98 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 
i
 + 1);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

101 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

102 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

103 
block_size
, 0, 0, 0, 0, 0, 
buf
);

104 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

106 i‡(
rc16
 &&Ñc16->
lb¥z
) {

107 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

109 i‡(
	`memcmp
(
buf
, 
zbuf
, 
i
 * 
block_size
)) {

110 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

112 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

115 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

120 
	}
}

	@test-tool/test_unmap_vpd.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_unm≠_vpd
()

31 
ªt
;

32 
unm≠_li°
 
li°
[1];

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test UNMAPávailability is consistent with VPD settings");

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, "Check if UNMAP isávailable.");

41 
li°
[0].
lba
 = 0;

42 
li°
[0].
num
 = 0;

43 
ªt
 = 
	`unm≠
(
iscsic
, 
tgt_lun
, 0, 
li°
, 1);

45 i‡(
ªt
 != 0) {

46 
	`loggög
(
LOG_VERBOSE
, "UNMAP isÇotávailable. VerifyÅhat VPD "

49 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is clear.");

50 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

51 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP isÇot implemented "

53 
	`CU_FAIL
("[FAILED] UNMAP is unavailable but LBPU==1");

55 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is clear.");

58 
	`loggög
(
LOG_VERBOSE
, "UNMAP isávailable. VerifyÅhat VPD "

61 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

62 i‡(
rc16
 &&Ñc16->
lbpme
) {

63 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

65 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

67 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is set.");

71 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

72 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is set.");

74 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

76 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPU==0");

79 
	}
}

	@test-tool/test_verify10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify10_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==2^31");

49 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY10. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocks one block beyondÅheÉnd");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 1, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 1, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 1, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify10_flags.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify10_Êags
()

31 
ªt
;

32 *
buf
 = 
	`mÆloc
(
block_size
);

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 flags");

37 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

38 
block_size
, 0, 0, 0, 0, 0, 
buf
);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with DPO==1");

43 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

44 
block_size
, 0, 1, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

47 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

48 
	`‰ì
(
buf
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with BYTCHK==1");

55 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`‰ì
(
buf
);

59 
	}
}

	@test-tool/test_verify10_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 1, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify10_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify10_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_mism©ch_no_cmp
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 0, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

55 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <= 256; i++) {

63 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

69 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
buf
[
off£t
] ^= 'X';

74 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

76 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

77 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	}
}

	@test-tool/test_verify10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 1, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify10_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 withÇon-zero VRPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
ªt
 = 
	`vîify10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

49 
block_size
, 
i
, 0, 1, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY10. SkippingÅest");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_verify12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify12_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==2^31");

49 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY12. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocks one block beyondÅheÉnd");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 1, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 1, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 1, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 flags");

38 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

39 
block_size
, 0, 0, 0, 0, 0, 
buf
);

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with DPO==1");

44 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 1, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with BYTCHK==1");

55 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify12_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
buf
[
off£t
] ^= 'X';

48 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

50 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 1, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify12_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify12_mismatch_no_cmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_mism©ch_no_cmp
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
buf
[
off£t
] ^= 'X';

48 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

50 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

51 
block_size
, 0, 0, 0, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

54 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

61 
i
 = 1; i <= 256; i++) {

62 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
buf
[
off£t
] ^= 'X';

73 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

75 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

76 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_verify12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 1, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify12_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 withÇon-zero VRPROTECT");

38 
CHECK_FOR_SBC
;

40 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

41 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

42 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
ªt
 = 
	`vîify12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

48 
block_size
, 
i
, 0, 1, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY12. SkippingÅest");

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

60 
	}
}

	@test-tool/test_verify16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_vîify16_0blocks
()

29 
ªt
;

31 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

32 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==0");

33 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

34 0, 0, 1, 
NULL
);

35 i‡(
ªt
 == -2) {

36 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

37 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

40 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

42 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocks one blockÖastÉnd-of-LUN");

43 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

44 
block_size
, 0, 0, 1, 
NULL
);

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==2^63");

49 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

50 
block_size
, 0, 0, 1, 
NULL
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==-1");

55 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

56 0, 0, 1, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_vîify16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocks one block beyondÅheÉnd");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

42 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

43 
i
 * 
block_size
, block_size,

44 0, 0, 1, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

47 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==2^63");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

61 
i
 * 
block_size
, block_size,

62 0, 0, 1, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==-1");

68 
i
 = 1; i <= 256; i++) {

69 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

73 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

74 
block_size
, 0, 0, 1, 
buf
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

80 
i
 = 2; i <= 256; i++) {

81 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`vîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 1, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_verify16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_Êags
()

33 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 flags");

39 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

40 
block_size
, 0, 0, 0, 0, 0, 
buf
);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with DPO==1");

44 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 1, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with BYTCHK==1");

55 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

56 
block_size
, 0, 0, 1, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	}
}

	@test-tool/test_verify16_mismatch.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_mism©ch
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

48 
buf
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 1, 
buf
);

53 i‡(
ªt
 == -2) {

54 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

55 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <= 256; i++) {

63 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

69 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

70 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
buf
[
off£t
] ^= 'X';

75 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

77 
ªt
 = 
	`vîify16_miscom∑ª
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

78 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
	}
}

	@test-tool/test_verify16_mismatch_no_cmp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_mism©ch_no_cmp
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK for blocks 1-255");

38 
i
 = 1; i <= 256; i++) {

39 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

49 
buf
[
off£t
] ^= 'X';

50 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

52 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

53 
block_size
, 0, 0, 0, 
buf
);

54 i‡(
ªt
 == -2) {

55 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

56 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

63 
i
 = 1; i <= 256; i++) {

64 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

66 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

70 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
buf
[
off£t
] ^= 'X';

76 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

78 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

79 
i
 * 
block_size
, block_size, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_verify16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
buf
);

44 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 1, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
ªt
 = 
	`vîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 
buf
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

68 
	}
}

	@test-tool/test_verify16_vrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_vΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 withÇon-zero VRPROTECT");

39 
CHECK_FOR_SBC
;

41 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

42 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

43 
i
 = 1; i < 8; i++) {

44 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 
ªt
 = 
	`vîify16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0, 
block_size
,

48 
block_size
, 
i
, 0, 1, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support VERIFY16. SkippingÅest");

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

60 
	}
}

	@test-tool/test_write10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==0");

35 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

36 0, 0, 0, 0, 0, 
NULL
);

37 i‡(
ªt
 == -2) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

39 
	`CU_PASS
("WRITE10 isÇot implemented.");

42 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

44 i‡(
num_blocks
 >= 0x80000000) {

45 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE10. SkippingÅest.\n");

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

52 
	`CU_PASS
("WRITE10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôe10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_write10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1");

41 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

46 
	`CU_PASS
("WRITE10 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_write10_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe10_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

52 
èsk
->
cdb
[8] = 1;

53 
èsk
->
cdb_size
 = 10;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

73 
	`CU_PASS
("WRITE10 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

111 
èsk
->
cdb
[8] = 1;

112 
èsk
->
cdb_size
 = 10;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

153 
èsk
->
cdb
[8] = 1;

154 
èsk
->
cdb_size
 = 10;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

198 
èsk
->
cdb
[8] = 2;

199 
èsk
->
cdb_size
 = 10;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

236 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

238 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

239 
	`mem£t
(
buf
, 'a', 10000);

240 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

241 
block_size
, 0, 0, 0, 0, 0, 
buf
);

242 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

244 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

245 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

246 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

248 
	`mem£t
(
buf
, 'b', 10000);

250 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

251 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

252 
èsk
->
cdb
[8] = 1;

253 
èsk
->
cdb_size
 = 10;

254 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

255 
èsk
->
expx„æí
 = 2 * 
block_size
;

257 
d©a
.
size
 = 
èsk
->
expx„æí
;

258 
d©a
.d©®&
buf
[0];

259 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

260 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

262 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

263 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

264 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

265 
	`iscsi_gë_îr‹
(
iscsic
));

267 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

269 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

270 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

271 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

274 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

276 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

277 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

278 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

280 
block_size
, 
èsk
->
ªsiduÆ
);

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

283 
	`scsi_‰ì_scsi_èsk
(
èsk
);

284 
èsk
 = 
NULL
;

286 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

287 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

288 
block_size
, 0, 0, 0, 0, 0, 
buf
);

289 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

291 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

292 
i
 = 0; i < 
block_size
; i++) {

293 i‡(
buf
[
i
] != 'b') {

294 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

295 
	`CU_FAIL
("Block wasÇot written correctly");

300 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

301 
i
 = 
block_size
; i < 2 * block_size; i++) {

302 i‡(
buf
[
i
] != 'a') {

303 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

304 
	`CU_FAIL
("Second block was incorrectly overwritten");

310 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

312 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

313 
	`mem£t
(
buf
, 'a', 10000);

314 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

315 
block_size
, 0, 0, 0, 0, 0, 
buf
);

316 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

318 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

319 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

320 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

322 
	`mem£t
(
buf
, 'b', 10000);

324 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

325 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

326 
èsk
->
cdb
[8] = 2;

327 
èsk
->
cdb_size
 = 10;

328 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

329 
èsk
->
expx„æí
 = 
block_size
;

331 
d©a
.
size
 = 
èsk
->
expx„æí
;

332 
d©a
.d©®&
buf
[0];

333 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

334 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

336 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

337 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

338 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

339 
	`iscsi_gë_îr‹
(
iscsic
));

341 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

343 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

344 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

345 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

348 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

350 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

351 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

352 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

354 
block_size
, 
èsk
->
ªsiduÆ
);

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

357 
	`scsi_‰ì_scsi_èsk
(
èsk
);

358 
èsk
 = 
NULL
;

360 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

361 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

362 
block_size
, 0, 0, 0, 0, 0, 
buf
);

363 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

365 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

366 
i
 = 0; i < 
block_size
; i++) {

367 i‡(
buf
[
i
] != 'b') {

368 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

369 
	`CU_FAIL
("Block wasÇot written correctly");

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

375 
i
 = 
block_size
; i < 2 * block_size; i++) {

376 i‡(
buf
[
i
] != 'a') {

377 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

378 
	`CU_FAIL
("Second block was incorrectly overwritten");

382 
	}
}

	@test-tool/test_write10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

49 
	`CU_PASS
("WRITE10 isÇot implemented.");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

60 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

61 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôe10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

52 
	`CU_PASS
("WRITE10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_write12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe12_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE12. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

44 
	`CU_PASS
("WRITE12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_write12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

52 
	`CU_PASS
("WRITE12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôe12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_write12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1");

41 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

46 
	`CU_PASS
("WRITE12 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==0");

53 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

54 
block_size
, block_size,

55 0, 0, 1, 0, 0, 
buf
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==1");

60 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

61 
block_size
, block_size,

62 0, 0, 1, 1, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==0 FUA_NV==1");

67 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

68 
block_size
, block_size,

69 0, 0, 0, 1, 0, 
buf
);

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1 FUA==1 FUA_NV==1");

74 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0,

75 
block_size
, block_size,

76 0, 1, 1, 1, 0, 
buf
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_write12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

52 
èsk
->
cdb
[9] = 1;

53 
èsk
->
cdb_size
 = 12;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

73 
	`CU_PASS
("WRITE12 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

111 
èsk
->
cdb
[9] = 1;

112 
èsk
->
cdb_size
 = 12;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

153 
èsk
->
cdb
[9] = 1;

154 
èsk
->
cdb_size
 = 12;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

198 
èsk
->
cdb
[9] = 2;

199 
èsk
->
cdb_size
 = 12;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

235 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

237 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

238 
	`mem£t
(
buf
, 'a', 10000);

239 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

240 
block_size
, 0, 0, 0, 0, 0, 
buf
);

241 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

247 
	`mem£t
(
buf
, 'b', 10000);

249 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

250 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

251 
èsk
->
cdb
[9] = 1;

252 
èsk
->
cdb_size
 = 12;

253 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

254 
èsk
->
expx„æí
 = 2 * 
block_size
;

256 
d©a
.
size
 = 
èsk
->
expx„æí
;

257 
d©a
.d©®&
buf
[0];

258 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

259 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

261 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

264 
	`iscsi_gë_îr‹
(
iscsic
));

266 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

268 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

269 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

270 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

273 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

275 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

276 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

277 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

279 
block_size
, 
èsk
->
ªsiduÆ
);

281 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

282 
	`scsi_‰ì_scsi_èsk
(
èsk
);

283 
èsk
 = 
NULL
;

285 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

286 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

287 
block_size
, 0, 0, 0, 0, 0, 
buf
);

288 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

290 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

291 
i
 = 0; i < 
block_size
; i++) {

292 i‡(
buf
[
i
] != 'b') {

293 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

294 
	`CU_FAIL
("Block wasÇot written correctly");

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

300 
i
 = 
block_size
; i < 2 * block_size; i++) {

301 i‡(
buf
[
i
] != 'a') {

302 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

303 
	`CU_FAIL
("Second block was incorrectly overwritten");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

311 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

312 
	`mem£t
(
buf
, 'a', 10000);

313 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

314 
block_size
, 0, 0, 0, 0, 0, 
buf
);

315 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

317 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

318 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

319 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

321 
	`mem£t
(
buf
, 'b', 10000);

323 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

324 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

325 
èsk
->
cdb
[9] = 2;

326 
èsk
->
cdb_size
 = 12;

327 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

328 
èsk
->
expx„æí
 = 
block_size
;

330 
d©a
.
size
 = 
èsk
->
expx„æí
;

331 
d©a
.d©®&
buf
[0];

332 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

333 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

335 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

336 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

337 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

338 
	`iscsi_gë_îr‹
(
iscsic
));

340 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

342 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

343 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

344 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

347 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

349 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

350 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

351 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

353 
block_size
, 
èsk
->
ªsiduÆ
);

355 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

356 
	`scsi_‰ì_scsi_èsk
(
èsk
);

357 
èsk
 = 
NULL
;

359 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

360 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

361 
block_size
, 0, 0, 0, 0, 0, 
buf
);

362 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

365 
i
 = 0; i < 
block_size
; i++) {

366 i‡(
buf
[
i
] != 'b') {

367 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

368 
	`CU_FAIL
("Block wasÇot written correctly");

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

374 
i
 = 
block_size
; i < 2 * block_size; i++) {

375 i‡(
buf
[
i
] != 'a') {

376 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

377 
	`CU_FAIL
("Second block was incorrectly overwritten");

381 
	}
}

	@test-tool/test_write12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

48 
	`CU_PASS
("WRITE12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_write12_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 withÇon-zero WRPROTECT");

42 
CHECK_FOR_DATALOSS
;

43 
CHECK_FOR_SBC
;

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôe12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, block_size,

50 
i
, 0, 0, 0, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

53 
	`CU_PASS
("WRITE12 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_write16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôe16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

37 0, 0, 0, 0, 0, 
NULL
);

38 i‡(
ªt
 == -2) {

39 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

40 
	`CU_PASS
("WRITE16 isÇot implemented.");

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocks one blockÖastÉnd-of-LUN");

46 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

47 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==2^63");

52 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000, 0,

53 
block_size
, 0, 0, 0, 0, 0, 
NULL
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==-1");

58 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

59 0, 0, 0, 0, 0, 
NULL
);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	}
}

	@test-tool/test_write16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

50 
	`CU_PASS
("WRITE16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==2^63");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

63 
i
 * 
block_size
, block_size,

64 0, 0, 0, 0, 0, 
buf
);

65 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==-1");

70 
i
 = 1; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

75 
block_size
, 0, 0, 0, 0, 0, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

80 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 2-256 blocksáll but one block beyondÅheÉnd");

81 
i
 = 2; i <= 256; i++) {

82 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

85 
ªt
 = 
	`wrôe16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	}
}

	@test-tool/test_write16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 flags");

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1");

42 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

43 
block_size
, block_size,

44 0, 1, 0, 0, 0, 
buf
);

45 i‡(
ªt
 == -2) {

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

47 
	`CU_PASS
("WRITE16 isÇot implemented.");

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==0");

54 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

55 
block_size
, block_size,

56 0, 0, 1, 0, 0, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==1");

61 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

62 
block_size
, block_size,

63 0, 0, 1, 1, 0, 
buf
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==0 FUA_NV==1");

68 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

69 
block_size
, block_size,

70 0, 0, 0, 1, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1 FUA==1 FUA_NV==1");

75 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

76 
block_size
, block_size,

77 0, 1, 1, 1, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	}
}

	@test-tool/test_write16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

48 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

50 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

51 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

52 
èsk
->
cdb
[13] = 1;

53 
èsk
->
cdb_size
 = 16;

54 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

55 
èsk
->
expx„æí
 = 0;

61 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

63 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

65 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

66 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

67 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

69 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


70 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


71 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

72 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

73 
	`CU_PASS
("WRITE16 isÇot implemented.");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
iscsic
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

111 
èsk
->
cdb
[13] = 1;

112 
èsk
->
cdb_size
 = 16;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

114 
èsk
->
expx„æí
 = 10000;

116 
d©a
.
size
 = 
èsk
->
expx„æí
;

117 
d©a
.d©®&
buf
[0];

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

119 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
iscsic
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

129 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

133 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

135 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

136 10000 - 
block_size
);

137 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

140 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

153 
èsk
->
cdb
[13] = 1;

154 
èsk
->
cdb_size
 = 16;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

156 
èsk
->
expx„æí
 = 200;

158 
d©a
.
size
 = 
èsk
->
expx„æí
;

159 
d©a
.d©®&
buf
[0];

160 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

161 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

164 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

165 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

166 
	`iscsi_gë_îr‹
(
iscsic
));

168 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

171 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

172 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

175 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

177 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

178 
block_size
 - 200);

179 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

182 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

186 
	`scsi_‰ì_scsi_èsk
(
èsk
);

187 
èsk
 = 
NULL
;

191 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

192 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

193 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

194 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

196 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

197 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

198 
èsk
->
cdb
[13] = 2;

199 
èsk
->
cdb_size
 = 16;

200 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

201 
èsk
->
expx„æí
 = 
block_size
;

203 
d©a
.
size
 = 
èsk
->
expx„æí
;

204 
d©a
.d©®&
buf
[0];

205 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

208 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

209 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

210 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

211 
	`iscsi_gë_îr‹
(
iscsic
));

213 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

216 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

220 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

223 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

226 
block_size
, 
èsk
->
ªsiduÆ
);

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

230 
	`scsi_‰ì_scsi_èsk
(
èsk
);

231 
èsk
 = 
NULL
;

235 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

237 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

238 
	`mem£t
(
buf
, 'a', 10000);

239 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

240 
block_size
, 0, 0, 0, 0, 0, 
buf
);

241 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

243 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

244 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

245 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

247 
	`mem£t
(
buf
, 'b', 10000);

249 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

250 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

251 
èsk
->
cdb
[13] = 1;

252 
èsk
->
cdb_size
 = 16;

253 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

254 
èsk
->
expx„æí
 = 2 * 
block_size
;

256 
d©a
.
size
 = 
èsk
->
expx„æí
;

257 
d©a
.d©®&
buf
[0];

258 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

259 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

261 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

262 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

263 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

264 
	`iscsi_gë_îr‹
(
iscsic
));

266 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

268 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

269 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

270 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

273 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

275 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

276 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

277 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

279 
block_size
, 
èsk
->
ªsiduÆ
);

281 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

282 
	`scsi_‰ì_scsi_èsk
(
èsk
);

283 
èsk
 = 
NULL
;

285 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

286 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

287 
block_size
, 0, 0, 0, 0, 0, 
buf
);

288 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

290 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

291 
i
 = 0; i < 
block_size
; i++) {

292 i‡(
buf
[
i
] != 'b') {

293 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

294 
	`CU_FAIL
("Block wasÇot written correctly");

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

300 
i
 = 
block_size
; i < 2 * block_size; i++) {

301 i‡(
buf
[
i
] != 'a') {

302 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

303 
	`CU_FAIL
("Second block was incorrectly overwritten");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

311 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

312 
	`mem£t
(
buf
, 'a', 10000);

313 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

314 
block_size
, 0, 0, 0, 0, 0, 
buf
);

315 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

317 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

318 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

319 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

321 
	`mem£t
(
buf
, 'b', 10000);

323 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

324 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

325 
èsk
->
cdb
[13] = 2;

326 
èsk
->
cdb_size
 = 16;

327 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

328 
èsk
->
expx„æí
 = 
block_size
;

330 
d©a
.
size
 = 
èsk
->
expx„æí
;

331 
d©a
.d©®&
buf
[0];

332 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

333 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

335 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

336 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

337 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

338 
	`iscsi_gë_îr‹
(
iscsic
));

340 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

342 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

343 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

344 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

347 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

349 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

350 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

351 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

353 
block_size
, 
èsk
->
ªsiduÆ
);

355 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

356 
	`scsi_‰ì_scsi_èsk
(
èsk
);

357 
èsk
 = 
NULL
;

359 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

360 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

361 
block_size
, 0, 0, 0, 0, 0, 
buf
);

362 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

365 
i
 = 0; i < 
block_size
; i++) {

366 i‡(
buf
[
i
] != 'b') {

367 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

368 
	`CU_FAIL
("Block wasÇot written correctly");

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

374 
i
 = 
block_size
; i < 2 * block_size; i++) {

375 i‡(
buf
[
i
] != 'a') {

376 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

377 
	`CU_FAIL
("Second block was incorrectly overwritten");

381 
	}
}

	@test-tool/test_write16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
i
 = 1; i <= 256; i++) {

43 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

47 
block_size
, 0, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

50 
	`CU_PASS
("WRITE16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

61 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

62 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
);

63 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	}
}

	@test-tool/test_write16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôe16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

52 
	`CU_PASS
("WRITE16 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writesame10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôeßme10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==0");

41 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, 0,

43 0, 0, 0, 0, 
NULL
);

44 i‡(
ªt
 == -2) {

45 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

47 } i‡(
ªt
 == -3) {

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10 with NUMBER OF LOGICAL BLOCKS == 0");

49 } i‡(
ªt
 == -4) {

50 
	`CU_PASS
("[SKIPPED] Number of WRITESAME10Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocks one blockÖastÉnd-of-LUN");

56 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

57 
block_size
, 0,

58 0, 0, 0, 0, 
NULL
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==2^31");

63 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

64 
block_size
, 0,

65 0, 0, 0, 0, 
NULL
);

66 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==-1");

70 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

71 
block_size
, 0,

72 0, 0, 0, 0, 
NULL
);

73 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

74 
	}
}

	@test-tool/test_writesame10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 i‡(
num_blocks
 >= 0x80000000) {

38 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

42 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocks one block beyondÅheÉnd");

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 
i
 = 1; i <= 256; i++) {

46 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
 + 1,

47 
block_size
, 
i
,

48 0, 0, 0, 0, 
buf
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==2^31");

58 
i
 = 1; i <= 256; i++) {

59 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

60 
block_size
, 
i
,

61 0, 0, 0, 0, 
buf
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

66 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==-1");

67 
i
 = 1; i <= 256; i++) {

68 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

69 
block_size
, 
i
,

70 0, 0, 0, 0, 
buf
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 2-256 blocksáll but one block beyondÅheÉnd");

76 
i
 = 2; i <= 256; i++) {

77 
ªt
 = 
	`wrôeßme10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

78 
block_size
, 
i
,

79 0, 0, 0, 0, 
buf
);

80 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	}
}

	@test-tool/test_writesame10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_sim∂e
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
	`mem£t
(
buf
, 0, 
block_size
);

43 
i
 = 1; i <= 256; i++) {

44 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

45 
block_size
, 
i
,

46 0, 0, 0, 0, 
buf
);

47 i‡(
ªt
 == -2) {

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
block_size
, 
i
,

58 0, 0, 0, 0, 
buf
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	}
}

	@test-tool/test_writesame10_unmap.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠
()

32 
i
, 
ªt
;

33 
j
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_THIN_PROVISIONING
;

38 
CHECK_FOR_LBPWS10
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start of "

44 
i
 = 1; i <= 256; i++) {

45 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

46 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

47 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 0, 
buf
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

53 
	`mem£t
(
buf
, 0, 
block_size
);

54 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

55 
block_size
, 
i
,

56 0, 1, 0, 0, 
buf
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 i‡(
rc16
->
lb¥z
) {

60 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

63 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

64 "¨ênow zîo", 
i
);

65 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

66 
i
 * 
block_size
, block_size,

67 0, 0, 0, 0, 0, 
buf
);

68 
j
 = 0; j < 
block_size
 * 
i
; j++) {

69 i‡(
buf
[
j
] != 0) {

70 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

74 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

80 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd of "

82 
i
 = 1; i <= 256; i++) {

83 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

84 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

85 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

86 
i
 * 
block_size
, block_size,

87 0, 0, 0, 0, 0, 
buf
);

88 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

90 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

91 
	`mem£t
(
buf
, 0, 
block_size
);

92 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

93 
block_size
, 
i
,

94 0, 1, 0, 0, 
buf
);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 i‡(
rc16
->
lb¥z
) {

98 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

101 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

102 "¨ênow zîo", 
i
);

103 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

104 
i
 * 
block_size
, block_size,

105 0, 0, 0, 0, 0, 
buf
);

106 
j
 = 0; j < 
block_size
 * 
i
; j++) {

107 i‡(
buf
[
j
] != 0) {

108 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

112 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

117 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME10 ANCHOR==1 + UNMAP==0 is "

119 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

120 
block_size
, 1,

121 1, 0, 0, 0, 
buf
);

122 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

126 i‡(
öq_lbp
->
™c_sup
) {

127 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0");

128 
	`mem£t
(
buf
, 0, 
block_size
);

129 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

130 
block_size
, 1,

131 1, 1, 0, 0, 
buf
);

133 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0Ço "

135 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

136 
block_size
, 1,

137 1, 1, 0, 0, 
buf
);

139 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

142 i‡(
öq_bl
 =
NULL
) {

143 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME10 works but "

145 
	`CU_FAIL
("[FAILED] WRITESAME10 works but "

150 
i
 = 256;

151 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

152 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

157 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

158 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

159 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0,

160 
i
 * 
block_size
, block_size,

161 0, 0, 0, 0, 0, 
buf
);

162 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

164 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

165 
	`mem£t
(
buf
, 0, 
block_size
);

166 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

167 
block_size
, 
i
,

168 0, 1, 0, 0, 
buf
);

169 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

171 i‡(
rc16
->
lb¥z
) {

172 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

175 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

176 "¨ênow zîo", 
i
);

177 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0,

178 
i
 * 
block_size
, block_size,

179 0, 0, 0, 0, 0, 
buf
);

180 
j
 = 0; j < 
block_size
 * 
i
; j++) {

181 i‡(
buf
[
j
] != 0) {

182 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

186 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

190 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

194 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

195 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

196 
block_size
, 
i
,

197 0, 1, 0, 0, 
buf
);

198 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

200 
	}
}

	@test-tool/test_writesame10_unmap_unaligned.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_unm≠_u«lig√d
()

31 
i
, 
ªt
;

33 
CHECK_FOR_DATALOSS
;

34 
CHECK_FOR_THIN_PROVISIONING
;

35 
CHECK_FOR_LBPWS10
;

36 
CHECK_FOR_LBPPB_GT_1
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME10 Unm≠ faûs. LBPPB==%d", 
lbµb
);

41 
i
 = 1; i < 
lbµb
; i++) {

42 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10áàLBA:%d", 
lbµb
 - 
i
, i);

43 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 
i
,

44 
block_size
, 
lbµb
 - 
i
,

45 0, 1, 0, 0, 
NULL
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	}
}

	@test-tool/test_writesame10_unmap_until_end.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_unm≠_u¡û_íd
()

31 
i
, 
ªt
;

32 
j
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS10
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

41 
i
 = 1; i <= 256; i++) {

42 *
buf
 = 
	`mÆloc
(
block_size
 * 
i
);

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

46 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

52 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

53 0, 
i
,

54 0, 1, 0, 0, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 i‡(
rc16
->
lb¥z
) {

58 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

61 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

62 "¨ênow zîo", 
i
);

63 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

64 
i
 * 
block_size
, block_size,

65 0, 0, 0, 0, 0, 
buf
);

66 
j
 = 0; j < 
block_size
 * 
i
; j++) {

67 i‡(
buf
[
j
] != 0) {

68 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

72 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

75 
	`‰ì
(
buf
);

77 
	}
}

	@test-tool/test_writesame10_unmap_vpd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠_vpd
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME10 can be used for UNMAP.");

43 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME10");

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 
ªt
 = 
	`wrôeßme10
(
iscsic
, 
tgt_lun
, 0,

46 
block_size
, 1,

47 0, 1, 0, 0, 
buf
);

49 i‡(
ªt
 != 0) {

50 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isÇotávailable. "

53 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is clear.");

54 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP isÇot "

57 
	`CU_FAIL
("[FAILED] WRITESAME10 UNMAP is unavailable but "

60 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is clear.");

63 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isávailable. Verify "

66 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

67 i‡(
rc16
 &&Ñc16->
lbpme
) {

68 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

70 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

72 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

75 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is set.");

76 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

77 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is set.");

79 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

81 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS10==0");

84 
	}
}

	@test-tool/test_writesame10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôeßme10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, 1,

50 0, 0, 
i
, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 isÇot implemented.");

53 
	`CU_PASS
("WRITESAME10 isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_writesame16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôeßme16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

37 
block_size
, 0,

38 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

41 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

43 } i‡(
ªt
 == -3) {

44 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16 with NUMBER OF LOGICAL BLOCKS == 0");

45 } i‡(
ªt
 == -4) {

46 
	`CU_PASS
("[SKIPPED] Number of WRITESAME16Üogical blocksÅo be writtenÉxceeds MAXIMUM WRITE SAME LENGTH");

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocks one blockÖastÉnd-of-LUN");

52 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

53 
block_size
, 0,

54 0, 0, 0, 0, 
NULL
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==2^63");

59 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

60 
block_size
, 0,

61 0, 0, 0, 0, 
NULL
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==-1");

66 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

67 
block_size
, 0,

68 0, 0, 0, 0, 
NULL
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	}
}

	@test-tool/test_writesame16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
buf
, 0, 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
 + 1,

42 
block_size
, 
i
,

43 0, 0, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

46 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==2^63");

54 
i
 = 1; i <= 256; i++) {

55 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

56 
block_size
, 
i
,

57 0, 0, 0, 0, 
buf
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==-1");

63 
i
 = 1; i <= 256; i++) {

64 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

65 
block_size
, 
i
,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 2-256 blocksáll but one block beyondÅheÉnd");

72 
i
 = 2; i <= 256; i++) {

73 
ªt
 = 
	`wrôeßme16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

74 
block_size
, 
i
,

75 0, 0, 0, 0, 
buf
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
	}
}

	@test-tool/test_writesame16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
	`mem£t
(
buf
, 0, 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

44 
block_size
, 
i
,

45 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

57 
block_size
, 
i
,

58 0, 0, 0, 0, 
buf
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	}
}

	@test-tool/test_writesame16_unmap.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_unm≠
()

31 
i
, 
ªt
;

32 
j
;

33 *
buf
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_LBPWS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

42 
buf
 = 
	`mÆloc
(65536 * 
block_size
);

43 
i
 = 1; i <= 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

50 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

51 
	`mem£t
(
buf
, 0, 
block_size
);

52 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, 
i
,

54 0, 1, 0, 0, 
buf
);

55 i‡(
ªt
 == -2) {

56 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

57 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

58 
föished
;

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 i‡(
rc16
->
lb¥z
) {

63 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

65 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

66 "¨ênow zîo", 
i
);

67 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

68 
i
 * 
block_size
, block_size,

69 0, 0, 0, 0, 0, 
buf
);

70 
j
 = 0; j < 
block_size
 * 
i
; j++) {

71 i‡(
buf
[
j
] != 0) {

72 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

76 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

83 
i
 = 1; i <= 256; i++) {

84 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

85 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

86 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

87 
i
 * 
block_size
, block_size,

88 0, 0, 0, 0, 0, 
buf
);

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

92 
	`mem£t
(
buf
, 0, 
block_size
);

93 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

94 
block_size
, 
i
,

95 0, 1, 0, 0, 
buf
);

96 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

98 i‡(
rc16
->
lb¥z
) {

99 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

101 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

102 "¨ênow zîo", 
i
);

103 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

104 
i
 * 
block_size
, block_size,

105 0, 0, 0, 0, 0, 
buf
);

106 
j
 = 0; j < 
block_size
 * 
i
; j++) {

107 i‡(
buf
[
j
] != 0) {

108 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

112 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

117 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME16 ANCHOR==1 + UNMAP==0 is invalid");

118 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

119 
block_size
, 1,

120 1, 0, 0, 0, 
buf
);

121 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

125 i‡(
öq_lbp
->
™c_sup
) {

126 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0");

127 
	`mem£t
(
buf
, 0, 
block_size
);

128 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

129 
block_size
, 1,

130 1, 1, 0, 0, 
buf
);

132 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0Ço ANC_SUP soÉxpectingÅo fail");

133 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

134 
block_size
, 1,

135 1, 1, 0, 0, 
buf
);

138 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

141 i‡(
öq_bl
 =
NULL
) {

142 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME16 works but "

144 
	`CU_FAIL
("[FAILED] WRITESAME16 works but "

146 
föished
;

149 
i
 = 256;

150 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

151 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

156 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

157 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

158 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

159 
i
 * 
block_size
, block_size,

160 0, 0, 0, 0, 0, 
buf
);

161 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

163 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

164 
	`mem£t
(
buf
, 0, 
block_size
);

165 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

166 
block_size
, 
i
,

167 0, 1, 0, 0, 
buf
);

168 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

170 i‡(
rc16
->
lb¥z
) {

171 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

174 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

175 "¨ênow zîo", 
i
);

176 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

177 
i
 * 
block_size
, block_size,

178 0, 0, 0, 0, 0, 
buf
);

179 
j
 = 0; j < 
block_size
 * 
i
; j++) {

180 i‡(
buf
[
j
] != 0) {

181 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

185 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

189 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

193 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

194 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

195 
block_size
, 
i
,

196 0, 1, 0, 0, 
buf
);

197 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

201 
i
 = 65536;

202 i‡(
öq_bl
->
max_ws_Àn
 == 0 || inq_bl->max_ws_len >= 256) {

203 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

208 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

209 
	`mem£t
(
buf
, 0xff, 
i
 * 
block_size
);

210 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0,

211 
i
 * 
block_size
, block_size,

212 0, 0, 0, 0, 0, 
buf
);

213 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

215 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

216 
	`mem£t
(
buf
, 0, 
block_size
);

217 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

218 
block_size
, 
i
,

219 0, 1, 0, 0, 
buf
);

220 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

222 i‡(
rc16
->
lb¥z
) {

223 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

226 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

227 "¨ênow zîo", 
i
);

228 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0,

229 
i
 * 
block_size
, block_size,

230 0, 0, 0, 0, 0, 
buf
);

231 
j
 = 0; j < 
block_size
 * 
i
; j++) {

232 i‡(
buf
[
j
] != 0) {

233 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

237 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

241 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

245 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

246 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

247 
block_size
, 
i
,

248 0, 1, 0, 0, 
buf
);

249 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
föished
:

253 
	`‰ì
(
buf
);

254 
	}
}

	@test-tool/test_writesame16_unmap_unaligned.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-suµ‹t.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme16_unm≠_u«lig√d
()

31 
i
, 
ªt
;

33 
CHECK_FOR_DATALOSS
;

34 
CHECK_FOR_THIN_PROVISIONING
;

35 
CHECK_FOR_LBPWS
;

36 
CHECK_FOR_LBPPB_GT_1
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME16 Unm≠ faûs. LBPPB==%d", 
lbµb
);

42 
i
 = 1; i < 
lbµb
; i++) {

43 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16áàLBA:%d", 
lbµb
 - 
i
, i);

44 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 
i
,

45 
block_size
, 
lbµb
 - 
i
,

46 0, 1, 0, 0, 
NULL
);

47 i‡(
ªt
 == -2) {

48 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

49 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	}
}

	@test-tool/test_writesame16_unmap_until_end.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠_u¡û_íd
()

32 
i
, 
ªt
;

33 
j
;

34 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_THIN_PROVISIONING
;

38 
CHECK_FOR_LBPWS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

43 
i
 = 1; i <= 256; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

45 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

46 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

47 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
buf
);

50 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

51 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

52 0, 
i
,

53 0, 1, 0, 0, 
NULL
);

54 i‡(
ªt
 == -2) {

55 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

56 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 i‡(
rc16
->
lb¥z
) {

62 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

65 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

66 "¨ênow zîo", 
i
);

67 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

68 
i
 * 
block_size
, block_size,

69 0, 0, 0, 0, 0, 
buf
);

70 
j
 = 0; j < 
block_size
 * 
i
; j++) {

71 i‡(
buf
[
j
] != 0) {

72 
	`CU_ASSERT_EQUAL
(
buf
[
j
], 0);

76 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

80 
	}
}

	@test-tool/test_writesame16_unmap_vpd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠_vpd
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME16 can be used for UNMAP.");

44 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME16");

45 
	`mem£t
(
buf
, 0, 
block_size
);

46 
ªt
 = 
	`wrôeßme16
(
iscsic
, 
tgt_lun
, 0,

47 
block_size
, 1,

48 0, 1, 0, 0, 
buf
);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isÇotávailable. "

54 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is clear.");

55 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

56 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP isÇot "

58 
	`CU_FAIL
("[FAILED] WRITESAME16 UNMAP is unavailable but "

61 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is clear.");

64 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isávailable. Verify "

67 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

68 i‡(
rc16
 &&Ñc16->
lbpme
) {

69 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

71 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

73 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is set.");

77 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

78 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is set.");

80 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

82 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS==0");

85 
	}
}

	@test-tool/test_writesame16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
buf
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
ªt
 = 
	`wrôeßme16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

49 
block_size
, 1,

50 0, 0, 
i
, 0, 
buf
);

51 i‡(
ªt
 == -2) {

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 isÇot implemented.");

53 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME16. SkippingÅest");

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

62 
	}
}

	@test-tool/test_writeverify10_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify10_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

44 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify10_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify10_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôevîify10_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_writeverify10_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with DPO==1");

41 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify10_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify10_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY10. SkippingÅest");

55 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

56 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

60 
èsk
->
cdb
[8] = 1;

61 
èsk
->
cdb_size
 = 10;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

63 
èsk
->
expx„æí
 = 0;

69 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

71 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

73 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

74 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

75 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

81 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

84 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

87 
	`iscsi_gë_îr‹
(
iscsic
));

89 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

91 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

92 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

96 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

98 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

99 
block_size
);

100 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

103 
block_size
, 
èsk
->
ªsiduÆ
);

105 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
èsk
 = 
NULL
;

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

114 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

115 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

117 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

118 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

119 
èsk
->
cdb
[8] = 1;

120 
èsk
->
cdb_size
 = 10;

121 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

122 
èsk
->
expx„æí
 = 10000;

124 
d©a
.
size
 = 
èsk
->
expx„æí
;

125 
d©a
.d©®&
buf
[0];

126 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

127 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

130 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

132 
	`iscsi_gë_îr‹
(
iscsic
));

134 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

161 
èsk
->
cdb
[8] = 1;

162 
èsk
->
cdb_size
 = 10;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

164 
èsk
->
expx„æí
 = 200;

166 
d©a
.
size
 = 
èsk
->
expx„æí
;

167 
d©a
.d©®&
buf
[0];

168 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

169 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

172 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

174 
	`iscsi_gë_îr‹
(
iscsic
));

176 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

178 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

179 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

183 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

185 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

186 
block_size
 - 200);

187 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

190 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

192 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
èsk
 = 
NULL
;

199 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

200 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

204 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

205 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

206 
èsk
->
cdb
[8] = 2;

207 
èsk
->
cdb_size
 = 10;

208 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

209 
èsk
->
expx„æí
 = 
block_size
;

211 
d©a
.
size
 = 
èsk
->
expx„æí
;

212 
d©a
.d©®&
buf
[0];

213 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

214 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

217 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

219 
	`iscsi_gë_îr‹
(
iscsic
));

221 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

223 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

224 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

230 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

231 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

234 
block_size
, 
èsk
->
ªsiduÆ
);

236 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
èsk
 = 
NULL
;

244 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

246 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

247 
	`mem£t
(
buf
, 'a', 10000);

248 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

249 
block_size
, 0, 0, 0, 0, 0, 
buf
);

250 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

253 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

254 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

256 
	`mem£t
(
buf
, 'b', 10000);

258 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

259 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

260 
èsk
->
cdb
[8] = 1;

261 
èsk
->
cdb_size
 = 10;

262 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

263 
èsk
->
expx„æí
 = 2 * 
block_size
;

265 
d©a
.
size
 = 
èsk
->
expx„æí
;

266 
d©a
.d©®&
buf
[0];

267 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

268 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

270 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

271 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

273 
	`iscsi_gë_îr‹
(
iscsic
));

275 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

277 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

278 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

279 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

284 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

285 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

286 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

288 
block_size
, 
èsk
->
ªsiduÆ
);

290 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

292 
èsk
 = 
NULL
;

294 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

295 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

296 
block_size
, 0, 0, 0, 0, 0, 
buf
);

297 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

300 
i
 = 0; i < 
block_size
; i++) {

301 i‡(
buf
[
i
] != 'b') {

302 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

303 
	`CU_FAIL
("Block wasÇot written correctly");

308 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

309 
i
 = 
block_size
; i < 2 * block_size; i++) {

310 i‡(
buf
[
i
] != 'a') {

311 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

312 
	`CU_FAIL
("Second block was incorrectly overwritten");

318 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

320 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

321 
	`mem£t
(
buf
, 'a', 10000);

322 
ªt
 = 
	`wrôe10
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

323 
block_size
, 0, 0, 0, 0, 0, 
buf
);

324 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

326 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

327 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

328 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

330 
	`mem£t
(
buf
, 'b', 10000);

332 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

333 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

334 
èsk
->
cdb
[8] = 2;

335 
èsk
->
cdb_size
 = 10;

336 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

337 
èsk
->
expx„æí
 = 
block_size
;

339 
d©a
.
size
 = 
èsk
->
expx„æí
;

340 
d©a
.d©®&
buf
[0];

341 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

342 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

344 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

345 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

346 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

347 
	`iscsi_gë_îr‹
(
iscsic
));

349 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

351 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

352 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

353 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

358 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

359 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

360 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

362 
block_size
, 
èsk
->
ªsiduÆ
);

364 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

365 
	`scsi_‰ì_scsi_èsk
(
èsk
);

366 
èsk
 = 
NULL
;

368 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

369 
ªt
 = 
	`ªad10
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

370 
block_size
, 0, 0, 0, 0, 0, 
buf
);

371 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

374 
i
 = 0; i < 
block_size
; i++) {

375 i‡(
buf
[
i
] != 'b') {

376 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

377 
	`CU_FAIL
("Block wasÇot written correctly");

382 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

383 
i
 = 
block_size
; i < 2 * block_size; i++) {

384 i‡(
buf
[
i
] != 'a') {

385 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

386 
	`CU_FAIL
("Second block was incorrectly overwritten");

390 
	}
}

	@test-tool/test_writeverify10_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

48 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY10. SkippingÅest");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôevîify10
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_writeverify10_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôevîify10_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY10 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writeverify12_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify12_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==0");

40 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 0, 
block_size
,

41 0, 0, 0, 0, 
NULL
);

42 i‡(
ªt
 == -2) {

43 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

44 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocks one blockÖastÉnd-of-LUN");

50 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1, 0,

51 
block_size
, 0, 0, 0, 0, 
NULL
);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==2^31");

56 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000, 0,

57 
block_size
, 0, 0, 0, 0, 
NULL
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==-1");

62 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify12_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify12_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocks one block beyondÅheÉnd");

43 
i
 = 1; i <= 256; i++) {

44 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

47 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1 - 
i
,

48 
i
 * 
block_size
, block_size,

49 0, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==2^31");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x80000000,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1, 
i
 * 
block_size
,

77 
block_size
, 0, 0, 0, 0, 
buf
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

83 
i
 = 2; i <= 256; i++) {

84 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

87 
ªt
 = 
	`wrôevîify12_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 1,

88 
i
 * 
block_size
, block_size,

89 0, 0, 0, 0, 
buf
);

90 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

92 
	}
}

	@test-tool/test_writeverify12_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with DPO==1");

41 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify12_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify12_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY12. SkippingÅest");

55 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

56 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

58 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

59 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

60 
èsk
->
cdb
[9] = 1;

61 
èsk
->
cdb_size
 = 12;

62 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

63 
èsk
->
expx„æí
 = 0;

69 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

71 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

73 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

74 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

75 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

77 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


78 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


79 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

80 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

81 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

84 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

85 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

86 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

87 
	`iscsi_gë_îr‹
(
iscsic
));

89 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

91 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

92 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

96 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

98 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

99 
block_size
);

100 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

103 
block_size
, 
èsk
->
ªsiduÆ
);

105 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

106 
	`scsi_‰ì_scsi_èsk
(
èsk
);

107 
èsk
 = 
NULL
;

110 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

113 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

114 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

115 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

117 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

118 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

119 
èsk
->
cdb
[9] = 1;

120 
èsk
->
cdb_size
 = 12;

121 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

122 
èsk
->
expx„æí
 = 10000;

124 
d©a
.
size
 = 
èsk
->
expx„æí
;

125 
d©a
.d©®&
buf
[0];

126 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

127 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

129 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

130 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

131 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

132 
	`iscsi_gë_îr‹
(
iscsic
));

134 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

161 
èsk
->
cdb
[9] = 1;

162 
èsk
->
cdb_size
 = 12;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

164 
èsk
->
expx„æí
 = 200;

166 
d©a
.
size
 = 
èsk
->
expx„æí
;

167 
d©a
.d©®&
buf
[0];

168 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

169 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

172 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

174 
	`iscsi_gë_îr‹
(
iscsic
));

176 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

178 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

179 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

183 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

185 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

186 
block_size
 - 200);

187 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

188 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

190 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

192 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

194 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
èsk
 = 
NULL
;

199 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

200 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

201 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

202 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

204 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

205 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

206 
èsk
->
cdb
[9] = 2;

207 
èsk
->
cdb_size
 = 12;

208 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

209 
èsk
->
expx„æí
 = 
block_size
;

211 
d©a
.
size
 = 
èsk
->
expx„æí
;

212 
d©a
.d©®&
buf
[0];

213 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

214 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

216 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

217 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

218 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

219 
	`iscsi_gë_îr‹
(
iscsic
));

221 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

223 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

224 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

230 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

231 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

234 
block_size
, 
èsk
->
ªsiduÆ
);

236 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
èsk
 = 
NULL
;

244 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

246 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

247 
	`mem£t
(
buf
, 'a', 10000);

248 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

249 
block_size
, 0, 0, 0, 0, 0, 
buf
);

250 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

252 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

253 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

254 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

256 
	`mem£t
(
buf
, 'b', 10000);

258 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

259 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

260 
èsk
->
cdb
[9] = 1;

261 
èsk
->
cdb_size
 = 12;

262 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

263 
èsk
->
expx„æí
 = 2 * 
block_size
;

265 
d©a
.
size
 = 
èsk
->
expx„æí
;

266 
d©a
.d©®&
buf
[0];

267 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

268 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

270 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

271 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

272 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

273 
	`iscsi_gë_îr‹
(
iscsic
));

275 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

277 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

278 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

279 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

282 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

284 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

285 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

286 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

288 
block_size
, 
èsk
->
ªsiduÆ
);

290 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

292 
èsk
 = 
NULL
;

294 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

295 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

296 
block_size
, 0, 0, 0, 0, 0, 
buf
);

297 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

299 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

300 
i
 = 0; i < 
block_size
; i++) {

301 i‡(
buf
[
i
] != 'b') {

302 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

303 
	`CU_FAIL
("Block wasÇot written correctly");

308 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

309 
i
 = 
block_size
; i < 2 * block_size; i++) {

310 i‡(
buf
[
i
] != 'a') {

311 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

312 
	`CU_FAIL
("Second block was incorrectly overwritten");

318 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

320 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

321 
	`mem£t
(
buf
, 'a', 10000);

322 
ªt
 = 
	`wrôe12
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

323 
block_size
, 0, 0, 0, 0, 0, 
buf
);

324 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

326 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

327 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

328 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

330 
	`mem£t
(
buf
, 'b', 10000);

332 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

333 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

334 
èsk
->
cdb
[9] = 2;

335 
èsk
->
cdb_size
 = 12;

336 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

337 
èsk
->
expx„æí
 = 
block_size
;

339 
d©a
.
size
 = 
èsk
->
expx„æí
;

340 
d©a
.d©®&
buf
[0];

341 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

342 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

344 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

345 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

346 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

347 
	`iscsi_gë_îr‹
(
iscsic
));

349 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

351 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

352 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

353 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

356 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

358 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

359 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

360 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

362 
block_size
, 
èsk
->
ªsiduÆ
);

364 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

365 
	`scsi_‰ì_scsi_èsk
(
èsk
);

366 
èsk
 = 
NULL
;

368 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

369 
ªt
 = 
	`ªad12
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

370 
block_size
, 0, 0, 0, 0, 0, 
buf
);

371 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

373 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

374 
i
 = 0; i < 
block_size
; i++) {

375 i‡(
buf
[
i
] != 'b') {

376 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

377 
	`CU_FAIL
("Block wasÇot written correctly");

382 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

383 
i
 = 
block_size
; i < 2 * block_size; i++) {

384 i‡(
buf
[
i
] != 'a') {

385 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

386 
	`CU_FAIL
("Second block was incorrectly overwritten");

390 
	}
}

	@test-tool/test_writeverify12_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 0, 0, 
buf
);

46 i‡(
ªt
 == -2) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

48 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

55 
i
 = 1; i <= 256; i++) {

56 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

59 
ªt
 = 
	`wrôevîify12
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

60 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
	}
}

	@test-tool/test_writeverify12_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_wΩrŸe˘
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

45 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

46 
i
 = 1; i < 8; i++) {

47 
ªt
 = 
	`wrôevîify12_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

48 
block_size
, block_size,

49 
i
, 0, 0, 0, 
buf
);

50 i‡(
ªt
 == -2) {

51 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY12 isÇot implemented.");

52 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

61 
	}
}

	@test-tool/test_writeverify16_0blocks.c

18 
	~<°dio.h
>

20 
	~<CUnô/CUnô.h
>

22 
	~"iscsi.h
"

23 
	~"scsi-lowÀvñ.h
"

24 
	~"iscsi-ã°-cu.h
"

27 
	$ã°_wrôevîify16_0blocks
()

29 
ªt
;

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==0");

36 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

37 0, 
block_size
,

38 0, 0, 0, 0, 
NULL
);

39 i‡(
ªt
 == -2) {

40 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

41 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

44 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocks one blockÖastÉnd-of-LUN");

47 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 
num_blocks
 + 1,

48 0, 
block_size
,

49 0, 0, 0, 0, 
NULL
);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==2^63");

54 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, 0x8000000000000000,

55 0, 
block_size
,

56 0, 0, 0, 0, 
NULL
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

60 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==-1");

61 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
, -1,

62 0, 
block_size
,

63 0, 0, 0, 0, 
NULL
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
	}
}

	@test-tool/test_writeverify16_beyond_eol.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôevîify16_bey⁄d_eﬁ
()

31 
i
, 
ªt
;

32 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocks one block beyondÅheÉnd");

39 
i
 = 1; i <= 256; i++) {

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

45 
num_blocks
 + 1 - 
i
,

46 
i
 * 
block_size
, block_size,

47 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

50 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==2^63");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

63 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

65 
i
 * 
block_size
, block_size,

66 0, 0, 0, 0, 
buf
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==-1");

72 
i
 = 1; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

77 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

79 
i
 * 
block_size
, block_size,

80 0, 0, 0, 0, 
buf
);

81 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

85 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

86 
i
 = 2; i <= 256; i++) {

87 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

91 
ªt
 = 
	`wrôevîify16_lbaouto‰™ge
(
iscsic
, 
tgt_lun
,

92 
num_blocks
 - 1,

93 
i
 * 
block_size
, block_size,

94 0, 0, 0, 0, 
buf
);

95 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
	}
}

	@test-tool/test_writeverify16_flags.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_Êags
()

32 
ªt
;

33 *
buf
 = 
	`Æloˇ
(
block_size
);

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 flags");

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with DPO==1");

41 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

42 
block_size
, block_size,

43 0, 1, 0, 0, 
buf
);

44 i‡(
ªt
 == -2) {

45 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

46 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with BYTCHK==1");

52 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0,

53 
block_size
, block_size,

54 0, 0, 1, 0, 
buf
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	}
}

	@test-tool/test_writeverify16_residuals.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_ªsiduÆs
()

33 
scsi_èsk
 *
èsk_ªt
;

34 
buf
[10000];

35 
iscsi_d©a
 
d©a
;

36 
ªt
;

37 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 commands withÑesiduals");

41 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

47 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0, 0,

48 
block_size
, 0, 0, 0, 0, 
NULL
);

49 i‡(
ªt
 == -2) {

50 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

51 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITEVERIFY16. SkippingÅest");

56 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

57 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

59 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

60 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

61 
èsk
->
cdb
[13] = 1;

62 
èsk
->
cdb_size
 = 16;

63 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

64 
èsk
->
expx„æí
 = 0;

70 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 1);

72 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

74 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, 
NULL
);

75 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

76 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

82 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

88 
	`iscsi_gë_îr‹
(
iscsic
));

90 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

93 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

99 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

100 
block_size
);

101 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

104 
block_size
, 
èsk
->
ªsiduÆ
);

106 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
èsk
 = 
NULL
;

111 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsic
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

120 
èsk
->
cdb
[13] = 1;

121 
èsk
->
cdb_size
 = 16;

122 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

123 
èsk
->
expx„æí
 = 10000;

125 
d©a
.
size
 = 
èsk
->
expx„æí
;

126 
d©a
.d©®&
buf
[0];

127 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

128 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

130 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

131 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

132 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

133 
	`iscsi_gë_îr‹
(
iscsic
));

135 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

137 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

138 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

139 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

142 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

144 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

145 10000 - 
block_size
);

146 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

147 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

149 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

151 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

152 
	`scsi_‰ì_scsi_èsk
(
èsk
);

153 
èsk
 = 
NULL
;

156 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

157 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

158 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

160 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

161 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

162 
èsk
->
cdb
[13] = 1;

163 
èsk
->
cdb_size
 = 16;

164 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

165 
èsk
->
expx„æí
 = 200;

167 
d©a
.
size
 = 
èsk
->
expx„æí
;

168 
d©a
.d©®&
buf
[0];

169 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

170 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

172 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

173 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

174 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

175 
	`iscsi_gë_îr‹
(
iscsic
));

177 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

179 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

180 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

181 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

186 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

187 
block_size
 - 200);

188 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

189 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

191 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

193 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
NULL
;

200 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

201 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

202 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

203 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

205 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

206 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

207 
èsk
->
cdb
[13] = 2;

208 
èsk
->
cdb_size
 = 16;

209 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

210 
èsk
->
expx„æí
 = 
block_size
;

212 
d©a
.
size
 = 
èsk
->
expx„æí
;

213 
d©a
.d©®&
buf
[0];

214 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

215 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

217 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

218 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

219 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

220 
	`iscsi_gë_îr‹
(
iscsic
));

222 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

224 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

225 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

226 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

229 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

231 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

232 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

233 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

235 
block_size
, 
èsk
->
ªsiduÆ
);

237 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

240 
èsk
 = 
NULL
;

245 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

247 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

248 
	`mem£t
(
buf
, 'a', 10000);

249 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

250 
block_size
, 0, 0, 0, 0, 0, 
buf
);

251 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

253 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

254 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

255 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

257 
	`mem£t
(
buf
, 'b', 10000);

259 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

260 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

261 
èsk
->
cdb
[13] = 1;

262 
èsk
->
cdb_size
 = 16;

263 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

264 
èsk
->
expx„æí
 = 2 * 
block_size
;

266 
d©a
.
size
 = 
èsk
->
expx„æí
;

267 
d©a
.d©®&
buf
[0];

268 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

269 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

271 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

272 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

273 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

274 
	`iscsi_gë_îr‹
(
iscsic
));

276 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

278 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

279 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

280 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

283 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

285 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

286 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

287 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

289 
block_size
, 
èsk
->
ªsiduÆ
);

291 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
èsk
 = 
NULL
;

295 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

296 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

297 
block_size
, 0, 0, 0, 0, 0, 
buf
);

298 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

300 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

301 
i
 = 0; i < 
block_size
; i++) {

302 i‡(
buf
[
i
] != 'b') {

303 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

304 
	`CU_FAIL
("Block wasÇot written correctly");

309 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

310 
i
 = 
block_size
; i < 2 * block_size; i++) {

311 i‡(
buf
[
i
] != 'a') {

312 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

313 
	`CU_FAIL
("Second block was incorrectly overwritten");

319 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

321 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

322 
	`mem£t
(
buf
, 'a', 10000);

323 
ªt
 = 
	`wrôe16
(
iscsic
, 
tgt_lun
, 0, 2 * 
block_size
,

324 
block_size
, 0, 0, 0, 0, 0, 
buf
);

325 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

327 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

328 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

329 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk
);

331 
	`mem£t
(
buf
, 'b', 10000);

333 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

334 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

335 
èsk
->
cdb
[13] = 2;

336 
èsk
->
cdb_size
 = 16;

337 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

338 
èsk
->
expx„æí
 = 
block_size
;

340 
d©a
.
size
 = 
èsk
->
expx„æí
;

341 
d©a
.d©®&
buf
[0];

342 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
iscsic
, 
tgt_lun
, 
èsk
, &
d©a
);

343 
	`CU_ASSERT_PTR_NOT_NULL
(
èsk_ªt
);

345 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

346 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

347 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

348 
	`iscsi_gë_îr‹
(
iscsic
));

350 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

352 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

353 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

354 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

357 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

359 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

360 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

361 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

363 
block_size
, 
èsk
->
ªsiduÆ
);

365 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

366 
	`scsi_‰ì_scsi_èsk
(
èsk
);

367 
èsk
 = 
NULL
;

369 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

370 
ªt
 = 
	`ªad16
(
iscsic
, 
tgt_lun
, 0, 2* 
block_size
,

371 
block_size
, 0, 0, 0, 0, 0, 
buf
);

372 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

375 
i
 = 0; i < 
block_size
; i++) {

376 i‡(
buf
[
i
] != 'b') {

377 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

378 
	`CU_FAIL
("Block wasÇot written correctly");

383 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

384 
i
 = 
block_size
; i < 2 * block_size; i++) {

385 i‡(
buf
[
i
] != 'a') {

386 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

387 
	`CU_FAIL
("Second block was incorrectly overwritten");

391 
	}
}

	@test-tool/test_writeverify16_simple.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_sim∂e
()

32 
i
, 
ªt
;

33 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 0, 
i
 * 
block_size
,

47 
block_size
, 0, 0, 0, 0, 
buf
);

48 i‡(
ªt
 == -2) {

49 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

50 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
ªt
 = 
	`wrôevîify16
(
iscsic
, 
tgt_lun
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 
buf
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
	}
}

	@test-tool/test_writeverify16_wrprotect.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_wΩrŸe˘
()

33 
i
, 
ªt
;

34 *
buf
 = 
	`Æloˇ
(
block_size
);

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 withÇon-zero WRPROTECT");

43 
CHECK_FOR_DATALOSS
;

44 
CHECK_FOR_SBC
;

46 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

47 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

48 
i
 = 1; i < 8; i++) {

49 
ªt
 = 
	`wrôevîify16_övÆidfõldöcdb
(
iscsic
, 
tgt_lun
, 0,

50 
block_size
, block_size,

51 
i
, 0, 0, 0, 
buf
);

52 i‡(
ªt
 == -2) {

53 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE1VERIFY16 isÇot implemented.");

54 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

63 
	}
}

	@win32/win32_compat.c

24 #i‚de‡
WIN32


26 
dummy
 
ATTRIBUTE
((
unu£d
));

29 
	~"wö32_com∑t.h
"

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

32 
	~<Åime.h 
>

34 #unde‡
pﬁl


35 #unde‡
sockë


36 #unde‡
c⁄√˘


37 #unde‡
ac˚±


38 #unde‡
shutdown


39 #unde‡
gë≥î«me


40 #unde‡
¶ìp


41 #unde‡
öë_©⁄


42 #unde‡
gëtimeofday


43 #unde‡
°©


44 
	#as£π
(
a
)

	)

47 
	~<˘y≥.h
>

49 
	$wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
)

51 
sockaddr_ö
 
ß
;

52 
Àn
 = (
SOCKADDR
);

53 
ªt
 = -1;

54 
°rLí
 = 
	`°æí
(
§c
) + 1;

55 #ifde‡
UNICODE


56 
wch¨_t
 *
§cN⁄C⁄°
 = (wch¨_à*)
	`mÆloc
(
°rLí
*(wchar_t));

57 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

58 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
§c
, -1, 
§cN⁄C⁄°
, 
°rLí
);

60 *
§cN⁄C⁄°
 = (*)
	`mÆloc
(
°rLí
);

61 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

62 
	`°∫˝y
(
§cN⁄C⁄°
, 
§c
, 
°rLí
);

65 if–
	`WSASåögToAddªss
(
§cN⁄C⁄°
,
af
,
NULL
,(
LPSOCKADDR
)&
ß
,&
Àn
) == 0 )

67 
ªt
 = 1;

71 if–
	`WSAGëLa°Eº‹
(Ë=
WSAEINVAL
 )

73 
ªt
 = -1;

76 
	`‰ì
(
§cN⁄C⁄°
);

77 
	`mem˝y
(
d°
, &
ß
.
sö_addr
, (
ö_addr
));

78  
ªt
;

79 
	}
}

81 
	$wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

83 
timevÆ
 
timeout
, *
t›å
;

84 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

85 
i
;

86 
rc
;

89 
	`FD_ZERO
(&
ifds
);

90 
	`FD_ZERO
(&
ofds
);

91 
	`FD_ZERO
(&
efds
);

92 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

94 
fds
[
i
].
ªvíts
 = 0;

95 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

97 
ù
 = &
ifds
;

98 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

100 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

102 
›
 = &
ofds
;

103 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

105 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

109 if(
timo
 < 0)

111 
t›å
 = 0;

115 
t›å
 = &
timeout
;

116 
timeout
.
tv_£c
 = 
timo
 / 1000;

117 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

120 #ifde‡
DEBUG_POLL


121 
	`¥ötf
("Entering select() sec=%ld usec=%ld ip=%lx op=%lx\n",

122 ()
timeout
.
tv_£c
, (Èimeout.
tv_u£c
, ()
ù
, ()
›
);

124 
rc
 = 
	`£À˘
(0, 
ù
, 
›
, &
efds
, 
t›å
);

125 #ifde‡
DEBUG_POLL


126 
	`¥ötf
("Exôög sñe˘Ñc=%d\n", 
rc
);

129 if(
rc
 <= 0)

130  
rc
;

132 if(
rc
 > 0)

134 
i
 = 0; i < 
nfds
; ++i)

136 
fd
 = 
fds
[
i
].fd;

137 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

138 
fds
[
i
].
ªvíts
 |
POLLIN
;

139 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

140 
fds
[
i
].
ªvíts
 |
POLLOUT
;

141 if(
	`FD_ISSET
(
fd
, &
efds
))

142 
fds
[
i
].
ªvíts
 |
POLLHUP
;

143 #ifde‡
DEBUG_POLL


144 
	`¥ötf
("%d %d %dÑevent = %x\n",

145 
	`FD_ISSET
(
fd
, &
ifds
), FD_ISSET(fd, &
ofds
), FD_ISSET(fd, &
efds
),

146 
fds
[
i
].
ªvíts


151  
rc
;

152 
	}
}

154 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
_MSC_EXTENSIONS
)

155 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000U
i64


	)

157 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000ULL

	)

160 
	stimez⁄e


162 
	mtz_möuãswe°
;

163 
	mtz_d°time
;

166 
	$wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

168 
FILETIME
 
·
;

169 
__öt64
 
tm¥es
 = 0;

170 
tzÊag
;

172 i‡(
NULL
 !
tv
)

174 
	`GëSy°emTimeAsFûeTime
(&
·
);

176 
tm¥es
 |
·
.
dwHighD©eTime
;

177 
tm¥es
 <<= 32;

178 
tm¥es
 |
·
.
dwLowD©eTime
;

181 
tm¥es
 -
DELTA_EPOCH_IN_MICROSECS
;

182 
tm¥es
 /= 10;

183 
tv
->
tv_£c
 = ()(
tm¥es
 / 1000000UL);

184 
tv
->
tv_u£c
 = ()(
tm¥es
 % 1000000UL);

187 i‡(
NULL
 !
tz
)

189 i‡(!
tzÊag
)

191 
	`_tz£t
();

192 
tzÊag
++;

194 
tz
->
tz_möuãswe°
 = 
_timez⁄e
 / 60;

195 
tz
->
tz_d°time
 = 
_daylight
;

199 
	}
}

201 
ssize_t
 
	$wö32_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

203  
	`ªad
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

204 
	}
}

206 
ssize_t
 
	$wö32_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

208  
	`wrôe
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

209 
	}
}

	@/usr/include/CUnit/Basic.h

33 #i‚de‡
CUNIT_BASIC_H_SEEN


34 
	#CUNIT_BASIC_H_SEEN


	)

36 
	~"CUnô.h
"

37 
	~"Te°DB.h
"

39 #ifde‡
__˝lu•lus


45 
CU_BRM_NORMAL
 = 0,

46 
CU_BRM_SILENT
,

47 
CU_BRM_VERBOSE


48 } 
	tCU_BasicRunMode
;

50 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_ã°s
();

51 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_suôe
(
CU_pSuôe
 
pSuôe
);

52 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_ã°
(
CU_pSuôe
 
pSuôe
, 
CU_pTe°
 
pTe°
);

53 
CU_EXPORT
 
CU_basic_£t_mode
(
CU_BasicRunMode
 
mode
);

54 
CU_EXPORT
 
CU_BasicRunMode
 
CU_basic_gë_mode
();

55 
CU_EXPORT
 
CU_basic_show_Áûuªs
(
CU_pFaûuªRec‹d
 
pFaûuª
);

57 #ifde‡
__˝lu•lus


	@/usr/include/CUnit/CUnit.h

50 #i‚de‡
CUNIT_CUNIT_H_SEEN


51 
	#CUNIT_CUNIT_H_SEEN


	)

53 
	~<°rög.h
>

54 
	~<m©h.h
>

57 
	#CU_VERSION
 "2.1-0"

	)

61 
	#CU_MAX_TEST_NAME_LENGTH
 256

	)

63 
	#CU_MAX_SUITE_NAME_LENGTH
 256

	)

66 #i‚de‡
CU_BOOL


68 
	#CU_BOOL
 

	)

71 #i‚de‡
CU_TRUE


73 
	#CU_TRUE
 1

	)

76 #i‚de‡
CU_FALSE


78 
	#CU_FALSE
 0

	)

81 #i‚de‡
CU_UNREFERENCED_PARAMETER


83 
	#CU_UNREFERENCED_PARAMETER
(
x
Ë()
	)
x

86 #ifde‡
WIN32


87 #ifde‡
CU_DLL


88 #ifde‡
CU_BUILD_DLL


89 
	#CU_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

91 
	#CU_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

94 
	#CU_EXPORT


	)

97 
	#CU_EXPORT


	)

100 
	~"CUEº‹.h
"

101 
	~"Te°DB.h
"

102 
	~"Te°Run.h
"

105 
	#CU_PASS
(
msg
) \

106 { 
	`CU_as£πIm∂emíèti⁄
(
CU_TRUE
, 
__LINE__
, ("CU_PASS(" #msg ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

111 
	#CU_ASSERT
(
vÆue
) \

112 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_FALSE
); }

	)

117 
	#CU_ASSERT_FATAL
(
vÆue
) \

118 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_TRUE
); }

	)

123 
	#CU_TEST
(
vÆue
) \

124 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_FALSE
); }

	)

129 
	#CU_TEST_FATAL
(
vÆue
) \

130 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_TRUE
); }

	)

133 
	#CU_FAIL
(
msg
) \

134 { 
	`CU_as£πIm∂emíèti⁄
(
CU_FALSE
, 
__LINE__
, ("CU_FAIL(" #msg ")"), 
__FILE__
, "", CU_FALSE); }

	)

137 
	#CU_FAIL_FATAL
(
msg
) \

138 { 
	`CU_as£πIm∂emíèti⁄
(
CU_FALSE
, 
__LINE__
, ("CU_FAIL_FATAL(" #msg ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

143 
	#CU_ASSERT_TRUE
(
vÆue
) \

144 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, ("CU_ASSERT_TRUE(" #vÆuê")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

149 
	#CU_ASSERT_TRUE_FATAL
(
vÆue
) \

150 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, ("CU_ASSERT_TRUE_FATAL(" #vÆuê")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

155 
	#CU_ASSERT_FALSE
(
vÆue
) \

156 { 
	`CU_as£πIm∂emíèti⁄
(!(
vÆue
), 
__LINE__
, ("CU_ASSERT_FALSE(" #vÆuê")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

161 
	#CU_ASSERT_FALSE_FATAL
(
vÆue
) \

162 { 
	`CU_as£πIm∂emíèti⁄
(!(
vÆue
), 
__LINE__
, ("CU_ASSERT_FALSE_FATAL(" #vÆuê")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

167 
	#CU_ASSERT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

168 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë=(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

173 
	#CU_ASSERT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

174 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë=(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

179 
	#CU_ASSERT_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

180 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë!(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

185 
	#CU_ASSERT_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

186 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë!(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

191 
	#CU_ASSERT_PTR_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

192 { 
	`CU_as£πIm∂emíèti⁄
(((*)(
a˘uÆ
Ë=(*)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

197 
	#CU_ASSERT_PTR_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

198 { 
	`CU_as£πIm∂emíèti⁄
(((*)(
a˘uÆ
Ë=(*)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

203 
	#CU_ASSERT_PTR_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

204 { 
	`CU_as£πIm∂emíèti⁄
(((*)(
a˘uÆ
Ë!(*)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

209 
	#CU_ASSERT_PTR_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

210 { 
	`CU_as£πIm∂emíèti⁄
(((*)(
a˘uÆ
Ë!(*)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

215 
	#CU_ASSERT_PTR_NULL
(
vÆue
) \

216 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 =(*)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NULL(" #vÆue")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

221 
	#CU_ASSERT_PTR_NULL_FATAL
(
vÆue
) \

222 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 =(*)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NULL_FATAL(" #vÆue")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

227 
	#CU_ASSERT_PTR_NOT_NULL
(
vÆue
) \

228 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 !(*)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_NULL(" #vÆue")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

233 
	#CU_ASSERT_PTR_NOT_NULL_FATAL
(
vÆue
) \

234 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 !(*)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_NULL_FATAL(" #vÆue")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

239 
	#CU_ASSERT_STRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

240 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

245 
	#CU_ASSERT_STRING_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

246 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

251 
	#CU_ASSERT_STRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

252 { 
	`CU_as£πIm∂emíèti⁄
((
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

257 
	#CU_ASSERT_STRING_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

258 { 
	`CU_as£πIm∂emíèti⁄
((
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

264 
	#CU_ASSERT_NSTRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

265 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

271 
	#CU_ASSERT_NSTRING_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

272 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

278 
	#CU_ASSERT_NSTRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

279 { 
	`CU_as£πIm∂emíèti⁄
((
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

285 
	#CU_ASSERT_NSTRING_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

286 { 
	`CU_as£πIm∂emíèti⁄
((
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

292 
	#CU_ASSERT_DOUBLE_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

293 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë<Ábs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

299 
	#CU_ASSERT_DOUBLE_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

300 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë<Ábs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

306 
	#CU_ASSERT_DOUBLE_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

307 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë> fabs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

313 
	#CU_ASSERT_DOUBLE_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

314 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë> fabs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

316 #ifde‡
USE_DEPRECATED_CUNIT_NAMES


318 #i‚de‡
BOOL


320 
	#BOOL
 

	)

323 #i‚de‡
TRUE


325 
	#TRUE
 1

	)

328 #i‚de‡
FALSE


330 
	#FALSE
 0

	)

334 
	#MAX_TEST_NAME_LENGTH
 256

	)

336 
	#MAX_SUITE_NAME_LENGTH
 256

	)

339 
	#ASSERT
(
vÆue
Ë{ i‡(
FALSE
 =()(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
((
BOOL
)vÆue, 
__LINE__
, #vÆue, 
__FILE__
, "", FALSE); ; }}

	)

341 
	#ASSERT_TRUE
(
vÆue
Ë{ i‡(
FALSE
 =(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(FALSE, 
__LINE__
, ("ASSERT_TRUE(" #vÆuê")"), 
__FILE__
, "", FALSE); ; }}

	)

343 
	#ASSERT_FALSE
(
vÆue
Ë{ i‡(
FALSE
 !(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(FALSE, 
__LINE__
, ("ASSERT_FALSE(" #vÆuê")"), 
__FILE__
, "", FALSE); ; }}

	)

345 
	#ASSERT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(◊˘uÆË!”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

347 
	#ASSERT_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË=(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

349 
	#ASSERT_PTR_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË!(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

351 
	#ASSERT_PTR_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË=(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

353 
	#ASSERT_PTR_NULL
(
vÆue
Ë{ i‡(
NULL
 !(*)(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NULL(" #vÆue")"), 
__FILE__
, "", FALSE); ; }}

	)

355 
	#ASSERT_PTR_NOT_NULL
(
vÆue
Ë{ i‡(
NULL
 =(*)(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NOT_NULL(" #vÆue")"), 
__FILE__
, "", FALSE); ; }}

	)

357 
	#ASSERT_STRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(
	`°rcmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_STRING_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

359 
	#ASSERT_STRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(!
	`°rcmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_STRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

361 
	#ASSERT_NSTRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
Ë{ i‡(
	`°∫cmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed, (
size_t
)cou¡)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_NSTRING_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", FALSE); ; }}

	)

363 
	#ASSERT_NSTRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
Ë{ i‡(!
	`°∫cmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed, (
size_t
)cou¡)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_NSTRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

365 
	#ASSERT_DOUBLE_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
Ë{ i‡((
	`Ábs
((Ô˘uÆ -Éx≥˘edË> fabs(()gønuœrôy))Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_DOUBLE_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", FALSE); ; }}

	)

367 
	#ASSERT_DOUBLE_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
Ë{ i‡((
	`Ábs
((Ô˘uÆ -Éx≥˘edË<Ábs(()gønuœrôy))Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_DOUBLE_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/fnmatch.h

19 #i‚def 
_FNMATCH_H


20 
	#_FNMATCH_H
 1

	)

22 #ifdef 
__˝lu•lus


27 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


28 
	#__c⁄°
 c⁄°

	)

30 
	#__c⁄°


	)

36 #unde‡
FNM_PATHNAME


37 #unde‡
FNM_NOESCAPE


38 #unde‡
FNM_PERIOD


41 
	#FNM_PATHNAME
 (1 << 0Ë

	)

42 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

43 
	#FNM_PERIOD
 (1 << 2Ë

	)

45 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


46 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

47 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

48 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

49 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

53 
	#FNM_NOMATCH
 1

	)

59 #ifde‡
_XOPEN_SOURCE


60 
	#FNM_NOSYS
 (-1)

	)

65 
‚m©ch
 (
__c⁄°
 *
__∑âîn
, __c⁄° *
__«me
,

66 
__Êags
);

68 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@aros/aros_compat.h

1 #i‚de‡
AROS_COMPAT_H


2 
	#AROS_COMPAT_H


	)

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/io˘l.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/mou¡.h
>

9 
	~<¥Ÿo/sockë.h
>

10 
	~<¥Ÿo/exec.h
>

11 
	~<sys/uio.h
>

13 
	#°©vfs
 
°©fs


	)

14 
	#io˘l
 
Io˘lSockë


	)

15 
	#˛o£
 
Clo£Sockë


	)

17 
	#wrôev
 
¨os_wrôev


	)

18 
	#ªadv
 
¨os_ªadv


	)

19 
	#öë_±⁄
 
¨os_öë_±⁄


	)

20 
	#‰ìaddröfo
 
¨os_‰ìaddröfo


	)

21 
	#gë«meöfo
 
¨os_gë«meöfo


	)

22 
	#gëaddröfo
 
¨os_gëaddröfo


	)

24 
	#SOL_TCP
 
IPPROTO_TCP


	)

26 
Libøry
 * 
SockëBa£
;

28 
¨os_öô_sockë
();

30 
	#POLLIN
 0x0001

	)

31 
	#POLLPRI
 0x0002

	)

32 
	#POLLOUT
 0x0004

	)

33 
	#POLLERR
 0x0008

	)

34 
	#POLLHUP
 0x0010

	)

35 
	#POLLNVAL
 0x0020

	)

37 
	spﬁlfd
 {

38 
	mfd
;

39 
	mevíts
;

40 
	mªvíts
;

43 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`¨os_pﬁl
(x, y, z)

	)

	@win32/win32_compat.h

25 #ifde‡
WIN32


26 #i‚de‡
wö32_COMPAT_H_


27 
	#wö32_COMPAT_H_


	)

28 
	#NO_IPv6
 1

	)

30 
	~<wösock2.h
>

31 
	~<ws2t˝ù.h
>

32 
	~<Ws2ùdef.h
>

33 
	~<ba£tsd.h
>

34 
	~<io.h
>

35 
	~<mÆloc.h
>

36 
	~<sys/°©.h
>

38 
	#SOL_TCP
 
IPPROTO_TCP


	)

40 
	tssize_t
;

41 
	tuid_t
;

42 
	tgid_t
;

43 
	tsockÀn_t
;

46 
	#wrôev
 
wö32_wrôev


	)

47 
	#ªadv
 
wö32_ªadv


	)

48 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`wö32_pﬁl
(x, y, z)

	)

49 
	#öë_±⁄
(
x
,
y
,
z
Ë
	`wö32_öë_±⁄
(x,y,z)

	)

50 
	#¶ìp
(
x
Ë
	`SÀï
(x * 1000)

	)

51 
	#¢¥ötf
(
a
, 
b
, 
c
, ...Ë
	`_¢¥ötf_s
◊, b, b, c, ## 
__VA_ARGS__
)

	)

52 
wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
);

53 
wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfsd
, 
timeout
);

54 
wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

56 
	siovec
 {

57 *
	miov_ba£
;

58 
size_t
 
	miov_Àn
;

61 
	#ölöe


	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
369
12597
aros/aros_compat.c
aros/iscsi-ls.c
config.h
config.h
examples/iscsi-dd.c
examples/iscsiclient.c
lib/connect.c
lib/crc32c.c
lib/discovery.c
lib/init.c
lib/iscsi-command.c
lib/logging.c
lib/login.c
lib/md5.c
lib/nop.c
lib/pdu.c
lib/scsi-lowlevel.c
lib/socket.c
lib/sync.c
lib/task_mgmt.c
src/iscsi-inq.c
src/iscsi-ls.c
src/iscsi-readcapacity16.c
src/iscsi-swp.c
src/ld_iscsi.c
test-tool/0000_testunitready_simple.c
test-tool/0100_read10_simple.c
test-tool/0101_read10_beyond_eol.c
test-tool/0102_read10_0blocks.c
test-tool/0103_read10_rdprotect.c
test-tool/0104_read10_flags.c
test-tool/0105_read10_invalid.c
test-tool/0110_readcapacity10_simple.c
test-tool/0120_read6_simple.c
test-tool/0121_read6_beyond_eol.c
test-tool/0122_read6_invalid.c
test-tool/0130_verify10_simple.c
test-tool/0131_verify10_mismatch.c
test-tool/0132_verify10_mismatch_no_cmp.c
test-tool/0133_verify10_beyondeol.c
test-tool/0160_readcapacity16_simple.c
test-tool/0161_readcapacity16_alloclen.c
test-tool/0170_unmap_simple.c
test-tool/0171_unmap_zero.c
test-tool/0180_writesame10_unmap.c
test-tool/0181_writesame10_unmap_unaligned.c
test-tool/0182_writesame10_beyondeol.c
test-tool/0183_writesame10_wrprotect.c
test-tool/0184_writesame10_0blocks.c
test-tool/0190_writesame16_unmap.c
test-tool/0191_writesame16_unmap_unaligned.c
test-tool/0192_writesame16_beyondeol.c
test-tool/0193_writesame16_wrprotect.c
test-tool/0194_writesame16_0blocks.c
test-tool/0200_read16_simple.c
test-tool/0201_read16_rdprotect.c
test-tool/0202_read16_flags.c
test-tool/0203_read16_0blocks.c
test-tool/0204_read16_beyondeol.c
test-tool/0210_read12_simple.c
test-tool/0211_read12_rdprotect.c
test-tool/0212_read12_flags.c
test-tool/0213_read12_0blocks.c
test-tool/0214_read12_beyondeol.c
test-tool/0220_write16_simple.c
test-tool/0221_write16_wrprotect.c
test-tool/0222_write16_flags.c
test-tool/0223_write16_0blocks.c
test-tool/0224_write16_beyondeol.c
test-tool/0230_write12_simple.c
test-tool/0231_write12_wrprotect.c
test-tool/0232_write12_flags.c
test-tool/0233_write12_0blocks.c
test-tool/0234_write12_beyondeol.c
test-tool/0240_prefetch10_simple.c
test-tool/0241_prefetch10_flags.c
test-tool/0242_prefetch10_beyondeol.c
test-tool/0243_prefetch10_0blocks.c
test-tool/0250_prefetch16_simple.c
test-tool/0251_prefetch16_flags.c
test-tool/0252_prefetch16_beyondeol.c
test-tool/0253_prefetch16_0blocks.c
test-tool/0260_get_lba_status_simple.c
test-tool/0264_get_lba_status_beyondeol.c
test-tool/0270_verify16_simple.c
test-tool/0271_verify16_mismatch.c
test-tool/0272_verify16_mismatch_no_cmp.c
test-tool/0273_verify16_beyondeol.c
test-tool/0280_verify12_simple.c
test-tool/0281_verify12_mismatch.c
test-tool/0282_verify12_mismatch_no_cmp.c
test-tool/0283_verify12_beyondeol.c
test-tool/0290_write10_simple.c
test-tool/0291_write10_wrprotect.c
test-tool/0292_write10_flags.c
test-tool/0293_write10_0blocks.c
test-tool/0294_write10_beyondeol.c
test-tool/0300_readonly.c
test-tool/0310_writeverify10_simple.c
test-tool/0311_writeverify10_wrprotect.c
test-tool/0314_writeverify10_beyondeol.c
test-tool/0320_writeverify12_simple.c
test-tool/0321_writeverify12_wrprotect.c
test-tool/0324_writeverify12_beyondeol.c
test-tool/0330_writeverify16_simple.c
test-tool/0331_writeverify16_wrprotect.c
test-tool/0334_writeverify16_beyondeol.c
test-tool/0340_compareandwrite_simple.c
test-tool/0341_compareandwrite_mismatch.c
test-tool/0343_compareandwrite_beyondeol.c
test-tool/0350_orwrite_simple.c
test-tool/0351_orwrite_wrprotect.c
test-tool/0354_orwrite_beyondeol.c
test-tool/0360_startstopunit_simple.c
test-tool/0361_startstopunit_pwrcnd.c
test-tool/0362_startstopunit_noloej.c
test-tool/0370_nomedia.c
test-tool/0380_preventallow_simple.c
test-tool/0381_preventallow_eject.c
test-tool/0382_preventallow_itnexus_loss.c
test-tool/0383_preventallow_target_warm_reset.c
test-tool/0384_preventallow_target_cold_reset.c
test-tool/0385_preventallow_lun_reset.c
test-tool/0386_preventallow_2_it_nexuses.c
test-tool/0390_mandatory_opcodes_sbc.c
test-tool/0400_inquiry_basic.c
test-tool/0401_inquiry_alloclen.c
test-tool/0402_inquiry_evpd.c
test-tool/0403_inquiry_supported_vpd.c
test-tool/0404_inquiry_all_reported_vpd.c
test-tool/0410_readtoc_basic.c
test-tool/0420_reserve6_simple.c
test-tool/0421_reserve6_lun_reset.c
test-tool/0422_reserve6_logout.c
test-tool/0423_reserve6_sessionloss.c
test-tool/0424_reserve6_target_reset.c
test-tool/0430_report_all_supported_ops.c
test-tool/1000_cmdsn_invalid.c
test-tool/1010_datasn_invalid.c
test-tool/1020_bufferoffset_invalid.c
test-tool/1030_unsolicited_data_overflow.c
test-tool/1031_unsolicited_data_out.c
test-tool/1040_saturate_maxcmdsn.c
test-tool/1041_unsolicited_immediate_data.c
test-tool/1042_unsolicited_nonimmediate_data.c
test-tool/1100_persistent_reserve_in_read_keys_simple.c
test-tool/1110_persistent_reserve_in_serviceaction_range.c
test-tool/1120_persistent_register_simple.c
test-tool/1130_persistent_reserve_simple.c
test-tool/1140_persistent_reserve_access_check_ea.c
test-tool/1141_persistent_reserve_access_check_we.c
test-tool/1142_persistent_reserve_access_check_earo.c
test-tool/1143_persistent_reserve_access_check_wero.c
test-tool/1144_persistent_reserve_access_check_eaar.c
test-tool/1145_persistent_reserve_access_check_wear.c
test-tool/iscsi-support.c
test-tool/iscsi-test-cu.c
test-tool/iscsi-test.c
test-tool/test_compareandwrite_miscompare.c
test-tool/test_compareandwrite_simple.c
test-tool/test_get_lba_status_beyond_eol.c
test-tool/test_get_lba_status_simple.c
test-tool/test_inquiry_alloc_length.c
test-tool/test_inquiry_block_limits.c
test-tool/test_inquiry_evpd.c
test-tool/test_inquiry_mandatory_vpd_sbc.c
test-tool/test_inquiry_standard.c
test-tool/test_inquiry_supported_vpd.c
test-tool/test_inquiry_version_descriptors.c
test-tool/test_iscsi_cmdsn_toohigh.c
test-tool/test_iscsi_cmdsn_toolow.c
test-tool/test_iscsi_datasn_invalid.c
test-tool/test_mandatory_sbc.c
test-tool/test_modesense6_all_pages.c
test-tool/test_modesense6_residuals.c
test-tool/test_nomedia_sbc.c
test-tool/test_orwrite_0blocks.c
test-tool/test_orwrite_beyond_eol.c
test-tool/test_orwrite_flags.c
test-tool/test_orwrite_simple.c
test-tool/test_orwrite_verify.c
test-tool/test_orwrite_wrprotect.c
test-tool/test_prefetch10_0blocks.c
test-tool/test_prefetch10_beyond_eol.c
test-tool/test_prefetch10_flags.c
test-tool/test_prefetch10_simple.c
test-tool/test_prefetch16_0blocks.c
test-tool/test_prefetch16_beyond_eol.c
test-tool/test_prefetch16_flags.c
test-tool/test_prefetch16_simple.c
test-tool/test_preventallow_2_itnexuses.c
test-tool/test_preventallow_cold_reset.c
test-tool/test_preventallow_eject.c
test-tool/test_preventallow_itnexus_loss.c
test-tool/test_preventallow_logout.c
test-tool/test_preventallow_lun_reset.c
test-tool/test_preventallow_simple.c
test-tool/test_preventallow_warm_reset.c
test-tool/test_prin_read_keys_simple.c
test-tool/test_prin_serviceaction_range.c
test-tool/test_prout_register_simple.c
test-tool/test_prout_reserve_access.c
test-tool/test_prout_reserve_ownership.c
test-tool/test_prout_reserve_simple.c
test-tool/test_read10_0blocks.c
test-tool/test_read10_beyond_eol.c
test-tool/test_read10_flags.c
test-tool/test_read10_invalid.c
test-tool/test_read10_rdprotect.c
test-tool/test_read10_residuals.c
test-tool/test_read10_simple.c
test-tool/test_read12_0blocks.c
test-tool/test_read12_beyond_eol.c
test-tool/test_read12_flags.c
test-tool/test_read12_rdprotect.c
test-tool/test_read12_residuals.c
test-tool/test_read12_simple.c
test-tool/test_read16_0blocks.c
test-tool/test_read16_beyond_eol.c
test-tool/test_read16_flags.c
test-tool/test_read16_rdprotect.c
test-tool/test_read16_residuals.c
test-tool/test_read16_simple.c
test-tool/test_read6_beyond_eol.c
test-tool/test_read6_simple.c
test-tool/test_readcapacity10_simple.c
test-tool/test_readcapacity16_alloclen.c
test-tool/test_readcapacity16_protection.c
test-tool/test_readcapacity16_simple.c
test-tool/test_readonly_sbc.c
test-tool/test_report_supported_opcodes_one_command.c
test-tool/test_report_supported_opcodes_rctd.c
test-tool/test_report_supported_opcodes_servactv.c
test-tool/test_report_supported_opcodes_simple.c
test-tool/test_reserve6_2initiators.c
test-tool/test_reserve6_itnexus_loss.c
test-tool/test_reserve6_logout.c
test-tool/test_reserve6_lun_reset.c
test-tool/test_reserve6_simple.c
test-tool/test_reserve6_target_cold_reset.c
test-tool/test_reserve6_target_warm_reset.c
test-tool/test_sanitize_block_erase.c
test-tool/test_sanitize_block_erase_reserved.c
test-tool/test_sanitize_crypto_erase.c
test-tool/test_sanitize_crypto_erase_reserved.c
test-tool/test_sanitize_exit_failure_mode.c
test-tool/test_sanitize_invalid_serviceaction.c
test-tool/test_sanitize_overwrite.c
test-tool/test_sanitize_overwrite_reserved.c
test-tool/test_sanitize_readonly.c
test-tool/test_sanitize_reservations.c
test-tool/test_sanitize_reset.c
test-tool/test_startstopunit_noloej.c
test-tool/test_startstopunit_pwrcnd.c
test-tool/test_startstopunit_simple.c
test-tool/test_testunitready_simple.c
test-tool/test_unmap_0blocks.c
test-tool/test_unmap_simple.c
test-tool/test_unmap_vpd.c
test-tool/test_verify10_0blocks.c
test-tool/test_verify10_beyond_eol.c
test-tool/test_verify10_flags.c
test-tool/test_verify10_mismatch.c
test-tool/test_verify10_mismatch_no_cmp.c
test-tool/test_verify10_simple.c
test-tool/test_verify10_vrprotect.c
test-tool/test_verify12_0blocks.c
test-tool/test_verify12_beyond_eol.c
test-tool/test_verify12_flags.c
test-tool/test_verify12_mismatch.c
test-tool/test_verify12_mismatch_no_cmp.c
test-tool/test_verify12_simple.c
test-tool/test_verify12_vrprotect.c
test-tool/test_verify16_0blocks.c
test-tool/test_verify16_beyond_eol.c
test-tool/test_verify16_flags.c
test-tool/test_verify16_mismatch.c
test-tool/test_verify16_mismatch_no_cmp.c
test-tool/test_verify16_simple.c
test-tool/test_verify16_vrprotect.c
test-tool/test_write10_0blocks.c
test-tool/test_write10_beyond_eol.c
test-tool/test_write10_flags.c
test-tool/test_write10_residuals.c
test-tool/test_write10_simple.c
test-tool/test_write10_wrprotect.c
test-tool/test_write12_0blocks.c
test-tool/test_write12_beyond_eol.c
test-tool/test_write12_flags.c
test-tool/test_write12_residuals.c
test-tool/test_write12_simple.c
test-tool/test_write12_wrprotect.c
test-tool/test_write16_0blocks.c
test-tool/test_write16_beyond_eol.c
test-tool/test_write16_flags.c
test-tool/test_write16_residuals.c
test-tool/test_write16_simple.c
test-tool/test_write16_wrprotect.c
test-tool/test_writesame10_0blocks.c
test-tool/test_writesame10_beyond_eol.c
test-tool/test_writesame10_simple.c
test-tool/test_writesame10_unmap.c
test-tool/test_writesame10_unmap_unaligned.c
test-tool/test_writesame10_unmap_until_end.c
test-tool/test_writesame10_unmap_vpd.c
test-tool/test_writesame10_wrprotect.c
test-tool/test_writesame16_0blocks.c
test-tool/test_writesame16_beyond_eol.c
test-tool/test_writesame16_simple.c
test-tool/test_writesame16_unmap.c
test-tool/test_writesame16_unmap_unaligned.c
test-tool/test_writesame16_unmap_until_end.c
test-tool/test_writesame16_unmap_vpd.c
test-tool/test_writesame16_wrprotect.c
test-tool/test_writeverify10_0blocks.c
test-tool/test_writeverify10_beyond_eol.c
test-tool/test_writeverify10_flags.c
test-tool/test_writeverify10_residuals.c
test-tool/test_writeverify10_simple.c
test-tool/test_writeverify10_wrprotect.c
test-tool/test_writeverify12_0blocks.c
test-tool/test_writeverify12_beyond_eol.c
test-tool/test_writeverify12_flags.c
test-tool/test_writeverify12_residuals.c
test-tool/test_writeverify12_simple.c
test-tool/test_writeverify12_wrprotect.c
test-tool/test_writeverify16_0blocks.c
test-tool/test_writeverify16_beyond_eol.c
test-tool/test_writeverify16_flags.c
test-tool/test_writeverify16_residuals.c
test-tool/test_writeverify16_simple.c
test-tool/test_writeverify16_wrprotect.c
win32/win32_compat.c
/usr/include/CUnit/Basic.h
/usr/include/CUnit/CUnit.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
aros/aros_compat.h
win32/win32_compat.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
